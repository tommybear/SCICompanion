// This is part of the Professional User Interface Suite library.
// Copyright (C) 2001-2011 FOSS Software, Inc.
// All rights reserved.
//
// http://www.prof-uis.com
// mailto:support@prof-uis.com
//
// This source code can be used, modified and redistributed
// under the terms of the license agreement that is included
// in the Professional User Interface Suite package.
//
// Warranties and Disclaimers:
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND
// INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
// IN NO EVENT WILL FOSS SOFTWARE INC. BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES,
// INCLUDING DAMAGES FOR LOSS OF PROFITS, LOSS OR INACCURACY OF DATA,
// INCURRED BY ANY PERSON FROM SUCH PERSON'S USAGE OF THIS SOFTWARE
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

#include "stdafx.h"

#if (!defined __EXT_PAINT_MANAGER_H)
	#include <ExtPaintManager.h>
#endif

#if (!defined __EXT_RICH_CONTENT_H)
	#include <ExtRichContent.h>
#endif // (!defined __EXT_RICH_CONTENT_H)

#if (!defined __EXT_CMD_ICON_H)
	#include <ExtCmdIcon.h>
#endif

#if (!defined __EXT_MEMORY_DC_H)
	#include <../Src/ExtMemoryDC.h>
#endif

#if (!defined __ExtCmdManager_H)
	#include <ExtCmdManager.h>
#endif

#include <Resources/Resource.h>

#if (! defined __VSSYM32_H__)
	#include <vssym32/vssym32.h>
#endif // (! defined __VSSYM32_H__)

#include <limits.h>

#if ( ! defined DT_HIDEPREFIX )
	#define DT_HIDEPREFIX               0x00100000
#endif

#if ( ! defined DT_PREFIXONLY )
	#define DT_PREFIXONLY               0x00200000
#endif

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

//////////////////////////////////////////////////////////////////////////
// CExtUxTheme class

CExtUxTheme::CExtUxTheme()
	: m_hUxTheme( NULL )
	, m_hUxThemeDll( NULL )
	, m_bNeedToFreeDll( false )
	, m_hWndCached( NULL )
	, m_dwComCtlVersion( CExtPaintManager::stat_DllGetVersion( _T("COMCTL32.DLL") ) )
	, m_pfnOpenThemeData( NULL )
	, m_pfnOpenThemeDataEx( NULL )
	, m_pfnCloseThemeData( NULL )
	, m_pfnDrawThemeBackground( NULL )
	, m_pfnDrawThemeText( NULL )
	, m_pfnDrawThemeTextEx( NULL )
	, m_pfnGetThemeBackgroundContentRect( NULL )
	, m_pfnGetThemeBackgroundExtent( NULL )
	, m_pfnGetThemePartSize( NULL )
	, m_pfnGetThemeTextExtent( NULL )
	, m_pfnGetThemeTextMetrics( NULL )
	, m_pfnGetThemeBackgroundRegion( NULL )
	, m_pfnHitTestThemeBackground( NULL )
	, m_pfnDrawThemeEdge( NULL )
	, m_pfnDrawThemeIcon( NULL )
	, m_pfnIsThemePartDefined( NULL )
	, m_pfnIsThemeBackgroundPartiallyTransparent( NULL )
	, m_pfnGetThemeColor( NULL )
	, m_pfnGetThemeMetric( NULL )
	, m_pfnGetThemeString( NULL )
	, m_pfnGetThemeBool( NULL )
	, m_pfnGetThemeInt( NULL )
	, m_pfnGetThemeEnumValue( NULL )
	, m_pfnGetThemePosition( NULL )
	, m_pfnGetThemeFont( NULL )
	, m_pfnGetThemeRect( NULL )
	, m_pfnGetThemeMargins( NULL )
	, m_pfnGetThemeIntList( NULL )
	, m_pfnGetThemePropertyOrigin( NULL )
	, m_pfnSetWindowTheme( NULL )
	, m_pfnGetThemeFilename( NULL )
	, m_pfnGetThemeSysColor( NULL )
	, m_pfnGetThemeSysColorBrush( NULL )
	, m_pfnGetThemeSysBool( NULL )
	, m_pfnGetThemeSysSize( NULL )
	, m_pfnGetThemeSysFont( NULL )
	, m_pfnGetThemeSysString( NULL )
	, m_pfnGetThemeSysInt( NULL )
	, m_pfnIsThemeActive( NULL )
	, m_pfnIsAppThemed( NULL )
	, m_pfnGetWindowTheme( NULL )
	, m_pfnEnableThemeDialogTexture( NULL )
	, m_pfnIsThemeDialogTextureEnabled( NULL )
	, m_pfnGetThemeAppProperties( NULL )
	, m_pfnSetThemeAppProperties( NULL )
	, m_pfnGetCurrentThemeName( NULL )
	, m_pfnGetThemeDocumentationProperty( NULL )
	, m_pfnDrawThemeParentBackground( NULL )
	, m_pfnEnableTheming( NULL )
	, m_pfnDrawThemeBackgroundEx( NULL )
{
	struct
	{
		FARPROC * m_pFarProc;
		LPCSTR m_strProcName;
	}arrUxThemeApi[] =
	{
		{ (FARPROC*)&m_pfnOpenThemeData, "OpenThemeData" },
		{ (FARPROC*)&m_pfnOpenThemeDataEx, "OpenThemeDataEx"},
		{ (FARPROC*)&m_pfnCloseThemeData, "CloseThemeData" },
		{ (FARPROC*)&m_pfnDrawThemeBackground, "DrawThemeBackground" },
		{ (FARPROC*)&m_pfnDrawThemeText, "DrawThemeText" },
		{ (FARPROC*)&m_pfnDrawThemeTextEx, "DrawThemeTextEx" },
		{ (FARPROC*)&m_pfnGetThemeBackgroundContentRect, "GetThemeBackgroundContentRect" },
		{ (FARPROC*)&m_pfnGetThemeBackgroundExtent, "GetThemeBackgroundExtent" },
		{ (FARPROC*)&m_pfnGetThemePartSize, "GetThemePartSize" },
		{ (FARPROC*)&m_pfnGetThemeTextExtent, "GetThemeTextExtent" },
		{ (FARPROC*)&m_pfnGetThemeTextMetrics, "GetThemeTextMetrics" },
		{ (FARPROC*)&m_pfnGetThemeBackgroundRegion, "GetThemeBackgroundRegion" },
		{ (FARPROC*)&m_pfnHitTestThemeBackground, "HitTestThemeBackground" },
		{ (FARPROC*)&m_pfnDrawThemeEdge, "DrawThemeEdge" },
		{ (FARPROC*)&m_pfnDrawThemeIcon, "DrawThemeIcon" },
		{ (FARPROC*)&m_pfnIsThemePartDefined, "IsThemePartDefined" },
		{ (FARPROC*)&m_pfnIsThemeBackgroundPartiallyTransparent, "IsThemeBackgroundPartiallyTransparent" },
		{ (FARPROC*)&m_pfnGetThemeColor, "GetThemeColor" },
		{ (FARPROC*)&m_pfnGetThemeMetric, "GetThemeMetric" },
		{ (FARPROC*)&m_pfnGetThemeString, "GetThemeString" },
		{ (FARPROC*)&m_pfnGetThemeBool, "GetThemeBool" },
		{ (FARPROC*)&m_pfnGetThemeInt, "GetThemeInt" },
		{ (FARPROC*)&m_pfnGetThemeEnumValue, "GetThemeEnumValue" },
		{ (FARPROC*)&m_pfnGetThemePosition, "GetThemePosition" },
		{ (FARPROC*)&m_pfnGetThemeFont, "GetThemeFont" },
		{ (FARPROC*)&m_pfnGetThemeRect, "GetThemeRect" },
		{ (FARPROC*)&m_pfnGetThemeMargins, "GetThemeMargins" },
		{ (FARPROC*)&m_pfnGetThemeIntList, "GetThemeIntList" },
		{ (FARPROC*)&m_pfnGetThemePropertyOrigin, "GetThemePropertyOrigin" },
		{ (FARPROC*)&m_pfnSetWindowTheme, "SetWindowTheme" },
		{ (FARPROC*)&m_pfnGetThemeFilename, "GetThemeFilename" },
		{ (FARPROC*)&m_pfnGetThemeSysColor, "GetThemeSysColor" },
		{ (FARPROC*)&m_pfnGetThemeSysColorBrush, "GetThemeSysColorBrush" },
		{ (FARPROC*)&m_pfnGetThemeSysBool, "GetThemeSysBool" },
		{ (FARPROC*)&m_pfnGetThemeSysSize, "GetThemeSysSize" },
		{ (FARPROC*)&m_pfnGetThemeSysFont, "GetThemeSysFont" },
		{ (FARPROC*)&m_pfnGetThemeSysString, "GetThemeSysString" },
		{ (FARPROC*)&m_pfnGetThemeSysInt, "GetThemeSysInt" },
		{ (FARPROC*)&m_pfnIsThemeActive, "IsThemeActive" },
		{ (FARPROC*)&m_pfnIsAppThemed, "IsAppThemed" },
		{ (FARPROC*)&m_pfnGetWindowTheme, "GetWindowTheme" },
		{ (FARPROC*)&m_pfnEnableThemeDialogTexture, "EnableThemeDialogTexture" },
		{ (FARPROC*)&m_pfnIsThemeDialogTextureEnabled, "IsThemeDialogTextureEnabled" },
		{ (FARPROC*)&m_pfnGetThemeAppProperties, "GetThemeAppProperties" },
		{ (FARPROC*)&m_pfnSetThemeAppProperties, "SetThemeAppProperties" },
		{ (FARPROC*)&m_pfnGetCurrentThemeName, "GetCurrentThemeName" },
		{ (FARPROC*)&m_pfnGetThemeDocumentationProperty, "GetThemeDocumentationProperty" },
		{ (FARPROC*)&m_pfnDrawThemeParentBackground, "DrawThemeParentBackground" },
		{ (FARPROC*)&m_pfnEnableTheming, "EnableTheming" },
		{ (FARPROC*)&m_pfnDrawThemeBackgroundEx, "DrawThemeBackgroundEx" },
	};
	if( m_hUxThemeDll == NULL )
	{
		m_hUxThemeDll =
			::GetModuleHandle( _T("UxTheme.dll") );
		if( m_hUxThemeDll == NULL )
		{
			m_hUxThemeDll = ::LoadLibrary( _T("UxTheme.dll") );
			m_bNeedToFreeDll = true;
		}
	} // if( m_hUxThemeDll == NULL )
	if( m_hUxThemeDll != NULL )
	{
		INT nApiCount = sizeof(arrUxThemeApi)/sizeof(arrUxThemeApi[0]);
		for( INT nFunc = 0; nFunc < nApiCount; nFunc++ )
		{
			FARPROC pFarProc = NULL;
				pFarProc = 
					::GetProcAddress(
						m_hUxThemeDll,
						arrUxThemeApi[nFunc].m_strProcName
						);
			*(arrUxThemeApi[nFunc].m_pFarProc) = pFarProc;
		}
		// DrawThemeBackgroundEx() may absent
	} // if( m_hUxThemeDll != NULL )

	memset( m_szClassListCached, 0, sizeof( m_szClassListCached ) / sizeof( m_szClassListCached[0] ) );

}

CExtUxTheme::~CExtUxTheme()
{
	CloseThemeData( false );
	if( m_hUxThemeDll != NULL && m_bNeedToFreeDll ) 
	{
		::FreeLibrary( m_hUxThemeDll );
		m_hUxThemeDll = NULL;
	}
}

bool CExtUxTheme::IsOpened() const
{
	if( m_hUxTheme != NULL )
		return true;
	return false;
}

bool CExtUxTheme::IsControlsThemed( 
	bool bCheckComCtlVersion // = true
	)
{
	if( m_hUxThemeDll == NULL )
		return false;
	return (
			IsThemeActive() 
		&&	(GetThemeAppProperties()&__EXT_UX_STAP_ALLOW_CONTROLS) != 0 
		&&	(bCheckComCtlVersion ? (HIWORD(m_dwComCtlVersion) > 5) : true )
		);
}

bool CExtUxTheme::IsNonClientThemed( 
	bool bCheckComCtlVersion // = true
	)
{
	if( m_hUxThemeDll == NULL )
		return false;
	return (
			IsThemeActive() 
		&&	(GetThemeAppProperties()&__EXT_UX_STAP_ALLOW_NONCLIENT) != 0 
		&&	(bCheckComCtlVersion ? (HIWORD(m_dwComCtlVersion) > 5) : true )
		);
}

bool CExtUxTheme::IsWebContentThemed( 
	bool bCheckComCtlVersion // = true
	)
{
	if( m_hUxThemeDll == NULL )
		return false;
	return (
			IsThemeActive() 
		&&	(GetThemeAppProperties()&__EXT_UX_STAP_ALLOW_WEBCONTENT) != 0 
		&&	(bCheckComCtlVersion ? (HIWORD(m_dwComCtlVersion) > 5) : true )
		);
}

CExtUxTheme::__EXT_UX_HTHEME CExtUxTheme::OpenThemeData(
	HWND hWnd, 
	__EXT_UX_LPCWSTR pszClassList
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnOpenThemeData != NULL );
	if( m_pfnOpenThemeData != NULL ) 
	{
		WCHAR szClassList[ MAX_PATH+1 ] = L"";
		if( pszClassList != NULL )
			__EXT_MFC_WCSCPY( szClassList, MAX_PATH, pszClassList );
		if( _wcsnicmp( szClassList, L"", wcslen( szClassList ) ) == 0 )
		{
			TCHAR szClassName[ MAX_PATH + 1 ] = _T("");
			::GetClassName( hWnd, szClassName, MAX_PATH );
			USES_CONVERSION;
			__EXT_MFC_WCSCPY( szClassList, MAX_PATH, T2OLE( szClassName ) );
		}
		
		if(		_wcsnicmp( szClassList, m_szClassListCached, wcslen( szClassList ) ) != 0 
			||	hWnd != m_hWndCached 
			||	(! ::IsWindow( m_hWndCached )  )
			)
		{	
			CloseThemeData( false );
			m_hUxTheme = m_pfnOpenThemeData( hWnd, szClassList );
			memset( m_szClassListCached, 0, sizeof( m_szClassListCached ) / sizeof( m_szClassListCached[0] ) );
			m_hWndCached = NULL;
			if( m_hUxTheme != NULL )
			{
				__EXT_MFC_WCSCPY( m_szClassListCached, MAX_PATH, szClassList );
				m_hWndCached = hWnd;
			}
		}
		//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
		return m_hUxTheme;
	}
	return NULL;
}

CExtUxTheme::__EXT_UX_HTHEME CExtUxTheme::OpenThemeDataEx(
	HWND hWnd, 
	__EXT_UX_LPCWSTR pszClassList,
	DWORD dwFlags
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnOpenThemeData != NULL );
	if( m_pfnOpenThemeDataEx != NULL ) 
	{
		WCHAR szClassList[ MAX_PATH+1 ] = L"";
		if( pszClassList != NULL )
			__EXT_MFC_WCSCPY( szClassList, MAX_PATH, pszClassList );
		if( _wcsnicmp( szClassList, L"", wcslen( szClassList ) ) == 0 )
		{
			TCHAR szClassName[ MAX_PATH + 1 ] = _T("");
			::GetClassName( hWnd, szClassName, MAX_PATH );
			USES_CONVERSION;
			__EXT_MFC_WCSCPY( szClassList, MAX_PATH, T2OLE( szClassName ) );
		}
		
		if(		_wcsnicmp( szClassList, m_szClassListCached, wcslen( szClassList ) ) != 0 
			||	hWnd != m_hWndCached 
			||	(! ::IsWindow( m_hWndCached )  )
			)
		{	
			CloseThemeData( false );
			m_hUxTheme = m_pfnOpenThemeDataEx( hWnd, szClassList, dwFlags );
			memset( m_szClassListCached, 0, sizeof( m_szClassListCached ) / sizeof( m_szClassListCached[0] ) );
			m_hWndCached = NULL;
			if( m_hUxTheme != NULL )
			{
				__EXT_MFC_WCSCPY( m_szClassListCached, MAX_PATH, szClassList );
				m_hWndCached = hWnd;
			}
		}
		//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
		return m_hUxTheme;
	}
	return NULL;
}

HRESULT CExtUxTheme::_CloseThemeData( 
	__EXT_UX_HTHEME hUxTheme 
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnCloseThemeData != NULL );
	if(		hUxTheme == NULL 
		||	m_pfnCloseThemeData == NULL
		||	(! ::IsWindow( m_hWndCached ) )
		)
		return S_FALSE;
HRESULT lResult = S_FALSE;
	__try
	{
		if( m_pfnCloseThemeData != NULL ) 
			lResult = m_pfnCloseThemeData( hUxTheme );
	}
	__except( EXCEPTION_EXECUTE_HANDLER )
	{
		return S_FALSE;
	}
	return lResult;
}

HRESULT CExtUxTheme::CloseThemeData(
	bool bAllowCaching // = false
	)
{
	if(		m_hUxTheme == NULL
		||	bAllowCaching
		)
		return S_OK;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnCloseThemeData != NULL );
HRESULT lResult = 
		_CloseThemeData( m_hUxTheme );
	m_hUxTheme = NULL;
	memset( m_szClassListCached, 0, sizeof( m_szClassListCached ) / sizeof( m_szClassListCached[0] ) );
	m_hWndCached = NULL;
	return lResult;
}

HRESULT CExtUxTheme::DrawThemeBackground(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	const RECT * pRect, 
	OPTIONAL const RECT * pClipRect
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnDrawThemeBackground != NULL );
	if( m_pfnDrawThemeBackground != NULL ) 
		return m_pfnDrawThemeBackground( m_hUxTheme, hdc, iPartId, iStateId, pRect, pClipRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::DrawBackground(
	HWND hWnd,
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	const RECT * pRect, 
	OPTIONAL const RECT * pClipRect
	)
{
	hWnd;

	CRect rcRect( 0, 0, 0, 0 );
	if( pRect != NULL )
		rcRect = *pRect;

	CRect rcClipRect( 0, 0, 0, 0 );
	if( pClipRect != NULL )
		rcClipRect = *pClipRect;

// 	if( IsThemeBackgroundPartiallyTransparent( 
// 			iPartId, 
// 			iStateId 
// 			) 
// 		)
// 		DrawThemeParentBackground(
// 			hWnd, 
// 			hdc, 
// 			&rcRect
// 			);
	return
		DrawThemeBackground(
			hdc, 
			iPartId, 
			iStateId, 
			&rcRect, 
			&rcClipRect
			);
}

HRESULT CExtUxTheme::DrawThemeText(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	__EXT_UX_LPCWSTR pszText, 
	int iCharCount, 
	DWORD dwTextFlags, 
	DWORD dwTextFlags2, 
	const RECT * pRect
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnDrawThemeText != NULL );
	if( m_pfnDrawThemeText != NULL ) 
		return m_pfnDrawThemeText( m_hUxTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, dwTextFlags2, pRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::DrawThemeText(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	const CExtSafeString & sText, 
	int iCharCount, 
	DWORD dwTextFlags, 
	DWORD dwTextFlags2, 
	const RECT * pRect
	)
{
	USES_CONVERSION;
LPCOLESTR wStrText = T2COLE( LPCTSTR( sText ) );
	return
		DrawThemeText(
			hdc,
			iPartId,
			iStateId,
			wStrText,
			iCharCount,
			dwTextFlags,
			dwTextFlags2,
			pRect
			);
}

HRESULT CExtUxTheme::DrawThemeTextEx(
	HDC hdc,
	int iPartId,
	int iStateId,
	__EXT_UX_LPCWSTR pszText,
	int iCharCount,
	DWORD dwFlags,
	LPRECT pRect,
	const CExtUxTheme::__EXT_UX_DTTOPTS * pOptions
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnDrawThemeTextEx != NULL );
	if( m_pfnDrawThemeTextEx != NULL ) 
		return m_pfnDrawThemeTextEx( m_hUxTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwFlags, pRect, pOptions );
	return S_FALSE;
}

HRESULT CExtUxTheme::DrawThemeTextEx(
	HDC hdc,
	int iPartId,
	int iStateId,
	const CExtSafeString & sText, 
	int iCharCount,
	DWORD dwFlags,
	LPRECT pRect,
	const CExtUxTheme::__EXT_UX_DTTOPTS * pOptions
	)
{
	USES_CONVERSION;
LPCOLESTR wStrText = T2COLE( LPCTSTR( sText ) );
	return
		DrawThemeTextEx(
			hdc,
			iPartId,
			iStateId,
			wStrText,
			iCharCount,
			dwFlags,
			pRect,
			pOptions
			);
}

HRESULT CExtUxTheme::GetThemeBackgroundContentRect(
	OPTIONAL HDC hdc, 
	int iPartId, 
	int iStateId,  
	const RECT * pBoundingRect, 
	OUT RECT * pContentRect
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeBackgroundContentRect != NULL );
	if( m_pfnGetThemeBackgroundContentRect != NULL ) 
		return m_pfnGetThemeBackgroundContentRect( m_hUxTheme, hdc, iPartId, iStateId, pBoundingRect, pContentRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeBackgroundExtent(
	OPTIONAL HDC hdc,
	int iPartId, 
	int iStateId, 
	const RECT * pContentRect, 
	OUT RECT * pExtentRect
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeBackgroundExtent != NULL );
	if( m_pfnGetThemeBackgroundExtent != NULL ) 
		return m_pfnGetThemeBackgroundExtent( m_hUxTheme, hdc, iPartId, iStateId, pContentRect, pExtentRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemePartSize(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	OPTIONAL RECT * prc, 
	enum __EXT_UX_THEMESIZE eSize, 
	OUT SIZE * psz
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemePartSize != NULL );
	if( m_pfnGetThemePartSize != NULL ) 
		return m_pfnGetThemePartSize( m_hUxTheme, hdc, iPartId, iStateId, prc, eSize, psz );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeTextExtent(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	__EXT_UX_LPCWSTR pszText, 
	int iCharCount, 
	DWORD dwTextFlags, 
	OPTIONAL const RECT * pBoundingRect, 
	OUT RECT * pExtentRect
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeTextExtent != NULL );
	if( m_pfnGetThemeTextExtent != NULL ) 
		return m_pfnGetThemeTextExtent( m_hUxTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, pBoundingRect, pExtentRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeTextExtent(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	const CExtSafeString & sText, 
	int iCharCount, 
	DWORD dwTextFlags, 
	OPTIONAL const RECT * pBoundingRect, 
	OUT RECT * pExtentRect
	)
{
	USES_CONVERSION;
LPCOLESTR wStrText = T2COLE( LPCTSTR( sText ) );
	if( m_pfnGetThemeTextExtent != NULL ) 
		return m_pfnGetThemeTextExtent( m_hUxTheme, hdc, iPartId, iStateId, wStrText, iCharCount, dwTextFlags, pBoundingRect, pExtentRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeTextMetrics(
	OPTIONAL HDC hdc, 
	int iPartId, 
	int iStateId, 
	OUT TEXTMETRIC * ptm
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeTextMetrics != NULL );
	if( m_pfnGetThemeTextMetrics != NULL ) 
		return m_pfnGetThemeTextMetrics( m_hUxTheme, hdc, iPartId, iStateId, ptm );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeBackgroundRegion(
	OPTIONAL HDC hdc,  
	int iPartId, 
	int iStateId, 
	const RECT * pRect, 
	OUT HRGN * pRegion
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeBackgroundRegion != NULL );
	if( m_pfnGetThemeBackgroundRegion != NULL ) 
		return m_pfnGetThemeBackgroundRegion( m_hUxTheme, hdc, iPartId, iStateId, pRect, pRegion );
	return S_FALSE;
}

HRESULT CExtUxTheme::HitTestThemeBackground(
	OPTIONAL HDC hdc, 
	int iPartId, 
	int iStateId, 
	DWORD dwOptions, 
	const RECT * pRect, 
	OPTIONAL HRGN hrgn, 
	POINT ptTest, 
	OUT WORD * pwHitTestCode
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnHitTestThemeBackground != NULL );
	if( m_pfnHitTestThemeBackground != NULL ) 
		return m_pfnHitTestThemeBackground( m_hUxTheme, hdc, iPartId, iStateId, dwOptions, pRect, hrgn, ptTest, pwHitTestCode );
	return S_FALSE;
}

HRESULT CExtUxTheme::DrawThemeEdge(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	const RECT * pDestRect, 
	UINT uEdge, UINT uFlags, 
	OPTIONAL OUT RECT * pContentRect
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnDrawThemeEdge != NULL );
	if( m_pfnDrawThemeEdge != NULL ) 
		return m_pfnDrawThemeEdge( m_hUxTheme, hdc, iPartId, iStateId, pDestRect, uEdge, uFlags, pContentRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::DrawThemeIcon(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	const RECT * pRect, 
	HIMAGELIST himl, 
	int iImageIndex
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnDrawThemeIcon != NULL );
	if( m_pfnDrawThemeIcon != NULL ) 
		return m_pfnDrawThemeIcon( m_hUxTheme, hdc, iPartId, iStateId, pRect, himl, iImageIndex );
	return S_FALSE;
}

BOOL CExtUxTheme::IsThemePartDefined(
	int iPartId, 
	int iStateId
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnIsThemePartDefined != NULL );
	if( m_pfnIsThemePartDefined != NULL ) 
		return m_pfnIsThemePartDefined( m_hUxTheme, iPartId, iStateId );
	return FALSE;
}

BOOL CExtUxTheme::IsThemeBackgroundPartiallyTransparent(
	int iPartId, 
	int iStateId
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnIsThemeBackgroundPartiallyTransparent != NULL );
	if( m_pfnIsThemeBackgroundPartiallyTransparent != NULL ) 
		return m_pfnIsThemeBackgroundPartiallyTransparent( m_hUxTheme, iPartId, iStateId );
	return FALSE;
}

HRESULT CExtUxTheme::GetThemeColor(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT COLORREF * pColor
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeColor != NULL );
	if( m_pfnGetThemeColor != NULL ) 
		return m_pfnGetThemeColor( m_hUxTheme, iPartId, iStateId, iPropId, pColor );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeMetric(
	OPTIONAL HDC hdc, 
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT int * piVal
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeMetric != NULL );
	if( m_pfnGetThemeMetric != NULL ) 
		return m_pfnGetThemeMetric( m_hUxTheme, hdc, iPartId, iStateId, iPropId, piVal );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeString(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT __EXT_UX_LPWSTR pszBuff, 
	int cchMaxBuffChars
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeString != NULL );
	if( m_pfnGetThemeString != NULL ) 
		return m_pfnGetThemeString( m_hUxTheme, iPartId, iStateId, iPropId, pszBuff, cchMaxBuffChars );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeBool(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT BOOL * pfVal
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeBool != NULL );
	if( m_pfnGetThemeBool != NULL ) 
		return m_pfnGetThemeBool( m_hUxTheme, iPartId, iStateId, iPropId, pfVal );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeInt(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT int * piVal
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeInt != NULL );
	if( m_pfnGetThemeInt != NULL ) 
		return m_pfnGetThemeInt( m_hUxTheme, iPartId, iStateId, iPropId, piVal );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeEnumValue(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT int * piVal
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeEnumValue != NULL );
	if( m_pfnGetThemeEnumValue != NULL ) 
		return m_pfnGetThemeEnumValue( m_hUxTheme, iPartId, iStateId, iPropId, piVal );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemePosition(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT POINT * pPoint
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemePosition != NULL );
	if( m_pfnGetThemePosition != NULL ) 
		return m_pfnGetThemePosition( m_hUxTheme, iPartId, iStateId, iPropId, pPoint );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeFont(
	OPTIONAL HDC hdc, 
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT LOGFONT * pFont
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeFont != NULL );
	if( m_pfnGetThemeFont != NULL ) 
		return m_pfnGetThemeFont( m_hUxTheme, hdc, iPartId, iStateId, iPropId, pFont );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeRect(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT RECT * pRect
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeRect != NULL );
	if( m_pfnGetThemeRect != NULL ) 
		return m_pfnGetThemeRect( m_hUxTheme, iPartId, iStateId, iPropId, pRect );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeMargins(
	OPTIONAL HDC hdc, 
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OPTIONAL RECT * prc, 
	OUT CExtUxTheme::__EXT_UX_MARGINS * pMargins
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeMargins != NULL );
	if( m_pfnGetThemeMargins != NULL ) 
		return m_pfnGetThemeMargins( m_hUxTheme, hdc, iPartId, iStateId, iPropId, prc, pMargins );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeIntList(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT CExtUxTheme::__EXT_UX_INTLIST * pIntList
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeIntList != NULL );
	if( m_pfnGetThemeIntList != NULL ) 
		return m_pfnGetThemeIntList( m_hUxTheme, iPartId, iStateId, iPropId, pIntList );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemePropertyOrigin(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT enum __EXT_UX_PROPERTYORIGIN * pOrigin
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemePropertyOrigin != NULL );
	if( m_pfnGetThemePropertyOrigin != NULL ) 
		return m_pfnGetThemePropertyOrigin( m_hUxTheme, iPartId, iStateId, iPropId, pOrigin );
	return S_FALSE;
}

HRESULT CExtUxTheme::SetWindowTheme(
	HWND hwnd, 
	__EXT_UX_LPCWSTR pszSubAppName, 
	__EXT_UX_LPCWSTR pszSubIdList
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnSetWindowTheme != NULL );
	if( m_pfnSetWindowTheme != NULL ) 
		return m_pfnSetWindowTheme( hwnd, pszSubAppName, pszSubIdList );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeFilename(
	int iPartId, 
	int iStateId, 
	int iPropId, 
	OUT __EXT_UX_LPWSTR pszThemeFileName, 
	int cchMaxBuffChars
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeFilename != NULL );
	if( m_pfnGetThemeFilename != NULL ) 
		return m_pfnGetThemeFilename( m_hUxTheme, iPartId, iStateId, iPropId, pszThemeFileName, cchMaxBuffChars );
	return S_FALSE;
}

COLORREF CExtUxTheme::GetThemeSysColor( 
	BOOL bThemeSysColor,
	int iColorId 
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeSysColor != NULL );
	if( m_pfnGetThemeSysColor != NULL ) 
		return m_pfnGetThemeSysColor( bThemeSysColor ? m_hUxTheme : NULL, iColorId );
	return COLORREF( -1 );
}

HBRUSH CExtUxTheme::GetThemeSysColorBrush( 
	BOOL bThemeSysColor, 
	int iColorId 
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeSysColorBrush != NULL );
	if( m_pfnGetThemeSysColorBrush != NULL ) 
		return m_pfnGetThemeSysColorBrush( bThemeSysColor ? m_hUxTheme : NULL, iColorId );
	return NULL;
}

BOOL CExtUxTheme::GetThemeSysBool(
	BOOL bThemeSysColor,
	int iBoolId
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeSysBool != NULL );
	if( m_pfnGetThemeSysBool != NULL ) 
		return m_pfnGetThemeSysBool( bThemeSysColor ? m_hUxTheme : NULL, iBoolId );
	return FALSE;
}

int CExtUxTheme::GetThemeSysSize(
	BOOL bThemeSysColor,
	int iSizeId
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeSysSize != NULL );
	if( m_pfnGetThemeSysSize != NULL ) 
		return m_pfnGetThemeSysSize( bThemeSysColor ? m_hUxTheme : NULL, iSizeId );
	return 0;
}

HRESULT CExtUxTheme::GetThemeSysFont(
	BOOL bThemeSysColor,
	int iFontId, 
	OUT LOGFONT * plf
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeSysFont != NULL );
	if( m_pfnGetThemeSysFont != NULL ) 
		return m_pfnGetThemeSysFont( bThemeSysColor ? m_hUxTheme : NULL, iFontId, plf );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeSysString(
	int iStringId, 
	OUT __EXT_UX_LPWSTR pszStringBuff, 
	int cchMaxStringChars
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeSysString != NULL );
	if( m_pfnGetThemeSysString != NULL ) 
		return m_pfnGetThemeSysString( m_hUxTheme, iStringId, pszStringBuff, cchMaxStringChars );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeSysInt(
	int iIntId, 
	int * piValue
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeSysInt != NULL );
	if( m_pfnGetThemeSysInt != NULL ) 
		return m_pfnGetThemeSysInt( m_hUxTheme, iIntId, piValue );
	return S_FALSE;
}

BOOL CExtUxTheme::IsThemeActive()
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnIsThemeActive != NULL );
	if( m_pfnIsThemeActive != NULL ) 
		return m_pfnIsThemeActive();
	return FALSE;
}

BOOL CExtUxTheme::IsAppThemed()
{
	if( m_hUxThemeDll == NULL )
		return FALSE;
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnIsAppThemed != NULL );
	if( m_pfnIsAppThemed != NULL ) 
	{
		__try
		{
			return m_pfnIsAppThemed();
		}
		__except( EXCEPTION_EXECUTE_HANDLER )
		{
		}
	}
	return FALSE;
}

CExtUxTheme::__EXT_UX_HTHEME CExtUxTheme::GetWindowTheme( HWND hwnd )
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetWindowTheme != NULL );
	if( m_pfnGetWindowTheme != NULL ) 
		return m_pfnGetWindowTheme( hwnd );
	return NULL;
}

HRESULT CExtUxTheme::EnableThemeDialogTexture(
	HWND hwnd, 
	DWORD dwFlags
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnEnableThemeDialogTexture != NULL );
	if( m_pfnEnableThemeDialogTexture != NULL ) 
		return m_pfnEnableThemeDialogTexture( hwnd, dwFlags );
	return S_FALSE;
}

BOOL CExtUxTheme::IsThemeDialogTextureEnabled( HWND hwnd )
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnIsThemeDialogTextureEnabled != NULL );
	if( m_pfnIsThemeDialogTextureEnabled != NULL ) 
		return m_pfnIsThemeDialogTextureEnabled( hwnd );
	return FALSE;
}

DWORD CExtUxTheme::GetThemeAppProperties()
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeAppProperties != NULL );
	if( m_pfnGetThemeAppProperties != NULL ) 
		return m_pfnGetThemeAppProperties();
	return 0;
}

void CExtUxTheme::SetThemeAppProperties( DWORD dwFlags )
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnSetThemeAppProperties != NULL );
	if( m_pfnSetThemeAppProperties != NULL ) 
		m_pfnSetThemeAppProperties( dwFlags );
}

HRESULT CExtUxTheme::GetCurrentThemeName(
	OUT __EXT_UX_LPWSTR pszThemeFileName, 
	int cchMaxNameChars, 
	OUT OPTIONAL __EXT_UX_LPWSTR pszColorBuff, 
	int cchMaxColorChars,
	OUT OPTIONAL __EXT_UX_LPWSTR pszSizeBuff, 
	int cchMaxSizeChars
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetCurrentThemeName != NULL );
	if( m_pfnGetCurrentThemeName != NULL ) 
		return m_pfnGetCurrentThemeName( pszThemeFileName, cchMaxNameChars, pszColorBuff, cchMaxColorChars, pszSizeBuff, cchMaxSizeChars );
	return S_FALSE;
}

HRESULT CExtUxTheme::GetThemeDocumentationProperty(
	__EXT_UX_LPCWSTR pszThemeName,
	__EXT_UX_LPCWSTR pszPropertyName, 
	OUT __EXT_UX_LPWSTR pszValueBuff, 
	int cchMaxValChars
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnGetThemeDocumentationProperty != NULL );
	if( m_pfnGetThemeDocumentationProperty != NULL ) 
		return m_pfnGetThemeDocumentationProperty( pszThemeName, pszPropertyName, pszValueBuff, cchMaxValChars );
	return S_FALSE;
}

HRESULT CExtUxTheme::DrawThemeParentBackground(
	HWND hwnd, 
	HDC hdc, 
	OPTIONAL RECT * prc
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnDrawThemeParentBackground != NULL );
	if( m_pfnDrawThemeParentBackground != NULL ) 
		return m_pfnDrawThemeParentBackground( hwnd, hdc, prc );
	return S_FALSE;
}

HRESULT CExtUxTheme::EnableTheming( BOOL fEnable )
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnEnableTheming != NULL );
	if( m_pfnEnableTheming != NULL ) 
		return m_pfnEnableTheming( fEnable );
	return S_FALSE;
}

HRESULT CExtUxTheme::DrawThemeBackgroundEx(
	HDC hdc, 
	int iPartId, 
	int iStateId, 
	const RECT * pRect, 
	OPTIONAL const CExtUxTheme::__EXT_UX_DTBGOPTS * pOptions
	)
{
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_hUxTheme != NULL );
	//__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pfnDrawThemeBackgroundEx != NULL );
	if( m_pfnDrawThemeBackgroundEx != NULL ) 
		return m_pfnDrawThemeBackgroundEx( m_hUxTheme, hdc, iPartId, iStateId, pRect, pOptions );
	return S_FALSE;
}

//////////////////////////////////////////////////////////////////////////
// CExtDWM class

CExtDWM::CExtDWM()
	: m_hDWMDll( NULL )
	, m_bNeedToFreeDll( false )
	, m_nDwmMaxQueuedBuffers( 8 )
	, m_nDwmMaxMonitors( 16 )
	, m_nDwmMaxAdapters( 16 )
	, m_pfnDwmDefWindowProc( NULL )
	, m_pfnDwmEnableBlurBehindWindow( NULL )
	, m_pfnDwmEnableComposition( NULL )
	, m_pfnDwmEnableMMCSS( NULL )
	, m_pfnDwmExtendFrameIntoClientArea( NULL )
	, m_pfnDwmGetColorizationColor( NULL )
	, m_pfnDwmGetCompositionTimingInfo( NULL )
	, m_pfnDwmGetWindowAttribute( NULL )
	, m_pfnDwmIsCompositionEnabled( NULL )
	, m_pfnDwmModifyPreviousDxFrameDuration( NULL )
	, m_pfnDwmQueryThumbnailSourceSize( NULL )
	, m_pfnDwmRegisterThumbnail( NULL )
	, m_pfnDwmSetDxFrameDuration( NULL )
	, m_pfnDwmSetPresentParameters( NULL )
	, m_pfnDwmSetWindowAttribute( NULL )
	, m_pfnDwmUnregisterThumbnail( NULL )
	, m_pfnDwmUpdateThumbnailProperties( NULL )
{
struct
{
	FARPROC * m_pFarProc;
	LPCSTR m_strProcName;
} arrDWMApi[] =
	{
		{ (FARPROC*)&m_pfnDwmDefWindowProc, "DwmDefWindowProc" },
		{ (FARPROC*)&m_pfnDwmEnableBlurBehindWindow, "DwmEnableBlurBehindWindow" },
		{ (FARPROC*)&m_pfnDwmEnableComposition, "DwmEnableComposition" },
		{ (FARPROC*)&m_pfnDwmEnableMMCSS, "DwmEnableMMCSS" },
		{ (FARPROC*)&m_pfnDwmExtendFrameIntoClientArea, "DwmExtendFrameIntoClientArea" },
		{ (FARPROC*)&m_pfnDwmGetColorizationColor, "DwmGetColorizationColor" },
		{ (FARPROC*)&m_pfnDwmGetCompositionTimingInfo, "DwmGetCompositionTimingInfo" },
		{ (FARPROC*)&m_pfnDwmGetWindowAttribute, "DwmGetWindowAttribute" },
		{ (FARPROC*)&m_pfnDwmIsCompositionEnabled, "DwmIsCompositionEnabled" },
		{ (FARPROC*)&m_pfnDwmModifyPreviousDxFrameDuration, "DwmModifyPreviousDxFrameDuration" },
		{ (FARPROC*)&m_pfnDwmQueryThumbnailSourceSize, "DwmQueryThumbnailSourceSize" },
		{ (FARPROC*)&m_pfnDwmRegisterThumbnail, "DwmRegisterThumbnail" },
		{ (FARPROC*)&m_pfnDwmSetDxFrameDuration, "DwmSetDxFrameDuration" },
		{ (FARPROC*)&m_pfnDwmSetPresentParameters, "DwmSetPresentParameters" },
		{ (FARPROC*)&m_pfnDwmSetWindowAttribute, "DwmSetWindowAttribute" },
		{ (FARPROC*)&m_pfnDwmUnregisterThumbnail, "DwmUnregisterThumbnail" },
		{ (FARPROC*)&m_pfnDwmUpdateThumbnailProperties, "DwmUpdateThumbnailProperties" },
	};
	if( m_hDWMDll == NULL )
	{
		m_hDWMDll = ::GetModuleHandle( _T("dwmapi.dll") );
		if( m_hDWMDll == NULL )
		{
			m_hDWMDll = ::LoadLibrary( _T("dwmapi.dll") );
			m_bNeedToFreeDll = true;
		}
	} // if( m_hDWMDll == NULL )
	if( m_hDWMDll != NULL )
	{
		INT nApiCount = sizeof(arrDWMApi)/sizeof(arrDWMApi[0]);
		for( INT nFunc = 0; nFunc < nApiCount; nFunc++ )
		{
			FARPROC pFarProc = NULL;
				pFarProc = 
					::GetProcAddress(
						m_hDWMDll,
						arrDWMApi[nFunc].m_strProcName
						);
			*(arrDWMApi[nFunc].m_pFarProc) = pFarProc;
		}
	} // if( m_hDWMDll != NULL )
}

CExtDWM::~CExtDWM()
{
	if( m_hDWMDll != NULL && m_bNeedToFreeDll ) 
	{
		::FreeLibrary( m_hDWMDll );
		m_hDWMDll = NULL;
	}
}

BOOL CExtDWM::IsCompositionEnabled()
{
	if( m_hDWMDll == NULL )
		return FALSE;
BOOL bEnabled = FALSE;
HRESULT hr = DwmIsCompositionEnabled( &bEnabled );
	if( SUCCEEDED(hr) )
		return bEnabled;
	return FALSE;
}

BOOL CExtDWM::DwmDefWindowProc(
	IN HWND hWnd,
	IN UINT msg,
	IN WPARAM wParam,
	IN LPARAM lParam,
	OUT LRESULT * plResult
	)
{
	if( m_pfnDwmDefWindowProc != NULL ) 
		return m_pfnDwmDefWindowProc( hWnd, msg, wParam, lParam, plResult );
	return FALSE;
}

HRESULT CExtDWM::DwmEnableBlurBehindWindow(
	HWND hWnd, 
	const __EXT_DWM_BLURBEHIND * pBlurBehind
	)
{
	if( m_pfnDwmEnableBlurBehindWindow != NULL ) 
		return m_pfnDwmEnableBlurBehindWindow( hWnd, pBlurBehind );
	return S_FALSE;
}

HRESULT CExtDWM::DwmEnableComposition(
	BOOL fEnable
	)
{
	if( m_pfnDwmEnableComposition != NULL ) 
		return m_pfnDwmEnableComposition( fEnable );
	return S_FALSE;
}

HRESULT CExtDWM::DwmEnableMMCSS(
	BOOL fEnableMMCSS
	)
{
	if( m_pfnDwmEnableMMCSS != NULL ) 
		return m_pfnDwmEnableMMCSS( fEnableMMCSS );
	return S_FALSE;
}

HRESULT CExtDWM::DwmExtendFrameIntoClientArea(
	HWND hWnd,
	const CExtUxTheme::__EXT_UX__MARGINS * pMarInset
	)
{
	if( m_pfnDwmExtendFrameIntoClientArea != NULL ) 
		return m_pfnDwmExtendFrameIntoClientArea( hWnd, pMarInset );
	return S_FALSE;
}

HRESULT CExtDWM::DwmGetColorizationColor(
	DWORD * pcrColorization,
	BOOL * pfOpaqueBlend
	)
{
	if( m_pfnDwmGetColorizationColor != NULL ) 
		return m_pfnDwmGetColorizationColor( pcrColorization, pfOpaqueBlend );
	return S_FALSE;
}

HRESULT CExtDWM::DwmGetCompositionTimingInfo(
	HWND hwnd,
	__EXT_DWM_TIMING_INFO * pTimingInfo
	)
{
	if( m_pfnDwmGetCompositionTimingInfo != NULL ) 
		return m_pfnDwmGetCompositionTimingInfo( hwnd, pTimingInfo );
	return S_FALSE;
}

HRESULT CExtDWM::DwmGetWindowAttribute(
	HWND hwnd,
	DWORD dwAttribute,
	PVOID pvAttribute, 
	DWORD cbAttribute
	)
{
	if( m_pfnDwmGetWindowAttribute != NULL ) 
		return m_pfnDwmGetWindowAttribute( hwnd, dwAttribute, pvAttribute, cbAttribute );
	return S_FALSE;
}

HRESULT CExtDWM::DwmIsCompositionEnabled(
	BOOL * pfEnabled
	)
{
	if( m_pfnDwmIsCompositionEnabled != NULL ) 
		return m_pfnDwmIsCompositionEnabled( pfEnabled );
	return S_FALSE;
}

HRESULT CExtDWM::DwmModifyPreviousDxFrameDuration(
	HWND hwnd, 
	INT cRefreshes,
	BOOL fRelative
	)
{
	if( m_pfnDwmModifyPreviousDxFrameDuration != NULL ) 
		return m_pfnDwmModifyPreviousDxFrameDuration( hwnd, cRefreshes, fRelative );
	return S_FALSE;
}

HRESULT CExtDWM::DwmQueryThumbnailSourceSize(
	__EXT_HTHUMBNAIL hThumbnail, 
	OUT PSIZE pSize
	)
{
	if( m_pfnDwmQueryThumbnailSourceSize != NULL ) 
		return m_pfnDwmQueryThumbnailSourceSize( hThumbnail, pSize );
	return S_FALSE;
}

HRESULT CExtDWM::DwmRegisterThumbnail(
	HWND hwndDestination, 
	HWND hwndSource, 
	const SIZE * pMinimizedSize,
	__EXT_PHTHUMBNAIL phThumbnailId
	)
{
	if( m_pfnDwmRegisterThumbnail != NULL ) 
		return m_pfnDwmRegisterThumbnail( hwndDestination, hwndSource, pMinimizedSize, phThumbnailId );
	return S_FALSE;
}

HRESULT CExtDWM::DwmSetDxFrameDuration(
	HWND hwnd, 
	INT cRefreshes
	)
{
	if( m_pfnDwmSetDxFrameDuration != NULL ) 
		return m_pfnDwmSetDxFrameDuration( hwnd, cRefreshes );
	return S_FALSE;
}

HRESULT CExtDWM::DwmSetPresentParameters(
	HWND hwnd,
	__EXT_DWM_PRESENT_PARAMETERS * pPresentParams
	)
{
	if( m_pfnDwmSetPresentParameters != NULL ) 
		return m_pfnDwmSetPresentParameters( hwnd, pPresentParams );
	return S_FALSE;
}

HRESULT CExtDWM::DwmSetWindowAttribute(
	HWND hwnd,
	DWORD dwAttribute,
	LPCVOID pvAttribute, 
	DWORD cbAttribute
	)
{
	if( m_pfnDwmSetWindowAttribute != NULL ) 
		return m_pfnDwmSetWindowAttribute( hwnd, dwAttribute, pvAttribute, cbAttribute );
	return S_FALSE;
}

HRESULT CExtDWM::DwmUnregisterThumbnail(
	__EXT_HTHUMBNAIL hThumbnailId
	)
{
	if( m_pfnDwmUnregisterThumbnail != NULL ) 
		return m_pfnDwmUnregisterThumbnail( hThumbnailId );
	return S_FALSE;
}

HRESULT CExtDWM::DwmUpdateThumbnailProperties(
	__EXT_HTHUMBNAIL hThumbnailId, 
	const __EXT_DWM_THUMBNAIL_PROPERTIES * ptnProperties
	)
{
	if( m_pfnDwmUpdateThumbnailProperties != NULL ) 
		return m_pfnDwmUpdateThumbnailProperties( hThumbnailId, ptnProperties );
	return S_FALSE;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichFontDescription

CExtRichFontDescription::CExtRichFontDescription()
	: m_nLineSpacingPX( -1 )
	, m_lfLineSpacingPercent( 1.0 )
//	, m_bBlink( false )
//	, m_bOverline( false )
{
	::memset( &m_lf, 0, sizeof(LOGFONT) );
	m_lf.lfCharSet = DEFAULT_CHARSET;
}

CExtRichFontDescription::CExtRichFontDescription( const CExtRichFontDescription & other )
{
	Assign( other );
}

CExtRichFontDescription::~CExtRichFontDescription()
{
}

int CExtRichFontDescription::Compare( const CExtRichFontDescription & other ) const
{
int nRetVal = _tcsncmp( m_lf.lfFaceName, other.m_lf.lfFaceName, LF_FACESIZE );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfHeight, other.m_lf.lfHeight );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfWidth, other.m_lf.lfWidth );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfEscapement, other.m_lf.lfEscapement );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfOrientation, other.m_lf.lfOrientation );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfWeight, other.m_lf.lfWeight );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_nLineSpacingPX, other.m_nLineSpacingPX );
	if( nRetVal != 0 )
		return nRetVal;
	
	nRetVal = stat_impl_cmp_DOUBLE( m_lfLineSpacingPercent, other.m_lfLineSpacingPercent );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_BOOL( m_lf.lfItalic, other.m_lf.lfItalic );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_BOOL( m_lf.lfUnderline, other.m_lf.lfUnderline );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_BOOL( m_lf.lfStrikeOut, other.m_lf.lfStrikeOut );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfCharSet, other.m_lf.lfCharSet );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfOutPrecision, other.m_lf.lfOutPrecision );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfClipPrecision, other.m_lf.lfClipPrecision );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfQuality, other.m_lf.lfQuality );
	if( nRetVal != 0 )
		return nRetVal;

	nRetVal = stat_impl_cmp_LONG( m_lf.lfPitchAndFamily, other.m_lf.lfPitchAndFamily );
	if( nRetVal != 0 )
		return nRetVal;

//	nRetVal = stat_impl_cmp_BOOL( m_bBlink, other.m_bBlink );
//	if( nRetVal != 0 )
//		return nRetVal;

//	nRetVal = stat_impl_cmp_BOOL( m_bOverline, other.m_bOverline );
//	if( nRetVal != 0 )
//		return nRetVal;
	return 0;
}

void CExtRichFontDescription::Assign( const CExtRichFontDescription & other )
{
	if( LPVOID(this) == LPVOID(&other) )
		return;
	::memcpy( &m_lf, &other.m_lf, sizeof(LOGFONT) );
	m_nLineSpacingPX = other.m_nLineSpacingPX;
	m_lfLineSpacingPercent = other.m_lfLineSpacingPercent;
//	m_bBlink = other.m_bBlink;
//	m_bOverline = other.m_bOverline;
}

HFONT CExtRichFontDescription::stat_dc_get_current_font( HDC hDC )
{
static HFONT g_hFontDefaultGUI = (HFONT)::GetStockObject( DEFAULT_GUI_FONT );
	if( hDC == NULL )
		return g_hFontDefaultGUI;
	if( g_PaintManager.m_bIsWin2000orLater )
	{
		typedef HGDIOBJ ( WINAPI * pfn_GetCurrentObject_t )( HDC, UINT );
		static pfn_GetCurrentObject_t g_pfn_GetCurrentObject = NULL;
		static bool g_bHave_g_pfn_GetCurrentObject = false;
		if( ! g_bHave_g_pfn_GetCurrentObject )
		{
			g_bHave_g_pfn_GetCurrentObject = true;
			if( g_pfn_GetCurrentObject == NULL )
			{
				HINSTANCE hInstGDI32 = ::GetModuleHandleA( "GDI32.DLL" );
				if( hInstGDI32 != NULL )
					g_pfn_GetCurrentObject = (pfn_GetCurrentObject_t) ::GetProcAddress( hInstGDI32, "GetCurrentObject" );
			} // if( g_pfn_GetCurrentObject == NULL )
		} // if( ! g_bHave_g_pfn_GetCurrentObject )
		if( g_pfn_GetCurrentObject != NULL )
		{
			HFONT hFontCurrent2000 = (HFONT) g_pfn_GetCurrentObject( hDC, OBJ_FONT );
			if( hFontCurrent2000 != NULL )
				return hFontCurrent2000;
		} // if( g_pfn_GetCurrentObject != NULL )
	} // if( g_PaintManager.m_bIsWin2000orLater )
HFONT hCurrentFont = (HFONT)::SelectObject( hDC, g_hFontDefaultGUI );
	::SelectObject( hDC, hCurrentFont );
	if( hCurrentFont == NULL )
		hCurrentFont = g_hFontDefaultGUI;
	return hCurrentFont;
}

CFont * CExtRichFontDescription::stat_dc_get_current_font( CDC & dc )
	{ return CFont::FromHandle( stat_dc_get_current_font( dc.GetSafeHdc() ) ); }

void CExtRichFontDescription::FromFont( HFONT hFont )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hFont != NULL );
	::memset( &m_lf, 0, sizeof(LOGFONT) );
	::GetObject( hFont, sizeof(LOGFONT), &m_lf );
	m_lf.lfCharSet = DEFAULT_CHARSET;
}

void CExtRichFontDescription::FromFont( CFont & _font )
	{ FromFont( (HFONT)_font.GetSafeHandle() ); }

void CExtRichFontDescription::FromSurfaceCurrentFont( CDC & dc )
	{ FromSurfaceCurrentFont( dc.GetSafeHdc() ); }

void CExtRichFontDescription::FromSurfaceCurrentFont( HDC hDC )
{
	if( hDC == NULL )
	{
		FromDefaultGuiFont();
		return;
	}
HFONT hFont = stat_dc_get_current_font( hDC );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hFont != NULL );
	FromFont( hFont );
}

void CExtRichFontDescription::FromDefaultGuiFont()
	{ FromFont( (HFONT)::GetStockObject(DEFAULT_GUI_FONT) ); }

void CExtRichFontDescription::FromSystemFont()
	{ FromFont( (HFONT)::GetStockObject(SYSTEM_FONT) ); }

HFONT CExtRichFontDescription::CreateFont(
	INT nLO,
	bool bPlainTextUnderlineMode // = false
	) const
{
	if( m_lf.lfFaceName[0] == _T('\0') )
		return NULL;
CExtRichContentLayout::e_layout_orientation_t eLO = (CExtRichContentLayout::e_layout_orientation_t)nLO;
	if( eLO != CExtRichContentLayout::__ELOT_NORMAL )
	{
		LOGFONT _lf;
		::memcpy( &_lf, &m_lf, sizeof(LOGFONT) );
		if( nLO == 90 )
			nLO = 270;
		else if( nLO == 270 )
			nLO = 90;
		_lf.lfEscapement = nLO*10;
		if( bPlainTextUnderlineMode )
			_lf.lfUnderline = 1;
		return ::CreateFontIndirect( &_lf );
	} // if( eLO != CExtRichContentLayout::__ELOT_NORMAL )
	if( bPlainTextUnderlineMode && m_lf.lfUnderline == 0 )
	{
		LOGFONT _lf;
		::memcpy( &_lf, &m_lf, sizeof(LOGFONT) );
		_lf.lfUnderline = 1;
		return ::CreateFontIndirect( &_lf );
	} // if( bPlainTextUnderlineMode && m_lf.lfUnderline == 0 )
	return ::CreateFontIndirect( &m_lf );
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichStyleDescription::pseudo_class_def_t

void CExtRichStyleDescription::pseudo_class_def_t::InitDefaultSupportedElementStates()
{
	Empty();
	m_eynDisabled = m_eynHover = m_eynPressed = CExtRichStyleDescription::e_ui_yn_yes;
}

void CExtRichStyleDescription::pseudo_class_def_t::Empty()
{
	m_eynAfter       = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynBefore      = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynFirstChild  = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynFirstLetter = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynFirstLine   = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynDisabled    = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynActive      = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynFocus       = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynSelection   = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynHover       = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynPressed     = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynLang        = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynLink        = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynVisited     = CExtRichStyleDescription::e_ui_yn_unspecified;
}

bool CExtRichStyleDescription::pseudo_class_def_t::IsEmpty() const
{
	if(		( m_eynAfter       != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynBefore      != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynFirstChild  != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynFirstLetter != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynFirstLine   != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynDisabled    != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynActive      != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynFocus       != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynSelection   != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynHover       != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynPressed     != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynLang        != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynLink        != CExtRichStyleDescription::e_ui_yn_unspecified )
		||	( m_eynVisited     != CExtRichStyleDescription::e_ui_yn_unspecified )
		)
		return false;
	return true;
}

void CExtRichStyleDescription::pseudo_class_def_t::Assign( const CExtRichStyleDescription::pseudo_class_def_t & other )
{
	m_eynAfter       = other.m_eynAfter;
	m_eynBefore      = other.m_eynBefore;
	m_eynFirstChild  = other.m_eynFirstChild;
	m_eynFirstLetter = other.m_eynFirstLetter;
	m_eynFirstLine   = other.m_eynFirstLine;
	m_eynDisabled    = other.m_eynDisabled;
	m_eynActive      = other.m_eynActive;
	m_eynFocus       = other.m_eynFocus;
	m_eynSelection   = other.m_eynSelection;
	m_eynHover       = other.m_eynHover;
	m_eynPressed     = other.m_eynPressed;
	m_eynLang        = other.m_eynLang;
	m_eynLink        = other.m_eynLink;
	m_eynVisited     = other.m_eynVisited;
}

int CExtRichStyleDescription::pseudo_class_def_t::Compare( const CExtRichStyleDescription::pseudo_class_def_t & other ) const
{
int nRetVal = stat_impl_cmp_YN( m_eynAfter, other.m_eynAfter );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynBefore, other.m_eynBefore );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynFirstChild, other.m_eynFirstChild );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynFirstLetter, other.m_eynFirstLetter );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynFirstLine, other.m_eynFirstLine );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynDisabled, other.m_eynDisabled );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynActive, other.m_eynActive );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynFocus, other.m_eynFocus );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynSelection, other.m_eynSelection );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynHover, other.m_eynHover );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynPressed, other.m_eynPressed );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynLang, other.m_eynLang );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynLink, other.m_eynLink );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynVisited, other.m_eynVisited );
	if( nRetVal != 0 )
		return nRetVal;
	return 0;
}

void CExtRichStyleDescription::pseudo_class_def_t::Merge( const pseudo_class_def_t & other )
{
	if( other.m_eynAfter       != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynAfter = other.m_eynAfter;
	if( other.m_eynBefore      != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynBefore = other.m_eynBefore;
	if( other.m_eynFirstChild  != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFirstChild = other.m_eynFirstChild;
	if( other.m_eynFirstLetter != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFirstLetter = other.m_eynFirstLetter;
	if( other.m_eynFirstLine   != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFirstLine = other.m_eynFirstLine;
	if( other.m_eynDisabled    != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynDisabled = other.m_eynDisabled;
	if( other.m_eynActive      != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynActive = other.m_eynActive;
	if( other.m_eynFocus       != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFocus = other.m_eynFocus;
	if( other.m_eynSelection   != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynSelection = other.m_eynSelection;
	if( other.m_eynHover       != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynHover = other.m_eynHover;
	if( other.m_eynPressed     != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynPressed = other.m_eynPressed;
	if( other.m_eynLang        != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynLang = other.m_eynLang;
	if( other.m_eynLink        != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynLink = other.m_eynLink;
	if( other.m_eynVisited     != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynVisited = other.m_eynVisited;
}

bool CExtRichStyleDescription::pseudo_class_def_t::IncElement( const CExtRichStyleDescription::pseudo_class_def_t & elementState ) const
{
	if(		m_eynAfter       != CExtRichStyleDescription::e_ui_yn_unspecified
		||	m_eynBefore      != CExtRichStyleDescription::e_ui_yn_unspecified
		||	m_eynFirstChild  != CExtRichStyleDescription::e_ui_yn_unspecified
		||	m_eynFirstLetter != CExtRichStyleDescription::e_ui_yn_unspecified
		||	m_eynFirstLine   != CExtRichStyleDescription::e_ui_yn_unspecified
		||	m_eynLang        != CExtRichStyleDescription::e_ui_yn_unspecified
		)
		return true;
	if( m_eynDisabled  == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynDisabled  != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynActive    == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynActive    != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynFocus     == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynFocus     != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynSelection == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynSelection != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynHover     == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynHover     != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynPressed   == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynPressed   != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynLink      == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynLink      != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynVisited   == CExtRichStyleDescription::e_ui_yn_yes && ( elementState.m_eynVisited   != CExtRichStyleDescription::e_ui_yn_yes ) ) return false;
	if( m_eynDisabled  == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynDisabled  == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	if( m_eynActive    == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynActive    == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	if( m_eynFocus     == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynFocus     == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	if( m_eynSelection == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynSelection == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	if( m_eynHover     == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynHover     == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	if( m_eynPressed   == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynPressed   == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	if( m_eynLink      == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynLink      == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	if( m_eynVisited   == CExtRichStyleDescription::e_ui_yn_yes &&   elementState.m_eynVisited   == CExtRichStyleDescription::e_ui_yn_yes   ) return true;
	return false;
}

void CExtRichStyleDescription::pseudo_class_def_t::ResetSpecified( const pseudo_class_def_t & statesToReset, CExtRichStyleDescription::e_ui_yes_not_option_t eynSetOn )
{
	if( statesToReset.m_eynAfter       != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynAfter       = eynSetOn;
	if( statesToReset.m_eynBefore      != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynBefore      = eynSetOn;
	if( statesToReset.m_eynFirstChild  != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFirstChild  = eynSetOn;
	if( statesToReset.m_eynFirstLetter != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFirstLetter = eynSetOn;
	if( statesToReset.m_eynFirstLine   != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFirstLine   = eynSetOn;
	if( statesToReset.m_eynDisabled    != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynDisabled    = eynSetOn;
	if( statesToReset.m_eynActive      != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynActive      = eynSetOn;
	if( statesToReset.m_eynFocus       != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynFocus       = eynSetOn;
	if( statesToReset.m_eynSelection   != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynSelection   = eynSetOn;
	if( statesToReset.m_eynHover       != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynHover       = eynSetOn;
	if( statesToReset.m_eynPressed     != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynPressed     = eynSetOn;
	if( statesToReset.m_eynLang        != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynLang        = eynSetOn;
	if( statesToReset.m_eynLink        != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynLink        = eynSetOn;
	if( statesToReset.m_eynVisited     != CExtRichStyleDescription::e_ui_yn_unspecified ) m_eynVisited     = eynSetOn;
}

void CExtRichStyleDescription::pseudo_class_def_t::SetAll( CExtRichStyleDescription::e_ui_yes_not_option_t eynSetOn, bool bSetContentRelated, bool bSetStateRelated )
{
	if( bSetContentRelated )
		m_eynAfter = m_eynBefore = m_eynFirstChild = m_eynFirstLetter = m_eynFirstLine = m_eynLang = eynSetOn;
	if( bSetStateRelated )
		m_eynDisabled = m_eynActive = m_eynFocus = m_eynSelection = m_eynHover = m_eynPressed = m_eynLink = m_eynVisited = eynSetOn;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichStyleDescription

CExtRichStyleDescription::CExtRichStyleDescription()
	: m_eaH( CExtRichStyleDescription::eahDefault )
	, m_eaV( CExtRichStyleDescription::eavDefault )
	, m_etT( CExtRichStyleDescription::ettNone )
	, m_eWST( CExtRichStyleDescription::ewstNormal )
	, m_eBR( CExtRichStyleDescription::ebrNoRepeat )
	, m_eBA( CExtRichStyleDescription::ebaScroll )
	, m_eBPT( CExtRichStyleDescription::ebpt_unspecified )
	, m_eBCT( CExtRichStyleDescription::ebct_transparent )
	, m_eBPA( CExtRichStyleDescription::ebpa_unspecified )
	, m_eOS( CExtRichStyleDescription::eos_none )
	, m_eLSP( CExtRichStyleDescription::elsp_outside )
	, m_eLST( CExtRichStyleDescription::elst_disc )
	, m_eD( CExtRichStyleDescription::ed_inline )
	, m_eDock( CExtRichStyleDescription::e_ui_dock_unspecified )
	, m_eV( CExtRichStyleDescription::ev_visible )
	, m_eP( CExtRichStyleDescription::ep_static )
	, m_eO( CExtRichStyleDescription::eo_visible )
	, m_esbtH( CExtRichStyleDescription::esbt_auto )
	, m_esbtV( CExtRichStyleDescription::esbt_auto )
	, m_eF( CExtRichStyleDescription::ef_none )
	, m_eC( CExtRichStyleDescription::ec_auto )
	, m_eCI( CExtRichStyleDescription::eci_auto )
//	, m_eCS( CExtRichStyleDescription::ecs_none )
	, m_eZIT( CExtRichStyleDescription::ezi_auto )
//	, m_ePBB( CExtRichStyleDescription::epbba_auto )
//	, m_ePBA( CExtRichStyleDescription::epbba_auto )
	, m_eBC( CExtRichStyleDescription::ebc_separate )
	, m_eCST( CExtRichStyleDescription::ecst_top )
	, m_eEC( CExtRichStyleDescription::eec_show )
	, m_eTL( CExtRichStyleDescription::etl_auto )
	, m_eN( CExtRichStyleDescription::ent_noshade_unknown )
	, m_eUiListNavigation( CExtRichStyleDescription::e_ui_ln_unspecified )
	, m_eUiFocusEnsureVisibility( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eUiDelayedDraw( CExtRichStyleDescription::e_ui_dd_default )
	, m_eUiSBT( CExtRichStyleDescription::e_ui_sbt_default )
	, m_eUiDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_eUiBackgroundDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_nParaIndent( 0 )
	, m_rcPadding( 0, 0, 0, 0 )
	, m_rcBorder( 0, 0, 0, 0 )
	, m_rcMargin( 0, 0, 0, 0 )
	, m_rcCellPadding( 0, 0, 0, 0 )
	, m_rcClipImageShape( 0, 0, 0, 0 )
	, m_rcUiSlice( 0, 0, 0, 0 )
	, m_rcUiBackgroundSlice( 0, 0, 0, 0 )
	, m_rcUiBackgroundExtend( 0, 0, 0, 0 )
	, m_rcOuter( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_rcOuterP( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_sizeCellSpacing( 0, 0 )
	, m_sizeWH( -1, -1 )
	, m_sizeWHP( -1, -1 )
	, m_sizeSpan( 1, 1 )
	, m_ptBackgroundAlignment( 0, 0 )
	, m_clrText( COLORREF(-1L) )
	, m_clrBack( COLORREF(-1L) )
	, m_clrBorderLeft( RGB(0,0,0) )
	, m_clrBorderRight( RGB(0,0,0) )
	, m_clrBorderTop( RGB(0,0,0) )
	, m_clrBorderBottom( RGB(0,0,0) )
	, m_clrOutlineColor( COLORREF(-1L) )
	, m_ebsLeft( ebsUnknown )
	, m_ebsRight( ebsUnknown )
	, m_ebsTop( ebsUnknown )
	, m_ebsBottom( ebsUnknown )
	, m_nFirstNumberInList( 1 )
	, m_nUi_transparency( 255 )
	, m_nUi_background_transparency( 255 )
//	, m_strBackgroundImagePath( _T("") )
//	, m_strListStyleImagePath( _T("") )
//	, m_strCursorImagePath( _T("") )
//	, m_strContent( _T("") )
//	, m_strCounterIncrement( _T("") )
//	, m_strCounterReset( _T("") )
	, m_nWordSapcing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nLetterSpacing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nZIndex( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nOutlineWidth( 0 )
	, m_nMaxHeight( -1 )
	, m_nMaxWidth( -1 )
	, m_nMinHeight( -1 )
	, m_nMinWidth( -1 )
	, m_nSpacerModeMinWidth( 0 )
	, m_nBorderSpacingHoriz( 0 )
	, m_nBorderSpacingVert( 0 )
	, m_lfMaxHeightP( -1 )
	, m_lfMaxWidthP( -1 )
	, m_lfMinHeightP( -1 )
	, m_lfMinWidthP( -1 )
//	, m_strContentBefore( _T("") )
//	, m_strContentAfter( _T("") )
	, m_bDtPrefixOnlyMode( false )
	, m_eynFocusOnMakeSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOnMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
{
	m_PCD.InitDefaultSupportedElementStates();
}

CExtRichStyleDescription::CExtRichStyleDescription( const CExtRichStyleDescription & other )
	: m_eaH( CExtRichStyleDescription::eahDefault )
	, m_eaV( CExtRichStyleDescription::eavDefault )
	, m_etT( CExtRichStyleDescription::ettNone )
	, m_eWST( CExtRichStyleDescription::ewstNormal )
	, m_eBR( CExtRichStyleDescription::ebrNoRepeat )
	, m_eBA( CExtRichStyleDescription::ebaScroll )
	, m_eBPT( CExtRichStyleDescription::ebpt_unspecified )
	, m_eBCT( CExtRichStyleDescription::ebct_transparent )
	, m_eBPA( CExtRichStyleDescription::ebpa_unspecified )
	, m_eOS( CExtRichStyleDescription::eos_none )
	, m_eLSP( CExtRichStyleDescription::elsp_outside )
	, m_eLST( CExtRichStyleDescription::elst_disc )
	, m_eD( CExtRichStyleDescription::ed_inline )
	, m_eDock( CExtRichStyleDescription::e_ui_dock_unspecified )
	, m_eV( CExtRichStyleDescription::ev_visible )
	, m_eP( CExtRichStyleDescription::ep_static )
	, m_eO( CExtRichStyleDescription::eo_visible )
	, m_esbtH( CExtRichStyleDescription::esbt_auto )
	, m_esbtV( CExtRichStyleDescription::esbt_auto )
	, m_eF( CExtRichStyleDescription::ef_none )
	, m_eC( CExtRichStyleDescription::ec_auto )
	, m_eCI( CExtRichStyleDescription::eci_auto )
//	, m_eCS( CExtRichStyleDescription::ecs_none )
	, m_eZIT( CExtRichStyleDescription::ezi_auto )
//	, m_ePBB( CExtRichStyleDescription::epbba_auto )
//	, m_ePBA( CExtRichStyleDescription::epbba_auto )
	, m_eBC( CExtRichStyleDescription::ebc_separate )
	, m_eCST( CExtRichStyleDescription::ecst_top )
	, m_eEC( CExtRichStyleDescription::eec_show )
	, m_eTL( CExtRichStyleDescription::etl_auto )
	, m_eN( CExtRichStyleDescription::ent_noshade_unknown )
	, m_eUiListNavigation( CExtRichStyleDescription::e_ui_ln_unspecified )
	, m_eUiFocusEnsureVisibility( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eUiDelayedDraw( CExtRichStyleDescription::e_ui_dd_default )
	, m_eUiSBT( CExtRichStyleDescription::e_ui_sbt_default )
	, m_eUiDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_eUiBackgroundDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_nParaIndent( 0 )
	, m_rcPadding( 0, 0, 0, 0 )
	, m_rcBorder( 0, 0, 0, 0 )
	, m_rcMargin( 0, 0, 0, 0 )
	, m_rcCellPadding( 0, 0, 0, 0 )
	, m_rcClipImageShape( 0, 0, 0, 0 )
	, m_rcUiSlice( 0, 0, 0, 0 )
	, m_rcUiBackgroundSlice( 0, 0, 0, 0 )
	, m_rcUiBackgroundExtend( 0, 0, 0, 0 )
	, m_rcOuter( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_rcOuterP( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_sizeCellSpacing( 0, 0 )
	, m_sizeWH( -1, -1 )
	, m_sizeWHP( -1, -1 )
	, m_sizeSpan( 1, 1 )
	, m_ptBackgroundAlignment( -1, -1 )
	, m_clrText( COLORREF(-1L) )
	, m_clrBack( COLORREF(-1L) )
	, m_clrBorderLeft( RGB(0,0,0) )
	, m_clrBorderRight( RGB(0,0,0) )
	, m_clrBorderTop( RGB(0,0,0) )
	, m_clrBorderBottom( RGB(0,0,0) )
	, m_clrOutlineColor( COLORREF(-1L) )
	, m_ebsLeft( ebsUnknown )
	, m_ebsRight( ebsUnknown )
	, m_ebsTop( ebsUnknown )
	, m_ebsBottom( ebsUnknown )
	, m_nFirstNumberInList( 1 )
	, m_nUi_transparency( 255 )
	, m_nUi_background_transparency( 255 )
//	, m_strBackgroundImagePath( _T("") )
//	, m_strListStyleImagePath( _T("") )
//	, m_strCursorImagePath( _T("") )
//	, m_strContent( _T("") )
//	, m_strCounterIncrement( _T("") )
//	, m_strCounterReset( _T("") )
//	, m_nWordSapcing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nLetterSpacing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nZIndex( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nOutlineWidth( 0 )
	, m_nMaxHeight( -1 )
	, m_nMaxWidth( -1 )
	, m_nMinHeight( -1 )
	, m_nMinWidth( -1 )
	, m_nSpacerModeMinWidth( 0 )
	, m_nBorderSpacingHoriz( 0 )
	, m_nBorderSpacingVert( 0 )
	, m_lfMaxHeightP( -1 )
	, m_lfMaxWidthP( -1 )
	, m_lfMinHeightP( -1 )
	, m_lfMinWidthP( -1 )
//	, m_strContentBefore( _T("") )
//	, m_strContentAfter( _T("") )
	, m_bDtPrefixOnlyMode( false )
	, m_eynFocusOnMakeSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOnMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
{
	m_PCD.InitDefaultSupportedElementStates();
	Assign( other );
}

CExtRichStyleDescription::~CExtRichStyleDescription()
{
}

void CExtRichStyleDescription::stat_RotatePoint( INT nLO, POINT & _pt )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nLO == 0 || nLO == 90 || nLO == 180 || nLO == 270 );
POINT ptRotated;
	::memcpy( &ptRotated, &_pt, sizeof(POINT) );
	switch( nLO )
	{
	case 0:
	case 180:
	break;
	case 90:
	case 270:
		ptRotated.x = _pt.y;
		ptRotated.y = _pt.x;
	break;
	} // switch( nLO )
	::memcpy( &_pt, &ptRotated, sizeof(POINT) );
}

void CExtRichStyleDescription::stat_RotateSize( INT nLO, SIZE & _size )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nLO == 0 || nLO == 90 || nLO == 180 || nLO == 270 );
SIZE sizeRotated;
	::memcpy( &sizeRotated, &_size, sizeof(SIZE) );
	switch( nLO )
	{
	case 0:
	case 180:
	break;
	case 90:
	case 270:
		sizeRotated.cx = _size.cy;
		sizeRotated.cy = _size.cx;
	break;
	} // switch( nLO )
	::memcpy( &_size, &sizeRotated, sizeof(SIZE) );
}

void CExtRichStyleDescription::stat_RotateRect( INT nLO, RECT & rc )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nLO == 0 || nLO == 90 || nLO == 180 || nLO == 270 );
RECT rcRotated;
	::memcpy( &rcRotated, &rc, sizeof(RECT) );
	switch( nLO )
	{
	case 0:
	break;
	case 90:
		rcRotated.left   = rc.bottom;
		rcRotated.top    = rc.left;
		rcRotated.right  = rc.top;
		rcRotated.bottom = rc.right;
	break;
	case 180:
		rcRotated.left   = rc.right;
		rcRotated.top    = rc.bottom;
		rcRotated.right  = rc.left;
		rcRotated.bottom = rc.top;
	break;
	case 270:
		rcRotated.left   = rc.top;
		rcRotated.top    = rc.right;
		rcRotated.right  = rc.bottom;
		rcRotated.bottom = rc.left;
	break;
	} // switch( nLO )
	::memcpy( &rc, &rcRotated, sizeof(RECT) );
}

void CExtRichStyleDescription::stat_RotateBPA( INT nLO, CExtRichStyleDescription::e_background_postion_alignment_t & eBPA )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nLO == 0 || nLO == 90 || nLO == 180 || nLO == 270 );
	if( nLO == 0 || eBPA == ebpa_unspecified )
		return;
INT eHorzBPA = INT( INT(eBPA) & INT( ebpa_part_mask << ebpa_impl_horz_shift ) );
INT eVertBPA = INT( INT(eBPA) & INT( ebpa_part_mask << ebpa_impl_vert_shift ) );
	__EXT_DEBUG_RICH_CONTENT_ASSERT(
			eHorzBPA == INT(ebpa_unspecified)
		||	eHorzBPA == INT(ebpa_impl_horz_left)
		||	eHorzBPA == INT(ebpa_impl_horz_center)
		||	eHorzBPA == INT(ebpa_impl_horz_right)
		);
	__EXT_DEBUG_RICH_CONTENT_ASSERT(
			eVertBPA == INT(ebpa_unspecified)
		||	eVertBPA == INT(ebpa_impl_vert_top)
		||	eVertBPA == INT(ebpa_impl_vert_center)
		||	eVertBPA == INT(ebpa_impl_vert_bottom)
		);
INT eRotatedHorzBPA = INT(ebpa_unspecified), eRotatedVertBPA = INT(ebpa_unspecified);
	switch( nLO )
	{
	case 90:
		switch( eHorzBPA )
		{
		case INT(ebpa_impl_horz_left):		eRotatedVertBPA = INT(ebpa_impl_vert_top);		break;
		case INT(ebpa_impl_horz_center):	eRotatedVertBPA = INT(ebpa_impl_vert_center);	break;
		case INT(ebpa_impl_horz_right):		eRotatedVertBPA = INT(ebpa_impl_vert_bottom);	break;
		}
		switch( eVertBPA )
		{
		case INT(ebpa_impl_vert_top):		eRotatedHorzBPA = INT(ebpa_impl_horz_right);	break;
		case INT(ebpa_impl_vert_center):	eRotatedHorzBPA = INT(ebpa_impl_horz_center);	break;
		case INT(ebpa_impl_vert_bottom):	eRotatedHorzBPA = INT(ebpa_impl_horz_left);		break;
		}
	break;
	case 180:
		switch( eHorzBPA )
		{
		case INT(ebpa_impl_horz_left):		eRotatedHorzBPA = INT(ebpa_impl_horz_right);	break;
		case INT(ebpa_impl_horz_center):	eRotatedHorzBPA = INT(ebpa_impl_horz_center);	break;
		case INT(ebpa_impl_horz_right):		eRotatedHorzBPA = INT(ebpa_impl_horz_left);		break;
		}
		switch( eVertBPA )
		{
		case INT(ebpa_impl_vert_top):		eRotatedVertBPA = INT(ebpa_impl_vert_bottom);	break;
		case INT(ebpa_impl_vert_center):	eRotatedVertBPA = INT(ebpa_impl_vert_center);	break;
		case INT(ebpa_impl_vert_bottom):	eRotatedVertBPA = INT(ebpa_impl_vert_top);		break;
		}
	break;
	case 270:
		switch( eHorzBPA )
		{
		case INT(ebpa_impl_horz_left):		eRotatedVertBPA = INT(ebpa_impl_vert_bottom);	break;
		case INT(ebpa_impl_horz_center):	eRotatedVertBPA = INT(ebpa_impl_vert_center);	break;
		case INT(ebpa_impl_horz_right):		eRotatedVertBPA = INT(ebpa_impl_vert_top);		break;
		}
		switch( eVertBPA )
		{
		case INT(ebpa_impl_vert_top):		eRotatedHorzBPA = INT(ebpa_impl_horz_left);		break;
		case INT(ebpa_impl_vert_center):	eRotatedHorzBPA = INT(ebpa_impl_horz_center);	break;
		case INT(ebpa_impl_vert_bottom):	eRotatedHorzBPA = INT(ebpa_impl_horz_right);	break;
		}
	break;
	} // switch( nLO )
	__EXT_DEBUG_RICH_CONTENT_ASSERT(
			eRotatedHorzBPA == INT(ebpa_unspecified)
		||	eRotatedHorzBPA == INT(ebpa_impl_horz_left)
		||	eRotatedHorzBPA == INT(ebpa_impl_horz_center)
		||	eRotatedHorzBPA == INT(ebpa_impl_horz_right)
		);
	__EXT_DEBUG_RICH_CONTENT_ASSERT(
			eRotatedVertBPA == INT(ebpa_unspecified)
		||	eRotatedVertBPA == INT(ebpa_impl_vert_top)
		||	eRotatedVertBPA == INT(ebpa_impl_vert_center)
		||	eRotatedVertBPA == INT(ebpa_impl_vert_bottom)
		);
	eBPA = (e_background_postion_alignment_t) ( eRotatedHorzBPA | eRotatedVertBPA );
}

void CExtRichStyleDescription::stat_RotateBR( INT nLO, CExtRichStyleDescription::e_background_repeat_t & eBR )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nLO == 0 || nLO == 90 || nLO == 180 || nLO == 270 );
	if( nLO == 0 || nLO == 180 )
		return;
	if( ! ( eBR == ebrRepeatX || eBR == ebrRepeatY ) )
		return;
	eBR = ( eBR == ebrRepeatX ) ? ebrRepeatY : ebrRepeatX;
}

void CExtRichStyleDescription::stat_RotateDwordArray( INT nLO, DWORD * pDwArr )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nLO == 0 || nLO == 90 || nLO == 180 || nLO == 270 );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pDwArr != NULL );
	if( nLO == 0 )
		return;
DWORD arrDwRotated[4] = { pDwArr[0], pDwArr[1], pDwArr[2], pDwArr[3] };
	switch( nLO )
	{
	case 90:
		arrDwRotated[0] = pDwArr[3]; // target left
		arrDwRotated[1] = pDwArr[0]; // target top
		arrDwRotated[2] = pDwArr[1]; // target right
		arrDwRotated[3] = pDwArr[2]; // target bottom
	break;
	case 180:
		arrDwRotated[0] = pDwArr[2]; // target left
		arrDwRotated[1] = pDwArr[3]; // target top
		arrDwRotated[2] = pDwArr[0]; // target right
		arrDwRotated[3] = pDwArr[1]; // target bottom
	break;
	case 270:
		arrDwRotated[0] = pDwArr[1]; // target left
		arrDwRotated[1] = pDwArr[2]; // target top
		arrDwRotated[2] = pDwArr[3]; // target right
		arrDwRotated[3] = pDwArr[0]; // target bottom
	break;
	} // switch( nLO )
	pDwArr[0] = arrDwRotated[0];
	pDwArr[1] = arrDwRotated[1];
	pDwArr[2] = arrDwRotated[2];
	pDwArr[3] = arrDwRotated[3];
}

void CExtRichStyleDescription::RotateStyleOptions( INT nLO )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nLO == 0 || nLO == 90 || nLO == 180 || nLO == 270 );
	stat_RotateRect( nLO, m_rcPadding );
	stat_RotateRect( nLO, m_rcBorder );
	stat_RotateRect( nLO, m_rcMargin );
	stat_RotateRect( nLO, m_rcCellPadding );
	stat_RotateRect( nLO, m_rcClipImageShape );
	stat_RotateRect( nLO, m_rcUiSlice );
	stat_RotateRect( nLO, m_rcUiBackgroundSlice );
	stat_RotateRect( nLO, m_rcUiBackgroundExtend );
	stat_RotatePoint( nLO, m_ptBackgroundAlignment );
//	stat_RotateSize( nLO, m_sizeCellSpacing );
//	stat_RotateSize( nLO, m_sizeWH );
//	stat_RotateSize( nLO, m_sizeWHP );
//	stat_RotateSize( nLO, m_sizeSpan );
	stat_RotateRect( nLO, m_rcOuter );
	stat_RotateRect( nLO, m_rcOuterP );
	stat_RotateBPA( nLO, m_eBPA );
	stat_RotateBR( nLO, m_eBR );

DWORD dwArrColors[4] = { DWORD(m_clrBorderLeft), DWORD(m_clrBorderTop), DWORD(m_clrBorderRight), DWORD(m_clrBorderBottom) };
	stat_RotateDwordArray( nLO, dwArrColors );
	m_clrBorderLeft   = (COLORREF)(dwArrColors[0]);
	m_clrBorderTop    = (COLORREF)(dwArrColors[1]);
	m_clrBorderRight  = (COLORREF)(dwArrColors[2]);
	m_clrBorderBottom = (COLORREF)(dwArrColors[3]);

DWORD dwArrEBS[4] = { DWORD(m_ebsLeft), DWORD(m_ebsTop), DWORD(m_ebsRight), DWORD(m_ebsBottom) };
	stat_RotateDwordArray( nLO, dwArrEBS );
	m_ebsLeft   = (e_border_style_t)(dwArrEBS[0]);
	m_ebsTop    = (e_border_style_t)(dwArrEBS[1]);
	m_ebsRight  = (e_border_style_t)(dwArrEBS[2]);
	m_ebsBottom = (e_border_style_t)(dwArrEBS[3]);
}

CExtRichStyleDescription::e_display_t CExtRichStyleDescription::GetDisplay( const CExtRichContentItem & _RCI ) const
{
	if( m_eD != ed_inherit )
		return m_eD;
	if( _RCI.m_pParent != NULL )
		return GetDisplay( *_RCI.m_pParent );
	return ed_inline;
}

CExtRichStyleDescription::e_visibility_t CExtRichStyleDescription::GetVisibility( const CExtRichContentItem & _RCI ) const
{
	if( m_eV != ev_inherit )
		return m_eV;
	if( _RCI.m_pParent != NULL )
		return GetVisibility( *_RCI.m_pParent );
	return ev_visible;
}

bool CExtRichStyleDescription::IsParticipantOfLayout( const CExtRichContentItem & _RCI ) const
{
	if( INT(_RCI.m_eType) >= INT(CExtRichContentItem::__EHIT_SPEC_START) )
		return false;
	if( GetDisplay( _RCI ) == ed_none )
		return false;
	return true;
}

bool CExtRichStyleDescription::IsParticipantOfPaint( const CExtRichContentItem & _RCI ) const
{
	if( ! IsParticipantOfLayout( _RCI ) )
		return false;
	if( GetVisibility( _RCI ) != ev_visible )
		return false;
	return true;
}

int CExtRichStyleDescription::Compare( const CExtRichStyleDescription & other ) const
{
int nRetVal = m_fd.Compare( other.m_fd );
	if( nRetVal != 0 )
		return nRetVal;
	if( LONG(m_eaH) < LONG(other.m_eaH) )
		return -1;
	if( LONG(m_eaH) > LONG(other.m_eaH) )
		return 1;
	if( LONG(m_eaV) < LONG(other.m_eaV) )
		return -1;
	if( LONG(m_eaV) > LONG(other.m_eaV) )
		return 1;
	if( LONG(m_etT) < LONG(other.m_etT) )
		return -1;
	if( LONG(m_etT) > LONG(other.m_etT) )
		return 1;
	if( LONG(m_eWST) < LONG(other.m_eWST) )
		return -1;
	if( LONG(m_eWST) > LONG(other.m_eWST) )
		return 1;
	if( LONG(m_eBR) < LONG(other.m_eBR) )
		return -1;
	if( LONG(m_eBR) > LONG(other.m_eBR) )
		return 1;
	if( LONG(m_eBA) < LONG(other.m_eBA) )
		return -1;
	if( LONG(m_eBA) > LONG(other.m_eBA) )
		return 1;
	if( LONG(m_eBPT) < LONG(other.m_eBPT) )
		return -1;
	if( LONG(m_eBPT) > LONG(other.m_eBPT) )
		return 1;
	if( LONG(m_eBCT) < LONG(other.m_eBCT) )
		return -1;
	if( LONG(m_eBCT) > LONG(other.m_eBCT) )
		return 1;
	if( LONG(m_eBPA) < LONG(other.m_eBPA) )
		return -1;
	if( LONG(m_eBPA) > LONG(other.m_eBPA) )
		return 1;
	if( LONG(m_eOS) < LONG(other.m_eOS) )
		return -1;
	if( LONG(m_eOS) > LONG(other.m_eOS) )
		return 1;
	if( LONG(m_eLSP) < LONG(other.m_eLSP) )
		return -1;
	if( LONG(m_eLSP) > LONG(other.m_eLSP) )
		return 1;
	if( LONG(m_eLST) < LONG(other.m_eLST) )
		return -1;
	if( LONG(m_eLST) > LONG(other.m_eLST) )
		return 1;
	if( LONG(m_eD) < LONG(other.m_eD) )
		return -1;
	if( LONG(m_eD) > LONG(other.m_eD) )
		return 1;
	if( LONG(m_eDock) < LONG(other.m_eDock) )
		return -1;
	if( LONG(m_eDock) > LONG(other.m_eDock) )
		return 1;
	if( LONG(m_eV) < LONG(other.m_eV) )
		return -1;
	if( LONG(m_eV) > LONG(other.m_eV) )
		return 1;
	if( LONG(m_eP) < LONG(other.m_eP) )
		return -1;
	if( LONG(m_eP) > LONG(other.m_eP) )
		return 1;
	if( LONG(m_eO) < LONG(other.m_eO) )
		return -1;
	if( LONG(m_eO) > LONG(other.m_eO) )
		return 1;
	if( LONG(m_esbtH) < LONG(other.m_esbtH) )
		return -1;
	if( LONG(m_esbtH) > LONG(other.m_esbtH) )
		return 1;
	if( LONG(m_esbtV) < LONG(other.m_esbtV) )
		return -1;
	if( LONG(m_esbtV) > LONG(other.m_esbtV) )
		return 1;
	if( LONG(m_eF) < LONG(other.m_eF) )
		return -1;
	if( LONG(m_eF) > LONG(other.m_eF) )
		return 1;
	if( LONG(m_eC) < LONG(other.m_eC) )
		return -1;
	if( LONG(m_eC) > LONG(other.m_eC) )
		return 1;
	if( LONG(m_eCI) < LONG(other.m_eCI) )
		return -1;
	if( LONG(m_eCI) > LONG(other.m_eCI) )
		return 1;
//	if( LONG(m_eCS) < LONG(other.m_eCS) )
//		return -1;
//	if( LONG(m_eCS) > LONG(other.m_eCS) )
//		return 1;
	if( LONG(m_eZIT) < LONG(other.m_eZIT) )
		return -1;
	if( LONG(m_eZIT) > LONG(other.m_eZIT) )
		return 1;
//	if( LONG(m_ePBB) < LONG(other.m_ePBB) )
//		return -1;
//	if( LONG(m_ePBB) > LONG(other.m_ePBB) )
//		return 1;
//	if( LONG(m_ePBA) < LONG(other.m_ePBA) )
//		return -1;
//	if( LONG(m_ePBA) > LONG(other.m_ePBA) )
//		return 1;
	if( LONG(m_eBC) < LONG(other.m_eBC) )
		return -1;
	if( LONG(m_eBC) > LONG(other.m_eBC) )
		return 1;
	if( LONG(m_eCST) < LONG(other.m_eCST) )
		return -1;
	if( LONG(m_eCST) > LONG(other.m_eCST) )
		return 1;
	if( LONG(m_eEC) < LONG(other.m_eEC) )
		return -1;
	if( LONG(m_eEC) > LONG(other.m_eEC) )
		return 1;
	if( LONG(m_eTL) < LONG(other.m_eTL) )
		return -1;
	if( LONG(m_eTL) > LONG(other.m_eTL) )
		return 1;
	if( LONG(m_eN) < LONG(other.m_eN) )
		return -1;
	if( LONG(m_eN) > LONG(other.m_eN) )
		return 1;
	if( LONG(m_eUiListNavigation) < LONG(other.m_eUiListNavigation) )
		return -1;
	if( LONG(m_eUiListNavigation) > LONG(other.m_eUiListNavigation) )
		return 1;
	if( LONG(m_eUiFocusEnsureVisibility) < LONG(other.m_eUiFocusEnsureVisibility) )
		return -1;
	if( LONG(m_eUiFocusEnsureVisibility) > LONG(other.m_eUiFocusEnsureVisibility) )
		return 1;
	if( LONG(m_eUiDelayedDraw) < LONG(other.m_eUiDelayedDraw) )
		return -1;
	if( LONG(m_eUiDelayedDraw) > LONG(other.m_eUiDelayedDraw) )
		return 1;

	if( LONG(m_eUiSBT) < LONG(other.m_eUiSBT) )
		return -1;
	if( LONG(m_eUiSBT) > LONG(other.m_eUiSBT) )
		return 1;

	if( LONG(m_eUiDrawMethod) < LONG(other.m_eUiDrawMethod) )
		return -1;
	if( LONG(m_eUiDrawMethod) > LONG(other.m_eUiDrawMethod) )
		return 1;
	if( LONG(m_eUiBackgroundDrawMethod) < LONG(other.m_eUiBackgroundDrawMethod) )
		return -1;
	if( LONG(m_eUiBackgroundDrawMethod) > LONG(other.m_eUiBackgroundDrawMethod) )
		return 1;
	if( m_nParaIndent < other.m_nParaIndent )
		return -1;
	if( m_nParaIndent > other.m_nParaIndent )
		return 1;
	nRetVal = stat_impl_CompareRectLEG( m_rcPadding, other.m_rcPadding );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcBorder, other.m_rcBorder );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcMargin, other.m_rcMargin );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcCellPadding, other.m_rcCellPadding );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcClipImageShape, other.m_rcClipImageShape );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcUiSlice, other.m_rcUiSlice );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcUiBackgroundSlice, other.m_rcUiBackgroundSlice );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcUiBackgroundExtend, other.m_rcUiBackgroundExtend );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcOuter, other.m_rcOuter );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareRectLEG( m_rcOuterP, other.m_rcOuterP );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareSizeLEG( m_sizeCellSpacing, other.m_sizeCellSpacing );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareSizeLEG( m_sizeWH, other.m_sizeWH );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareSizeLEG( m_sizeWHP, other.m_sizeWHP );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_CompareSizeLEG( m_sizeSpan, other.m_sizeSpan );
	if( nRetVal != 0 )
		return nRetVal;
//	nRetVal = stat_impl_CompareStringArrayLEG( m_arrFontNames, other.m_arrFontNames );
//	if( nRetVal != 0 )
//		return nRetVal;

	nRetVal = stat_impl_CompareStringListLEG( m_listQuotes, other.m_listQuotes );
	if( nRetVal != 0 )
		return nRetVal;
	
	nRetVal = stat_impl_ComparePointLEG( m_ptBackgroundAlignment, other.m_ptBackgroundAlignment );
	if( nRetVal != 0 )
		return nRetVal;

	if( m_clrText < other.m_clrText )
		return -1;
	if( m_clrText > other.m_clrText )
		return 1;
	if( m_clrBack < other.m_clrBack )
		return -1;
	if( m_clrBack > other.m_clrBack )
		return 1;

	if( m_clrBorderLeft < other.m_clrBorderLeft )
		return -1;
	if( m_clrBorderLeft > other.m_clrBorderLeft )
		return 1;
	if( m_clrBorderRight < other.m_clrBorderRight )
		return -1;
	if( m_clrBorderRight > other.m_clrBorderRight )
		return 1;
	if( m_clrBorderTop < other.m_clrBorderTop )
		return -1;
	if( m_clrBorderTop > other.m_clrBorderTop )
		return 1;
	if( m_clrBorderBottom < other.m_clrBorderBottom )
		return -1;
	if( m_clrBorderBottom > other.m_clrBorderBottom )
		return 1;

	if( m_clrOutlineColor < other.m_clrOutlineColor )
		return -1;
	if( m_clrOutlineColor > other.m_clrOutlineColor )
		return 1;

	if( LONG(m_ebsLeft) < LONG(other.m_ebsLeft) )
		return -1;
	if( LONG(m_ebsLeft) > LONG(other.m_ebsLeft) )
		return 1;
	if( LONG(m_ebsRight) < LONG(other.m_ebsRight) )
		return -1;
	if( LONG(m_ebsRight) > LONG(other.m_ebsRight) )
		return 1;
	if( LONG(m_ebsTop) < LONG(other.m_ebsTop) )
		return -1;
	if( LONG(m_ebsTop) > LONG(other.m_ebsTop) )
		return 1;
	if( LONG(m_ebsBottom) < LONG(other.m_ebsBottom) )
		return -1;
	if( LONG(m_ebsBottom) > LONG(other.m_ebsBottom) )
		return 1;

	if( m_nFirstNumberInList < other.m_nFirstNumberInList )
		return -1;
	if( m_nFirstNumberInList > other.m_nFirstNumberInList )
		return 1;

	if( m_nUi_transparency < other.m_nUi_transparency )
		return -1;
	if( m_nUi_transparency > other.m_nUi_transparency )
		return 1;
	if( m_nUi_background_transparency < other.m_nUi_background_transparency )
		return -1;
	if( m_nUi_background_transparency > other.m_nUi_background_transparency )
		return 1;

	if( m_strBackgroundImagePath < other.m_strBackgroundImagePath )
		return -1;
	if( m_strBackgroundImagePath > other.m_strBackgroundImagePath )
		return 1;

	if( m_strListStyleImagePath < other.m_strListStyleImagePath )
		return -1;
	if( m_strListStyleImagePath > other.m_strListStyleImagePath )
		return 1;

	if( m_strCursorImagePath < other.m_strCursorImagePath )
		return -1;
	if( m_strCursorImagePath > other.m_strCursorImagePath )
		return 1;

	if( m_strContent < other.m_strContent )
		return -1;
	if( m_strContent > other.m_strContent )
		return 1;

	if( m_strContentBefore < other.m_strContentBefore )
		return -1;
	if( m_strContentBefore > other.m_strContentBefore )
		return 1;

	if( m_strContentAfter < other.m_strContentAfter )
		return -1;
	if( m_strContentAfter > other.m_strContentAfter )
		return 1;

	if( m_strCounterIncrement < other.m_strCounterIncrement )
		return -1;
	if( m_strCounterIncrement > other.m_strCounterIncrement )
		return 1;
//	if( m_strCounterReset < other.m_strCounterReset )
//		return -1;
//	if( m_strCounterReset > other.m_strCounterReset )
//		return 1;

	if( m_nWordSapcing < other.m_nWordSapcing )
		return -1;
	if( m_nWordSapcing > other.m_nWordSapcing )
		return 1;
	if( m_nLetterSpacing < other.m_nLetterSpacing )
		return -1;
	if( m_nLetterSpacing > other.m_nLetterSpacing )
		return 1;

	if( m_nZIndex < other.m_nZIndex )
		return -1;
	if( m_nZIndex > other.m_nZIndex )
		return 1;

	if( m_nOutlineWidth < other.m_nOutlineWidth )
		return -1;
	if( m_nOutlineWidth > other.m_nOutlineWidth )
		return 1;

	if( m_nMaxHeight < other.m_nMaxHeight )
		return -1;
	if( m_nMaxHeight > other.m_nMaxHeight )
		return 1;
	if( m_nMaxWidth < other.m_nMaxWidth )
		return -1;
	if( m_nMaxWidth > other.m_nMaxWidth )
		return 1;
	if( m_nMinHeight < other.m_nMinHeight )
		return -1;
	if( m_nMinHeight > other.m_nMinHeight )
		return 1;
	if( m_nMinWidth < other.m_nMinWidth )
		return -1;
	if( m_nMinWidth > other.m_nMinWidth )
		return 1;
	if( m_nSpacerModeMinWidth < other.m_nSpacerModeMinWidth )
		return -1;
	if( m_nSpacerModeMinWidth > other.m_nSpacerModeMinWidth )
		return 1;

	if( m_nBorderSpacingHoriz < other.m_nBorderSpacingHoriz )
		return -1;
	if( m_nBorderSpacingHoriz > other.m_nBorderSpacingHoriz )
		return 1;
	if( m_nBorderSpacingVert < other.m_nBorderSpacingVert )
		return -1;
	if( m_nBorderSpacingVert > other.m_nBorderSpacingVert )
		return 1;

	if( m_lfMaxHeightP < other.m_lfMaxHeightP )
		return -1;
	if( m_lfMaxHeightP > other.m_lfMaxHeightP )
		return 1;
	if( m_lfMaxWidthP < other.m_lfMaxWidthP )
		return -1;
	if( m_lfMaxWidthP > other.m_lfMaxWidthP )
		return 1;
	if( m_lfMinHeightP < other.m_lfMinHeightP )
		return -1;
	if( m_lfMinHeightP > other.m_lfMinHeightP )
		return 1;
	if( m_lfMinWidthP < other.m_lfMinWidthP )
		return -1;
	if( m_lfMinWidthP > other.m_lfMinWidthP )
		return 1;

//	nRetVal = m_PCD.Compare( other.m_PCD );
//	if( nRetVal != 0 )
//		return nRetVal;

	nRetVal = stat_impl_cmp_YN( m_eynFocusOnMakeSelected, other.m_eynFocusOnMakeSelected );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynFocusOnMakeUnSelectedSibling, other.m_eynFocusOnMakeUnSelectedSibling );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynFocusOffMakeUnSelected, other.m_eynFocusOffMakeUnSelected );
	if( nRetVal != 0 )
		return nRetVal;
	nRetVal = stat_impl_cmp_YN( m_eynFocusOffMakeUnSelectedSibling, other.m_eynFocusOffMakeUnSelectedSibling );
	if( nRetVal != 0 )
		return nRetVal;

	return 0;
}

void CExtRichStyleDescription::Assign( const CExtRichStyleDescription & other )
{
	if( LPVOID(this) == LPVOID(&other) )
		return;
	m_fd = other.m_fd;
	m_eaH = other.m_eaH;
	m_eaV = other.m_eaV;
	m_etT = other.m_etT;
	m_eWST = other.m_eWST;
	m_eBR = other.m_eBR;
	m_eBA = other.m_eBA;
	m_eBPT = other.m_eBPT;
	m_eBCT = other.m_eBCT;
	m_eBPA = other.m_eBPA;
	m_eOS = other.m_eOS;
	m_eLSP = other.m_eLSP;
	m_eLST = other.m_eLST;
	m_eD = other.m_eD;
	m_eDock = other.m_eDock;
	m_eV = other.m_eV;
	m_eP = other.m_eP;
	m_eO = other.m_eO;
	m_esbtH = other.m_esbtH;
	m_esbtV = other.m_esbtV;
	m_eF = other.m_eF;
	m_eC = other.m_eC;
	m_eCI = other.m_eCI;
//	m_eCS = other.m_eCS;
	m_eZIT = other.m_eZIT;
//	m_ePBB = other.m_ePBB;
//	m_ePBA = other.m_ePBA;
	m_eBC = other.m_eBC;
	m_eCST = other.m_eCST;
	m_eEC = other.m_eEC;
	m_eTL = other.m_eTL;
	m_eN = other.m_eN;
	m_eUiListNavigation = other.m_eUiListNavigation;
	m_eUiFocusEnsureVisibility = other.m_eUiFocusEnsureVisibility;
	m_eUiDelayedDraw = other.m_eUiDelayedDraw;
	m_eUiSBT = other.m_eUiSBT;
	m_eUiDrawMethod = other.m_eUiDrawMethod;
	m_eUiBackgroundDrawMethod = other.m_eUiBackgroundDrawMethod;
	m_nParaIndent = other.m_nParaIndent;
	m_rcPadding = other.m_rcPadding;
	m_rcBorder = other.m_rcBorder;
	m_rcMargin = other.m_rcMargin;
	m_rcCellPadding = other.m_rcCellPadding;
	m_rcClipImageShape = other.m_rcClipImageShape;
	m_rcUiBackgroundSlice = other.m_rcUiBackgroundSlice;
	m_rcUiBackgroundExtend = other.m_rcUiBackgroundExtend;
	m_rcUiSlice = other.m_rcUiSlice;
	m_rcOuter = other.m_rcOuter;
	m_rcOuterP = other.m_rcOuterP;
	m_sizeCellSpacing = other.m_sizeCellSpacing;
	m_sizeWH = other.m_sizeWH;
	m_sizeWHP = other.m_sizeWHP;
	m_sizeSpan = other.m_sizeSpan;
	m_ptBackgroundAlignment = other.m_ptBackgroundAlignment;
	m_clrText = other.m_clrText;
	m_clrBack = other.m_clrBack;
	m_clrBorderLeft = other.m_clrBorderLeft;
	m_clrBorderRight = other.m_clrBorderRight;
	m_clrBorderBottom = other.m_clrBorderBottom;
	m_clrOutlineColor = other.m_clrOutlineColor;
	m_clrBorderTop = other.m_clrBorderTop;
	m_ebsLeft = other.m_ebsLeft;
	m_ebsRight = other.m_ebsRight;
	m_ebsTop = other.m_ebsTop;
	m_ebsBottom = other.m_ebsBottom;
	m_nFirstNumberInList = other.m_nFirstNumberInList;
	m_nUi_transparency = other.m_nUi_transparency;
	m_nUi_background_transparency = other.m_nUi_background_transparency;
	m_strBackgroundImagePath = other.m_strBackgroundImagePath;
	m_strListStyleImagePath = other.m_strListStyleImagePath;
	m_strCursorImagePath = other.m_strCursorImagePath;
	m_strContent = other.m_strContent;
	m_strContentBefore = other.m_strContentBefore;
	m_strContentAfter = other.m_strContentAfter;
//	m_strCounterIncrement = other.m_strCounterIncrement;
//	m_strCounterReset = other.m_strCounterReset;
	m_nWordSapcing = other.m_nWordSapcing;
	m_nLetterSpacing = other.m_nLetterSpacing;
	m_nOutlineWidth = other.m_nOutlineWidth;
	m_nMaxHeight = other.m_nMaxHeight;
	m_nMaxWidth = other.m_nMaxWidth;
	m_nMinHeight = other.m_nMinHeight;
	m_nMinWidth	= other.m_nMinWidth;
	m_nSpacerModeMinWidth = other.m_nSpacerModeMinWidth;
	m_nBorderSpacingHoriz = other.m_nBorderSpacingHoriz;
	m_nBorderSpacingVert = other.m_nBorderSpacingVert;
	m_lfMaxHeightP = other.m_lfMaxHeightP;
	m_lfMaxWidthP = other.m_lfMaxWidthP;
	m_lfMinHeightP = other.m_lfMinHeightP;
	m_lfMinWidthP = other.m_lfMinWidthP;
//	m_arrFontNames.RemoveAll();
//	m_arrFontNames.Copy( other.m_arrFontNames );
	m_listQuotes.RemoveAll();
	m_listQuotes.AddTail( ( CList < CQuoutes, CQuoutes > * ) &other.m_listQuotes );
	m_nZIndex = other.m_nZIndex;
//	m_bDtPrefixOnlyMode = other.m_bDtPrefixOnlyMode;
	m_PCD = other.m_PCD;
	m_eynFocusOnMakeSelected = other.m_eynFocusOnMakeSelected;
	m_eynFocusOnMakeUnSelectedSibling = other.m_eynFocusOnMakeUnSelectedSibling;
	m_eynFocusOnMakeUnSelectedSibling = other.m_eynFocusOnMakeUnSelectedSibling;
	m_eynFocusOffMakeUnSelected = other.m_eynFocusOffMakeUnSelected;
	m_eynFocusOffMakeUnSelectedSibling = other.m_eynFocusOffMakeUnSelectedSibling;
}

void CExtRichStyleDescription::Empty()
{
	m_eaH = eahDefault;
	m_eaV = eavDefault;
	m_etT = ettNone;
	m_eWST = ewstNormal;
	m_eBR = ebrNoRepeat;
	m_eBA = ebaScroll;
	m_eBPT = ebpt_unspecified;
	m_eBCT = ebct_transparent;
	m_eBPA = ebpa_unspecified;
	m_eOS = eos_none;
	m_eLSP = elsp_outside;
	m_eLST = elst_disc;
	m_eD = ed_inline;
	m_eDock = e_ui_dock_unspecified;
	m_eV = ev_visible;
	m_eP = ep_static;
	m_eO = eo_visible;
	m_esbtH = esbt_auto;
	m_esbtV = esbt_auto;
	m_eF = ef_none;
	m_eC = ec_auto;
	m_eCI = eci_auto;
//	m_eCS = ecs_none;
	m_eZIT = ezi_auto;
//	m_ePBB = epbba_auto;
//	m_ePBA = epbba_auto;
	m_eBC = ebc_separate;
	m_eCST = ecst_top;
	m_eEC = eec_show;
	m_eTL = etl_auto;
	m_eN = ent_noshade_unknown;
	m_eUiListNavigation = e_ui_ln_unspecified;
	m_eUiFocusEnsureVisibility = e_ui_yn_unspecified;
	m_eUiDelayedDraw = e_ui_dd_default;
	m_eUiSBT = e_ui_sbt_default;
	m_eUiDrawMethod = e_ui_dm_unspecified;
	m_eUiBackgroundDrawMethod = e_ui_dm_unspecified;
	m_nParaIndent = 0;
	m_rcPadding.SetRect( 0, 0, 0, 0 );
	m_rcBorder.SetRect( 0, 0, 0, 0 );
	m_rcMargin.SetRect( 0, 0, 0, 0 );
	m_rcCellPadding.SetRect( 0, 0, 0, 0 );
	m_rcClipImageShape.SetRect( 0, 0, 0, 0 );
	m_rcUiSlice.SetRect( 0, 0, 0, 0 );
	m_rcUiBackgroundSlice.SetRect( 0, 0, 0, 0 );
	m_rcUiBackgroundExtend.SetRect( 0, 0, 0, 0 );
	m_rcOuter.SetRect( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED );
	m_rcOuterP.SetRect( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED );
	m_sizeCellSpacing = 00;
	m_sizeWH.cx = m_sizeWH.cy = -1;
	m_sizeWHP.cx = m_sizeWHP.cy = -1;
	m_sizeSpan.cx = m_sizeSpan.cy = 1;
	m_ptBackgroundAlignment.x = m_ptBackgroundAlignment.y = 0;
	m_clrText = COLORREF(-1L);
	m_clrBack = COLORREF(-1L);
	m_clrBorderLeft = RGB(0,0,0);
	m_clrBorderRight = RGB(0,0,0);
	m_clrBorderTop = RGB(0,0,0);
	m_clrBorderBottom = RGB(0,0,0);
	m_clrOutlineColor = COLORREF(-1L);
	m_ebsLeft = ebsUnknown;
	m_ebsRight = ebsUnknown;
	m_ebsTop = ebsUnknown;
	m_ebsBottom = ebsUnknown;
	m_nFirstNumberInList = 1;
	m_nUi_transparency = 255;
	m_nUi_background_transparency = 255;
	m_strBackgroundImagePath.Empty();
	m_strListStyleImagePath.Empty();
	m_strCursorImagePath.Empty();
	m_strContent.Empty();
//	m_strCounterIncrement.Empty();
//	m_strCounterReset.Empty();
	m_nWordSapcing = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
	m_nLetterSpacing = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
	m_nZIndex = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
	m_nOutlineWidth = 0;
	m_nMaxHeight = -1;
	m_nMaxWidth = -1;
	m_nMinHeight = -1;
	m_nMinWidth = -1;
	m_nSpacerModeMinWidth = 0;
	m_nBorderSpacingHoriz = 0;
	m_nBorderSpacingVert = 0;
	m_lfMaxHeightP = -1;
	m_lfMaxWidthP = -1;
	m_lfMinHeightP = -1;
	m_lfMinWidthP = -1;
	m_strContentBefore.Empty();
	m_strContentAfter.Empty();
	m_bDtPrefixOnlyMode = false;
	m_eynFocusOnMakeSelected = e_ui_yn_unspecified;
	m_eynFocusOnMakeUnSelectedSibling = e_ui_yn_unspecified;
	m_eynFocusOffMakeUnSelected = e_ui_yn_unspecified;
	m_eynFocusOffMakeUnSelectedSibling = e_ui_yn_unspecified;
	m_PCD.InitDefaultSupportedElementStates();
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichStyleRule

CExtRichStyleRule::CExtRichStyleRule()
	: m_nFontWeightAbs( 0 )
	, m_nFontWeightRel( 0 )
	, m_nItalic( 0 )
	, m_nUnderline( 0 )
	, m_nStrikeOut( 0 )
	, m_nFontSizeAbs( 0 )
	, m_nFontSizeRel( 0 )
	, m_lfFontSizePercentRel( 1.0 )
	, m_nLineSpacingPX( -1 )
	, m_lfLineSpacingPercent( 1.0 )
	, m_eaH( CExtRichStyleDescription::eahUnknownChanging )
	, m_eaV( CExtRichStyleDescription::eavUnknownChanging )
	, m_etT( CExtRichStyleDescription::ettNone )
	, m_eWST( CExtRichStyleDescription::ewstInherit )
	, m_eBR( CExtRichStyleDescription::ebrNoRepeat )
	, m_eBA( CExtRichStyleDescription::ebaScroll )
	, m_eBPT( CExtRichStyleDescription::ebpt_unspecified )
	, m_eBCT( CExtRichStyleDescription::ebct_transparent )
	, m_eBPA( CExtRichStyleDescription::ebpa_unspecified )
	, m_eOS( CExtRichStyleDescription::eos_none )
	, m_eLSP( CExtRichStyleDescription::elsp_outside )
	, m_eLST( CExtRichStyleDescription::elst_unspecified ) // elst_disc
	, m_eD( CExtRichStyleDescription::ed_inline )
	, m_eDock( CExtRichStyleDescription::e_ui_dock_unspecified )
	, m_eV( CExtRichStyleDescription::ev_visible )
	, m_eP( CExtRichStyleDescription::ep_static )
	, m_eO( CExtRichStyleDescription::eo_visible )
	, m_esbtH( CExtRichStyleDescription::esbt_auto )
	, m_esbtV( CExtRichStyleDescription::esbt_auto )
	, m_eF( CExtRichStyleDescription::ef_none )
	, m_eC( CExtRichStyleDescription::ec_auto )
	, m_eCI( CExtRichStyleDescription::eci_auto )
//	, m_eCS( CExtRichStyleDescription::ecs_none )
	, m_eZIT( CExtRichStyleDescription::ezi_auto )
//	, m_ePBB( CExtRichStyleDescription::epbba_auto )
//	, m_ePBA( CExtRichStyleDescription::epbba_auto )
	, m_eBC( CExtRichStyleDescription::ebc_separate )
	, m_eCST( CExtRichStyleDescription::ecst_top )
	, m_eEC( CExtRichStyleDescription::eec_show )
	, m_eTL( CExtRichStyleDescription::etl_auto )
	, m_eN( CExtRichStyleDescription::ent_noshade_unknown )
	, m_eUiListNavigation( CExtRichStyleDescription::e_ui_ln_unspecified )
	, m_eUiFocusEnsureVisibility( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eUiDelayedDraw( CExtRichStyleDescription::e_ui_dd_default )
	, m_eUiSBT( CExtRichStyleDescription::e_ui_sbt_default )
	, m_eUiDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_eUiBackgroundDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_nParaIndent( -1 )
	, m_rcPadding( -1, -1, -1, -1 )
	, m_rcBorder( -1, -1, -1, -1 )
	, m_rcMargin( -1, -1, -1, -1 )
	, m_rcCellPadding( -1, -1, -1, -1 )
	, m_rcClipImageShape( -1, -1, -1, -1 )
	, m_rcUiSlice( -1, -1, -1, -1 )
	, m_rcUiBackgroundSlice( -1, -1, -1, -1 )
	, m_rcUiBackgroundExtend( -1, -1, -1, -1 )
	, m_rcOuter( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_rcOuterP( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_sizeCellSpacing( -1, -1 )
	, m_sizeWH( -1, -1 )
	, m_sizeWHP( -1, -1 )
	, m_sizeSpan( -1, -1 )
	, m_ptBackgroundAlignment( -1, -1 )
	, m_clrText( COLORREF(-1L) )
	, m_clrBack( COLORREF(-1L) )
	, m_clrBorderLeft( COLORREF(-1L) )
	, m_clrBorderRight( COLORREF(-1L) )
	, m_clrBorderTop( COLORREF(-1L) )
	, m_clrBorderBottom( COLORREF(-1L) )
	, m_clrOutlineColor( COLORREF(-1L) )
	, m_ebsLeft( CExtRichStyleDescription::ebsUnknown )
	, m_ebsRight( CExtRichStyleDescription::ebsUnknown )
	, m_ebsTop( CExtRichStyleDescription::ebsUnknown )
	, m_ebsBottom( CExtRichStyleDescription::ebsUnknown )
	, m_nFirstNumberInList( -1 )
	, m_nUi_transparency( -1 )
	, m_nUi_background_transparency( -1 )
//	, m_strBackgroundImagePath( _T("") )
//	, m_strListStyleImagePath( _T("") )
//	, m_strCursorImagePath( _T("") )
//	, m_strContent( _T("") )
//	, m_strCounterIncrement( _T("") )
//	, m_strCounterReset( _T("") )
//	, m_nBlink( 0 )
//	, m_nOverline( 0 )
	, m_nWordSapcing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nLetterSpacing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
//	, m_strFontFaceName( _T("") )
	, m_nZIndex( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nOutlineWidth( 0 )
	, m_nMaxHeight( -1 )
	, m_nMaxWidth( -1 )
	, m_nMinHeight( -1 )
	, m_nMinWidth( -1 )
	, m_nSpacerModeMinWidth( 0 )
	, m_nBorderSpacingHoriz( 0 )
	, m_nBorderSpacingVert( 0 )
	, m_lfMaxHeightP( -1 )
	, m_lfMaxWidthP( -1 )
	, m_lfMinHeightP( -1 )
	, m_lfMinWidthP( -1 )
//	, m_strContentBefore( _T("") )
//	, m_strContentAfter( _T("") )
	, m_eynFocusOnMakeSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOnMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
{
}

CExtRichStyleRule::CExtRichStyleRule( const CExtRichStyleRule & other )
	: m_nFontWeightAbs( 0 )
	, m_nFontWeightRel( 0 )
	, m_nItalic( 0 )
	, m_nUnderline( 0 )
	, m_nStrikeOut( 0 )
	, m_nFontSizeAbs( 0 )
	, m_nFontSizeRel( 0 )
	, m_lfFontSizePercentRel( 1.0 )
	, m_nLineSpacingPX( -1 )
	, m_lfLineSpacingPercent( 1.0 )
	, m_eaH( CExtRichStyleDescription::eahUnknownChanging )
	, m_eaV( CExtRichStyleDescription::eavUnknownChanging )
	, m_etT( CExtRichStyleDescription::ettNone )
	, m_eWST( CExtRichStyleDescription::ewstInherit )
	, m_eBR( CExtRichStyleDescription::ebrNoRepeat )
	, m_eBA( CExtRichStyleDescription::ebaScroll )
	, m_eBPT( CExtRichStyleDescription::ebpt_unspecified )
	, m_eBCT( CExtRichStyleDescription::ebct_transparent )
	, m_eBPA( CExtRichStyleDescription::ebpa_unspecified )
	, m_eOS( CExtRichStyleDescription::eos_none )
	, m_eLSP( CExtRichStyleDescription::elsp_outside )
	, m_eLST( CExtRichStyleDescription::elst_unspecified ) // elst_disc
	, m_eD( CExtRichStyleDescription::ed_inline )
	, m_eDock( CExtRichStyleDescription::e_ui_dock_unspecified )
	, m_eV( CExtRichStyleDescription::ev_visible )
	, m_eP( CExtRichStyleDescription::ep_static )
	, m_eO( CExtRichStyleDescription::eo_visible )
	, m_esbtH( CExtRichStyleDescription::esbt_auto )
	, m_esbtV( CExtRichStyleDescription::esbt_auto )
	, m_eF( CExtRichStyleDescription::ef_none )
	, m_eC( CExtRichStyleDescription::ec_auto )
	, m_eCI( CExtRichStyleDescription::eci_auto )
//	, m_eCS( CExtRichStyleDescription::ecs_none )
	, m_eZIT( CExtRichStyleDescription::ezi_auto )
//	, m_ePBB( CExtRichStyleDescription::epbba_auto )
//	, m_ePBA( CExtRichStyleDescription::epbba_auto )
	, m_eBC( CExtRichStyleDescription::ebc_separate )
	, m_eCST( CExtRichStyleDescription::ecst_top )
	, m_eEC( CExtRichStyleDescription::eec_show )
	, m_eTL( CExtRichStyleDescription::etl_auto )
	, m_eN( CExtRichStyleDescription::ent_noshade_unknown )
	, m_eUiListNavigation( CExtRichStyleDescription::e_ui_ln_unspecified )
	, m_eUiFocusEnsureVisibility( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eUiDelayedDraw( CExtRichStyleDescription::e_ui_dd_default )
	, m_eUiSBT( CExtRichStyleDescription::e_ui_sbt_default )
	, m_eUiDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_eUiBackgroundDrawMethod( CExtRichStyleDescription::e_ui_dm_unspecified )
	, m_nParaIndent( -1 )
	, m_rcPadding( -1, -1, -1, -1 )
	, m_rcBorder( -1, -1, -1, -1 )
	, m_rcMargin( -1, -1, -1, -1 )
	, m_rcCellPadding( -1, -1, -1, -1 )
	, m_rcClipImageShape( -1, -1, -1, -1 )
	, m_rcUiSlice( -1, -1, -1, -1 )
	, m_rcUiBackgroundSlice( -1, -1, -1, -1 )
	, m_rcUiBackgroundExtend( -1, -1, -1, -1 )
	, m_rcOuter( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_rcOuterP( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_sizeCellSpacing( -1, -1 )
	, m_sizeWH( -1, -1 )
	, m_sizeWHP( -1, -1 )
	, m_sizeSpan( -1, -1 )
	, m_ptBackgroundAlignment( -1, -1 )
	, m_clrText( COLORREF(-1L) )
	, m_clrBack( COLORREF(-1L) )
	, m_clrBorderLeft( COLORREF(-1L) )
	, m_clrBorderRight( COLORREF(-1L) )
	, m_clrBorderTop( COLORREF(-1L) )
	, m_clrBorderBottom( COLORREF(-1L) )
	, m_clrOutlineColor( COLORREF(-1L) )
	, m_ebsLeft( CExtRichStyleDescription::ebsUnknown )
	, m_ebsRight( CExtRichStyleDescription::ebsUnknown )
	, m_ebsTop( CExtRichStyleDescription::ebsUnknown )
	, m_ebsBottom( CExtRichStyleDescription::ebsUnknown )
	, m_nFirstNumberInList( -1 )
	, m_nUi_transparency( -1 )
	, m_nUi_background_transparency( -1 )
//	, m_strBackgroundImagePath( _T("") )
//	, m_strListStyleImagePath( _T("") )
//	, m_strCursorImagePath( _T("") )
//	, m_strContent( _T("") )
//	, m_strCounterIncrement( _T("") )
//	, m_strCounterReset( _T("") )
//	, m_nBlink( 0 )
//	, m_nOverline( 0 )
	, m_nWordSapcing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nLetterSpacing( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
//	, m_strFontFaceName( _T("") )
	, m_nZIndex( __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
	, m_nOutlineWidth( 0 )
	, m_nMaxHeight( -1 )
	, m_nMaxWidth( -1 )
	, m_nMinHeight( -1 )
	, m_nMinWidth( -1 )
	, m_nSpacerModeMinWidth( 0 )
	, m_nBorderSpacingHoriz( 0 )
	, m_nBorderSpacingVert( 0 )
	, m_lfMaxHeightP( -1 )
	, m_lfMaxWidthP( -1 )
	, m_lfMinHeightP( -1 )
	, m_lfMinWidthP( -1 )
//	, m_strContentBefore( _T("") )
//	, m_strContentAfter( _T("") )
	, m_eynFocusOnMakeSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOnMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelected( CExtRichStyleDescription::e_ui_yn_unspecified )
	, m_eynFocusOffMakeUnSelectedSibling( CExtRichStyleDescription::e_ui_yn_unspecified )
{
	Assign( other );
}

CExtRichStyleRule::~CExtRichStyleRule()
{
	Empty();
}

void CExtRichStyleRule::Assign( const CExtRichStyleRule & other )
{
	if( LPVOID(this) == LPVOID(&other) )
		return;
	m_nFontWeightAbs = other.m_nFontWeightAbs;
	m_nFontWeightRel = other.m_nFontWeightRel;
	m_nItalic = other.m_nItalic;
	m_nUnderline = other.m_nUnderline;
	m_nStrikeOut = other.m_nStrikeOut;
	m_nFontSizeAbs = other.m_nFontSizeAbs;
	m_nFontSizeRel = other.m_nFontSizeRel;
	m_lfFontSizePercentRel = other.m_lfFontSizePercentRel;
	m_nLineSpacingPX = other.m_nLineSpacingPX;
	m_lfLineSpacingPercent = other.m_lfLineSpacingPercent;
	m_eaH = other.m_eaH;
	m_eaV = other.m_eaV;
	m_etT = other.m_etT;
	m_eWST = other.m_eWST;
	m_eBR = other.m_eBR;
	m_eBA = other.m_eBA;
	m_eBPT = other.m_eBPT;
	m_eBCT = other.m_eBCT;
	m_eBPA = other.m_eBPA;
	m_eOS = other.m_eOS;
	m_eLSP = other.m_eLSP;
	m_eLST = other.m_eLST;
	m_eD = other.m_eD;
	m_eDock = other.m_eDock;
	m_eV = other.m_eV;
	m_eP = other.m_eP;
	m_eO = other.m_eO;
	m_esbtH = other.m_esbtH;
	m_esbtV = other.m_esbtV;
	m_eF = other.m_eF;
	m_eC = other.m_eC;
	m_eCI = other.m_eCI;
//	m_eCS = other.m_eCS;
	m_eZIT = other.m_eZIT;
//	m_ePBB = other.m_ePBB;
//	m_ePBA = other.m_ePBA;
	m_eBC = other.m_eBC;
	m_eCST = other.m_eCST;
	m_eEC = other.m_eEC;
	m_eTL = other.m_eTL;
	m_eN = other.m_eN;
	m_eUiListNavigation = other.m_eUiListNavigation;
	m_eUiFocusEnsureVisibility = other.m_eUiFocusEnsureVisibility;
	m_eUiDelayedDraw = other.m_eUiDelayedDraw;
	m_eUiSBT = other.m_eUiSBT;
	m_eUiDrawMethod = other.m_eUiDrawMethod;
	m_eUiBackgroundDrawMethod = other.m_eUiBackgroundDrawMethod;
	m_nParaIndent = other.m_nParaIndent;
	m_rcPadding = other.m_rcPadding;
	m_rcBorder = other.m_rcBorder;
	m_rcMargin = other.m_rcMargin;
	m_rcCellPadding = other.m_rcCellPadding;
	m_rcClipImageShape = other.m_rcClipImageShape;
	m_rcUiSlice = other.m_rcUiSlice;
	m_rcUiBackgroundSlice = other.m_rcUiBackgroundSlice;
	m_rcUiBackgroundExtend = other.m_rcUiBackgroundExtend;
	m_rcOuter = other.m_rcOuter;
	m_rcOuterP = other.m_rcOuterP;
	m_sizeCellSpacing = other.m_sizeCellSpacing;
	m_sizeWH = other.m_sizeWH;
	m_sizeWHP = other.m_sizeWHP;
	m_sizeSpan = other.m_sizeSpan;
	m_ptBackgroundAlignment = other.m_ptBackgroundAlignment;
	m_clrText = other.m_clrText;
	m_clrBack = other.m_clrBack;
	m_clrBorderLeft = other.m_clrBorderLeft;
	m_clrBorderRight = other.m_clrBorderRight;
	m_clrBorderTop = other.m_clrBorderTop;
	m_clrBorderBottom = other.m_clrBorderBottom;
	m_clrOutlineColor = other.m_clrOutlineColor;
	m_ebsLeft = other.m_ebsLeft;
	m_ebsRight = other.m_ebsRight;
	m_ebsTop = other.m_ebsTop;
	m_ebsBottom = other.m_ebsBottom;
	m_nFirstNumberInList = other.m_nFirstNumberInList;
	m_nUi_transparency = other.m_nUi_transparency;
	m_nUi_background_transparency = other.m_nUi_background_transparency;
	m_strBackgroundImagePath = other.m_strBackgroundImagePath;
	m_strListStyleImagePath = other.m_strListStyleImagePath;
	m_strCursorImagePath = other.m_strCursorImagePath;
	m_strContent = other.m_strContent;
	m_strContentBefore = other.m_strContentBefore;
	m_strContentAfter = other.m_strContentAfter;
//	m_strCounterIncrement = other.m_strCounterIncrement;
//	m_strCounterReset = other.m_strCounterReset;
//	m_nBlink = other.m_nBlink;
//	m_nOverline = other.m_nOverline;
	m_nWordSapcing = other.m_nWordSapcing;
	m_nLetterSpacing = other.m_nLetterSpacing;
	m_strFontFaceName = other.m_strFontFaceName;
//	m_arrFontNames.RemoveAll();
//	m_arrFontNames.Copy( other.m_arrFontNames );
	m_listQuotes.RemoveAll();
	m_listQuotes.AddTail( ( CList < CExtRichStyleDescription::CQuoutes, CExtRichStyleDescription::CQuoutes > * ) &other.m_listQuotes );
	m_nZIndex = other.m_nZIndex;
	m_nOutlineWidth = other.m_nOutlineWidth;
	m_nMaxHeight = other.m_nMaxHeight;
	m_nMaxWidth = other.m_nMaxWidth;
	m_nMinHeight = other.m_nMinHeight;
	m_nMinWidth	= other.m_nMinWidth;
	m_nSpacerModeMinWidth = other.m_nSpacerModeMinWidth;
	m_nBorderSpacingHoriz = other.m_nBorderSpacingHoriz;
	m_nBorderSpacingVert = other.m_nBorderSpacingVert;
	m_lfMaxHeightP = other.m_lfMaxHeightP;
	m_lfMaxWidthP = other.m_lfMaxWidthP;
	m_lfMinHeightP = other.m_lfMinHeightP;
	m_lfMinWidthP = other.m_lfMinWidthP;
	m_PCD = other.m_PCD;
	m_eynFocusOnMakeSelected = other.m_eynFocusOnMakeSelected;
	m_eynFocusOnMakeUnSelectedSibling = other.m_eynFocusOnMakeUnSelectedSibling;
	m_eynFocusOffMakeUnSelected = other.m_eynFocusOffMakeUnSelected;
	m_eynFocusOffMakeUnSelectedSibling = other.m_eynFocusOffMakeUnSelectedSibling;
}

void CExtRichStyleRule::Merge( const CExtRichStyleRule & other )
{
	if( other.m_nFontWeightAbs != 0 )
		m_nFontWeightAbs = other.m_nFontWeightAbs;
	if( other.m_nFontWeightRel != 0 )
		m_nFontWeightRel = other.m_nFontWeightRel;
	if( other.m_nItalic != 0 )
		m_nItalic = other.m_nItalic;
	if( other.m_nUnderline != 0 )
		m_nUnderline = other.m_nUnderline;
	if( other.m_nStrikeOut != 0 )
		m_nStrikeOut = other.m_nStrikeOut;
	if( other.m_nFontSizeAbs != 0 )
		m_nFontSizeAbs = other.m_nFontSizeAbs;
	if( other.m_nFontSizeRel != 0 )
		m_nFontSizeRel = other.m_nFontSizeRel;
	if( other.m_lfFontSizePercentRel != 1.0 )
		m_lfFontSizePercentRel = other.m_lfFontSizePercentRel;
	if( other.m_nLineSpacingPX >= 0 )
		m_nLineSpacingPX = other.m_nLineSpacingPX;
	if( other.m_lfLineSpacingPercent != 1.0 )
		m_lfLineSpacingPercent = other.m_lfLineSpacingPercent;
	if( other.m_eaH != CExtRichStyleDescription::eahUnknownChanging )
		m_eaH = other.m_eaH;
	if( other.m_eaV != CExtRichStyleDescription::eavUnknownChanging )
		m_eaV = other.m_eaV;
	if( other.m_etT != CExtRichStyleDescription::ettNone )
		m_etT = other.m_etT;
	if( other.m_eWST != CExtRichStyleDescription::ewstInherit )
		m_eWST = other.m_eWST;
	if( other.m_eBR != CExtRichStyleDescription::ebrNoRepeat )
		m_eBR = other.m_eBR;
	if( other.m_eBA != CExtRichStyleDescription::ebaScroll )
		m_eBA = other.m_eBA;
	if( other.m_eBPT != CExtRichStyleDescription::ebpt_unspecified )
		m_eBPT = other.m_eBPT;
	if( m_eBCT == CExtRichStyleDescription::ebct_transparent && other.m_eBCT != CExtRichStyleDescription::ebct_transparent )
		m_eBCT = other.m_eBCT;
	if( other.m_eBPA != CExtRichStyleDescription::ebpa_unspecified )
		m_eBPA = other.m_eBPA;
	if( other.m_eOS != CExtRichStyleDescription::eos_none )
		m_eOS = other.m_eOS;
	if( other.m_eLSP != CExtRichStyleDescription::elsp_outside )
		m_eLSP = other.m_eLSP;
	if( other.m_eLST != CExtRichStyleDescription::elst_unspecified ) // elst_disc
		m_eLST = other.m_eLST;
	
	// dock before m_eD !!!
//	if(		other.m_eD == CExtRichStyleDescription::ed_ui_dock
//		&&	m_eD != CExtRichStyleDescription::ed_ui_dock
//		)
	if( m_eDock == CExtRichStyleDescription::e_ui_dock_unspecified )
		m_eDock = other.m_eDock;

	if( other.m_eD != CExtRichStyleDescription::ed_inline )
		m_eD = other.m_eD;

	if( other.m_eV != CExtRichStyleDescription::ev_visible )
		m_eV = other.m_eV;
	if( other.m_eP != CExtRichStyleDescription::ep_static )
		m_eP = other.m_eP;
	if( other.m_eO != CExtRichStyleDescription::eo_visible )
		m_eO = other.m_eO;
	//m_esbtH;
	//m_esbtV;
	if( other.m_eF != CExtRichStyleDescription::ef_none )
		m_eF = other.m_eF;
	if( other.m_eC != CExtRichStyleDescription::ec_auto )
		m_eC = other.m_eC;
	if( other.m_eCI != CExtRichStyleDescription::eci_auto )
		m_eCI = other.m_eCI;
//	if( other.m_eCS != CExtRichStyleDescription::ecs_none )
//		m_eCS = other.m_eCS;
	if( other.m_eZIT != CExtRichStyleDescription::ezi_auto )
		m_eZIT = other.m_eZIT;
//	if( other.m_ePBB != CExtRichStyleDescription::epbba_auto )
//		m_ePBB = other.m_ePBB;
//	if( other.m_ePBA != CExtRichStyleDescription::epbba_auto )
//		m_ePBA = other.m_ePBA;
	if( other.m_eBC != CExtRichStyleDescription::ebc_separate )
		m_eBC = other.m_eBC;
	if( other.m_eCST != CExtRichStyleDescription::ecst_top )
		m_eCST = other.m_eCST;
	if( other.m_eEC != CExtRichStyleDescription::eec_show )
		m_eEC = other.m_eEC;
	if( other.m_eTL != CExtRichStyleDescription::etl_auto )
		m_eTL = other.m_eTL;
	if( other.m_eN != CExtRichStyleDescription::ent_noshade_unknown )
		m_eN = other.m_eN;
	if( other.m_eUiListNavigation != CExtRichStyleDescription::e_ui_ln_unspecified )
		m_eUiListNavigation = other.m_eUiListNavigation;
	if( other.m_eUiFocusEnsureVisibility != CExtRichStyleDescription::e_ui_yn_unspecified )
		m_eUiFocusEnsureVisibility = other.m_eUiFocusEnsureVisibility;
	if( m_eUiDelayedDraw == CExtRichStyleDescription::e_ui_dd_default && other.m_eUiDelayedDraw != CExtRichStyleDescription::e_ui_dd_default )
		m_eUiDelayedDraw = other.m_eUiDelayedDraw;
	if( m_eUiSBT == CExtRichStyleDescription::e_ui_sbt_default && other.m_eUiSBT != CExtRichStyleDescription::e_ui_sbt_default )
		m_eUiSBT = other.m_eUiSBT;
	if( other.m_eUiDrawMethod != CExtRichStyleDescription::e_ui_dm_unspecified )
		m_eUiDrawMethod = other.m_eUiDrawMethod;
	if( other.m_eUiBackgroundDrawMethod != CExtRichStyleDescription::e_ui_dm_unspecified )
		m_eUiBackgroundDrawMethod = other.m_eUiBackgroundDrawMethod;
	if( other.m_nParaIndent >= 0 )
		m_nParaIndent = other.m_nParaIndent;
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcPadding, other.m_rcPadding );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcBorder, other.m_rcBorder );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcMargin, other.m_rcMargin );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcCellPadding, other.m_rcCellPadding );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcClipImageShape, other.m_rcClipImageShape );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcUiSlice, other.m_rcUiSlice );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcUiBackgroundSlice, other.m_rcUiBackgroundSlice );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembers( m_rcUiBackgroundExtend, other.m_rcUiBackgroundExtend );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembersUV( m_rcOuter, other.m_rcOuter );
	CExtRichStyleDescription::stat_CopyNonNegativeRectMembersUV( m_rcOuterP, other.m_rcOuterP );
	CExtRichStyleDescription::stat_CopyNonNegativeSizeMembers( m_sizeCellSpacing, other.m_sizeCellSpacing );
	CExtRichStyleDescription::stat_CopyNonNegativeSizeMembers( m_sizeWH, other.m_sizeWH );
	CExtRichStyleDescription::stat_CopyNonNegativeSizeMembers( m_sizeWHP, other.m_sizeWHP );
	CExtRichStyleDescription::stat_CopyNonNegativeSizeMembers( m_sizeSpan, other.m_sizeSpan );
	CExtRichStyleDescription::stat_CopyNonNegativePointMembers( m_ptBackgroundAlignment, other.m_ptBackgroundAlignment );
	if( other.m_clrText != COLORREF(-1L) )
		m_clrText = other.m_clrText;
	if( other.m_clrBack != COLORREF(-1L) )
		m_clrBack = other.m_clrBack;
	if( other.m_clrBorderLeft != COLORREF(-1L) )
		m_clrBorderLeft = other.m_clrBorderLeft;
	if( other.m_clrBorderRight != COLORREF(-1L) )
		m_clrBorderRight = other.m_clrBorderRight;
	if( other.m_clrBorderTop != COLORREF(-1L) )
		m_clrBorderTop = other.m_clrBorderTop;
	if( other.m_clrBorderBottom != COLORREF(-1L) )
		m_clrBorderBottom = other.m_clrBorderBottom;
	if( other.m_clrOutlineColor != COLORREF(-1L) )
		m_clrOutlineColor = other.m_clrOutlineColor;
	if( other.m_ebsLeft != CExtRichStyleDescription::ebsUnknown )
		m_ebsLeft = other.m_ebsLeft;
	if( other.m_ebsRight != CExtRichStyleDescription::ebsUnknown )
		m_ebsRight = other.m_ebsRight;
	if( other.m_ebsTop != CExtRichStyleDescription::ebsUnknown )
		m_ebsTop = other.m_ebsTop;
	if( other.m_ebsBottom != CExtRichStyleDescription::ebsUnknown )
		m_ebsBottom = other.m_ebsBottom;
	if( other.m_nFirstNumberInList >= 0 )
		m_nFirstNumberInList = other.m_nFirstNumberInList;
	if( other.m_nUi_transparency >= 0 )
		m_nUi_transparency = other.m_nUi_transparency;
	if( other.m_nUi_background_transparency >= 0 )
		m_nUi_background_transparency = other.m_nUi_background_transparency;
	if( ( ! other.m_strBackgroundImagePath.IsEmpty() ) || m_strBackgroundImagePath == _T("inherit") )
		m_strBackgroundImagePath = other.m_strBackgroundImagePath;
// 	if( ( ! other.m_strBackgroundImagePath.IsEmpty() ) && ( m_strBackgroundImagePath == _T("inherit") || m_strBackgroundImagePath.IsEmpty() ) )
// 		m_strBackgroundImagePath = other.m_strBackgroundImagePath;
	if( ( ! other.m_strListStyleImagePath.IsEmpty() ) || m_strListStyleImagePath == _T("inherit") )
		m_strListStyleImagePath = other.m_strListStyleImagePath;
//	if( ( ! other.m_strListStyleImagePath.IsEmpty() ) && ( m_strListStyleImagePath == _T("inherit") || m_strListStyleImagePath.IsEmpty() ) )
//		m_strListStyleImagePath = other.m_strListStyleImagePath;
	if( ! other.m_strCursorImagePath.IsEmpty() )
		m_strCursorImagePath = other.m_strCursorImagePath;
	if( ! other.m_strContent.IsEmpty() )
		m_strContent = other.m_strContent;

	if( ! other.m_strContentBefore.IsEmpty() )
		m_strContentBefore = other.m_strContentBefore;
	if( ! other.m_strContentAfter.IsEmpty() )
		m_strContentAfter = other.m_strContentAfter;

//	if( ! other.m_strCounterIncrement.IsEmpty() )
//		m_strCounterIncrement = other.m_strCounterIncrement;
//	if( ! other.m_strCounterReset.IsEmpty() )
//		m_strCounterReset = other.m_strCounterReset;
//	if( other.m_nBlink >= 0 )
//		m_nBlink = other.m_nBlink;
//	if( other.m_nOverline >= 0 )
//		m_nOverline = other.m_nOverline;
	if( other.m_nWordSapcing >= 0 )
		m_nWordSapcing = other.m_nWordSapcing;
	if( other.m_nLetterSpacing >= 0 )
		m_nLetterSpacing = other.m_nLetterSpacing;
	if( ! other.m_strFontFaceName.IsEmpty() )
		m_strFontFaceName = other.m_strFontFaceName;
//	if( other.m_arrFontNames.GetSize() > 0 )
//	{
//		m_arrFontNames.RemoveAll();
//		m_arrFontNames.Copy( other.m_arrFontNames );
//	}
	if( other.m_listQuotes.GetCount() > 0 )
	{
		m_listQuotes.RemoveAll();
		m_listQuotes.AddTail( ( CList < CExtRichStyleDescription::CQuoutes, CExtRichStyleDescription::CQuoutes > * ) &other.m_listQuotes );
	}
	if( other.m_nOutlineWidth != 0 )
		m_nOutlineWidth = other.m_nOutlineWidth;

	if( other.m_nZIndex != __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
		m_nZIndex = other.m_nZIndex;

	if( other.m_nMaxHeight >= 0 )
		m_nMaxHeight = other.m_nMaxHeight;
	if( other.m_nMaxWidth >= 0 )
		m_nMaxWidth = other.m_nMaxWidth;
	if( other.m_nMinHeight >= 0 )
		m_nMinHeight = other.m_nMinHeight;
	if( other.m_nMinWidth >= 0 )
		m_nMinWidth = other.m_nMinWidth;
	if( other.m_nSpacerModeMinWidth != 0 )
		m_nSpacerModeMinWidth = other.m_nSpacerModeMinWidth;

	if( other.m_nBorderSpacingHoriz != -1 )
		m_nBorderSpacingHoriz = other.m_nBorderSpacingHoriz;
	if( other.m_nBorderSpacingVert != -1 )
		m_nBorderSpacingVert = other.m_nBorderSpacingVert;

	if( other.m_lfMaxHeightP != -1 )
		m_lfMaxHeightP = other.m_lfMaxHeightP;
	if( other.m_lfMaxWidthP != -1 )
		m_lfMaxWidthP = other.m_lfMaxWidthP;
	if( other.m_lfMinHeightP != -1 )
		m_lfMinHeightP = other.m_lfMinHeightP;
	if( other.m_lfMinWidthP != -1 )
		m_lfMinWidthP = other.m_lfMinWidthP;

	m_PCD.Merge( other.m_PCD ); // no inheritance

	if( other.m_eynFocusOnMakeSelected != CExtRichStyleDescription::e_ui_yn_unspecified )
		m_eynFocusOnMakeSelected = other.m_eynFocusOnMakeSelected;
	if( other.m_eynFocusOnMakeUnSelectedSibling != CExtRichStyleDescription::e_ui_yn_unspecified )
		m_eynFocusOnMakeUnSelectedSibling = other.m_eynFocusOnMakeUnSelectedSibling;
	if( other.m_eynFocusOffMakeUnSelected != CExtRichStyleDescription::e_ui_yn_unspecified )
		m_eynFocusOffMakeUnSelected = other.m_eynFocusOffMakeUnSelected;
	if( other.m_eynFocusOffMakeUnSelectedSibling != CExtRichStyleDescription::e_ui_yn_unspecified )
		m_eynFocusOffMakeUnSelectedSibling = other.m_eynFocusOffMakeUnSelectedSibling;
}

bool CExtRichStyleRule::IsEmpty() const
{
	if(		m_nFontWeightAbs == 0 && m_nFontWeightRel == 0
		&&	m_nItalic == 0 && m_nUnderline == 0 && m_nStrikeOut == 0
		&&	m_nFontSizeAbs == 0 && m_nFontSizeRel == 0 && m_lfFontSizePercentRel == 1.0 && m_strFontFaceName.IsEmpty()
		&&	m_eaH == CExtRichStyleDescription::eahUnknownChanging
		&&	m_eaV == CExtRichStyleDescription::eavUnknownChanging
		&&	m_etT == CExtRichStyleDescription::ettNone
		&&	m_nParaIndent < 0
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcPadding )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcBorder )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcMargin )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcCellPadding )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcClipImageShape )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcUiSlice )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcUiBackgroundSlice )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyLEG( m_rcUiBackgroundExtend )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyUV( m_rcOuter )
		&&	CExtRichStyleDescription::stat_impl_IsRectEmptyUV( m_rcOuterP )
		&&	CExtRichStyleDescription::stat_impl_IsSizeEmptyLEG( m_sizeCellSpacing )
		&&	CExtRichStyleDescription::stat_impl_IsSizeEmptyLEG( m_sizeWH )
		&&	CExtRichStyleDescription::stat_impl_IsSizeEmptyLEG( m_sizeWHP )
		&&	m_sizeSpan.cx <= 0 && m_sizeSpan.cy <= 0
		&&	CExtRichStyleDescription::stat_impl_IsPointEmptyLEG( m_ptBackgroundAlignment )
		&&	m_clrText == COLORREF(-1L)
		&&	m_clrBack == COLORREF(-1L)
//		&&	m_clrBorderLeft == COLORREF(-1L)
//		&&	m_clrBorderRight == COLORREF(-1L)
//		&&	m_clrBorderTop == COLORREF(-1L)
//		&&	m_clrBorderBottom == COLORREF(-1L)
		&&	m_clrOutlineColor == COLORREF(-1L)
		&&	m_ebsLeft == CExtRichStyleDescription::ebsUnknown
		&&	m_ebsRight == CExtRichStyleDescription::ebsUnknown
		&&	m_ebsTop == CExtRichStyleDescription::ebsUnknown
		&&	m_ebsBottom == CExtRichStyleDescription::ebsUnknown
		&&	m_nFirstNumberInList < 0 
		&&	m_nUi_transparency < 0
		&&	m_nUi_background_transparency < 0
		&&	m_strBackgroundImagePath.IsEmpty()
		&&	m_strListStyleImagePath.IsEmpty()
		&&	m_strCursorImagePath.IsEmpty()
		&&	m_strContent.IsEmpty()
		&&	m_strContentBefore.IsEmpty()
		&&	m_strContentAfter.IsEmpty()
//		&&	m_strCounterIncrement.IsEmpty()
//		&&	m_strCounterReset.IsEmpty()
		&&  m_nLineSpacingPX < 0
		&&	m_lfLineSpacingPercent != 1.0
//		&&	m_nBlink == 0
//		&&  m_nOverline == 0
		&&	m_nWordSapcing <= __EXT_RICH_CONTENT_NEGATIVE_UNUSED
		&&	m_nLetterSpacing <= __EXT_RICH_CONTENT_NEGATIVE_UNUSED
//		&&	m_arrFontNames.GetSize() == 0
		&&	m_listQuotes.GetCount() == 0
		&&	m_nZIndex <= __EXT_RICH_CONTENT_NEGATIVE_UNUSED
		&&	m_nOutlineWidth == 0
		&&	m_nMaxHeight < 0
		&&	m_nMaxWidth < 0
		&&	m_nMinHeight < 0
		&&	m_nMinWidth < 0
		&&	m_nSpacerModeMinWidth == 0
		&&	m_nBorderSpacingHoriz < 0
		&&	m_nBorderSpacingVert < 0
		&&	m_lfMaxHeightP < 0
		&&	m_lfMaxWidthP < 0
		&&	m_lfMinHeightP < 0
		&&	m_lfMinWidthP < 0
		&&	m_eWST == CExtRichStyleDescription::ewstInherit
		&&	m_eBR == CExtRichStyleDescription::ebrNoRepeat
		&&	m_eBA == CExtRichStyleDescription::ebaScroll
		&&	m_eBPT == CExtRichStyleDescription::ebpt_unspecified
		&&	m_eBPA == CExtRichStyleDescription::ebpa_unspecified
		&&	m_eBCT == CExtRichStyleDescription::ebct_transparent
		&&	m_eOS == CExtRichStyleDescription::eos_none
		&&	m_eLSP == CExtRichStyleDescription::elsp_outside
		&&	m_eLST == CExtRichStyleDescription::elst_unspecified // elst_disc
		&&	m_eD == CExtRichStyleDescription::ed_inline
		&&	m_eDock == CExtRichStyleDescription::e_ui_dock_unspecified
		&&	m_eV == CExtRichStyleDescription::ev_visible
		&&	m_eP == CExtRichStyleDescription::ep_static
		&&	m_eO == CExtRichStyleDescription::eo_visible
		&&	m_esbtH == CExtRichStyleDescription::esbt_auto
		&&	m_esbtV == CExtRichStyleDescription::esbt_auto
		&&	m_eF == CExtRichStyleDescription::ef_none
		&&	m_eC == CExtRichStyleDescription::ec_auto
		&&	m_eCI == CExtRichStyleDescription::eci_auto
//		&&	m_eCS == CExtRichStyleDescription::ecs_none
		&&	m_eZIT == CExtRichStyleDescription::ezi_auto
//		&&	m_ePBB == CExtRichStyleDescription::epbba_auto
//		&&	m_ePBA == CExtRichStyleDescription::epbba_auto
		&&	m_eBC == CExtRichStyleDescription::ebc_separate
		&&	m_eCST == CExtRichStyleDescription::ecst_top
		&&	m_eEC == CExtRichStyleDescription::eec_show
		&&	m_eTL == CExtRichStyleDescription::etl_auto
		&&	m_eN == CExtRichStyleDescription::ent_noshade_unknown
		&&	m_eUiListNavigation == CExtRichStyleDescription::e_ui_ln_unspecified
		&&	m_eUiFocusEnsureVisibility == CExtRichStyleDescription::e_ui_yn_unspecified
		&&	m_eUiDelayedDraw == CExtRichStyleDescription::e_ui_dd_default
		&&	m_eUiSBT == CExtRichStyleDescription::e_ui_sbt_default
		&&	m_eUiDrawMethod == CExtRichStyleDescription::e_ui_dm_unspecified
		&&	m_eUiBackgroundDrawMethod == CExtRichStyleDescription::e_ui_dm_unspecified
//		&&	m_PCD.IsEmpty()
		&&	m_eynFocusOnMakeSelected == CExtRichStyleDescription::e_ui_yn_unspecified
		&&	m_eynFocusOnMakeUnSelectedSibling == CExtRichStyleDescription::e_ui_yn_unspecified
		&&	m_eynFocusOffMakeUnSelected == CExtRichStyleDescription::e_ui_yn_unspecified
		&&	m_eynFocusOffMakeUnSelectedSibling == CExtRichStyleDescription::e_ui_yn_unspecified
		)
		return true;
	else
		return false;
}

void CExtRichStyleRule::Empty()
{
	m_nFontWeightAbs = m_nFontWeightRel = m_nFontWeightRel = m_nItalic = m_nUnderline = m_nStrikeOut = m_nFontSizeAbs = 0;
	m_lfFontSizePercentRel = 1.0;
	m_strFontFaceName.Empty();
	m_eaH = CExtRichStyleDescription::eahUnknownChanging;
	m_eaV = CExtRichStyleDescription::eavUnknownChanging;
	m_etT = CExtRichStyleDescription::ettNone;
	m_nParaIndent = -1;
	m_nLineSpacingPX = -1;
	m_lfLineSpacingPercent = 1.0;
	m_rcPadding.SetRect( -1, -1, -1, -1 );
	m_rcBorder.SetRect( -1, -1, -1, -1 );
	m_rcMargin.SetRect( -1, -1, -1, -1 );
	m_rcCellPadding.SetRect( -1, -1, -1, -1 );
	m_rcClipImageShape.SetRect( -1, -1, -1, -1 );
	m_rcUiSlice.SetRect( -1, -1, -1, -1 );
	m_rcUiBackgroundSlice.SetRect( -1, -1, -1, -1 );
	m_rcUiBackgroundExtend.SetRect( -1, -1, -1, -1 );
	m_rcOuter.SetRect( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED );
	m_rcOuterP.SetRect( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED );
	m_sizeCellSpacing.cx = m_sizeCellSpacing.cy
		= m_sizeWH.cx = m_sizeWH.cy
		= m_sizeWHP.cx = m_sizeWHP.cy
		= m_sizeSpan.cx = m_sizeSpan.cy
		= -1;
	m_ptBackgroundAlignment.x = m_ptBackgroundAlignment.y = -1;
	m_clrText = m_clrBack = COLORREF(-1L);
	m_clrBorderLeft = m_clrBorderRight = m_clrBorderTop = m_clrBorderBottom = RGB(0,0,0);
	m_clrOutlineColor = COLORREF(-1L);
	m_ebsLeft = m_ebsRight = m_ebsTop = m_ebsBottom = CExtRichStyleDescription::ebsUnknown;
	m_nFirstNumberInList = -1;
	m_nUi_transparency = -1;
	m_nUi_background_transparency = -1;
	m_strBackgroundImagePath.Empty();
	m_strListStyleImagePath.Empty();
	m_strCursorImagePath.Empty();
	m_strContent.Empty();
	m_strContentBefore.Empty();
	m_strContentAfter.Empty();
//	m_strCounterIncrement.Empty();
//	m_strCounterReset.Empty();
//	m_nBlink = 0;
//	m_nOverline = 0;
	m_nWordSapcing = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
	m_nLetterSpacing = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
//	m_arrFontNames.RemoveAll();
	m_listQuotes.RemoveAll();
	m_nZIndex = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
	m_nOutlineWidth = 0;
	m_nMaxHeight = -1;
	m_nMaxWidth = -1;
	m_nMinHeight = -1;
	m_nMinWidth = -1;
	m_nSpacerModeMinWidth = 0;
	m_nBorderSpacingHoriz = -1;
	m_nBorderSpacingVert = -1;
	m_lfMaxHeightP = -1;
	m_lfMaxWidthP = -1;
	m_lfMinHeightP = -1;
	m_lfMinWidthP = -1;
	m_eWST = CExtRichStyleDescription::ewstInherit;
	m_eBR = CExtRichStyleDescription::ebrNoRepeat;
	m_eBA = CExtRichStyleDescription::ebaScroll;
	m_eBPT = CExtRichStyleDescription::ebpt_unspecified;
	m_eBCT = CExtRichStyleDescription::ebct_transparent;
	m_eBPA = CExtRichStyleDescription::ebpa_unspecified;
	m_eOS = CExtRichStyleDescription::eos_none;
	m_eLSP = CExtRichStyleDescription::elsp_outside;
	m_eLST = CExtRichStyleDescription::elst_unspecified; //elst_disc;
	m_eD = CExtRichStyleDescription::ed_inline;
	m_eDock = CExtRichStyleDescription::e_ui_dock_unspecified;
	m_eV = CExtRichStyleDescription::ev_visible;
	m_eP = CExtRichStyleDescription::ep_static;
	m_eO = CExtRichStyleDescription::eo_visible;
	m_esbtH = CExtRichStyleDescription::esbt_auto;
	m_esbtV = CExtRichStyleDescription::esbt_auto;
	m_eF = CExtRichStyleDescription::ef_none;
	m_eC = CExtRichStyleDescription::ec_auto;
	m_eCI = CExtRichStyleDescription::eci_auto;
//	m_eCS = CExtRichStyleDescription::ecs_none;
	m_eZIT = CExtRichStyleDescription::ezi_auto;
//	m_ePBB = CExtRichStyleDescription::epbba_auto;
//	m_ePBA = CExtRichStyleDescription::epbba_auto;
	m_eBC = CExtRichStyleDescription::ebc_separate;
	m_eCST = CExtRichStyleDescription::ecst_top;
	m_eEC = CExtRichStyleDescription::eec_show;
	m_eTL = CExtRichStyleDescription::etl_auto;
	m_eN = CExtRichStyleDescription::ent_noshade_unknown;
	m_eUiListNavigation = CExtRichStyleDescription::e_ui_ln_unspecified;
	m_eUiFocusEnsureVisibility = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eUiDelayedDraw = CExtRichStyleDescription::e_ui_dd_default;
	m_eUiSBT = CExtRichStyleDescription::e_ui_sbt_default;
	m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_unspecified;
	m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_unspecified;
	m_PCD.Empty();
	m_eynFocusOnMakeSelected = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynFocusOnMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynFocusOffMakeUnSelected = CExtRichStyleDescription::e_ui_yn_unspecified;
	m_eynFocusOffMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichStyleRule::GetStyle( const CExtRichStyleDescription & styleSrc, CExtRichStyleDescription & styleDst )
{
	styleDst = styleSrc;
	styleDst.m_eP = CExtRichStyleDescription::ep_static;

	if( m_nFontWeightAbs != 0 )
	{
		styleDst.m_fd.m_lf.lfWeight = m_nFontWeightAbs;
		styleDst.m_fd.m_lf.lfWeight = max( styleDst.m_fd.m_lf.lfWeight, 100 );
		styleDst.m_fd.m_lf.lfWeight = min( styleDst.m_fd.m_lf.lfWeight, 900 );
	}

	if( m_nFontWeightRel != 0 )
	{
		styleDst.m_fd.m_lf.lfWeight += m_nFontWeightRel;
		styleDst.m_fd.m_lf.lfWeight = max( styleDst.m_fd.m_lf.lfWeight, 100 );
		styleDst.m_fd.m_lf.lfWeight = min( styleDst.m_fd.m_lf.lfWeight, 900 );
	}

	if( m_nItalic < 0 )
		styleDst.m_fd.m_lf.lfItalic = 0; // make font non-italic
	else if( m_nItalic > 0 )
		styleDst.m_fd.m_lf.lfItalic = 1; // make font italic

	if( m_nUnderline < 0 )
		styleDst.m_fd.m_lf.lfUnderline = 0; // make font non-underline
	else if( m_nUnderline > 0 )
		styleDst.m_fd.m_lf.lfUnderline = 1; // make font underline
	
	if( m_nStrikeOut < 0 )
		styleDst.m_fd.m_lf.lfStrikeOut = 0; // make font non-underline
	else if( m_nStrikeOut > 0 )
		styleDst.m_fd.m_lf.lfStrikeOut = 1; // make font underline

	if( ! m_strFontFaceName.IsEmpty() )
		__EXT_MFC_STRNCPY( styleDst.m_fd.m_lf.lfFaceName, sizeof(styleDst.m_fd.m_lf.lfFaceName)/sizeof(TCHAR), LPCTSTR(m_strFontFaceName), LF_FACESIZE );

//	if( m_nBlink < 0 )
//		styleDst.m_fd.m_bBlink = false; // make font doesn't blink
//	else if( m_nBlink > 0 )
//		styleDst.m_fd.m_bBlink = true; // make font blink

//	if( m_nOverline < 0 )
//		styleDst.m_fd.m_bOverline = false; // make font non-overline
//	else if( m_nOverline > 0 )
//		styleDst.m_fd.m_bOverline = true; // make font overline

	if( m_nWordSapcing > __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
		styleDst.m_nWordSapcing = m_nWordSapcing;

	if( m_nLetterSpacing > __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
		styleDst.m_nLetterSpacing = m_nLetterSpacing;

//	if( m_arrFontNames.GetSize() > 0 )
//		styleDst.m_arrFontNames.Copy( m_arrFontNames );

	if( m_listQuotes.GetCount() > 0 )
	{
		//styleDst.m_listQuotes.RemoveAll();
		styleDst.m_listQuotes.AddTail( ( CList < CExtRichStyleDescription::CQuoutes, CExtRichStyleDescription::CQuoutes > * ) &m_listQuotes );
	}

//	__EXT_DEBUG_RICH_CONTENT_ASSERT( styleDst.m_fd.m_lf.lfWidth == 0 );
//	__EXT_DEBUG_RICH_CONTENT_ASSERT( styleDst.m_fd.m_lf.lfHeight <= 0 );

	if( m_nFontSizeAbs != 0  )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( m_nFontSizeAbs > 0 );
		styleDst.m_fd.m_lf.lfWidth = 0;
		styleDst.m_fd.m_lf.lfHeight = -m_nFontSizeAbs;
	}
	if( m_nFontSizeRel != 0  )
	{
		styleDst.m_fd.m_lf.lfWidth = 0;
		if( styleDst.m_fd.m_lf.lfHeight < 0 )
		{
			styleDst.m_fd.m_lf.lfHeight -= m_nFontSizeRel;
			if( styleDst.m_fd.m_lf.lfHeight >= 0 )
				styleDst.m_fd.m_lf.lfHeight = -1;
		}
		else
		{
			styleDst.m_fd.m_lf.lfHeight += m_nFontSizeRel;
			styleDst.m_fd.m_lf.lfHeight = max( styleDst.m_fd.m_lf.lfHeight, 1 );
		}
	}

	if( m_lfLineSpacingPercent != 1.0 )
		styleDst.m_fd.m_lfLineSpacingPercent = m_lfLineSpacingPercent;
	if( m_nLineSpacingPX >= 0 )
		styleDst.m_fd.m_nLineSpacingPX = m_nLineSpacingPX;

	if( m_lfFontSizePercentRel != 1.0 )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( m_lfFontSizePercentRel >= 0.0 );
		double lfH = double( styleDst.m_fd.m_lf.lfHeight ) * m_lfFontSizePercentRel;
		styleDst.m_fd.m_lf.lfWidth = 0;
		styleDst.m_fd.m_lf.lfHeight = LONG(lfH);
		if( styleDst.m_fd.m_lf.lfHeight > 0 )
			styleDst.m_fd.m_lf.lfHeight = - styleDst.m_fd.m_lf.lfHeight;
	}

	if( m_eaH != CExtRichStyleDescription::eahUnknownChanging )
		styleDst.m_eaH = m_eaH;
	if( m_eaV != CExtRichStyleDescription::eavUnknownChanging )
		styleDst.m_eaV = m_eaV;

	if( m_etT != CExtRichStyleDescription::ettNone )
		styleDst.m_etT = m_etT;

	if( m_eWST == CExtRichStyleDescription::ewstInherit )
		styleDst.m_eWST = styleSrc.m_eWST;
	else
		styleDst.m_eWST = m_eWST;

	if( m_eOS == CExtRichStyleDescription::eos_inherit )
		styleDst.m_eOS = styleSrc.m_eOS;
	else if( m_eOS != CExtRichStyleDescription::eos_none )
		styleDst.m_eOS = m_eOS;

	if( m_eLSP == CExtRichStyleDescription::elsp_inherit )
		styleDst.m_eLSP = styleSrc.m_eLSP;
	else if( m_eLSP != CExtRichStyleDescription::elsp_outside )
		styleDst.m_eLSP = m_eLSP;

	if( m_eLST == CExtRichStyleDescription::elst_inherit )
		styleDst.m_eLST = styleSrc.m_eLST;
	else if( m_eLST != CExtRichStyleDescription::elst_unspecified ) // elst_disc
		styleDst.m_eLST = m_eLST;

	if( m_eD == CExtRichStyleDescription::ed_inherit )
		styleDst.m_eD = styleSrc.m_eD;
	else
//		if(
//			m_eD != CExtRichStyleDescription::ed_inline
//		&&	m_eD != CExtRichStyleDescription::ed_inline_block
//		)
		styleDst.m_eD = m_eD;

	if(		styleDst.m_eD == CExtRichStyleDescription::ed_ui_dock
		&&	m_eDock != CExtRichStyleDescription::e_ui_dock_unspecified
		)
		styleDst.m_eDock = m_eDock;
	else
		styleDst.m_eDock = styleSrc.m_eDock;

	if( m_eV == CExtRichStyleDescription::ev_inherit )
		styleDst.m_eV = styleSrc.m_eV;
	else if( m_eV != CExtRichStyleDescription::ev_visible )
		styleDst.m_eV = m_eV;
	if( m_eP == CExtRichStyleDescription::ep_inherit )
		styleDst.m_eP = styleSrc.m_eP;
	else if( m_eP != CExtRichStyleDescription::ep_static )
		styleDst.m_eP = m_eP;

	if( m_eO == CExtRichStyleDescription::eo_inherit )
		styleDst.m_eO = styleSrc.m_eO;
	else // if( m_eO != CExtRichStyleDescription::eo_visible )
		styleDst.m_eO = m_eO;

//	if( m_esbtH != CExtRichStyleDescription::esbt_auto )
		styleDst.m_esbtH = m_esbtH;
//	if( m_esbtV != CExtRichStyleDescription::esbt_auto )
		styleDst.m_esbtV = m_esbtV;

	if( m_eF == CExtRichStyleDescription::ef_inherit )
		styleDst.m_eF = styleSrc.m_eF;
//	else if( m_eF != CExtRichStyleDescription::ef_none )
	else
		styleDst.m_eF = m_eF;

//	if( m_ePBB == CExtRichStyleDescription::epbba_inherit )
//		styleDst.m_ePBB = styleSrc.m_ePBB;
//	else if( m_ePBB != CExtRichStyleDescription::epbba_auto )
//		styleDst.m_ePBB = m_ePBB;
//	if( m_ePBA == CExtRichStyleDescription::epbba_inherit )
//		styleDst.m_ePBA = styleSrc.m_ePBA;
//	else if( m_ePBA != CExtRichStyleDescription::epbba_auto )
//		styleDst.m_ePBA = m_ePBA;

	if( m_eBC == CExtRichStyleDescription::ebc_inherit )
		styleDst.m_eBC = styleSrc.m_eBC;
	else if( m_eBC != CExtRichStyleDescription::ebc_separate )
		styleDst.m_eBC = m_eBC;

	if( m_eCST == CExtRichStyleDescription::ecst_inherit )
		styleDst.m_eCST = styleSrc.m_eCST;
	else if( m_eCST != CExtRichStyleDescription::ecst_top )
		styleDst.m_eCST = m_eCST;

	if( m_eEC == CExtRichStyleDescription::eec_inherit )
		styleDst.m_eEC = styleSrc.m_eEC;
	else if( m_eEC != CExtRichStyleDescription::eec_show )
		styleDst.m_eEC = m_eEC;

	if( m_eTL == CExtRichStyleDescription::etl_inherit )
		styleDst.m_eTL = styleSrc.m_eTL;
	else if( m_eTL != CExtRichStyleDescription::etl_auto )
		styleDst.m_eTL = m_eTL;

	if( m_eN != CExtRichStyleDescription::ent_noshade_unknown)
		styleDst.m_eN = m_eN;

	if( m_eUiListNavigation != CExtRichStyleDescription::e_ui_ln_unspecified )
		styleDst.m_eUiListNavigation = m_eUiListNavigation;

	if( m_eUiFocusEnsureVisibility != CExtRichStyleDescription::e_ui_yn_unspecified )
		styleDst.m_eUiFocusEnsureVisibility = m_eUiFocusEnsureVisibility;

	if( m_eUiDelayedDraw == CExtRichStyleDescription::e_ui_dd_inherit )
		styleDst.m_eUiDelayedDraw = styleSrc.m_eUiDelayedDraw;
	else
		styleDst.m_eUiDelayedDraw = m_eUiDelayedDraw;

	if( m_eUiSBT == CExtRichStyleDescription::e_ui_sbt_inherit )
		styleDst.m_eUiSBT = styleSrc.m_eUiSBT;
	else
		styleDst.m_eUiSBT = m_eUiSBT;

	if( m_eUiDrawMethod != CExtRichStyleDescription::e_ui_dm_unspecified )
		styleDst.m_eUiDrawMethod = m_eUiDrawMethod;

	if( m_eUiBackgroundDrawMethod != CExtRichStyleDescription::e_ui_dm_unspecified )
		styleDst.m_eUiBackgroundDrawMethod = m_eUiBackgroundDrawMethod;

	if( m_eC == CExtRichStyleDescription::ec_inherit )
	{
		styleDst.m_eC = styleSrc.m_eC;
		if( styleSrc.m_eC == CExtRichStyleDescription::ec_url )
			styleDst.m_strCursorImagePath = styleSrc.m_strCursorImagePath;
	}
	else if( m_eC != CExtRichStyleDescription::ec_auto )
	{
		styleDst.m_eC = m_eC;
		if( m_eC == CExtRichStyleDescription::ec_url )
			styleDst.m_strCursorImagePath = m_strCursorImagePath;
	}

	if( m_eCI == CExtRichStyleDescription::eci_inherit )
	{
		styleDst.m_eCI = styleSrc.m_eCI;
		if( styleSrc.m_eCI == CExtRichStyleDescription::eci_shape )
			styleDst.m_rcClipImageShape = styleSrc.m_rcClipImageShape;
	}
	else if( m_eCI != CExtRichStyleDescription::eci_auto )
	{
		styleDst.m_eCI = m_eCI;
		if( m_eCI == CExtRichStyleDescription::eci_shape )
			styleDst.m_rcClipImageShape = m_rcClipImageShape;
	}

	CExtRichStyleDescription::stat_impl_ApplyRectUV( styleDst.m_rcUiSlice, m_rcUiSlice );
	CExtRichStyleDescription::stat_impl_ApplyRectUV( styleDst.m_rcUiBackgroundSlice, m_rcUiBackgroundSlice );
	CExtRichStyleDescription::stat_impl_ApplyRectUV( styleDst.m_rcUiBackgroundExtend, m_rcUiBackgroundExtend );

//	if( m_eCS == CExtRichStyleDescription::ecs_inherit )
//		styleDst.m_eCS = styleSrc.m_eCS;
//	else if( m_eCS != CExtRichStyleDescription::ecs_none )
//		styleDst.m_eCS = m_eCS;

	if( m_eZIT == CExtRichStyleDescription::ezi_inherit )
	{
		styleDst.m_eZIT = styleSrc.m_eZIT;
		if( styleSrc.m_eZIT == CExtRichStyleDescription::ezi_explicit )
			styleDst.m_nZIndex = styleSrc.m_nZIndex;
	}
	else if( m_eZIT != CExtRichStyleDescription::ezi_auto )
	{
		styleDst.m_eZIT = m_eZIT;
		if( m_eZIT == CExtRichStyleDescription::ezi_explicit )
			styleDst.m_nZIndex = m_nZIndex;
	}

	if( m_eP != CExtRichStyleDescription::ep_inherit )
	{
		styleDst.m_rcOuter.SetRect( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED );
		styleDst.m_rcOuterP.SetRect( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED );
	}
	CExtRichStyleDescription::stat_impl_ApplyRectUV( styleDst.m_rcOuter, m_rcOuter );
	CExtRichStyleDescription::stat_impl_ApplyRectUV( styleDst.m_rcOuterP, m_rcOuterP );

	if( m_eBPT != CExtRichStyleDescription::ebpt_unspecified )
	{
		if( m_eBPT != CExtRichStyleDescription::ebpt_inherit )
		{
			if( m_eBR == CExtRichStyleDescription::ebrInherit )
				styleDst.m_eBR = styleSrc.m_eBR;
			else
				styleDst.m_eBR = m_eBR;

			if( m_eBA == CExtRichStyleDescription::ebaInherit )
				styleDst.m_eBA = styleSrc.m_eBA;
			else
				styleDst.m_eBA = m_eBA;

			//if( m_eBPT != CExtRichStyleDescription::ebpt_unspecified )
				styleDst.m_eBPT = m_eBPT;

			if( m_eBPA != CExtRichStyleDescription::ebpa_unspecified )
				styleDst.m_eBPA = m_eBPA;

			if( ! m_strBackgroundImagePath.IsEmpty() )
				styleDst.m_strBackgroundImagePath = ( m_strBackgroundImagePath == _T("inherit") ) ? styleSrc.m_strBackgroundImagePath : m_strBackgroundImagePath;
			else
				styleDst.m_strBackgroundImagePath = m_strBackgroundImagePath;
		}
		else
		{
			styleDst.m_eBR = styleSrc.m_eBR;
			styleDst.m_eBA = styleSrc.m_eBA;
			styleDst.m_eBPT = styleSrc.m_eBPT;
			styleDst.m_eBPA = styleSrc.m_eBPA;
			styleDst.m_strBackgroundImagePath = styleSrc.m_strBackgroundImagePath;
		}
	}
	else
	{
		styleDst.m_eBR = CExtRichStyleDescription::ebrNoRepeat;
		styleDst.m_eBA = CExtRichStyleDescription::ebaScroll;
		styleDst.m_eBPT = CExtRichStyleDescription::ebpt_unspecified;
		styleDst.m_eBPA = CExtRichStyleDescription::ebpa_unspecified;
		styleDst.m_strBackgroundImagePath.Empty();
	}

	if( ! m_strListStyleImagePath.IsEmpty() )
		styleDst.m_strListStyleImagePath = ( m_strListStyleImagePath == _T("inherit") ) ? styleSrc.m_strListStyleImagePath : m_strListStyleImagePath;
//	else
//		styleDst.m_strListStyleImagePath = m_strListStyleImagePath;

	if( ! m_strCursorImagePath.IsEmpty() )
		styleDst.m_strCursorImagePath = m_strCursorImagePath;

	if( ! m_strContent.IsEmpty() )
		styleDst.m_strContent = m_strContent;

	if( ! m_strContentBefore.IsEmpty() )
		styleDst.m_strContentBefore = m_strContentBefore;
	if( ! m_strContentAfter.IsEmpty() )
		styleDst.m_strContentAfter = m_strContentAfter;

//	if( ! m_strCounterIncrement.IsEmpty() )
//		styleDst.m_strCounterIncrement = m_strCounterIncrement;
//	if( ! m_strCounterReset.IsEmpty() )
//		styleDst.m_strCounterReset = m_strCounterReset;

	if( m_eBCT == CExtRichStyleDescription::ebct_inherit )
		styleDst.m_eBCT = styleSrc.m_eBCT;
	else
		styleDst.m_eBCT = m_eBCT;
	if( m_clrText != COLORREF(-1L) )
		styleDst.m_clrText = ( m_clrText == COLORREF(-2L) ) ? COLORREF(-1L) : m_clrText;
	if( m_eBCT != CExtRichStyleDescription::ebct_inherit )
	{
		if( m_eBCT != CExtRichStyleDescription::ebct_transparent )
		{
			if( m_clrBack != COLORREF(-1L) )
				styleDst.m_clrBack = /*( m_clrBack == COLORREF(-2L) ) ? COLORREF(-1L) :*/ m_clrBack;
		}
		else
			styleDst.m_clrBack = COLORREF(-2L);
	}
	else
		styleDst.m_clrBack = /*( styleSrc.m_clrBack == COLORREF(-2L) ) ? COLORREF(-1L) :*/ styleSrc.m_clrBack;

	if( m_nParaIndent >= 0 )
		styleDst.m_nParaIndent = m_nParaIndent;

	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcPadding, m_rcPadding );
	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcBorder, m_rcBorder );
	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcMargin, m_rcMargin );
	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcCellPadding, m_rcCellPadding );
	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcClipImageShape, m_rcClipImageShape );
	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcUiSlice, m_rcUiSlice );
	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcUiBackgroundSlice, m_rcUiBackgroundSlice );
	CExtRichStyleDescription::stat_impl_ApplyRectLEG( styleDst.m_rcUiBackgroundExtend, m_rcUiBackgroundExtend );
	CExtRichStyleDescription::stat_impl_ApplySizeLEG( styleDst.m_sizeCellSpacing, m_sizeCellSpacing );
	CExtRichStyleDescription::stat_impl_ApplySizeLEG_WH( styleDst.m_sizeWH, m_sizeWH );
	CExtRichStyleDescription::stat_impl_ApplySizeLEG_WH( styleDst.m_sizeWHP, m_sizeWHP );
	CExtRichStyleDescription::stat_impl_ApplySizeLEG( styleDst.m_sizeSpan, m_sizeSpan );
	if( m_sizeSpan.cx == 0 )
		m_sizeSpan.cx = 1;
	if( m_sizeSpan.cy == 0 )
		m_sizeSpan.cy = 1;

	CExtRichStyleDescription::stat_impl_ApplyPointLEG( styleDst.m_ptBackgroundAlignment, m_ptBackgroundAlignment );

	if( m_clrBorderLeft != COLORREF(-1L) )
		styleDst.m_clrBorderLeft = ( m_clrBorderLeft == COLORREF(-2L) ) ? COLORREF(-1L) : m_clrBorderLeft;
	if( m_clrBorderRight != COLORREF(-1L) )
		styleDst.m_clrBorderRight = ( m_clrBorderRight == COLORREF(-2L) ) ? COLORREF(-1L) : m_clrBorderRight;
	if( m_clrBorderTop != COLORREF(-1L) )
		styleDst.m_clrBorderTop = ( m_clrBorderTop == COLORREF(-2L) ) ? COLORREF(-1L) : m_clrBorderTop;
	if( m_clrBorderBottom != COLORREF(-1L) )
		styleDst.m_clrBorderBottom = ( m_clrBorderBottom == COLORREF(-2L) ) ? COLORREF(-1L) : m_clrBorderBottom;
	if( m_clrOutlineColor != COLORREF(-1L) )
		styleDst.m_clrOutlineColor = ( m_clrOutlineColor == COLORREF(-2L) ) ? COLORREF(-1L) : m_clrOutlineColor;

	styleDst.m_ebsLeft   = ( m_ebsLeft   == CExtRichStyleDescription::ebsInherit ) ? styleSrc.m_ebsLeft   : m_ebsLeft;
	styleDst.m_ebsRight  = ( m_ebsRight  == CExtRichStyleDescription::ebsInherit ) ? styleSrc.m_ebsRight  : m_ebsRight;
	styleDst.m_ebsTop    = ( m_ebsTop    == CExtRichStyleDescription::ebsInherit ) ? styleSrc.m_ebsTop    : m_ebsTop;
	styleDst.m_ebsBottom = ( m_ebsBottom == CExtRichStyleDescription::ebsInherit ) ? styleSrc.m_ebsBottom : m_ebsBottom;
// 	if( m_ebsLeft == CExtRichStyleDescription::ebsInherit )
// 		styleDst.m_ebsLeft = styleSrc.m_ebsLeft;
// 	else
// 	{
// 		styleDst.m_ebsLeft = m_ebsLeft;
// 		if(		(	styleDst.m_rcBorder.IsRectNull()
// 				||	(	styleDst.m_rcBorder.left == -1
// 					&&	styleDst.m_rcBorder.top == -1
// 					&&	styleDst.m_rcBorder.right == -1
// 					&&	styleDst.m_rcBorder.bottom == -1
// 					)
// 				)
// 			&&	styleDst.m_ebsLeft != CExtRichStyleDescription::ebsUnknown
// 			)
// 			styleDst.m_rcBorder.SetRect( 2, 2, 2, 2 );
// 	}
// 	if( m_ebsRight == CExtRichStyleDescription::ebsInherit )
// 		styleDst.m_ebsRight = styleSrc.m_ebsRight;
// 	else
// 	{
// 		styleDst.m_ebsRight = m_ebsRight;
// 		if(		(	styleDst.m_rcBorder.IsRectNull()
// 				||	(	styleDst.m_rcBorder.left == -1
// 					&&	styleDst.m_rcBorder.top == -1
// 					&&	styleDst.m_rcBorder.right == -1
// 					&&	styleDst.m_rcBorder.bottom == -1
// 					)
// 				)
// 			&&	styleDst.m_ebsRight != CExtRichStyleDescription::ebsUnknown
// 			)
// 			styleDst.m_rcBorder.SetRect( 2, 2, 2, 2 );
// 	}
// 	if( m_ebsTop == CExtRichStyleDescription::ebsInherit )
// 		styleDst.m_ebsTop = styleSrc.m_ebsTop;
// 	else
// 	{
// 		styleDst.m_ebsTop = m_ebsTop;
// 		if(		(	styleDst.m_rcBorder.IsRectNull()
// 				||	(	styleDst.m_rcBorder.left == -1
// 					&&	styleDst.m_rcBorder.top == -1
// 					&&	styleDst.m_rcBorder.right == -1
// 					&&	styleDst.m_rcBorder.bottom == -1
// 					)
// 				)
// 			&&	styleDst.m_ebsTop != CExtRichStyleDescription::ebsUnknown
// 			)
// 			styleDst.m_rcBorder.SetRect( 2, 2, 2, 2 );
// 	}
// 	if( m_ebsBottom == CExtRichStyleDescription::ebsInherit )
// 		styleDst.m_ebsBottom = styleSrc.m_ebsBottom;
// 	else
// 	{
// 		styleDst.m_ebsBottom = m_ebsBottom;
// 		if(		(	styleDst.m_rcBorder.IsRectNull()
// 				||	(	styleDst.m_rcBorder.left == -1
// 					&&	styleDst.m_rcBorder.top == -1
// 					&&	styleDst.m_rcBorder.right == -1
// 					&&	styleDst.m_rcBorder.bottom == -1
// 					)
// 				)
// 			&&	styleDst.m_ebsBottom != CExtRichStyleDescription::ebsUnknown
// 			)
// 			styleDst.m_rcBorder.SetRect( 2, 2, 2, 2 );
// 	}

	if( m_nFirstNumberInList >= 0 )
		styleDst.m_nFirstNumberInList = m_nFirstNumberInList;

	if( m_nUi_transparency >= 0 )
		styleDst.m_nUi_transparency = m_nUi_transparency;
	if( m_nUi_background_transparency >= 0 )
		styleDst.m_nUi_background_transparency = m_nUi_background_transparency;

	if( m_nOutlineWidth != 0 )
		styleDst.m_nOutlineWidth = m_nOutlineWidth;

	if( m_nMaxHeight >= 0 )
		styleDst.m_nMaxHeight = m_nMaxHeight;
	if( m_nMaxWidth >= 0 )
		styleDst.m_nMaxWidth = m_nMaxWidth;
	if( m_nMinHeight >= 0 )
		styleDst.m_nMinHeight = m_nMinHeight;
	if( m_nMinWidth >= 0 )
		styleDst.m_nMinWidth = m_nMinWidth;
	if( m_nSpacerModeMinWidth != 0 )
		styleDst.m_nSpacerModeMinWidth = m_nSpacerModeMinWidth;

	if( m_nBorderSpacingHoriz >= 0 )
		styleDst.m_nBorderSpacingHoriz = m_nBorderSpacingHoriz;
	if( m_nBorderSpacingVert >= 0 )
		styleDst.m_nBorderSpacingVert = m_nBorderSpacingVert;

	if( m_lfMaxHeightP != -1 )
		styleDst.m_lfMaxHeightP = m_lfMaxHeightP;
	if( m_lfMaxWidthP != -1 )
		styleDst.m_lfMaxWidthP = m_lfMaxWidthP;
	if( m_lfMinHeightP != 0 )
		styleDst.m_lfMinHeightP = m_lfMinHeightP;
	if( m_lfMinWidthP != 0 )
		styleDst.m_lfMinWidthP = m_lfMinWidthP;

//	styleDst.m_PCD.Merge( styleSrc.m_PCD );
	styleDst.m_PCD.Merge( m_PCD );

	if( m_eynFocusOnMakeSelected != CExtRichStyleDescription::e_ui_yn_unspecified )
		styleDst.m_eynFocusOnMakeSelected = m_eynFocusOnMakeSelected;
	if( m_eynFocusOnMakeUnSelectedSibling != CExtRichStyleDescription::e_ui_yn_unspecified )
		styleDst.m_eynFocusOnMakeUnSelectedSibling = m_eynFocusOnMakeUnSelectedSibling;
	if( m_eynFocusOffMakeUnSelected != CExtRichStyleDescription::e_ui_yn_unspecified )
		styleDst.m_eynFocusOffMakeUnSelected = m_eynFocusOffMakeUnSelected;
	if( m_eynFocusOffMakeUnSelectedSibling != CExtRichStyleDescription::e_ui_yn_unspecified )
		styleDst.m_eynFocusOffMakeUnSelectedSibling = m_eynFocusOffMakeUnSelectedSibling;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichTableRow

CExtRichTableRow::CExtRichTableRow()
	: m_pRCI_TableRow( NULL )
	, m_nRowHeightCur( 0 )
	, m_nRowHeightMin( 0 )
{
}

CExtRichTableRow::~CExtRichTableRow()
{
}

void CExtRichTableRow::Init( LONG nColCount )
{
static CExtRichContentItem * g_pNullRCI = NULL;
	LONG nCurrentSize = LONG( GetSize() );
	if( nCurrentSize == 0 )
	{
		InsertAt( 0, g_pNullRCI, nColCount );
		return;
	}
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nCurrentSize <= nColCount );
	if( nCurrentSize == nColCount )
		return;
LONG nAddCount = nColCount - nCurrentSize;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nAddCount > 0 );
	InsertAt( nCurrentSize, g_pNullRCI, nAddCount );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LONG( GetSize() ) == nColCount );
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichTableLayout

CExtRichTableLayout::CExtRichTableLayout()
{
}

CExtRichTableLayout::~CExtRichTableLayout()
{
	Empty();
}

void CExtRichTableLayout::Init( LONG nColCount, LONG nRowCount )
{
	Empty();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( GetSize() == 0 );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nColCount > 0 && nRowCount > 0 );
static CExtRichTableRow * g_pNullRow = NULL;
	InsertAt( 0, g_pNullRow, nRowCount );
LONG nRowNo;
	for( nRowNo = 0; nRowNo < nRowCount; nRowNo ++ )
		InstantiateAt( nRowNo )->Init( nColCount );
static LONG g_nZeroWidthValue = 0;
static DOUBLE g_lfZeroWidthValue = 0.0;
	m_arrWidthPrecents.InsertAt( 0, g_lfZeroWidthValue, nColCount );
	m_arrCWcur.InsertAt( 0, g_nZeroWidthValue, nColCount );
	m_arrCWmin.InsertAt( 0, g_nZeroWidthValue, nColCount );
}

void CExtRichTableLayout::Init( const SIZE & sizeDim )
{
	Init( sizeDim.cx, sizeDim.cy );
}

void CExtRichTableLayout::Empty()
{
	m_arrWidthPrecents.RemoveAll();
	m_arrCWcur.RemoveAll();
	m_arrCWmin.RemoveAll();
LONG nRowNo, nRowCount = LONG(GetSize());
	for( nRowNo = 0; nRowNo < nRowCount; nRowNo ++ )
	{
		CExtRichTableRow * pRow = GetAt( nRowNo );
		if( pRow != NULL )
			delete pRow;
	}
	RemoveAll();
	SpanInfoArray_Empty();
}

LONG CExtRichTableLayout::GetMeasuredWidthMin() const
{
LONG nMeasuredWidth = 0;
LONG nColNo, nColCount = LONG(m_arrCWmin.GetSize());
	for( nColNo = 0; nColNo < nColCount; nColNo ++ )
		nMeasuredWidth += m_arrCWmin[ nColNo ];
	return nMeasuredWidth;
}

LONG CExtRichTableLayout::GetMeasuredWidthMax() const
{
LONG nMeasuredWidth = 0;
LONG nColNo, nColCount = LONG(m_arrCWcur.GetSize());
	for( nColNo = 0; nColNo < nColCount; nColNo ++ )
		nMeasuredWidth += m_arrCWcur[ nColNo ];
	return nMeasuredWidth;
}

CExtRichTableRow * CExtRichTableLayout::InstantiateAt( LONG nRowNo )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= nRowNo && nRowNo < GetSize() );
CExtRichTableRow * pRow = GetAt( nRowNo );
	if( pRow == NULL )
	{
		pRow = new CExtRichTableRow;
		SetAt( nRowNo, pRow );
	}
	return pRow;
}

LONG CExtRichTableLayout::GetColCount() const
{
LONG nRowCount = LONG(GetSize());
	if( nRowCount == 0 )
		return 0;
CExtRichTableRow * pRow0 = GetAt( 0 );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow0 != NULL );
LONG nColCount = LONG( pRow0->GetSize() );
	return nColCount;
}

LONG CExtRichTableLayout::GetRowCount() const
{
LONG nRowCount = LONG( GetSize() );
	return nRowCount;
}

CSize CExtRichTableLayout::GetDim() const
{
CSize sizeDim( GetColCount(), GetRowCount() );
	return sizeDim;
}

void CExtRichTableLayout::SniffTable(
	CExtRichContentItem * pTableLevelRCI,
	CSize & sizeDim,
	CList < CPoint, CPoint & > & listSpanRoots,
	CList < CSize, CSize & > & listSpanSizes,
	CList < CExtRichContentItem *, CExtRichContentItem * & > & listSpanItems,
	CTypedPtrList < CPtrList, CExtRichContentItem * > & listRowItems
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pTableLevelRCI != NULL );
POSITION pos = NULL;
	for( pos = pTableLevelRCI->m_listItems.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pChildRCI = pTableLevelRCI->m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pChildRCI != NULL );
		if( pChildRCI->GetDisplay() == CExtRichStyleDescription::ed_table_header_group )
			SniffTableLevel(
				pChildRCI,
				sizeDim,
				listSpanRoots,
				listSpanSizes,
				listSpanItems,
				listRowItems
				);
	}
	for( pos = pTableLevelRCI->m_listItems.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pChildRCI = pTableLevelRCI->m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pChildRCI != NULL );
		if( pChildRCI->GetDisplay() == CExtRichStyleDescription::ed_table_row_group )
			SniffTableLevel(
				pChildRCI,
				sizeDim,
				listSpanRoots,
				listSpanSizes,
				listSpanItems,
				listRowItems
				);
	}
	SniffTableLevel(
		pTableLevelRCI,
		sizeDim,
		listSpanRoots,
		listSpanSizes,
		listSpanItems,
		listRowItems
		);
	for( pos = pTableLevelRCI->m_listItems.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pChildRCI = pTableLevelRCI->m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pChildRCI != NULL );
		if( pChildRCI->GetDisplay() == CExtRichStyleDescription::ed_table_footer_group )
			SniffTableLevel(
				pChildRCI,
				sizeDim,
				listSpanRoots,
				listSpanSizes,
				listSpanItems,
				listRowItems
				);
	}
}

void CExtRichTableLayout::SniffTableLevel(
	CExtRichContentItem * pTableLevelRCI,
	CSize & sizeDim,
	CList < CPoint, CPoint & > & listSpanRoots,
	CList < CSize, CSize & > & listSpanSizes,
	CList < CExtRichContentItem *, CExtRichContentItem * & > & listSpanItems,
	CTypedPtrList < CPtrList, CExtRichContentItem * > & listRowItems
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pTableLevelRCI != NULL );
POSITION pos = pTableLevelRCI->m_listItems.GetHeadPosition();
//CExtRichContentItem * pTableRow = NULL;
LONG nLocalColCountInGroup = 0;
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pTableRowHI = pTableLevelRCI->m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pTableRowHI != NULL );
		CExtRichStyleDescription::e_display_t eD_found = pTableRowHI->GetDisplay();
		if( eD_found == CExtRichStyleDescription::ed_table_row )
		{
			if( nLocalColCountInGroup > 0 )
			{
				listRowItems.AddTail( pTableLevelRCI );
				sizeDim.cy ++;
				sizeDim.cx = max( sizeDim.cx, nLocalColCountInGroup );
				nLocalColCountInGroup = 0;
			}
			listRowItems.AddTail( pTableRowHI );
			sizeDim.cy ++;
			LONG nLocalColCountInTR = 0;
			POSITION posCell = pTableRowHI->m_listItems.GetHeadPosition();
			for( ; posCell != NULL; )
			{
				CExtRichContentItem * pTableCellHI = pTableRowHI->m_listItems.GetNext( posCell );
				if( pTableCellHI == NULL )
					continue;
				if( pTableCellHI->GetDisplay() == CExtRichStyleDescription::ed_table_cell )
				{
					CSize sizeSpan = pTableCellHI->GetEffectiveStyle().m_sizeSpan;
					sizeSpan.cx = max( sizeSpan.cx, 1 );
					sizeSpan.cy = max( sizeSpan.cy, 1 );
					if( sizeSpan.cx > 1 || sizeSpan.cy > 1 )
					{
						CPoint ptSpanRootLocation( nLocalColCountInTR, sizeDim.cy - 1 );
						listSpanRoots.AddTail( ptSpanRootLocation );
						listSpanSizes.AddTail( sizeSpan );
						listSpanItems.AddTail( pTableCellHI );
					}
					nLocalColCountInTR ++;
				} // if( pTableCellHI->GetDisplay() == CExtRichStyleDescription::ed_table_cell )
			} // for( ; posCell != NULL; )
			sizeDim.cx = max( sizeDim.cx, nLocalColCountInTR );
		} // if( eD_found == CExtRichStyleDescription::ed_table_row )
		else if( eD_found == CExtRichStyleDescription::ed_table_cell
			&&	pTableLevelRCI->GetDisplay() != CExtRichStyleDescription::ed_table
			)
		{
			CSize sizeSpan = pTableRowHI->GetEffectiveStyle().m_sizeSpan;
			sizeSpan.cx = max( sizeSpan.cx, 1 );
			sizeSpan.cy = max( sizeSpan.cy, 1 );
			if( sizeSpan.cx > 1 || sizeSpan.cy > 1 )
			{
				CPoint ptSpanRootLocation( nLocalColCountInGroup, sizeDim.cy - 1 );
				listSpanRoots.AddTail( ptSpanRootLocation );
				listSpanSizes.AddTail( sizeSpan );
				listSpanItems.AddTail( pTableRowHI );
			}
			nLocalColCountInGroup ++;
		} // else if( eD_found == CExtRichStyleDescription::ed_table_cell ...
	} // for( ; pos != NULL; )
	if( nLocalColCountInGroup > 0 )
	{
		listRowItems.AddTail( pTableLevelRCI );
		sizeDim.cy ++;
		sizeDim.cx = max( sizeDim.cx, nLocalColCountInGroup );
	}
}

void CExtRichTableLayout::SpanInfoArray_Init()
{
	SpanInfoArray_Empty();
CSize sizeDim = GetDim();
	if( sizeDim.cx == 0 || sizeDim.cy == 0 )
		return;
static CSize sizeDefItem( 1, 1 );
	m_arrSIA.InsertAt( 0, sizeDefItem, sizeDim.cx * sizeDim.cy );
}

void CExtRichTableLayout::SpanInfoArray_Empty()
{
	m_arrSIA.RemoveAll();
}

SIZE & CExtRichTableLayout::SpanInfoArray_GetAt( INT nX, INT nY )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nX >= 0 && nY >= 0 );
CSize sizeDim = GetDim();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nX < sizeDim.cx && nY < sizeDim.cy );
SIZE & sizeSpan = m_arrSIA.ElementAt( nY * sizeDim.cx + nX );
	return sizeSpan;
}

const SIZE & CExtRichTableLayout::SpanInfoArray_GetAt( INT nX, INT nY ) const
{
	return ( const_cast < CExtRichTableLayout * > ( this ) ) -> SpanInfoArray_GetAt( nX, nY );
}

void CExtRichTableLayout::SpanInfoArray_SetAt( INT nX, INT nY, const SIZE & sizeSpan )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nX >= 0 && nY >= 0 );
CSize sizeDim = GetDim();
	if( ! ( nX < sizeDim.cx && nY < sizeDim.cy ) )
		return;
CSize sizeSpanNew( sizeSpan );
	sizeSpanNew.cx = max( sizeSpanNew.cx, 1 );
	sizeSpanNew.cy = max( sizeSpanNew.cy, 1 );
	m_arrSIA.SetAt( nY * sizeDim.cx + nX, sizeSpanNew );
}

INT CExtRichTableLayout::SpanInfoArray_GetSpanTypeAt( INT nX, INT nY ) const // returns: 0 - 1x1 independent, 1 - span root, -1 - covered
{
const SIZE & sizeSpan = CExtRichTableLayout::SpanInfoArray_GetAt( nX, nY );
	if( sizeSpan.cx == 1 && sizeSpan.cy == 1 )
		return 0;
	__EXT_DEBUG_RICH_CONTENT_ASSERT(
			( sizeSpan.cx <= 0 && sizeSpan.cy <= 0 )
		||	( sizeSpan.cx >  0 && sizeSpan.cy >  0 )
		);
	if( sizeSpan.cx <= 0 || sizeSpan.cy <= 0 )
		return -1;
	return 1;
}

CRect CExtRichTableLayout::GetPartAreaRect(
	INT nColNoFrom, INT nRowNoFrom,
	INT nColNoTo, INT nRowNoTo,
	bool bCurrent // true - current pre-computed size, false - minimal pre-computed size
	) const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nColNoFrom >= 0 && nRowNoFrom >= 0 && nColNoTo >= 0 && nRowNoTo >= 0 );
CSize sizeDim = GetDim();
//	__EXT_DEBUG_RICH_CONTENT_ASSERT( nColNoFrom < sizeDim.cx && nRowNoFrom < sizeDim.cy && nColNoTo < sizeDim.cx && nRowNoTo < sizeDim.cy );
//	__EXT_DEBUG_RICH_CONTENT_ASSERT( nColNoFrom <= nColNoTo && nRowNoFrom <= nRowNoTo );
CRect rcArea( 0, 0, 0, 0 );
	if( nColNoFrom >= sizeDim.cx )
		nColNoFrom = sizeDim.cx - 1;
	if( nColNoTo >= sizeDim.cx )
		nColNoTo = sizeDim.cx - 1;
	if( nRowNoFrom >= sizeDim.cy )
		nRowNoFrom = sizeDim.cy - 1;
	if( nRowNoTo >= sizeDim.cy )
		nRowNoTo = sizeDim.cy - 1;
	if( ! ( nColNoFrom <= nColNoTo && nRowNoFrom <= nRowNoTo ) )
		return rcArea;

INT nWalkIdx;

	for( nWalkIdx = 0; nWalkIdx < nColNoFrom; nWalkIdx ++ )
		rcArea.left += bCurrent ? m_arrCWcur[ nWalkIdx ] : m_arrCWmin[ nWalkIdx ];
	rcArea.right = rcArea.left;
	for( ; nWalkIdx <= nColNoTo; nWalkIdx ++ )
		rcArea.right += bCurrent ? m_arrCWcur[ nWalkIdx ] : m_arrCWmin[ nWalkIdx ];

	for( nWalkIdx = 0; nWalkIdx < nRowNoFrom; nWalkIdx ++ )
		rcArea.top +=  bCurrent ? GetAt( nWalkIdx ) -> m_nRowHeightCur : GetAt( nWalkIdx ) -> m_nRowHeightMin;
	rcArea.bottom = rcArea.top;
	for( ; nWalkIdx <= nRowNoTo; nWalkIdx ++ )
		rcArea.bottom += bCurrent ? GetAt( nWalkIdx ) -> m_nRowHeightCur : GetAt( nWalkIdx ) -> m_nRowHeightMin;

	return rcArea;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichContentItem::_StyleRestore_t

CExtRichContentItem::_StyleRestore_t::_StyleRestore_t( CDC & dc, const CExtRichStyleDescription & style, INT nLO, bool bPlainTextUnderlineMode )
	: m_dc( dc )
	, m_hOldFont( NULL )
	, m_hFont( NULL )
	, m_clrText( COLORREF(-1L) )
	, m_clrBack( COLORREF(-1L) )
	, m_nBkMode( -1 )
	, m_nLO( nLO )
{
	::memset( &m_TextMetric, 0, sizeof(TEXTMETRIC) );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_dc.GetSafeHdc() != NULL );
	m_hFont = style.CreateFont( nLO, bPlainTextUnderlineMode );
	if( m_hFont != NULL )
		m_hOldFont = ::SelectObject( m_dc.m_hDC, m_hFont );
	m_dc.GetTextMetrics( &m_TextMetric );
COLORREF clrSolidBackground = COLORREF(-1L);
	if( style.m_eBCT == CExtRichStyleDescription::ebct_color && style.m_clrBack != COLORREF(-1L) && style.m_clrBack != COLORREF(-2L) )
		clrSolidBackground = style.m_clrBack;
	m_nBkMode = m_dc.GetBkMode();
	if( clrSolidBackground != COLORREF(-1L) )
	{
		m_clrBack = m_dc.SetBkColor( clrSolidBackground );
		dc.SetBkMode( OPAQUE );
	}
	else
		dc.SetBkMode( TRANSPARENT );
	if( style.m_clrText != COLORREF(-1L) )
		m_clrText = m_dc.SetTextColor( style.m_clrText );
}

CExtRichContentItem::_StyleRestore_t::~_StyleRestore_t()
{
	if( m_nBkMode != -1 )
		m_dc.SetBkMode( m_nBkMode );
	if( m_clrText != COLORREF(-1L) )
		m_dc.SetTextColor( m_clrText );
	if( m_clrBack != COLORREF(-1L) )
		m_dc.SetBkColor( m_clrBack );
	if( m_hFont != NULL )
	{
		::SelectObject( m_dc.m_hDC, m_hOldFont );
		::DeleteObject( m_hFont );
	}
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichContentItem::_RelativePosionShift_t

CExtRichContentItem::_RelativePosionShift_t::_RelativePosionShift_t( CDC & dc, const CExtRichContentItem * pRCI, const CExtRichStyleDescription & style )
	: m_dc( dc )
	, m_pRCI( pRCI )
	, m_style( style )
	, m_sizeOffset( 0, 0 )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_dc.GetSafeHdc() != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pRCI != NULL );
	if( ! m_pRCI->_IsStyleOwner() )
		return;
	//if( m_style.m_eP == CExtRichStyleDescription::ep_relative )
// 	if( m_pRCI->GetPosition() == CExtRichStyleDescription::ep_relative )
// 	{
// 		m_sizeOffset.cx = ( m_style.m_rcOuter.left == __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) ? 0 : m_style.m_rcOuter.left;
// 		m_sizeOffset.cy = ( m_style.m_rcOuter.top  == __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) ? 0 : m_style.m_rcOuter.top;
// 		if( m_sizeOffset.cx != 0 || m_sizeOffset.cy != 0 )
// 			m_dc.OffsetViewportOrg( m_sizeOffset.cx, m_sizeOffset.cy );
// 	}


	if( m_pRCI->GetPosition() == CExtRichStyleDescription::ep_relative )
	{
		CRect rcOuter = m_style.m_rcOuter;
		if( pRCI->m_pParent != NULL && ( pRCI->m_pParent->m_eType == __EHIT_GENERIC_TAG || pRCI->m_pParent->m_eType == __EHIT_ROOT ) )
		{
			if( m_style.m_rcOuterP.left != __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
				rcOuter.left = pRCI->m_pParent->m_rcLayout.left + ::MulDiv( pRCI->m_pParent->m_rcLayout.Width(), m_style.m_rcOuterP.left, 100 );
			if( m_style.m_rcOuterP.top != __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
				rcOuter.top = pRCI->m_pParent->m_rcLayout.top + ::MulDiv( pRCI->m_pParent->m_rcLayout.Height(), m_style.m_rcOuterP.top, 100 );
		}

		m_sizeOffset.cx = ( rcOuter.left == __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) ? 0 : rcOuter.left;
		m_sizeOffset.cy = ( rcOuter.top  == __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) ? 0 : rcOuter.top;
		if( m_sizeOffset.cx != 0 || m_sizeOffset.cy != 0 )
			m_dc.OffsetViewportOrg( m_sizeOffset.cx, m_sizeOffset.cy );
	}
}

CExtRichContentItem::_RelativePosionShift_t::~_RelativePosionShift_t()
{
	if( m_sizeOffset.cx != 0 || m_sizeOffset.cy != 0 )
		m_dc.OffsetViewportOrg( -m_sizeOffset.cx, -m_sizeOffset.cy );
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichContentHitTestInfo

CExtRichContentHitTestInfo::CExtRichContentHitTestInfo()
	: m_ptHT( 0, 0 ), m_ptInitialHT( 0, 0 ), m_pStartHtRCI( NULL )
	{ }

CExtRichContentHitTestInfo::CExtRichContentHitTestInfo( const POINT & ptHT, CExtRichContentItem * pStartHtRCI )
	: m_ptHT( ptHT ), m_ptInitialHT( ptHT ), m_pStartHtRCI( pStartHtRCI )
	{ }

CExtRichContentHitTestInfo::CExtRichContentHitTestInfo( const POINT & ptHT, CExtRichContentLayout & _layout )
	: m_ptHT( ptHT ), m_ptInitialHT( ptHT ), m_pStartHtRCI( ( _layout.m_listHeap.GetCount() > 0 ) ? _layout.m_listHeap.GetHead() : NULL )
	{ }

CExtRichContentHitTestInfo::CExtRichContentHitTestInfo( const CExtRichContentHitTestInfo & other )
	: m_ptHT( 0, 0 ), m_ptInitialHT( 0, 0 ), m_pStartHtRCI( NULL )
	{ Assign( other ); }

CExtRichContentHitTestInfo & CExtRichContentHitTestInfo:: operator = ( const CExtRichContentHitTestInfo & other )
	{ Assign( other ); return (*this); }

bool CExtRichContentHitTestInfo::  operator == ( const CExtRichContentHitTestInfo & other ) const
	{ return IsEqual( other ); }

bool CExtRichContentHitTestInfo::  operator != ( const CExtRichContentHitTestInfo & other ) const
	{ return ( IsEqual( other ) ? false : true ); }

void CExtRichContentHitTestInfo::Empty()
	{ m_listHtBranch.RemoveAll(); }

bool CExtRichContentHitTestInfo::IsEmpty() const
	{ return ( m_listHtBranch.GetCount() > 0 ) ? false : true; }

void CExtRichContentHitTestInfo::Assign( const CExtRichContentHitTestInfo & other )
	{ m_ptHT = other.m_ptHT; m_ptInitialHT = other.m_ptInitialHT; m_pStartHtRCI = other.m_pStartHtRCI; m_listHtBranch.RemoveAll(); m_listHtBranch.AddTail( const_cast < CList < ht_item_t, ht_item_t & > * > ( &(other.m_listHtBranch) ) ); }

bool CExtRichContentHitTestInfo::IsEqual( const CExtRichContentHitTestInfo & other ) const
{
	if( m_ptHT != other.m_ptHT )
		return false;
	if( m_ptInitialHT != other.m_ptInitialHT )
		return false;
	if( m_pStartHtRCI != other.m_pStartHtRCI )
		return false;
	if( m_listHtBranch.GetCount() != other.m_listHtBranch.GetCount() )
		return false;
POSITION pos1 = m_listHtBranch.GetHeadPosition(), pos2 = other.m_listHtBranch.GetHeadPosition();
	for( ; pos1 != NULL; )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pos2 != NULL );
		ht_item_t & _ht_item1 = ( const_cast < CExtRichContentHitTestInfo * > ( this ) ) -> m_listHtBranch.GetNext( pos1 );
		ht_item_t & _ht_item2 = ( const_cast < CExtRichContentHitTestInfo * > ( &other ) ) -> m_listHtBranch.GetNext( pos2 );
		if( _ht_item1 != _ht_item2 )
			return false;
	}
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pos1 == NULL && pos2 == NULL );
	return true;
}

void CExtRichContentHitTestInfo::HitTest()
{
	Empty();
	if( m_pStartHtRCI == NULL )
		return;
POSITION posEFA = m_pStartHtRCI->m_layout.m_listEFA.GetHeadPosition();
	for( ; posEFA != NULL; )
	{
		CExtRichContentItem * pRCIFA = m_pStartHtRCI->m_layout.m_listEFA.GetNext( posEFA );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCIFA != NULL );
		if( pRCIFA->_DoHitTestImpl_Basic( *this, pRCIFA ) )
		{
			CExtRichContentHitTestInfo::ht_item_t _ht_item( pRCIFA, __ERCHT_ON_ITEM_INNER_AREA );
			pRCIFA->_DoHitTestImpl_PostAdjustment( *this, _ht_item, pRCIFA );
			m_listHtBranch.AddHead( _ht_item );
			break;
		}
	}
	if( m_pStartHtRCI != NULL && m_pStartHtRCI->_DoHitTestImpl_Basic( *this, NULL ) )
	{
		CExtRichContentHitTestInfo::ht_item_t _ht_item( m_pStartHtRCI, __ERCHT_ON_ITEM_INNER_AREA );
		m_pStartHtRCI->_DoHitTestImpl_PostAdjustment( *this, _ht_item, m_pStartHtRCI );
		m_listHtBranch.AddHead( _ht_item );
	}
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichContentItem

CExtRichContentItem::CExtRichContentItem(
	CExtRichContentLayout & _layout,
	CExtRichContentItem::e_html_item_type_t eType,
	CExtRichContentItem * pParent, // = NULL
	CExtRichContentItem * pPrev, // = NULL
	CExtRichContentItem * pNext // = NULL
	)
	: m_layout( _layout )
	, m_pParent( pParent )
	, m_pPrev( pPrev )
	, m_pNext( pNext )
	, m_hWndAttached( NULL )
	, m_eType( eType )
	, m_eError( __EHIE_OK )
	, m_bClosingTag( false )
	, m_bSingleTagMode( false )
	, m_bDynamicTagFromParseMode( false )
	, m_rcLayout( 0, 0, 0, 0 )
	, m_sizePreCalc( 0, 0 )
	, m_sizeMaxChild( 0, 0 )
	, m_sizeComputedSpan( 1, 1 )
	, m_nHelperTmAscent( 0 )
	, m_nHelperTmInternalLeading( 0 )
	, m_bHelperWordStartItem( false )
	, m_nZeroBasedListIndex( -1 )
	, m_nAppliedListIndex( -1 )
	, m_nListNumberWidth( -1 )
	, m_bHaveStyleChangingCache( false )
	, m_pStyleChangingCache( NULL )
	, m_bHaveEffectiveStyleCache( false )
	, m_pStyleEffective( NULL )
	, m_bEwstProcessingComplete( false )
	, m_bDynamicItemBefore( false )
	, m_bDynamicItemAfter( false )
	, m_bDynamicItemList( false )
	, m_pTable( NULL )
	, m_bMsWordCssWA( false )
	, m_ptScrollPos( 0L, 0L )
	, m_sizeOverflow( 0L, 0L )
	, m_pListClassNames( NULL )
	, m_bHorzScrollBarTracking( false )
	, m_nSBMHT( INT(CExtPaintManager::__ESBMHT_NOWHERE) )
	, m_bSbProcessingClick( false )
	, m_bSbProcessingHover( false )
	, m_bSbProcessingOutClick( false )
	, m_bSbProcessingHorzBar( false )
	, m_thSizeWH( -1, -1 )
	, m_thUnderline( false )
	, m_thDtPrefixOnlyMode( false )
{
	_ClearHaveFlags();
	if( m_pPrev == NULL && m_pNext == NULL && m_pParent != NULL )
		m_pPrev =
			(	m_eType == __EHIT_PARAMETER_BASIC
			||	m_eType == __EHIT_PARAMETER_CSS_CONTAINER
			||	m_eType == __EHIT_PARAMETER_CSS_VALUE
			)
			? ( ( m_pParent->m_listParms.GetCount() > 0 ) ? m_pParent->m_listParms.GetTail() : NULL )
			: ( ( m_pParent->m_listItems.GetCount() > 0 ) ? m_pParent->m_listItems.GetTail() : NULL )
				;
	if( m_pPrev != NULL )
		m_pPrev->m_pNext = this;
	if( m_pNext != NULL )
		m_pNext->m_pPrev = this;
}

CExtRichContentItem::~CExtRichContentItem()
{
	if( m_pListClassNames != NULL )
	{
		delete m_pListClassNames;
		m_pListClassNames = NULL;
	}
CExtRichContentItem * pRCI = ( m_listParms.GetCount() > 0 ) ? m_listParms.GetHead() : NULL;
	for( ; pRCI != NULL; )
	{
		delete pRCI;
		m_listParms.RemoveHead();
		if( m_listParms.GetCount() == 0 )
			break;
		pRCI = m_listParms.GetHead();
	} // for( ; pos != NULL; )
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_listParms.GetCount() == 0 );
	if( m_pTable != NULL )
	{
		delete m_pTable;
		m_pTable = NULL;
	}
#if (defined _DEBUG)
	if( m_eType == __EHIT_TEXT_RANGE || m_eType == __EHIT_TEXT_SPACE )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pStyleChangingCache == NULL );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pStyleEffective == NULL );
	}
#endif // (defined _DEBUG)
	if( m_pStyleChangingCache != NULL )
		delete m_pStyleChangingCache;
	if( m_pStyleEffective != NULL )
		delete m_pStyleEffective;
}

CRect CExtRichContentItem::CalcEffectiveRect() const
{
CExtRichStyleDescription::e_position_t eP = GetPosition();
	if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )
		return m_rcLayout;
CRect rcEffectiveLayout = m_rcLayout;
const CExtRichContentItem * pRCI = m_pParent;
	for( ; pRCI != NULL; pRCI = pRCI->m_pParent )
	{
		rcEffectiveLayout.OffsetRect( - pRCI->m_ptScrollPos );
		CExtRichStyleDescription::e_position_t eP = pRCI->GetPosition();
		if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )
			break;
	}
	return rcEffectiveLayout;
}

CExtRichContentItem * CExtRichContentItem::BrowseNext()
{
	if( m_listItems.GetCount() > 0 )
		return m_listItems.GetHead();
	if( m_pNext != NULL )
		return m_pNext;
	for( CExtRichContentItem * pRCI = m_pParent; pRCI != NULL; pRCI = pRCI->m_pParent )
	{
		if( pRCI->m_pNext != NULL )
			return pRCI->m_pNext;
	}
	return NULL;
}

CExtRichContentItem * CExtRichContentItem::BrowsePrev()
{
	if( m_pPrev == NULL )
	{
		if( m_pParent != NULL )
			return m_pParent;
		CExtRichContentItem * pRCI = this;
		for( ; pRCI->m_listItems.GetCount() > 0; pRCI = pRCI->m_listItems.GetTail() );
		return pRCI;
	}
CExtRichContentItem * pRCI = m_pPrev;
	for( ; pRCI->m_listItems.GetCount() > 0; pRCI = pRCI->m_listItems.GetTail() );
	return pRCI;
}

void CExtRichContentItem::ChangeStyle( __EXT_MFC_SAFE_LPCTSTR strStyle )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( _IsStyleOwner() );
CExtRichContentItem _TempClassRCI( m_layout, __EHIT_CLASS_NODE );
	_TempClassRCI.m_strTextParsed.Format( _T("%s style=\"%s\""), _T("$$TempClassName$$"), LPCTSTR(strStyle) );
	_TempClassRCI.ParseParameters();
CExtRichStyleRule styleChanging;
CExtRichStyleDescription styleEmpty = GetEffectiveStyle();
	_TempClassRCI.QueryStyleChanging( styleChanging, styleEmpty );
bool bEmptyChanging = styleChanging.IsEmpty();
	if( bEmptyChanging )
		return;
CExtRichStyleDescription styleDst, & styleEffective = GetEffectiveStyle();
	styleChanging.GetStyle( styleEffective, styleDst );
	styleEffective = styleDst;
	m_bHaveEffectiveStyleCache = true;
	m_bHaveStyleChangingCache = true;
}

bool CExtRichContentItem::RciEvent_ResetElementStateInfo(
	HWND hWndContentViewer,
	const CExtRichStyleDescription::pseudo_class_def_t & statesToReset,
	CExtRichStyleDescription::e_ui_yes_not_option_t eynSetOn,
	bool bDeep // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_ResetElementStateInfo( this, hWndContentViewer, statesToReset, eynSetOn, bDeep );
}

bool CExtRichContentItem::RciEvent_OnKey(
	bool bSysKey,
	bool bKeyDownEvent, // true - key-down event, false - key-up event
	UINT nChar, // virtual key code
	UINT nRepCnt, // key-down/key-up press count
	UINT nFlags, // key-down/key-up event flags
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnKey( this, bSysKey, bKeyDownEvent, nChar, nRepCnt, nFlags, hWndContentViewer );
}

bool CExtRichContentItem::RciEvent_OnSelect( HWND hWndContentViewer, bool bSelected )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnSelect( this, hWndContentViewer, bSelected );
}

bool CExtRichContentItem::RciEvent_OnDisable( HWND hWndContentViewer, bool bDisabled )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	if( ! ::IsWindow( m_hWndAttached ) )
		m_hWndAttached = NULL;
	else
	{
		::EnableWindow( m_hWndAttached, bDisabled ? FALSE : TRUE );
	} // else from if( ! ::IsWindow( m_hWndAttached ) )
	return m_layout.RciEvent_OnDisable( this, hWndContentViewer, bDisabled );
}

bool CExtRichContentItem::RciEvent_OnFocusEnter( HWND hWndContentViewer, CExtRichContentItem * pOldFocusRCI )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
	if( styleEffective.m_eUiFocusEnsureVisibility == CExtRichStyleDescription::e_ui_yn_yes )
		Scrolling_EnsureVisibility();
	if( styleEffective.m_eynFocusOnMakeSelected == CExtRichStyleDescription::e_ui_yn_yes )
	{
		RciEvent_OnSelect( hWndContentViewer, true );
		CExtRichStyleDescription::pseudo_class_def_t statesSelectionOnly;
		statesSelectionOnly.m_eynSelection = CExtRichStyleDescription::e_ui_yn_yes;
		if( ! RciEvent_ResetElementStateInfo( hWndContentViewer, statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_yes ) )
		{
			ResetElementStateInfo( statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_yes );
			//ResetStyleInfo();
		}
	} // if( styleEffective.m_eynFocusOnMakeSelected == CExtRichStyleDescription::e_ui_yn_yes )
	if( styleEffective.m_eynFocusOnMakeUnSelectedSibling == CExtRichStyleDescription::e_ui_yn_yes && m_pParent != NULL )
	{
		CExtRichStyleDescription::pseudo_class_def_t statesSelectionOnly;
		statesSelectionOnly.m_eynSelection = CExtRichStyleDescription::e_ui_yn_yes;
		for( POSITION pos = m_pParent->m_listItems.GetHeadPosition(); pos != NULL; )
		{
			CExtRichContentItem * pRCI_walk = m_pParent->m_listItems.GetNext( pos );
			ASSERT( pRCI_walk != NULL );
			if(		LPVOID(pRCI_walk) == LPVOID(this)
				||	pRCI_walk->m_eType != m_eType
				||	pRCI_walk->m_strTextParsed.CompareNoCase( LPCTSTR(m_strTextParsed) ) != 0
				||	( ! pRCI_walk->IsParticipantOfFocus() )
				)
				continue;
			pRCI_walk->RciEvent_OnSelect( hWndContentViewer, false );
			if( ! pRCI_walk->RciEvent_ResetElementStateInfo( hWndContentViewer, statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_unspecified ) )
			{
				pRCI_walk->ResetElementStateInfo( statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_unspecified );
				//pRCI_walk->ResetStyleInfo();
			}
		} // for( POSITION pos = m_pParent->m_listItems.GetHeadPosition(); pos != NULL; )
	} // if( styleEffective.m_eynFocusOnMakeUnSelectedSibling == CExtRichStyleDescription::e_ui_yn_yes && m_pParent != NULL )
	return m_layout.RciEvent_OnFocusEnter( this, hWndContentViewer, pOldFocusRCI );
}

bool CExtRichContentItem::RciEvent_OnFocusLeave( HWND hWndContentViewer, CExtRichContentItem * pNewFocusRCI )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
	if( styleEffective.m_eynFocusOffMakeUnSelected == CExtRichStyleDescription::e_ui_yn_yes )
	{
		RciEvent_OnSelect( hWndContentViewer, false );
		CExtRichStyleDescription::pseudo_class_def_t statesSelectionOnly;
		statesSelectionOnly.m_eynSelection = CExtRichStyleDescription::e_ui_yn_yes;
		if( ! RciEvent_ResetElementStateInfo( hWndContentViewer, statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_unspecified ) )
		{
			ResetElementStateInfo( statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_unspecified );
			//ResetStyleInfo();
		}
	} // if( styleEffective.m_eynFocusOffMakeUnSelected == CExtRichStyleDescription::e_ui_yn_yes )
	if( styleEffective.m_eynFocusOffMakeUnSelectedSibling == CExtRichStyleDescription::e_ui_yn_yes && m_pParent != NULL )
	{
		CExtRichStyleDescription::pseudo_class_def_t statesSelectionOnly;
		statesSelectionOnly.m_eynSelection = CExtRichStyleDescription::e_ui_yn_yes;
		for( POSITION pos = m_pParent->m_listItems.GetHeadPosition(); pos != NULL; )
		{
			CExtRichContentItem * pRCI_walk = m_pParent->m_listItems.GetNext( pos );
			ASSERT( pRCI_walk != NULL );
			if(		LPVOID(pRCI_walk) == LPVOID(this)
				||	pRCI_walk->m_eType != m_eType
				||	pRCI_walk->m_strTextParsed.CompareNoCase( LPCTSTR(m_strTextParsed) ) != 0
				||	( ! pRCI_walk->IsParticipantOfFocus() )
				)
				continue;
			pRCI_walk->RciEvent_OnSelect( hWndContentViewer, false );
			if( ! pRCI_walk->RciEvent_ResetElementStateInfo( hWndContentViewer, statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_unspecified ) )
			{
				pRCI_walk->ResetElementStateInfo( statesSelectionOnly, CExtRichStyleDescription::e_ui_yn_unspecified );
				//pRCI_walk->ResetStyleInfo();
			}
		} // for( POSITION pos = m_pParent->m_listItems.GetHeadPosition(); pos != NULL; )
	} // if( styleEffective.m_eynFocusOffMakeUnSelectedSibling == CExtRichStyleDescription::e_ui_yn_yes && m_pParent != NULL )
	return m_layout.RciEvent_OnFocusLeave( this, hWndContentViewer, pNewFocusRCI );
}

bool CExtRichContentItem::RciEvent_OnMouseWheel( UINT fFlags, short zDelta, CPoint point, const CExtRichContentHitTestInfo & htInfoHover, HWND hWndContentViewer )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	if( m_layout.RciEvent_OnMouseWheel( this, fFlags, zDelta, point, htInfoHover, hWndContentViewer ) )
		return true;
CExtRichStyleDescription::e_scroll_bar_type_t esbtH = GetSBTH();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
CExtRichStyleDescription::e_scroll_bar_type_t esbtV = GetSBTV();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
bool bHaveScrollBarHorz = ( esbtV == CExtRichStyleDescription::esbt_visible && m_sizeOverflow.cy > 0 ) ? true : false;
bool bHaveScrollBarVert = ( esbtV == CExtRichStyleDescription::esbt_visible && m_sizeOverflow.cy > 0 ) ? true : false;
	if( ! ( bHaveScrollBarHorz || bHaveScrollBarVert ) )
		return false;
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
LONG nHSBH = Scrolling_GetHorizontalScrollBarHeight(), nVSBW = Scrolling_GetVerticalScrollBarWidth();
CRect rcLayout( CalcEffectiveRect() );
	rcLayout.DeflateRect( &styleEffective.m_rcCellPadding );
CExtRichStyleDescription::e_position_t eP = GetPosition();
	if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
		rcLayout.DeflateRect( &styleEffective.m_rcMargin );
	rcLayout.DeflateRect( &styleEffective.m_rcBorder );
CExtPaintManager::PAINTSCROLLBARDATA _psbd;
CPoint ptNewScrollPos = m_ptScrollPos;
	if( bHaveScrollBarVert )
	{
		CRect rcSB( rcLayout.right - nVSBW, rcLayout.top, rcLayout.right, rcLayout.bottom );
		if( esbtH == CExtRichStyleDescription::esbt_visible )
			rcSB.bottom -= nHSBH;
		bool bHorz = false;
		LONG & nScrollPos = ptNewScrollPos.y;
		LONG nStepSize = GetScrollBarStepSize( bHorz ); // nStepSize = 1L;
		nScrollPos -= zDelta * nStepSize;
		Scrolling_FillScrollBarInfo( bHorz, rcSB, &_psbd );
		_psbd.AdjustHT( point );
		INT nMx = INT( _psbd.m_DSI.nMax - _psbd.m_DSI.nPage + 1 );
		nScrollPos += nStepSize;
		if( nScrollPos < _psbd.m_DSI.nMin )
			nScrollPos = _psbd.m_DSI.nMin;
		if( nScrollPos > nMx )
			nScrollPos = nMx;
	} // if( bHaveScrollBarVert )
	else if( bHaveScrollBarHorz )
	{
		CRect rcSB( rcLayout.left, rcLayout.bottom - nHSBH, rcLayout.right, rcLayout.bottom );
		if( esbtV == CExtRichStyleDescription::esbt_visible )
			rcSB.right -= nVSBW;
		bool bHorz = true;
		LONG & nScrollPos = ptNewScrollPos.x;
		LONG nStepSize = GetScrollBarStepSize( bHorz ); // nStepSize = 1L;
		nScrollPos -= zDelta * nStepSize;
		Scrolling_FillScrollBarInfo( bHorz, rcSB, &_psbd );
		_psbd.AdjustHT( point );
		INT nMx = INT( _psbd.m_DSI.nMax - _psbd.m_DSI.nPage + 1 );
		nScrollPos += nStepSize;
		if( nScrollPos < _psbd.m_DSI.nMin )
			nScrollPos = _psbd.m_DSI.nMin;
		if( nScrollPos > nMx )
			nScrollPos = nMx;
	} // else if( bHaveScrollBarHorz )
	if( ptNewScrollPos == m_ptScrollPos )
		return false;
	_DoScroll( ptNewScrollPos, hWndContentViewer );
	return true;
}

bool CExtRichContentItem::RciEvent_OnMouseEnter( const CExtRichContentHitTestInfo & htInfoOld, const CExtRichContentHitTestInfo & htInfoNew, HWND hWndContentViewer )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnMouseEnter( this, htInfoOld, htInfoNew, hWndContentViewer );
}

bool CExtRichContentItem::RciEvent_OnMouseLeave( const CExtRichContentHitTestInfo & htInfoOld, const CExtRichContentHitTestInfo & htInfoNew, HWND hWndContentViewer )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnMouseLeave( this, htInfoOld, htInfoNew, hWndContentViewer );
}

bool CExtRichContentItem::RciEvent_OnPressedEnter(
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nRepCnt, // 0 - button up, 1 - single click, 2 - double click, 3 - post single click & begin editing
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnPressedEnter( this, nChar, nRepCnt, nFlags, htInfoOld, htInfoNew, hWndContentViewer );
}

bool CExtRichContentItem::RciEvent_OnPressedLeave(
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nRepCnt, // 0 - button up, 1 - single click, 2 - double click, 3 - post single click & begin editing
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnPressedLeave( this, nChar, nRepCnt, nFlags, htInfoOld, htInfoNew, hWndContentViewer );
}

bool CExtRichContentItem::RciEvent_OnClick(
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnClick( this, nChar, nFlags, htInfoOld, htInfoNew, hWndContentViewer );
}

bool CExtRichContentItem::RciEvent_OnDoubleClick(
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	return m_layout.RciEvent_OnDoubleClick( this, nChar, nFlags, htInfoOld, htInfoNew, hWndContentViewer );
}

CExtRichStyleDescription::e_ui_sb_type_t CExtRichContentItem::RciEvent_Scrolling_GetDefaultSBT() const
	{ return m_layout.RciEvent_Scrolling_GetDefaultSBT( this ); }

bool CExtRichContentItem::HaveAffectedCssPseudoClasses( const CExtRichStyleDescription::pseudo_class_def_t & statesToCheck ) const
{
	if( statesToCheck.IsEmpty() )
		return false;
POSITION posCssStoreAttempt = m_layout.m_listLayoutCSS.GetHeadPosition();
	for( ; posCssStoreAttempt != NULL; )
	{
		const CExtRichContentLayout * pRCL = m_layout.m_listLayoutCSS.GetNext( posCssStoreAttempt );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCL != NULL );
		if( pRCL->HaveAffectedCssPseudoClasses( this, statesToCheck ) )
			return true;
	} // for( ; posCssStoreAttempt != NULL; )
	return false;
}

void CExtRichContentItem::ResetElementStateInfo(
	const CExtRichStyleDescription::pseudo_class_def_t & statesToReset,
	CExtRichStyleDescription::e_ui_yes_not_option_t eynSetOn,
	bool bDeep // = true
	)
{
	if( statesToReset.IsEmpty() )
		return;
	CExtRichContentItem::_ResetElementStateInfoImpl( statesToReset, eynSetOn, bDeep );
}

void CExtRichContentItem::_ResetElementStateInfoImpl(
	const CExtRichStyleDescription::pseudo_class_def_t & statesToReset,
	CExtRichStyleDescription::e_ui_yes_not_option_t eynSetOn,
	bool bDeep // = true
	)
{
	if( INT(m_eType) >= INT(CExtRichContentItem::__EHIT_SPEC_START) )
		return;
	m_PCD.ResetSpecified( statesToReset, eynSetOn );
	if( ! bDeep )
		return;
POSITION pos = m_listItems.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		if( pRCI->m_eType != CExtRichContentItem::__EHIT_GENERIC_TAG )
			continue;
		pRCI->_ResetElementStateInfoImpl( statesToReset, eynSetOn, bDeep );
	}
}

bool CExtRichContentItem::_DoHitTestImpl_Basic( CExtRichContentHitTestInfo & htInfo, CExtRichContentItem * pRCIFA )
{
	if( ! IsParticipantOfHitTest() )
		return false;
CExtRichStyleDescription::e_position_t eP = GetPosition();
	if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )
	{
		if( LPVOID(pRCIFA) != LPVOID(this) )
			return false;
	}
	if( IsNoLayoutRectItem() )
		return _DoHitTestImpl_ScrollingAdjusted( htInfo, pRCIFA );
	if( INT(m_eType) < INT(__EHIT_SPEC_START) && INT(m_eType) != INT(__EHIT_ROOT) )
	{
		if( ! m_rcLayout.PtInRect( htInfo.m_ptHT ) )
			return false;
	}
	if( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL && _IsStyleOwner() )
	{ // try to adjust scrolling and clipping
		bool bDoClippedHT = false, bScrollingAdjustmentRequired = false;
		const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
		CExtRichStyleDescription::e_scroll_bar_type_t esbtH = GetSBTH();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
		CExtRichStyleDescription::e_scroll_bar_type_t esbtV = GetSBTV();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
		if(		esbtH == CExtRichStyleDescription::esbt_visible
			||	esbtV == CExtRichStyleDescription::esbt_visible
			)
			bDoClippedHT = bScrollingAdjustmentRequired = true;
		else if( styleEffective.m_eO == CExtRichStyleDescription::eo_hidden || styleEffective.m_eO == CExtRichStyleDescription::eo_auto )
			bDoClippedHT = true;
		if( bDoClippedHT || bScrollingAdjustmentRequired )
		{
			if( bScrollingAdjustmentRequired )
				htInfo.m_ptHT += m_ptScrollPos;
			bool bRetVal = _DoHitTestImpl_ScrollingAdjusted( htInfo, pRCIFA );
			if( bScrollingAdjustmentRequired )
				htInfo.m_ptHT -= m_ptScrollPos;
			if( ! bRetVal )
				return false;
			if( bDoClippedHT )
			{
				CExtRichContentHitTestInfo::ht_item_t * p_ht_item_last =
					( htInfo.m_listHtBranch.GetCount() > 0 )
						? ( & ( htInfo.m_listHtBranch.GetTail() ) )
						: ((CExtRichContentHitTestInfo::ht_item_t *)(NULL))
						;
				if( LPVOID(p_ht_item_last) != NULL )
				{
					__EXT_DEBUG_RICH_CONTENT_ASSERT( LPVOID(p_ht_item_last) != LPVOID(this) );
					CRect rcRciEffectiveLast( p_ht_item_last->m_pRCI->CalcEffectiveRect() ), rcRciEffectiveThis( CalcEffectiveRect() );
					if(		rcRciEffectiveLast.top > rcRciEffectiveThis.bottom
						&&	rcRciEffectiveLast.left > rcRciEffectiveThis.right
						&&	rcRciEffectiveLast.right <= rcRciEffectiveThis.left
						&&	rcRciEffectiveLast.bottom <= rcRciEffectiveThis.top
						)
						bRetVal = false;
				}
			} // if( bDoClippedHT || bScrollingAdjustmentRequired )
			return bRetVal;
		} // if( bScrollingAdjusted )
	} // try to adjust scrolling and clipping
	return _DoHitTestImpl_ScrollingAdjusted( htInfo, pRCIFA );
}

bool CExtRichContentItem::_DoHitTestImpl_ScrollingAdjusted( CExtRichContentHitTestInfo & htInfo, CExtRichContentItem * pRCIFA )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( IsParticipantOfHitTest() );
bool bIsNoLayoutRectItem = IsNoLayoutRectItem();
bool bHitMode = ( ( ! bIsNoLayoutRectItem ) && INT(m_eType) < INT(__EHIT_SPEC_START) && INT(m_eType) != INT(__EHIT_ROOT) ) ? true : false;
bool bThisIsStyleOwner = _IsStyleOwner();
	if( bThisIsStyleOwner )
	{
		if(		bHitMode
			&&	m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL
			)
		{
			const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
			CRect rcLayout( CalcEffectiveRect() );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( rcLayout.PtInRect( htInfo.m_ptInitialHT ) );
			rcLayout.DeflateRect( &styleEffective.m_rcCellPadding );
			CExtRichStyleDescription::e_position_t eP = GetPosition();
			if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
				rcLayout.DeflateRect( &styleEffective.m_rcMargin );
			rcLayout.DeflateRect( &styleEffective.m_rcBorder );
			CExtRichStyleDescription::e_scroll_bar_type_t esbtH = GetSBTH();
			__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
			CExtRichStyleDescription::e_scroll_bar_type_t esbtV = GetSBTV();
			__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
			if( esbtH == CExtRichStyleDescription::esbt_visible || esbtV == CExtRichStyleDescription::esbt_visible )
			{
				CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = Scrolling_GetEffectiveSBT();
				if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )
				{
					CExtPaintManager::PAINTSCROLLBARDATA _psbdH;
					Scrolling_FillScrollBarInfo( true, rcLayout, &_psbdH );
					if( _psbdH.m_rcBar.PtInRect( htInfo.m_ptInitialHT ) )
						return true;
					CExtPaintManager::PAINTSCROLLBARDATA _psbdV;
					Scrolling_FillScrollBarInfo( false, rcLayout, &_psbdV );
					if( _psbdV.m_rcBar.PtInRect( htInfo.m_ptInitialHT ) )
						return true;
				}
				if( esbtH == CExtRichStyleDescription::esbt_visible )
					rcLayout.bottom -= Scrolling_GetHorizontalScrollBarHeight();
				if( esbtV == CExtRichStyleDescription::esbt_visible )
					rcLayout.right  -= Scrolling_GetVerticalScrollBarWidth();
				if( ! rcLayout.PtInRect( htInfo.m_ptInitialHT ) )
					return true; // hit-test result is: scrollbars or borders of this element
			} // if( esbtH == CExtRichStyleDescription::esbt_visible || esbtV == CExtRichStyleDescription::esbt_visible )
		}
		// hit-test non-dock-fill children
		POSITION pos = m_listItems.GetHeadPosition();
		for( ; pos != NULL; )
		{
			CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
			if(		(	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_unspecified
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_fill
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_fill
					)
				&&	pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock
				)
				continue;
			if( pRCI->_DoHitTestImpl_Basic( htInfo, pRCIFA ) )
			{
				CExtRichContentHitTestInfo::ht_item_t _ht_item( pRCI, __ERCHT_ON_ITEM_INNER_AREA );
				pRCI->_DoHitTestImpl_PostAdjustment( htInfo, _ht_item, pRCIFA );
				if( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE )
				{
					htInfo.m_listHtBranch.AddHead( _ht_item );
					return true;
				}
			}
		} // for( ; pos != NULL; )
		// hit-test dock-fill children 
		if( m_listDF.GetCount() > 0 )
		{
			POSITION posFill = m_listDF.GetHeadPosition();
			for( ; posFill != NULL; )
			{
				CExtRichContentItem * pRCI = m_listDF.GetNext( posFill );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
				if(		(	styleRCI.m_eDock != CExtRichStyleDescription::e_ui_dock_unspecified
						&&	styleRCI.m_eDock != CExtRichStyleDescription::e_ui_dock_fill
						)
					||	pRCI->GetDisplay() != CExtRichStyleDescription::ed_ui_dock
					)
					continue;
				if( pRCI->_DoHitTestImpl_Basic( htInfo, pRCIFA ) )
				{
					CExtRichContentHitTestInfo::ht_item_t _ht_item( pRCI, __ERCHT_ON_ITEM_INNER_AREA );
					pRCI->_DoHitTestImpl_PostAdjustment( htInfo, _ht_item, pRCIFA );
					if( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE )
					{
						htInfo.m_listHtBranch.AddHead( _ht_item );
						return true;
					}
				}
			} // for( ; posFill != NULL; )
		} // if( m_listDF.GetCount() > 0 )
		// hit-test dock-pre-fill children 
		if( m_listDF.GetCount() > 0 )
		{
			POSITION posFill = m_listDF.GetHeadPosition();
			for( ; posFill != NULL; )
			{
				CExtRichContentItem * pRCI = m_listDF.GetNext( posFill );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
				if(		styleRCI.m_eDock != CExtRichStyleDescription::e_ui_dock_pre_fill
					||	pRCI->GetDisplay() != CExtRichStyleDescription::ed_ui_dock
					)
					continue;
				if( pRCI->_DoHitTestImpl_Basic( htInfo, pRCIFA ) )
				{
					CExtRichContentHitTestInfo::ht_item_t _ht_item( pRCI, __ERCHT_ON_ITEM_INNER_AREA );
					pRCI->_DoHitTestImpl_PostAdjustment( htInfo, _ht_item, pRCIFA );
					if( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE )
					{
						htInfo.m_listHtBranch.AddHead( _ht_item );
						return true;
					}
				}
			} // for( ; posFill != NULL; )
		} // if( m_listDF.GetCount() > 0 )
	} // if( bThisIsStyleOwner )
//	if( bIsNoLayoutRectItem )
//		return false;
	return bHitMode;
}

void CExtRichContentItem::_DoHitTestImpl_PostAdjustment( CExtRichContentHitTestInfo & htInfo, CExtRichContentHitTestInfo::ht_item_t & _ht_item, CExtRichContentItem * pRCIFA )
{
	pRCIFA;
	if( ! ( INT(m_eType) < INT(__EHIT_SPEC_START) && INT(m_eType) != INT(__EHIT_ROOT) ) )
		return;
	if( IsNoLayoutRectItem() )
		return;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_rcLayout.PtInRect( htInfo.m_ptHT ) );
bool bThisIsStyleOwner = _IsStyleOwner();
CExtRichStyleDescription::e_position_t eP = CExtRichStyleDescription::ep_static;
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
CRect rcLayout( CalcEffectiveRect() );
CRect rcOuter = rcLayout;
CExtRichStyleDescription::e_scroll_bar_type_t esbtH = CExtRichStyleDescription::esbt_hidden;
CExtRichStyleDescription::e_scroll_bar_type_t esbtV = CExtRichStyleDescription::esbt_hidden;
	if( bThisIsStyleOwner )
	{
		esbtH = GetSBTH();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
		esbtV = GetSBTV();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
		eP = GetPosition();
		rcLayout.DeflateRect( &styleEffective.m_rcCellPadding );
		if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
			rcLayout.DeflateRect( &styleEffective.m_rcMargin );
		if( ! rcLayout.PtInRect( htInfo.m_ptHT ) )
		{
			_ht_item.m_dwHtFlags = __ERCHT_NOWHERE;
			CRect rcTop(  rcOuter.left,   rcOuter.top,     rcOuter.right, rcLayout.top   ),
				rcBottom( rcOuter.left,   rcLayout.bottom, rcOuter.right, rcOuter.bottom ),
				rcLeft(   rcOuter.left,   rcOuter.top,     rcLayout.left, rcOuter.bottom ),
				rcRight(  rcLayout.right, rcOuter.top,     rcOuter.right, rcOuter.bottom );
			if( rcTop.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_MARGIN_TOP;
				_ht_item.m_rcOuterParts[0] = rcTop;
			}
			if( rcBottom.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_MARGIN_BOTTOM;
				_ht_item.m_rcOuterParts[1] = rcBottom;
			}
			if( rcLeft.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_MARGIN_LEFT;
				_ht_item.m_rcOuterParts[2] = rcLeft;
			}
			if( rcRight.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_MARGIN_RIGHT;
				_ht_item.m_rcOuterParts[3] = rcRight;
			}
			//__EXT_DEBUG_RICH_CONTENT_ASSERT( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE );
			if( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE )
				return;
		}
		rcOuter = rcLayout;
		rcLayout.DeflateRect( &styleEffective.m_rcBorder );
		if( ! rcLayout.PtInRect( htInfo.m_ptHT ) )
		{
			_ht_item.m_dwHtFlags = __ERCHT_NOWHERE;
			CRect rcTop(  rcOuter.left,   rcOuter.top,     rcOuter.right, rcLayout.top   ),
				rcBottom( rcOuter.left,   rcLayout.bottom, rcOuter.right, rcOuter.bottom ),
				rcLeft(   rcOuter.left,   rcOuter.top,     rcLayout.left, rcOuter.bottom ),
				rcRight(  rcLayout.right, rcOuter.top,     rcOuter.right, rcOuter.bottom );
			if( rcTop.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_BORDER_TOP;
				_ht_item.m_rcOuterParts[0] = rcTop;
			}
			if( rcBottom.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_BORDER_BOTTOM;
				_ht_item.m_rcOuterParts[1] = rcBottom;
			}
			if( rcLeft.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_BORDER_LEFT;
				_ht_item.m_rcOuterParts[2] = rcLeft;
			}
			if( rcRight.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_BORDER_RIGHT;
				_ht_item.m_rcOuterParts[3] = rcRight;
			}
			//__EXT_DEBUG_RICH_CONTENT_ASSERT( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE );
			if( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE )
				return;
		}
		if(		m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL
			&&	( esbtH == CExtRichStyleDescription::esbt_visible || esbtV == CExtRichStyleDescription::esbt_visible )
			)
		{ // scroll bar parts
			CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = Scrolling_GetEffectiveSBT();
			CRect rcNextLayout = rcLayout;
			LONG nHSBH = Scrolling_GetHorizontalScrollBarHeight(), nVSBW = Scrolling_GetVerticalScrollBarWidth();
			if( esbtH == CExtRichStyleDescription::esbt_visible )
			{
				rcNextLayout.bottom -= nHSBH;
				CRect rcSB( rcLayout.left, rcLayout.bottom - nHSBH, rcLayout.right, rcLayout.bottom );
				if( esbtV == CExtRichStyleDescription::esbt_visible )
					rcSB.right -= nVSBW;
				if(		( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )
					||	rcSB.PtInRect( htInfo.m_ptHT )
					)
				{
					_ht_item.m_dwHtFlags = __ERCHT_NOWHERE;
					CExtPaintManager::PAINTSCROLLBARDATA _psbd;
					Scrolling_FillScrollBarInfo( true, rcSB, &_psbd );
					//_ht_item.m_rcPart = rcSB;
					_ht_item.m_rcPart = _psbd.m_rcBar;
					if( _psbd.m_bEnabled )
					{
						if( _psbd.m_rcButtonUp.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBH_SB_LINE_UP;
						else if( _psbd.m_rcButtonDown.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBH_SB_LINE_DOWN;
						else if( _psbd.m_rcPageUp.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBH_SB_PAGE_UP;
						else if( _psbd.m_rcPageDown.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBH_SB_PAGE_DOWN;
						else if( _psbd.m_rcThumb.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBH_SB_THUMB;
						else if( ! ( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full ) )
							_ht_item.m_dwHtFlags = __ERCHT_ON_SBH_DISABLED;
					}
					else
							_ht_item.m_dwHtFlags = __ERCHT_ON_SBH_DISABLED;
					if( ( _ht_item.m_dwHtFlags & (__ERCHT_SBH_SB_MASK|__ERCHT_ON_SBH_DISABLED) ) != 0 )
						return;
				}
			}
			if( esbtV == CExtRichStyleDescription::esbt_visible )
			{
				rcNextLayout.right -= nVSBW;
				CRect rcSB( rcLayout.right - nVSBW, rcLayout.top, rcLayout.right, rcLayout.bottom );
				if( esbtH == CExtRichStyleDescription::esbt_visible )
					rcSB.bottom -= nHSBH;
				if(		( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )
					||	rcSB.PtInRect( htInfo.m_ptHT )
					)
				{
					_ht_item.m_dwHtFlags = __ERCHT_NOWHERE;
					CExtPaintManager::PAINTSCROLLBARDATA _psbd;
					Scrolling_FillScrollBarInfo( false, rcSB, &_psbd );
					//_ht_item.m_rcPart = rcSB;
					_ht_item.m_rcPart = _psbd.m_rcBar;
					if( _psbd.m_bEnabled )
					{
						if( _psbd.m_rcButtonUp.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBV_SB_LINE_UP;
						else if( _psbd.m_rcButtonDown.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBV_SB_LINE_DOWN;
						else if( _psbd.m_rcPageUp.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBV_SB_PAGE_UP;
						else if( _psbd.m_rcPageDown.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBV_SB_PAGE_DOWN;
						else if( _psbd.m_rcThumb.PtInRect( htInfo.m_ptHT ) )
							_ht_item.m_dwHtFlags |= __ERCHT_SBV_SB_THUMB;
						else if( ! ( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full ) )
							_ht_item.m_dwHtFlags = __ERCHT_ON_SBV_DISABLED;
					}
					else
							_ht_item.m_dwHtFlags = __ERCHT_ON_SBV_DISABLED;
					if( ( _ht_item.m_dwHtFlags & (__ERCHT_SBV_SB_MASK|__ERCHT_ON_SBV_DISABLED) ) != 0 )
						return;
				}
			}
			if( esbtH == CExtRichStyleDescription::esbt_visible && esbtV == CExtRichStyleDescription::esbt_visible )
			{
				CRect rcSB( rcLayout.right - Scrolling_GetVerticalScrollBarWidth(), rcLayout.bottom - nHSBH, rcLayout.right, rcLayout.bottom );
				if( rcSB.PtInRect( htInfo.m_ptHT ) )
				{
					_ht_item.m_dwHtFlags = __ERCHT_ON_SB_CORNER;
					_ht_item.m_rcPart = rcSB;
					return;
				}
			}
			rcLayout = rcNextLayout;
		} // scroll bar parts
		rcOuter = rcLayout;
		rcLayout.DeflateRect( &styleEffective.m_rcPadding );
		if( ! rcLayout.PtInRect( htInfo.m_ptHT ) )
		{
			_ht_item.m_dwHtFlags = __ERCHT_NOWHERE;
			CRect rcTop(  rcOuter.left,   rcOuter.top,     rcOuter.right, rcLayout.top   ),
				rcBottom( rcOuter.left,   rcLayout.bottom, rcOuter.right, rcOuter.bottom ),
				rcLeft(   rcOuter.left,   rcOuter.top,     rcLayout.left, rcOuter.bottom ),
				rcRight(  rcLayout.right, rcOuter.top,     rcOuter.right, rcOuter.bottom );
			if( rcTop.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_PADDING_TOP;
				_ht_item.m_rcOuterParts[0] = rcTop;
			}
			if( rcBottom.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_PADDING_BOTTOM;
				_ht_item.m_rcOuterParts[1] = rcBottom;
			}
			if( rcLeft.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_PADDING_LEFT;
				_ht_item.m_rcOuterParts[2] = rcLeft;
			}
			if( rcRight.PtInRect( htInfo.m_ptHT ) )
			{
				_ht_item.m_dwHtFlags |= __ERCHT_ON_ITEM_PADDING_RIGHT;
				_ht_item.m_rcOuterParts[3] = rcRight;
			}
			//__EXT_DEBUG_RICH_CONTENT_ASSERT( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE );
			if( _ht_item.m_dwHtFlags != __ERCHT_NOWHERE )
				return;
		}
	} // if( bThisIsStyleOwner )
	_ht_item.m_dwHtFlags = __ERCHT_ON_ITEM_INNER_AREA;
}

INT CExtRichContentItem::GetScrollBarStepSize( bool bHorz )
	{ bHorz; return 1; }

void CExtRichContentItem::_DoScroll(
	CPoint ptNewScrollPos,
	HWND hWndContentViewer // = NULL
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( _IsStyleOwner() );
	if( m_ptScrollPos == ptNewScrollPos )
		return;
	m_ptScrollPos = ptNewScrollPos;
	if( hWndContentViewer == NULL || ( ! ::IsWindow( hWndContentViewer ) ) )
		return;
CRect rc = CalcEffectiveRect();
	::InvalidateRect( hWndContentViewer, /*&rc*/ NULL, TRUE );
}

void CExtRichContentItem::ElementUiBindingSrcIdSet( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingSrcID )
{
	if( ! m_strElementUiBindingSrcID.IsEmpty() )
		m_layout._ElementByUiBindingSrcID_UnRegister( LPCTSTR(m_strElementUiBindingSrcID) );
LPCTSTR _strElementUiBindingSrcID = LPCTSTR(strElementUiBindingSrcID);
	if( _strElementUiBindingSrcID == NULL )
		_strElementUiBindingSrcID = _T("");
	m_strElementUiBindingSrcID = _strElementUiBindingSrcID;
	m_layout._ElementByUiBindingSrcID_Register( LPCTSTR(m_strElementUiBindingSrcID), this );
}

__EXT_MFC_SAFE_LPCTSTR CExtRichContentItem::ElementUiBindingSrcIdGet() const
	{ return LPCTSTR(m_strElementUiBindingSrcID); }

void CExtRichContentItem::ElementUiBindingDstIdSet( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingDstID )
{
	if( ! m_strElementUiBindingDstID.IsEmpty() )
		m_layout._ElementByUiBindingDstID_UnRegister( LPCTSTR(m_strElementUiBindingDstID) );
LPCTSTR _strElementUiBindingDstID = LPCTSTR(strElementUiBindingDstID);
	if( _strElementUiBindingDstID == NULL )
		_strElementUiBindingDstID = _T("");
	m_strElementUiBindingDstID = _strElementUiBindingDstID;
	m_layout._ElementByUiBindingDstID_Register( LPCTSTR(m_strElementUiBindingDstID), this );
}

__EXT_MFC_SAFE_LPCTSTR CExtRichContentItem::ElementUiBindingDstIdGet() const
	{ return LPCTSTR(m_strElementUiBindingDstID); }

void CExtRichContentItem::ElementIdSet( __EXT_MFC_SAFE_LPCTSTR strElementID )
{
	if( ! m_strElementID.IsEmpty() )
		m_layout._ElementByID_UnRegister( LPCTSTR(m_strElementID) );
LPCTSTR _strElementID = LPCTSTR(strElementID);
	if( _strElementID == NULL )
		_strElementID = _T("");
	m_strElementID = _strElementID;
	m_layout._ElementByID_Register( LPCTSTR(m_strElementID), this );
}

__EXT_MFC_SAFE_LPCTSTR CExtRichContentItem::ElementIdGet() const
	{ return LPCTSTR(m_strElementID); }

void CExtRichContentItem::ElementNameSet( __EXT_MFC_SAFE_LPCTSTR strElementName )
{
	if( ! m_strElementName.IsEmpty() )
		m_layout._ElementByName_UnRegister( LPCTSTR(m_strElementName) );
LPCTSTR _strElementName = LPCTSTR(strElementName);
	if( _strElementName == NULL )
		_strElementName = _T("");
	m_strElementName = _strElementName;
	m_layout._ElementByName_Register( LPCTSTR(m_strElementName), this );
}

__EXT_MFC_SAFE_LPCTSTR CExtRichContentItem::ElementNameGet() const
	{ return LPCTSTR(m_strElementName); }

CExtRichTableLayout & CExtRichContentItem::_GetTable()
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( _IsStyleOwner() );
	if( m_pTable == NULL )
		m_pTable = new CExtRichTableLayout;
	return (*m_pTable);
}

CExtBitmap * CExtRichContentItem::ImageBySrc()
{
CExtRichContentItem * pParmHI = FindParmByName( _T("src") );
	if( pParmHI != NULL )
		return m_layout.ImageByName( LPCTSTR(pParmHI->m_strTagPV) );
	return NULL;
}

const CExtBitmap * CExtRichContentItem::ImageBySrc() const
	{ return ( const_cast < CExtRichContentItem * > ( this ) ) -> ImageBySrc(); }

bool CExtRichContentItem::stat_IsCharOneOf( __EXT_MFC_SAFE_TCHAR _tchr, __EXT_MFC_SAFE_LPCTSTR str )
{
	if( str == NULL )
		return false;
LPCTSTR p = str;
	for( ; (*p) != _T('\0'); p++ )
	{
		if( (*p) == TCHAR(_tchr) )
			return true;
	}
	return false;
}

void CExtRichContentItem::stat_FillSolidRect( CDC & dc, const RECT & rc, COLORREF clrFill )
{
int nOldBkMode = dc.SetBkMode( OPAQUE );
COLORREF clrBkOld = dc.GetBkColor();
	dc.FillSolidRect( &rc, clrFill );
	dc.SetBkColor( clrBkOld );
	dc.SetBkMode( nOldBkMode );
}

void CExtRichContentItem::_ClearHaveFlags()
{
	m_bIsNoLayoutRectItem_Have = false;
	m_bIsNoLayoutRectItem_Val = false;
	m_bParagraphItem_Have = false;
	m_bParagraphItem_Val = false;
	m_bIsSingleItem_Have = false;
	m_bIsSingleItem_Val = false;
	m_bIsNoWrapSequence_Have = false;
	m_bIsNoWrapSequence_Val = false;
}

void CExtRichContentItem::RemoveValueSpaces()
{
	// remove non-needed spaces
	m_strTagPV.TrimLeft( _T(" ") );
	m_strTagPV.TrimRight( _T(" ") );
	for( ; m_strTagPV.Replace( _T("  "), _T(" ") ) > 0; );
}

bool CExtRichContentItem::_IsStyleOwner() const
{
bool bStyleOwner = ( m_eType == __EHIT_GENERIC_TAG || m_eType == __EHIT_ROOT ) ? true : false;
	return bStyleOwner;
}

const CExtRichStyleRule CExtRichContentItem::g_styleRuleEmpty;
const CExtRichStyleDescription CExtRichContentItem::g_styleEmpty;

void CExtRichContentItem::ResetStyleInfo(
	bool bDeep, // = true
	bool bResetStyleDefinition, // = true
	bool bResetStyleRule // = true
	)
{
	if( ! ( bResetStyleDefinition || bResetStyleRule ) )
		return;
	if( _IsStyleOwner() )
	{
		if( bResetStyleDefinition )
		{
			m_bHaveEffectiveStyleCache = false;
			if( m_pStyleEffective != NULL )
			{
				(*m_pStyleEffective) = CExtRichContentItem::g_styleEmpty;
				m_pStyleEffective->m_bDtPrefixOnlyMode = false;
			}
		} // if( bResetStyleDefinition )
		if( bResetStyleRule )
		{
			m_bHaveStyleChangingCache = false;
			if( m_pStyleChangingCache != NULL )
				m_pStyleChangingCache->Empty();
		} // if( bResetStyleRule )
	} // if( _IsStyleOwner() )
#if (defined _DEBUG)
	else
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pStyleChangingCache == NULL );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pStyleEffective == NULL );
	}
#endif // (defined _DEBUG)
	if( ! bDeep )
		return;
	for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->ResetStyleInfo( bDeep, bResetStyleDefinition, bResetStyleRule );
	} // for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
}

CExtRichStyleRule & CExtRichContentItem::_GetStyleChangingCache()
{
	if( m_pStyleChangingCache == NULL )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( _IsStyleOwner() || m_eType == __EHIT_CLASS_NODE );
		m_pStyleChangingCache = new CExtRichStyleRule;
	}
	return (*m_pStyleChangingCache);
}

CExtRichStyleDescription & CExtRichContentItem::GetEffectiveStyle()
{
	if( ! _IsStyleOwner() )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pParent != NULL );
		if( m_pParent != NULL )
			return m_pParent->GetEffectiveStyle();
	} // if( ! _IsStyleOwner() )
	// __EXT_DEBUG_RICH_CONTENT_ASSERT( m_bHaveEffectiveStyleCache );
	if( m_pStyleEffective == NULL )
		m_pStyleEffective = new CExtRichStyleDescription;
	return (*m_pStyleEffective);
}

const CExtRichStyleDescription & CExtRichContentItem::GetEffectiveStyle() const
	{ return ( const_cast < CExtRichContentItem * > ( this ) ) -> GetEffectiveStyle(); }

CExtRichStyleDescription::e_display_t CExtRichContentItem::GetDisplay() const
{
	if( INT(m_eType) >= INT(__EHIT_SPEC_START) )
		return CExtRichStyleDescription::ed_none;
	if( m_eType == __EHIT_TEXT_RANGE || m_eType == __EHIT_TEXT_SPACE )
		return CExtRichStyleDescription::ed_inline;
const CExtRichStyleDescription & styleNext = GetEffectiveStyle();
CExtRichStyleDescription::e_display_t eD = styleNext.GetDisplay( *this );
CExtRichStyleDescription::e_position_t eP = GetPosition();
	if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )
	{
		if( eD == CExtRichStyleDescription::ed_inline_table || eD == CExtRichStyleDescription::ed_table )
			return CExtRichStyleDescription::ed_table;
		return CExtRichStyleDescription::ed_block;
	}
	return eD;
}

CExtRichStyleDescription::e_visibility_t CExtRichContentItem::GetVisibility() const
{
	if( INT(m_eType) >= INT(__EHIT_SPEC_START) )
		return CExtRichStyleDescription::ev_hidden;
	return GetEffectiveStyle().GetVisibility( *this );
}

CExtRichStyleDescription::e_position_t CExtRichContentItem::GetPosition() const
{
	if( m_eType != __EHIT_GENERIC_TAG )
		return CExtRichStyleDescription::ep_static;
const CExtRichStyleDescription & styleNext = GetEffectiveStyle();
CExtRichStyleDescription::e_position_t eP = styleNext.m_eP;
	return eP;
}

bool CExtRichContentItem::_CheckParentChainFor_IsParticipantAPIs( bool bSimpleCheck, bool bAcceptPartialVisibility ) const
{
const CExtRichContentItem * pRCI = m_pParent;
	if( bSimpleCheck )
	{
		for( ; pRCI != NULL; pRCI = pRCI->m_pParent )
		{
			if( pRCI->m_eType != __EHIT_GENERIC_TAG )
				continue;
			if( ! pRCI->IsParticipantOfPaint( false ) )
				return false;
		} // for( ; pRCI != NULL; pRCI = pRCI->m_pParent )
		return true;
	} // if( bSimpleCheck )
CRect rcNext( __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, __EXT_RICH_CONTENT_NEGATIVE_UNUSED );
CRect rcCurrent = CalcEffectiveRect();
	rcCurrent.DeflateRect( 0, 0, 1, 1 );
POINT arrPtStart[4] = { {rcCurrent.left,rcCurrent.top}, {rcCurrent.right,rcCurrent.top}, {rcCurrent.left,rcCurrent.bottom}, {rcCurrent.right,rcCurrent.bottom} };
INT nPtIdx = 0, nCountInside = 0;
	for( ; pRCI != NULL; pRCI = pRCI->m_pParent )
	{
		if( pRCI->m_eType != __EHIT_GENERIC_TAG )
			continue;
		if( ! pRCI->IsParticipantOfPaint( false ) )
			return false;
		rcNext = pRCI->CalcEffectiveRect();
		POINT arrPtCurrent[4] = { {rcCurrent.left,rcCurrent.top}, {rcCurrent.right,rcCurrent.top}, {rcCurrent.left,rcCurrent.bottom}, {rcCurrent.right,rcCurrent.bottom} };
		nCountInside = 0;
		for( nPtIdx = 0; nPtIdx < 4; nPtIdx++ )
		{
			if( rcNext.PtInRect( arrPtCurrent[nPtIdx] ) )
			{
				nCountInside ++;
				if( bAcceptPartialVisibility || LPVOID(pRCI) != LPVOID(m_pParent) )
					break;
			}
		} // for( nPtIdx = 0; nPtIdx < 4; nPtIdx++ )
		if( ( ! bAcceptPartialVisibility ) && LPVOID(pRCI) == LPVOID(m_pParent) && nCountInside < 4 )
			return false;
		if( nCountInside == 0 && ( bAcceptPartialVisibility || LPVOID(pRCI) != LPVOID(m_pParent) ) )
		{
			POINT arrPtNext[4] = { {rcNext.left,rcNext.top}, {rcNext.right,rcNext.top}, {rcNext.left,rcNext.bottom}, {rcNext.right,rcNext.bottom} };
			for( nPtIdx = 0; nPtIdx < 4; nPtIdx++ )
			{
				if( rcCurrent.PtInRect( arrPtNext[nPtIdx] ) )
				{
					nCountInside ++;
					if( bAcceptPartialVisibility || LPVOID(pRCI) != LPVOID(m_pParent) )
						break;
				}
			} // for( nPtIdx = 0; nPtIdx < 4; nPtIdx++ )
			if( nCountInside == 0 )
				return false;
		} // if( nCountInside == 0 && ( bAcceptPartialVisibility || LPVOID(pRCI) != LPVOID(m_pParent) ) )
		if( ( ! bAcceptPartialVisibility ) && LPVOID(pRCI) != LPVOID(m_pParent) )
		{
			for( nPtIdx = 0; nPtIdx < 4; nPtIdx++ )
			{
				if( ! rcNext.PtInRect( arrPtStart[nPtIdx] ) )
					return false;
			} // for( nPtIdx = 0; nPtIdx < 4; nPtIdx++ )
		} // if( ( ! bAcceptPartialVisibility ) && LPVOID(pRCI) != LPVOID(m_pParent) )
		rcCurrent = rcNext;
		rcCurrent.DeflateRect( 0, 0, 1, 1 );
	} // for( ; pRCI != NULL; pRCI = pRCI->m_pParent )
	return true;
}

bool CExtRichContentItem::IsParticipantOfLayout(
	bool bCheckParentChain // = false
	) const
{
	if( INT(m_eType) >= INT(__EHIT_SPEC_START) )
		return false;
	if( ! GetEffectiveStyle().IsParticipantOfLayout( *this ) )
		return false;
	return bCheckParentChain ? _CheckParentChainFor_IsParticipantAPIs( true, true ) : true;
}

bool CExtRichContentItem::IsParticipantOfPaint(
	bool bCheckParentChain // = false
	) const
{
	if( INT(m_eType) >= INT(__EHIT_SPEC_START) )
		return false;
	if( ! GetEffectiveStyle().IsParticipantOfPaint( *this ) )
		return false;
	return bCheckParentChain ? _CheckParentChainFor_IsParticipantAPIs( false, true ) : true;
}

bool CExtRichContentItem::IsParticipantOfHitTest(
	bool bCheckParentChain, // = false
	bool bAcceptPartialVisibility // = true
	) const
{
	if( ! IsParticipantOfPaint( false ) )
		return false;
	if( m_eType == __EHIT_GENERIC_TAG )
	{
		const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
		if( styleEffective.m_PCD.m_eynHover != CExtRichStyleDescription::e_ui_yn_yes )
			return false;
	}
	return bCheckParentChain ? _CheckParentChainFor_IsParticipantAPIs( false, bAcceptPartialVisibility ) : true;
}

bool CExtRichContentItem::IsParticipantOfFocus(
	bool bCheckParentChain // = true
	) const
{
	if( m_eType != __EHIT_GENERIC_TAG )
		return false;
	if( ! IsParticipantOfPaint( false ) )
		return false;
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
	if( styleEffective.m_PCD.m_eynFocus != CExtRichStyleDescription::e_ui_yn_yes )
		return false;
	return bCheckParentChain ? _CheckParentChainFor_IsParticipantAPIs( true, true ) : true;
}

CExtSafeString CExtRichContentItem::QueryGenericTagName() const
{
CExtSafeString strGenericTagName;
	if( m_eType == __EHIT_GENERIC_TAG )
	{
		strGenericTagName = m_strTextParsed;
		strGenericTagName.MakeLower();
	}
	return strGenericTagName;
}

CExtRichContentItem * CExtRichContentItem::FindParmByName( __EXT_MFC_SAFE_LPCTSTR strParamName ) const
{
	if( LPCTSTR(strParamName) == NULL || LPCTSTR(strParamName)[0] == _T('\0') || m_listParms.GetCount() == 0 )
		return NULL;
bool bReverseMode = false;
	if( m_eType == __EHIT_PARAMETER_CSS_CONTAINER || m_eType == __EHIT_CLASS_NODE )
		bReverseMode = true;
POSITION pos = bReverseMode ? m_listParms.GetTailPosition() : m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pHPI = bReverseMode ? m_listParms.GetPrev( pos ) : m_listParms.GetNext( pos );
		if( pHPI->m_strTextParsed.CompareNoCase( strParamName ) == 0 )
			return pHPI;
	}
	return NULL;
}

CExtRichContentItem * CExtRichContentItem::FindParmByNameFirst( POSITION & pos, __EXT_MFC_SAFE_LPCTSTR strParamName ) const
{
	if( LPCTSTR(strParamName) == NULL || LPCTSTR(strParamName)[0] == _T('\0') || m_listParms.GetCount() == 0 )
		return NULL;
	pos = m_listParms.GetHeadPosition();
	return FindParmByNameNext( pos, LPCTSTR(strParamName) );
}

CExtRichContentItem * CExtRichContentItem::FindParmByNameNext( POSITION & pos, __EXT_MFC_SAFE_LPCTSTR strParamName ) const
{
	if( LPCTSTR(strParamName) == NULL || LPCTSTR(strParamName)[0] == _T('\0') || m_listParms.GetCount() == 0 )
		return NULL;
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pHPI = m_listParms.GetNext( pos );
		if( pHPI->m_strTextParsed.CompareNoCase( LPCTSTR(strParamName) ) == 0 )
			return pHPI;
	}
	return NULL;
}

CExtRichContentItem * CExtRichContentItem::FindElementByText( __EXT_MFC_SAFE_LPCTSTR strText, bool bEffectiveText /*= false*/ ) const
{
	if( LPCTSTR(strText) == NULL || LPCTSTR(strText)[0] == _T('\0') || m_listItems.GetCount() == 0 )
		return NULL;
POSITION pos = m_listItems.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pHPI = m_listItems.GetNext( pos );
		if( bEffectiveText )
		{
			if( pHPI->m_strTextEffective.CompareNoCase( strText ) == 0 )
				return pHPI;
		}
		else
		{
			if( pHPI->m_strTextParsed.CompareNoCase( strText ) == 0 )
				return pHPI;
		}
	}
	return NULL;
}

CExtRichContentItem * CExtRichContentItem::FindElementByTextFirst( POSITION & pos, __EXT_MFC_SAFE_LPCTSTR strText, bool bEffectiveText /*= false*/ ) const
{
	if( LPCTSTR(strText) == NULL || LPCTSTR(strText)[0] == _T('\0') || m_listItems.GetCount() == 0 )
		return NULL;
	pos = m_listItems.GetHeadPosition();
	return FindElementByTextNext( pos, LPCTSTR(strText), bEffectiveText );
}

CExtRichContentItem * CExtRichContentItem::FindElementByTextNext( POSITION & pos, __EXT_MFC_SAFE_LPCTSTR strText, bool bEffectiveText /*= false*/ ) const
{
	if( LPCTSTR(strText) == NULL || LPCTSTR(strText)[0] == _T('\0') || m_listItems.GetCount() == 0 )
		return NULL;
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pHPI = m_listItems.GetNext( pos );
		if( bEffectiveText )
		{
			if( pHPI->m_strTextEffective.CompareNoCase( LPCTSTR(strText) ) == 0 )
				return pHPI;
		}
		else
		{
			if( pHPI->m_strTextParsed.CompareNoCase( LPCTSTR(strText) ) == 0 )
				return pHPI;
		}
	}
	return NULL;
}

void CExtRichContentItem::ApplyTagParams( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	ApplyTagParams_Basic( styleChanging, styleCurrent );
	ApplyTagParams_CSS( styleChanging, styleCurrent );
}

void CExtRichContentItem::stat_html_parm_handler_class( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI, CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pRCI->m_eType == __EHIT_CLASS_NODE )
		return;
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
CExtSafeString strGenericTagName = pRCI->QueryGenericTagName();
CExtSafeStringList listClassNames;
int nSpacePos = str.Find( _T(' ') );
int nPreviousSpacePos = 0;
CExtSafeString _strClass, strLocal;
	for( ; nSpacePos >= 0; )
	{
		_strClass = str.Mid( nPreviousSpacePos, ( nSpacePos - nPreviousSpacePos ) );
		nPreviousSpacePos = nSpacePos + 1;
		nSpacePos = str.Find( _T(' '), ( nSpacePos + 1 ) );
		// first sub-case, try to find global class (some_class)
		listClassNames.AddTail( _strClass );
		// second sub-case, try to find tag specific class (p.some_class)
		strLocal.Format( _T("%s.%s"), LPCTSTR(strGenericTagName), LPCTSTR(_strClass) );
		listClassNames.AddTail( strLocal );
	} // for( ; nSpacePos >= 0; )
int nClassLen = str.GetLength();
	if( nPreviousSpacePos < nClassLen )
	{
		_strClass = str.Mid( nPreviousSpacePos, nClassLen );
		// first sub-case, try to find global class (some_class)
		listClassNames.AddTail( _strClass );
		// second sub-case, try to find tag specific class (p.some_class)
		CExtSafeString strLocal;
		strLocal.Format( _T("%s.%s"), LPCTSTR(strGenericTagName), LPCTSTR(_strClass) );
		listClassNames.AddTail( strLocal );
	} // if( nPreviousSpacePos < nClassLen )
	if( listClassNames.GetCount() == 0 )
		return;
	if( pRCI->m_pListClassNames == NULL )
		pRCI->m_pListClassNames = new CExtSafeStringList;
	pRCI->m_pListClassNames->AddTail( &listClassNames );
POSITION posCssStoreAttempt = pRCI->m_layout.m_listLayoutCSS.GetHeadPosition();
	for( ; posCssStoreAttempt != NULL; )
	{
		CExtRichContentLayout * pRCL =  pRCI->m_layout.m_listLayoutCSS.GetNext( posCssStoreAttempt );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCL != NULL );
		POSITION posClassName = listClassNames.GetHeadPosition();
		for( ; posClassName != NULL; )
		{
			CExtSafeString & _strClass = listClassNames.GetNext( posClassName );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( ! _strClass.IsEmpty() );
			pRCL->CssClassMerge( pRCI, LPCTSTR(_strClass), styleChanging, styleCurrent );
		} // for( ; posClassName != NULL; )
	} // for( ; posCssStoreAttempt != NULL; )
}

void CExtRichContentItem::stat_html_parm_handler_id( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI, CExtRichStyleRule &, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	pRCI->ElementIdSet( LPCTSTR(str) );
}

void CExtRichContentItem::stat_html_parm_handler_ui_binding_id_src( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI, CExtRichStyleRule &, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	pRCI->ElementUiBindingSrcIdSet( LPCTSTR(str) );
}

void CExtRichContentItem::stat_html_parm_handler_ui_binding_id_dst( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI, CExtRichStyleRule &, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	pRCI->ElementUiBindingDstIdSet( LPCTSTR(str) );
}

void CExtRichContentItem::stat_html_parm_handler_name( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule &, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	pRCI->ElementNameSet( LPCTSTR(str) );
}

void CExtRichContentItem::stat_html_parm_handler_size( CExtRichContentItem *, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
LPCTSTR str = LPCTSTR( pParmHI->m_strTagPV );
	if( str[0] == _T('\0') )
		return;
	if( str[0] == _T('+') || str[0] == _T('-') )
		styleChanging.m_lfFontSizePercentRel += _ttol( pParmHI->m_strTagPV );
	else
	{
		styleChanging.m_nFontSizeAbs = _ttol( pParmHI->m_strTagPV );
		CWindowDC dcDesktop( NULL );
		LONG nLogPxY = ::GetDeviceCaps( dcDesktop.m_hDC, LOGPIXELSY );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( nLogPxY != 0 );
		nLogPxY = abs( nLogPxY );
		styleChanging.m_nFontSizeAbs = abs( styleChanging.m_nFontSizeAbs );
		styleChanging.m_nFontSizeAbs = ::MulDiv( styleChanging.m_nFontSizeAbs, nLogPxY, 72 );
		styleChanging.m_nFontSizeAbs = ::MulDiv( styleChanging.m_nFontSizeAbs, 7, 3 );
	}
}

void CExtRichContentItem::stat_html_parm_handler_noshade( CExtRichContentItem *, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( ! str.IsEmpty() )
		styleChanging.m_eN = CExtRichStyleDescription::ent_noshade_noshade;
}

void CExtRichContentItem::stat_html_parm_handler_face( CExtRichContentItem *, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_strFontFaceName = str;
}

void CExtRichContentItem::stat_html_parm_handler_color( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
LPCTSTR str = LPCTSTR(pParmHI->m_strTagPV);
COLORREF clr = pRCI->m_layout.ParseColorString( str );
	if( clr != COLORREF(-1L) )
		styleChanging.m_clrText = clr;
}

void CExtRichContentItem::stat_html_parm_handler_bgcolor( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
LPCTSTR str = LPCTSTR(pParmHI->m_strTagPV);
COLORREF clr = pRCI->m_layout.ParseColorString( str );
	if( clr == COLORREF(-2L) )
	{
		styleChanging.m_clrBack = COLORREF(-2L);
		styleChanging.m_eBCT = CExtRichStyleDescription::ebct_transparent;
	}
	else if( clr != COLORREF(-1L) )
	{
		styleChanging.m_clrBack = clr;
		styleChanging.m_eBCT = CExtRichStyleDescription::ebct_color;
	}
}

void CExtRichContentItem::stat_html_parm_handler_align( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("left") || str == _T("char") )
	{
		if( pRCI->m_strTextParsed == _T("img") )
			styleChanging.m_eF = CExtRichStyleDescription::ef_left;
		else
			styleChanging.m_eaH = CExtRichStyleDescription::eahLeft;
	}
	else if( str == _T("center") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahCenter;
	else if( str == _T("right") )
	{
		if( pRCI->m_strTextParsed == _T("img") )
			styleChanging.m_eF = CExtRichStyleDescription::ef_right;
		else
			styleChanging.m_eaH = CExtRichStyleDescription::eahRight;
	}
	else if( str == _T("justify") )
	{
		styleChanging.m_eaH = CExtRichStyleDescription::eahJustify;
		//bJustify = true;
	}
	else if( str == _T("justifywithlastline") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahJustifyWithLastLine;
}

void CExtRichContentItem::stat_html_parm_handler_valign( CExtRichContentItem *, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("top") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavTop;
	else if( str == _T("middle") || str == _T("center") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavMiddle;
	else if( str == _T("bottom") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavBottom;
	else if( str == _T("baseline") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavBaseLine;
}

void CExtRichContentItem::stat_html_parm_handler_border( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_rcBorder.left = styleChanging.m_rcBorder.right = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent, 0 );
	styleChanging.m_rcBorder.top = styleChanging.m_rcBorder.bottom = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, 0 );
}

void CExtRichContentItem::stat_html_parm_handler_cellpadding( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_rcCellPadding.left = styleChanging.m_rcCellPadding.right = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent, 0 );
	styleChanging.m_rcCellPadding.top = styleChanging.m_rcCellPadding.bottom = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, 0 );
}

void CExtRichContentItem::stat_html_parm_handler_cellspacing( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_sizeCellSpacing.cx = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent, 0 );
	styleChanging.m_sizeCellSpacing.cy = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, 0 );
}

void CExtRichContentItem::stat_html_parm_handler_width( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
DOUBLE lfPercent = 1.0;
bool bIsPercent = false;
LONG nParsedPX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent, -1L, &lfPercent, &bIsPercent );
	if( bIsPercent )
	{
		styleChanging.m_sizeWHP.cx = LONG( lfPercent * 100.0 );
		styleChanging.m_sizeWHP.cx = max( styleChanging.m_sizeWHP.cx, 0 );
		styleChanging.m_sizeWHP.cx = min( styleChanging.m_sizeWHP.cx, 100 );
	}
	else
		styleChanging.m_sizeWH.cx = nParsedPX;
}

void CExtRichContentItem::stat_html_parm_handler_height( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	DOUBLE lfPercent = 1.0;
	bool bIsPercent = false;
	LONG nParsedPX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent );
	if( bIsPercent )
	{
		styleChanging.m_sizeWHP.cy = LONG( lfPercent * 100.0 );
		styleChanging.m_sizeWHP.cy = max( styleChanging.m_sizeWHP.cy, 0 );
		styleChanging.m_sizeWHP.cy = min( styleChanging.m_sizeWHP.cy, 100 );
	}
	else
		styleChanging.m_sizeWH.cy = nParsedPX;
}

void CExtRichContentItem::stat_html_parm_handler_min_height( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
	CExtSafeString str = pParmHI->m_strTagPV;
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMinHeight = styleCurrent.m_nMinHeight;
	else if( str == _T("auto") )
		styleChanging.m_nMinHeight = -1;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nVal = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nVal = _ttol( LPCTSTR( str ) );
			nVal = abs( nVal );
			styleChanging.m_nMinHeight = nVal;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMinHeightP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMinHeightP = max( styleChanging.m_lfMinHeightP, 0 );
			styleChanging.m_lfMinHeightP = min( styleChanging.m_lfMinHeightP, 100 );
		}
		else
		{
			nVal = max( 0L, nVal );
			styleChanging.m_nMinHeight = nVal;
		}
	}
}

void CExtRichContentItem::stat_html_parm_handler_max_height( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
	CExtSafeString str = pParmHI->m_strTagPV;
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMaxHeight = styleCurrent.m_nMaxHeight;
	else if( str == _T("auto") )
		styleChanging.m_nMaxHeight = -1;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nVal = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nVal = _ttol( LPCTSTR( str ) );
			nVal = abs( nVal );
			styleChanging.m_nMaxHeight = nVal;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMinHeightP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMinHeightP = max( styleChanging.m_lfMinHeightP, 0 );
			styleChanging.m_lfMinHeightP = min( styleChanging.m_lfMinHeightP, 100 );
		}
		else
		{
			nVal = max( 0L, nVal );
			styleChanging.m_nMaxHeight = nVal;
		}
	}
}

void CExtRichContentItem::stat_html_parm_handler_min_width( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
	CExtSafeString str = pParmHI->m_strTagPV;
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMinWidth = styleCurrent.m_nMinWidth;
	else if( str == _T("auto") )
		styleChanging.m_nMinWidth = -1;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nVal = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nVal = _ttol( LPCTSTR( str ) );
			nVal = abs( nVal );
			styleChanging.m_nMinWidth = nVal;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMinWidthP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMinWidthP = max( styleChanging.m_lfMinWidthP, 0 );
			styleChanging.m_lfMinWidthP = min( styleChanging.m_lfMinWidthP, 100 );
		}
		else
		{
			nVal = max( 0L, nVal );
			styleChanging.m_nMinWidth = nVal;
		}
	}
}

void CExtRichContentItem::stat_html_parm_handler_max_width( CExtRichContentItem * pRCI, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
	CExtSafeString str = pParmHI->m_strTagPV;
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMaxWidth = styleCurrent.m_nMaxWidth;
	else if( str == _T("auto") )
		styleChanging.m_nMaxWidth = -1;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nVal = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nVal = _ttol( LPCTSTR( str ) );
			nVal = abs( nVal );
			styleChanging.m_nMaxWidth = nVal;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMinWidthP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMinWidthP = max( styleChanging.m_lfMinWidthP, 0 );
			styleChanging.m_lfMinWidthP = min( styleChanging.m_lfMinWidthP, 100 );
		}
		else
		{
			nVal = max( 0L, nVal );
			styleChanging.m_nMaxWidth = nVal;
		}
	}
}

void CExtRichContentItem::stat_html_parm_handler_colspan( CExtRichContentItem *, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_sizeSpan.cx = _ttol( LPCTSTR(str) );
	styleChanging.m_sizeSpan.cx = max( styleChanging.m_sizeSpan.cx, 1 );
}

void CExtRichContentItem::stat_html_parm_handler_rowspan( CExtRichContentItem *, CExtRichContentItem * pParmHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	if( pParmHI->m_strTagPV.IsEmpty() )
		return;
CExtSafeString str = LPCTSTR(pParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_sizeSpan.cy = _ttol( LPCTSTR(str) );
	styleChanging.m_sizeSpan.cy = max( styleChanging.m_sizeSpan.cy, 1 );
}

void CExtRichContentItem::ApplyTagParams_Basic( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( m_eType != __EHIT_CLASS_NODE  )
	{
		POSITION posCssStoreAttempt = m_layout.m_listLayoutCSS.GetHeadPosition();
		for( ; posCssStoreAttempt != NULL; )
		{
			CExtRichContentLayout * pRCL = m_layout.m_listLayoutCSS.GetNext( posCssStoreAttempt );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCL != NULL );
			pRCL->CssClassMerge( this, LPCTSTR(NULL), styleChanging, styleCurrent );
		} // for( ; posCssStoreAttempt != NULL; )
	} // if( m_eType != __EHIT_CLASS_NODE  )

typedef void (*parm_handler_func_t)( CExtRichContentItem *, CExtRichContentItem *,  CExtRichStyleRule &, const CExtRichStyleDescription & );
static CExtSafeMapStringToPtr g_mapHandlers;
	if( g_mapHandlers.GetCount() == 0 )
	{
		static struct
		{
			LPCTSTR m_strName;
			parm_handler_func_t m_pHandler;
		} g_arrHandlers[] =
		{
			{ _T("class"), stat_html_parm_handler_class },
			{ _T("id"), stat_html_parm_handler_id },
			{ _T("uiidsrc"), stat_html_parm_handler_ui_binding_id_src },
			{ _T("uiiddst"), stat_html_parm_handler_ui_binding_id_dst },
			{ _T("name"), stat_html_parm_handler_name },
			{ _T("size"), stat_html_parm_handler_size },
			{ _T("noshade"), stat_html_parm_handler_noshade },
			{ _T("face"), stat_html_parm_handler_face },
			{ _T("color"), stat_html_parm_handler_color },
			{ _T("bgcolor"), stat_html_parm_handler_bgcolor },
			{ _T("align"), stat_html_parm_handler_align },
			{ _T("valign"), stat_html_parm_handler_valign },
			{ _T("border"), stat_html_parm_handler_border },
			{ _T("cellpadding"), stat_html_parm_handler_cellpadding },
			{ _T("cellspacing"), stat_html_parm_handler_cellspacing },
			{ _T("width"), stat_html_parm_handler_width },
			{ _T("height"), stat_html_parm_handler_height },
			{ _T("colspan"), stat_html_parm_handler_colspan },
			{ _T("rowspan"), stat_html_parm_handler_rowspan },
			{ _T("min-height"), stat_html_parm_handler_min_height },
			{ _T("max-height"), stat_html_parm_handler_max_height },
			{ _T("min-width"), stat_html_parm_handler_min_width },
			{ _T("max-width"), stat_html_parm_handler_max_width },
		};
		INT nIndex, nCount = INT( sizeof(g_arrHandlers) / sizeof(g_arrHandlers[0]) );
		for( nIndex = 0; nIndex < nCount; nIndex ++ )
			g_mapHandlers.SetAt( LPCTSTR(g_arrHandlers[nIndex].m_strName), LPVOID(g_arrHandlers[nIndex].m_pHandler) );
	} // if( g_mapHandlers.GetCount() == 0 )

POSITION pos = m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pParmHI = m_listParms.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pParmHI != NULL );
		CExtSafeString strParmNameLC = pParmHI->m_strTextParsed;
		strParmNameLC.MakeLower();
		LPVOID ptr = NULL;
		if( ! g_mapHandlers.Lookup( LPCTSTR(strParmNameLC), ptr ) )
			continue;
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ptr != NULL );
		parm_handler_func_t pHandler = (parm_handler_func_t)ptr;
		pHandler( this, pParmHI, styleChanging, styleCurrent );
	}
}

void CExtRichContentItem::stat_css_parm_handler_visibility( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("visible") )
		styleChanging.m_eV = CExtRichStyleDescription::ev_visible;
	else if( str == _T("hidden") )
		styleChanging.m_eV = CExtRichStyleDescription::ev_hidden;
	else if( str == _T("collapse") )
		styleChanging.m_eV = CExtRichStyleDescription::ev_collapse;
	else if( str == _T("inherit") )
		styleChanging.m_eV = styleCurrent.m_eV;
}

void CExtRichContentItem::stat_css_parm_handler_display( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("none") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_none;
	else if( str == _T("block") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_block;
	else if( str == _T("inline") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_inline;
	else if( str == _T("inline-block") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_inline_block;
	else if( str == _T("inline-table") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_inline_table;
	else if( str == _T("list-item") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_list_item;
	else if( str == _T("run-in") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_run_in;
	else if( str == _T("table") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table;
	else if( str == _T("table-caption") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_caption;
	else if( str == _T("table-cell") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_cell;
	else if( str == _T("table-column") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_column;
	else if( str == _T("table-column-group") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_column_group;
	else if( str == _T("table-footer-group") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_footer_group;
	else if( str == _T("table-header-group") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_header_group;
	else if( str == _T("table-row") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_row;
	else if( str == _T("table-row-group") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_table_row_group;
	else if( str == _T("ui-dock") )
		styleChanging.m_eD = CExtRichStyleDescription::ed_ui_dock;
	else if( str == _T("inherit") )
		styleChanging.m_eD = styleCurrent.m_eD;
}

void CExtRichContentItem::stat_css_parm_handler_ui_dock( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if(      str == _T("top") )			styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_top;
	else if( str == _T("pre-top") )		styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_pre_top;
	else if( str == _T("bottom") )		styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_bottom;
	else if( str == _T("pre-bottom") )	styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_pre_bottom;
	else if( str == _T("left") )		styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_left;
	else if( str == _T("pre-left") )	styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_pre_left;
	else if( str == _T("right") )		styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_right;
	else if( str == _T("pre-right") )	styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_pre_right;
	else if( str == _T("fill") )		styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_fill;
	else if( str == _T("pre-fill") )	styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_pre_fill;
	else								styleChanging.m_eDock = CExtRichStyleDescription::e_ui_dock_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_table_layout( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("auto") )
		styleChanging.m_eTL = CExtRichStyleDescription::etl_auto;
	else if( str == _T("fixed") )
		styleChanging.m_eTL = CExtRichStyleDescription::etl_fixed;
	else if( str == _T("inherit") )
		styleChanging.m_eTL = styleCurrent.m_eTL;
}

void CExtRichContentItem::stat_css_parm_handler_empty_cells( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("hide") )
		styleChanging.m_eEC = CExtRichStyleDescription::eec_hide;
	else if( str == _T("show") )
		styleChanging.m_eEC = CExtRichStyleDescription::eec_show;
	else if( str == _T("inherit") )
		styleChanging.m_eEC = styleCurrent.m_eEC;
}

void CExtRichContentItem::stat_css_parm_handler_caption_side( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("top") )
		styleChanging.m_eCST = CExtRichStyleDescription::ecst_top;
	else if( str == _T("bottom") )
		styleChanging.m_eCST = CExtRichStyleDescription::ecst_bottom;
	else if( str == _T("inherit") )
		styleChanging.m_eCST = styleCurrent.m_eCST;
}

void CExtRichContentItem::stat_css_parm_handler_border_spacing( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount < 1 || nCount > 2 )
		return;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
int nIndex = 1;
	for( ; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		if( str.IsEmpty() )
			continue;
		str.MakeLower();
		if( str == _T("inherit") )
		{
			styleChanging.m_nBorderSpacingHoriz = styleCurrent.m_nBorderSpacingHoriz;
			styleChanging.m_nBorderSpacingVert = styleCurrent.m_nBorderSpacingVert;
			break;
		}
		else
		{
			DOUBLE lfPercent = 1.0;
			bool bIsPercent = false;
			bool bIsMeasurementUnit = false;
			if( nCount == 1 )
			{
				LONG nResult = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsMeasurementUnit );
				if( bIsMeasurementUnit )
				{
					LONG nZIndex = _ttol( LPCTSTR(str) );
					styleChanging.m_nBorderSpacingHoriz = nZIndex;
				}
				else if( bIsPercent )
					styleChanging.m_nBorderSpacingHoriz = 0;
				else
					styleChanging.m_nBorderSpacingHoriz = nResult;
				
				lfPercent = 1.0;
				bIsPercent = false;
				bIsMeasurementUnit = false;
				
				nResult = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsMeasurementUnit );
				if( bIsMeasurementUnit )
				{
					LONG nZIndex = _ttol( LPCTSTR(str) );
					styleChanging.m_nBorderSpacingVert = nZIndex;
				}
				else if( bIsPercent )
					styleChanging.m_nBorderSpacingVert = 0;
				else
					styleChanging.m_nBorderSpacingVert = nResult;
			}
			else
			{
				bool bHorz = (nIndex == 1) ? true : false;
				LONG nResult = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), bHorz, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsMeasurementUnit );
				if( bIsMeasurementUnit )
				{
					LONG nZIndex = _ttol( LPCTSTR(str) );
					if( nIndex == 1 )
						styleChanging.m_nBorderSpacingHoriz = nZIndex;
					else
						styleChanging.m_nBorderSpacingVert = nZIndex;
				}
				else if( bIsPercent )
				{
					if( nIndex == 1 )
						styleChanging.m_nBorderSpacingHoriz = 0;
					else
						styleChanging.m_nBorderSpacingVert = 0;
				}
				else
				{
					if( nIndex == 1 )
						styleChanging.m_nBorderSpacingHoriz = nResult;
					else
						styleChanging.m_nBorderSpacingVert = nResult;
				}
			}
		}
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_collapse( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("collapse") )
		styleChanging.m_eBC = CExtRichStyleDescription::ebc_collapse;
	else if( str == _T("separate") )
		styleChanging.m_eBC = CExtRichStyleDescription::ebc_separate;
	else if( str == _T("inherit") )
		styleChanging.m_eBC = styleCurrent.m_eBC;
}

/*
void CExtRichContentItem::stat_css_parm_handler_page_break_before( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParsePageBreak( styleChanging, styleCurrent, str, true );
}

void CExtRichContentItem::stat_css_parm_handler_page_break_after( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParsePageBreak( styleChanging, styleCurrent, str, false );
}
*/

void CExtRichContentItem::stat_css_parm_handler_z_index( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("auto") )
		styleChanging.m_eZIT = CExtRichStyleDescription::ezi_auto;
	else if( str == _T("inherit") )
		styleChanging.m_eZIT = styleCurrent.m_eZIT;
	else
	{
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		bool bIsMeasurementUnit = false;
		pRCI->m_layout.ParseMeasurementString( LPCTSTR(str),  true, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsMeasurementUnit );
		if( bIsMeasurementUnit )
		{
			styleChanging.m_eZIT = CExtRichStyleDescription::ezi_explicit;
			LONG nZIndex = _ttol( LPCTSTR(str) );
			if( nZIndex == 0 )
			{
				styleChanging.m_eZIT = CExtRichStyleDescription::ezi_auto;
				styleChanging.m_nZIndex = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
			}
			else
				styleChanging.m_nZIndex = nZIndex;
		}
		else
		{
			styleChanging.m_eZIT = CExtRichStyleDescription::ezi_auto;
			styleChanging.m_nZIndex = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
		}
	}
}

void CExtRichContentItem::stat_css_parm_handler_quotes( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( ( nCount <= 0 ) || ( ( nCount % 2 ) == 0 ) )
		return;

POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
int i = 3;
CExtSafeString strOpenQuote;
	for( ; pos != NULL; i++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.MakeLower();
		if( ! str.IsEmpty() )
		{
			if( (i % 2) == 1 )
				strOpenQuote = str;
			else if( (i % 2) == 0 )
			{
				CExtRichStyleDescription::CQuoutes structQuote;
				structQuote.m_strOpenQuote = strOpenQuote;
				structQuote.m_strCloseQoute = str;
				styleChanging.m_listQuotes.AddTail( structQuote );
			}
		}
		else
		{
			styleChanging.m_listQuotes.RemoveAll();
			break;
		}
	} // if( pos != NULL )
}

void CExtRichContentItem::stat_css_parm_handler_counter_increment( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_strContent = str;
}

void CExtRichContentItem::stat_css_parm_handler_counter_reset( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	styleChanging.m_strContent = str;
}

void CExtRichContentItem::stat_css_parm_handler_content( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
// 	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
// 	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;

	//str = pRCI->ProcessContentSpec( LPCTSTR(str) );
	//str.Replace( _T("open-quote"), _T("\"") );
	//str.Replace( _T("close-quote"), _T("\"") );

	//str.MakeLower();
	if( pRCI->m_strTextParsed.Find( _T(":before") ) >= 0 )
	{
		styleChanging.m_strContentBefore = str;
		pRCI->m_PCD.m_eynBefore = CExtRichStyleDescription::e_ui_yn_yes;
	}
	else if( pRCI->m_strTextParsed.Find( _T(":after") ) >= 0 )
	{
		styleChanging.m_strContentAfter = str;
		pRCI->m_PCD.m_eynAfter = CExtRichStyleDescription::e_ui_yn_yes;
	}
	else
		styleChanging.m_strContent = str;
}

void CExtRichContentItem::stat_css_parm_handler_left( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseOuter( styleChanging, styleCurrent, str, CExtRichStyleDescription::eot_left );
}

void CExtRichContentItem::stat_css_parm_handler_top( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseOuter( styleChanging, styleCurrent, str, CExtRichStyleDescription::eot_top );
}

void CExtRichContentItem::stat_css_parm_handler_right( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseOuter( styleChanging, styleCurrent, str, CExtRichStyleDescription::eot_right );
}

void CExtRichContentItem::stat_css_parm_handler_bottom( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseOuter( styleChanging, styleCurrent, str, CExtRichStyleDescription::eot_bottom );
}

/*
void CExtRichContentItem::stat_css_parm_handler_clear( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("left") )
		styleChanging.m_eCS = CExtRichStyleDescription::ecs_left;
	else if( str == _T("right") )
		styleChanging.m_eCS = CExtRichStyleDescription::ecs_right;
	else if( str == _T("both") )
		styleChanging.m_eCS = CExtRichStyleDescription::ecs_both;
	else if( str == _T("none") )
		styleChanging.m_eCS = CExtRichStyleDescription::ecs_none;
	else if( str == _T("inherit") )
		styleChanging.m_eCS = styleCurrent.m_eCS;
}
*/

void CExtRichContentItem::stat_css_parm_handler_clip( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("auto") )
		styleChanging.m_eCI = CExtRichStyleDescription::eci_auto;
	else if( str == _T("inherit") )
	{
		styleChanging.m_eCI = styleCurrent.m_eCI;
		if( styleCurrent.m_eCI == CExtRichStyleDescription::eci_shape )
			styleChanging.m_rcClipImageShape = styleCurrent.m_rcClipImageShape;
	}
	else
	{
		if( str.Find( _T("rect") ) >= 0 )
		{
			styleChanging.m_eCI = CExtRichStyleDescription::eci_shape;
			str.TrimLeft( _T("rect(") );
			str.TrimRight( _T(")") );
			int nLen = str.GetLength();
			int nCommaPos, nCommaPrevPos;
			nCommaPos = nCommaPrevPos = -1;
			CExtSafeString strRectPart;
			int nIndex = 0;
			for( ; true; nIndex++ )
			{
				nCommaPrevPos = nCommaPos + 1;
				nCommaPos = str.Find( _T(","), nCommaPrevPos );
				if( nCommaPos < 0 )
					break;
				
				int nFirst = ( nCommaPrevPos >= 0 ) ? nCommaPrevPos : 0;
				int nCount = nCommaPos - nFirst;
				strRectPart = str.Mid( nFirst, nCount );
				if( strRectPart.IsEmpty() )
				{
					styleChanging.m_eCI = CExtRichStyleDescription::eci_auto;
					break;
				}
				else
				{
					strRectPart.MakeLower();
					DOUBLE lfPercent = 1.0;
					bool bIsPercent = false;
					LONG nParsedPX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(strRectPart),  ( ( nIndex == 1 ) ? true : false ), styleCurrent, -1L, &lfPercent, &bIsPercent );
					if( bIsPercent )
					{
						styleChanging.m_rcClipImageShape.SetRect(-1,-1,-1,-1);
						styleChanging.m_eCI = CExtRichStyleDescription::eci_auto;
						break;
					}
					else
					{
						switch( nIndex )
						{
						case 0:
							styleChanging.m_rcClipImageShape.top = nParsedPX;
							break;
						case 1:
							styleChanging.m_rcClipImageShape.right = nParsedPX;
							break;
						case 2:
							styleChanging.m_rcClipImageShape.bottom = nParsedPX;
							break;
						}
					}
				}
			}
			strRectPart = str.Mid( nCommaPrevPos, ( nLen - nCommaPrevPos ) );
			if( strRectPart.IsEmpty() )
				styleChanging.m_eCI = CExtRichStyleDescription::eci_auto;
			else
			{
				strRectPart.MakeLower();
				DOUBLE lfPercent = 1.0;
				bool bIsPercent = false;
				LONG nParsedPX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(strRectPart),  true, styleCurrent, -1L, &lfPercent, &bIsPercent );
				if( bIsPercent )
				{
					styleChanging.m_rcClipImageShape.SetRect(-1,-1,-1,-1);
					styleChanging.m_eCI = CExtRichStyleDescription::eci_auto;
				}
				else
					styleChanging.m_rcClipImageShape.left = nParsedPX;
			}
		}
	}
}

void CExtRichContentItem::stat_css_parm_handler_cursor( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("auto") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_auto;
	else if( str == _T("crosshair") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_crosshair;
	else if( str == _T("default") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_default;
	else if( str == _T("e-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_e_resize;
	else if( str == _T("help") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_help;
	else if( str == _T("move") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_move;
	else if( str == _T("n-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_n_resize;
	else if( str == _T("ne-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_ne_resize;
	else if( str == _T("nw-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_nw_resize;
	else if( str == _T("pointer") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_pointer;
	else if( str == _T("progress") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_progress;
	else if( str == _T("s-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_s_resize;
	else if( str == _T("se-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_se_resize;
	else if( str == _T("sw-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_sw_resize;
	else if( str == _T("text") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_text;
	else if( str == _T("w-resize") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_w_resize;
	else if( str == _T("wait") )
		styleChanging.m_eC = CExtRichStyleDescription::ec_wait;
	else if( str == _T("inherit") )
	{
		styleChanging.m_eC = styleCurrent.m_eC;
		if( styleCurrent.m_eC == CExtRichStyleDescription::ec_url )
			styleChanging.m_strCursorImagePath = styleCurrent.m_strCursorImagePath;
	}
	else
	{
		if( str.Find( _T("url(") ) >= 0 )
		{
			str.TrimLeft( _T("url(") );
			str.TrimRight( _T(")") );
			str.TrimLeft( _T("'") );
			str.TrimRight( _T("'") );
			styleChanging.m_strCursorImagePath = str;
			styleChanging.m_eC = CExtRichStyleDescription::ec_url;
		}
		else
			styleChanging.m_eC = CExtRichStyleDescription::ec_auto;
	}
}

void CExtRichContentItem::stat_css_parm_handler_float( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("left") )
		styleChanging.m_eF = CExtRichStyleDescription::ef_left;
	else if( str == _T("right") )
		styleChanging.m_eF = CExtRichStyleDescription::ef_right;
	else if( str == _T("none") )
		styleChanging.m_eF = CExtRichStyleDescription::ef_none;
	else if( str == _T("inherit") )
		styleChanging.m_eF = styleCurrent.m_eF;
}

void CExtRichContentItem::stat_css_parm_handler_overflow( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("visible") )
		styleChanging.m_eO = CExtRichStyleDescription::eo_visible;
	else if( str == _T("hidden") )
		styleChanging.m_eO = CExtRichStyleDescription::eo_hidden;
	else if( str == _T("scroll") )
		styleChanging.m_eO = CExtRichStyleDescription::eo_scroll;
	else if( str == _T("auto") )
		styleChanging.m_eO = CExtRichStyleDescription::eo_auto;
	else if( str == _T("inherit") )
		styleChanging.m_eO = styleCurrent.m_eO;
}

void CExtRichContentItem::stat_css_parm_handler_ui_sbh( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("auto") )
		styleChanging.m_esbtH = CExtRichStyleDescription::esbt_auto;
	else if( str == _T("hidden") || str == _T("none") )
		styleChanging.m_esbtH = CExtRichStyleDescription::esbt_hidden;
	else if( str == _T("visible") )
		styleChanging.m_esbtH = CExtRichStyleDescription::esbt_visible;
}

void CExtRichContentItem::stat_css_parm_handler_ui_sbv( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("auto") )
		styleChanging.m_esbtV = CExtRichStyleDescription::esbt_auto;
	else if( str == _T("hidden") || str == _T("none") )
		styleChanging.m_esbtV = CExtRichStyleDescription::esbt_hidden;
	else if( str == _T("visible") )
		styleChanging.m_esbtV = CExtRichStyleDescription::esbt_visible;
}

void CExtRichContentItem::stat_css_parm_handler_position( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("absolute") )
		styleChanging.m_eP = CExtRichStyleDescription::ep_absolute;
	else if( str == _T("fixed") )
		styleChanging.m_eP = CExtRichStyleDescription::ep_fixed;
	else if( str == _T("relative") )
		styleChanging.m_eP = CExtRichStyleDescription::ep_relative;
	else if( str == _T("static") )
		styleChanging.m_eP = CExtRichStyleDescription::ep_static;
	else if( str == _T("inherit") )
		styleChanging.m_eP = styleCurrent.m_eP;
}

void CExtRichContentItem::stat_css_parm_handler_list_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount <= 0 || nCount > 3 )
		return;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
bool bListStyleImage = false, bListStylePosition = false, bListStyleType = false;
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		if( ! bListStyleImage )
		{
			if( pRCI->ParseListStyleImage( styleChanging, styleCurrent, str ) )
			{
				bListStyleImage = true;
				continue;
			}
		}
		else if( ! bListStylePosition )
		{
			if( pRCI->ParseListStylePosition( styleChanging, styleCurrent, str ) )
			{
				bListStylePosition = true;
				continue;
			}
		}
		else if( ! bListStyleType )
		{
			if( pRCI->ParseListStyleType( styleChanging, styleCurrent, str ) )
			{
				bListStyleType = true;
				continue;
			}
		}
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_list_style_image( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseListStyleImage( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_list_style_position( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseListStylePosition( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_list_style_type( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseListStyleType( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
DOUBLE lfPercent = 1.0;
bool bIsPercent = false;
LONG nParsedPX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str),  true, styleCurrent, -1L, &lfPercent, &bIsPercent );
	if( bIsPercent )
	{
		styleChanging.m_sizeWHP.cx = LONG( lfPercent * 100.0 );
		styleChanging.m_sizeWHP.cx = max( styleChanging.m_sizeWHP.cx, 0 );
		styleChanging.m_sizeWHP.cx = min( styleChanging.m_sizeWHP.cx, 100 );
	}
	else
		styleChanging.m_sizeWH.cx = nParsedPX;
}

void CExtRichContentItem::stat_css_parm_handler_height( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
DOUBLE lfPercent = 1.0;
bool bIsPercent = false;
LONG nParsedPX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent );
	if( bIsPercent )
	{
		styleChanging.m_sizeWHP.cy = LONG( lfPercent * 100.0 );
		styleChanging.m_sizeWHP.cy = max( styleChanging.m_sizeWHP.cy, 0 );
		styleChanging.m_sizeWHP.cy = min( styleChanging.m_sizeWHP.cy, 100 );
	}
	else
		styleChanging.m_sizeWH.cy = nParsedPX;
}

void CExtRichContentItem::stat_css_parm_handler_max_height( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMaxHeight = styleCurrent.m_nMaxHeight;
	else if( str == _T("none") )
		styleChanging.m_nMaxHeight = -1;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nLineSpacing = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nLineSpacing = _ttol( LPCTSTR( str ) );
			nLineSpacing = abs( nLineSpacing );
			styleChanging.m_nMaxHeight = nLineSpacing;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMaxHeightP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMaxHeightP = max( styleChanging.m_lfMaxHeightP, 0 );
			styleChanging.m_lfMaxHeightP = min( styleChanging.m_lfMaxHeightP, 100 );
		}
		else
		{
			nLineSpacing = max( 0L, nLineSpacing );
			styleChanging.m_nMaxHeight = nLineSpacing;
		}
	}
}

void CExtRichContentItem::stat_css_parm_handler_max_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMaxWidth = styleCurrent.m_nMaxWidth;
	else if( str == _T("none") )
		styleChanging.m_nMaxWidth = -1;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nLineSpacing = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nLineSpacing = _ttol( LPCTSTR( str ) );
			nLineSpacing = abs( nLineSpacing );
			styleChanging.m_nMaxWidth = nLineSpacing;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMaxWidthP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMaxWidthP = max( styleChanging.m_lfMaxWidthP, 0 );
			styleChanging.m_lfMaxWidthP = min( styleChanging.m_lfMaxWidthP, 100 );
		}
		else
		{
			nLineSpacing = max( 0L, nLineSpacing );
			styleChanging.m_nMaxWidth = nLineSpacing;
		}
	}
}

void CExtRichContentItem::stat_css_parm_handler_min_height( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMinHeight = styleCurrent.m_nMinHeight;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nLineSpacing = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nLineSpacing = _ttol( LPCTSTR( str ) );
			nLineSpacing = abs( nLineSpacing );
			styleChanging.m_nMinHeight = nLineSpacing;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMinHeightP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMinHeightP = max( styleChanging.m_lfMinHeightP, 0 );
			styleChanging.m_lfMinHeightP = min( styleChanging.m_lfMinHeightP, 100 );
		}
		else
		{
			nLineSpacing = max( 0L, nLineSpacing );
			styleChanging.m_nMinHeight = nLineSpacing;
		}
	}
}

void CExtRichContentItem::stat_css_parm_handler_min_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("inherit") )
		styleChanging.m_nMinWidth = styleCurrent.m_nMinWidth;
	else
	{
		bool bIsNoMeasurementUnit = false;
		DOUBLE lfPercent = 1.0;
		bool bIsPercent = false;
		LONG nLineSpacing = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
		if( bIsNoMeasurementUnit )
		{
			nLineSpacing = _ttol( LPCTSTR( str ) );
			nLineSpacing = abs( nLineSpacing );
			styleChanging.m_nMinWidth = nLineSpacing;
		}
		else if( bIsPercent )
		{
			styleChanging.m_lfMinWidthP = LONG( lfPercent * 100.0 );
			styleChanging.m_lfMinWidthP = max( styleChanging.m_lfMinWidthP, 0 );
			styleChanging.m_lfMinWidthP = min( styleChanging.m_lfMinWidthP, 100 );
		}
		else
		{
			nLineSpacing = max( 0L, nLineSpacing );
			styleChanging.m_nMinWidth = nLineSpacing;
		}
	}
}

void CExtRichContentItem::stat_css_parm_handler_outline( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount <= 0 || nCount > 3 )
		return;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
bool bOutlineColor = false, bOutlineStyle = false, bOutlineWidth = false;
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		if( ! bOutlineColor )
		{
			if( pRCI->ParseOutlineColor( styleChanging, styleCurrent, str ) )
			{
				bOutlineColor = true;
				continue;
			}
		}
		else if( ! bOutlineStyle )
		{
			if( pRCI->ParseOutlineStyle( styleChanging, styleCurrent, str ) )
			{
				bOutlineStyle = true;
				continue;
			}
		}
		else if( ! bOutlineWidth )
		{
			if( pRCI->ParseOutlineWidth( styleChanging, styleCurrent, str ) )
			{
				bOutlineWidth = true;
				continue;
			}
		}
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_outline_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseOutlineColor( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_outline_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseOutlineStyle( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_outline_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseOutlineWidth( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_background( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount <= 0 || nCount > 6 )
		return;
COLORREF clrBackground_Old = styleChanging.m_clrBack;
CExtSafeString strBackgroundImagePath_Old = LPCTSTR(styleChanging.m_strBackgroundImagePath);
	CExtRichStyleDescription::e_background_repeat_t eBR_Old = styleChanging.m_eBR;
	CExtRichStyleDescription::e_background_attachment_t eBA_Old = styleChanging.m_eBA;
	CExtRichStyleDescription::e_background_postion_alignment_t eBPA_Old = styleChanging.m_eBPA;
	CExtRichStyleDescription::e_background_position_type_t eBPT_Old= styleChanging.m_eBPT;
POINT ptBackgroundAlignment_Old = styleChanging.m_ptBackgroundAlignment;
bool bParametersFail = false;
bool bBackgroundColor, bBackgroundImage, bBackgroundRepeat, bBackgroundAttachment;
	bBackgroundColor = bBackgroundImage = bBackgroundRepeat = bBackgroundAttachment = false;
CExtSafeStringArray arrBackgroundPos;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		if( str == _T("inherit") )
		{
			styleChanging.m_clrBack = styleCurrent.m_clrBack;
			styleChanging.m_strBackgroundImagePath = styleCurrent.m_strBackgroundImagePath;
			styleChanging.m_eBR = styleCurrent.m_eBR;
			styleChanging.m_eBA = styleCurrent.m_eBA;
			styleChanging.m_eBPA = styleCurrent.m_eBPA;
			styleChanging.m_eBPT = styleCurrent.m_eBPT;
			styleChanging.m_ptBackgroundAlignment = styleCurrent.m_ptBackgroundAlignment;
			bParametersFail = false;
			break;
		}
		else if( ! bBackgroundColor )
		{
			if( pRCI->ParseBackgroundColor( styleChanging, styleCurrent, str ) )
			{
				bBackgroundColor = true;
				continue;
			}
		}
		else if( ! bBackgroundImage )
		{
			if( pRCI->ParseBackgroundImage( styleChanging, styleCurrent, str ) )
			{
				bBackgroundImage = true;
				continue;
			}
		}
		else if( ! bBackgroundRepeat )
		{
			if( pRCI->ParseBackgroundRepeat( styleChanging, str ) )
			{
				bBackgroundRepeat = true;
				continue;
			}
		}
		else if( ! bBackgroundAttachment )
		{
			if( pRCI->ParseBackgroundAttachment( styleChanging, str ) )
			{
				bBackgroundAttachment = true;
				continue;
			}
		}
		else
		{
			arrBackgroundPos.Add( str );
		}
	} // for( ; pos != NULL; )
	int nBackPosCount = int( arrBackgroundPos.GetSize() );
	if( nBackPosCount >= 1 && nBackPosCount <= 2 )
	{
		int nIndex = 0;
		for( ; nIndex < nBackPosCount; nIndex++ )
		{
			CExtSafeString str = LPCTSTR( arrBackgroundPos.GetAt( nIndex ) );
			if( ! pRCI->ParseBackgroundPosition( styleChanging, styleCurrent, str, nBackPosCount, ( nIndex + 1 ) ) )
			{
				bParametersFail = true;
				break;
			}
		}
	}
	else if( nBackPosCount > 2 )
		bParametersFail = true;
	if( bParametersFail )
	{
		styleChanging.m_clrBack = clrBackground_Old;
		styleChanging.m_strBackgroundImagePath = strBackgroundImagePath_Old;
		styleChanging.m_eBR = eBR_Old;
		styleChanging.m_eBA = eBA_Old;
		styleChanging.m_eBPA = eBPA_Old;
		styleChanging.m_eBPT = eBPT_Old;
		styleChanging.m_ptBackgroundAlignment = ptBackgroundAlignment_Old;
	}
}

void CExtRichContentItem::stat_css_parm_handler_background_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseBackgroundColor( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_background_repeat( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseBackgroundRepeat( styleChanging, str );
}

void CExtRichContentItem::stat_css_parm_handler_background_attachment( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseBackgroundAttachment( styleChanging, str );
}

void CExtRichContentItem::stat_css_parm_handler_background_image( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	pRCI->ParseBackgroundImage( styleChanging, styleCurrent, str );
}

void CExtRichContentItem::stat_css_parm_handler_background_position( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount < 1 || nCount > 2 )
		return;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
int nIndex = 1;
	for( ; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		if( ! pRCI->ParseBackgroundPosition( styleChanging, styleCurrent, str, nCount, nIndex ) )
			break;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_white_space( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("normal") )
		styleChanging.m_eWST = CExtRichStyleDescription::ewstNormal;
	else if( str == _T("nowrap") )
		styleChanging.m_eWST = CExtRichStyleDescription::ewstNoWrap;
	else if( str == _T("pre") )
		styleChanging.m_eWST = CExtRichStyleDescription::ewstPre;
	else if( str == _T("pre-line") )
		styleChanging.m_eWST = CExtRichStyleDescription::ewstPreLine;
	else if( str == _T("pre-wrap") )
		styleChanging.m_eWST = CExtRichStyleDescription::ewstPreWrap;
	else if( str == _T("inherit") )
		styleChanging.m_eWST = CExtRichStyleDescription::ewstInherit;
}

void CExtRichContentItem::stat_css_parm_handler_font( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
bool bFontStyle, bFontWeight, bFontSizeLineHeight, bFontFamily;
	bFontStyle = bFontWeight = bFontSizeLineHeight = bFontFamily = false;
int nIndex = 0;
	for( ; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
		if( pRCI->stat_FontParmIsEmptyOrInherit( LPCTSTR(str) ) )
			continue;
		int nPosSlash = str.Find( _T('/') );
		if( 
			nPosSlash >= 0 
			&&	! bFontSizeLineHeight
			&&	! bFontFamily
			)
		{
			bFontSizeLineHeight = true;
			CExtSafeString strFontSize, strLineHeight;
			strFontSize = str.Mid( 0, nPosSlash );
			strLineHeight = str.Mid( ( nPosSlash + 1 ), ( str.GetLength() - 1 ) );

			strFontSize.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
			strFontSize.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
			strLineHeight.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
			strLineHeight.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );

			pRCI->ParseFontSize( styleChanging, styleCurrent, LPCTSTR( strFontSize ) );
			pRCI->ParseLineHeight( styleChanging, styleCurrent, LPCTSTR( strLineHeight ) );
			continue;
		}
		else if( 
			pRCI->ParseFontStyle( styleChanging, LPCTSTR( str ) ) 
			&&	! bFontStyle && nIndex == 0 
			&&	! bFontWeight
			&&	! bFontSizeLineHeight
			&&	! bFontFamily
			)
		{
			bFontStyle = true;
			continue;
		}
		else if( 
			pRCI->ParseFontWeight( styleChanging, LPCTSTR( str ) ) 
			&&	! bFontWeight 
			&&	! bFontSizeLineHeight
			&&	! bFontFamily
			)
		{
			bFontWeight = true;
			continue;
		}
		else if( pRCI->ParseFontFamily( styleChanging, LPCTSTR( str ) ) && ! bFontFamily )
		{
			bFontFamily = true;
			continue;
		}
	}
}

void CExtRichContentItem::stat_css_parm_handler_font_family( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
		if( pRCI->ParseFontFamily( styleChanging, LPCTSTR( str ) ) )
			break;
	}
}

void CExtRichContentItem::stat_css_parm_handler_font_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseFontStyle( styleChanging, LPCTSTR( str ) );
}

void CExtRichContentItem::stat_css_parm_handler_font_size( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseFontSize( styleChanging, styleCurrent, LPCTSTR(str) );
}

void CExtRichContentItem::stat_css_parm_handler_font_weight( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseFontWeight( styleChanging, LPCTSTR(str) );
}

void CExtRichContentItem::stat_css_parm_handler_border( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		bool bInheritMode = ( strCssSideStyle == _T("inherit") ) ? true : false;
		if(		pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(strCssSideStyle),
					true, true, true, true // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(strCssSideStyle),
					true, true, true, true // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
					true, true, true, true // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_padding( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
LONG nX = 0L, nY = 0L;
int nIndex;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcPadding.top = nY;
			if( nCount <= 2 )
				styleChanging.m_rcPadding.bottom = nY;
			if( nCount == 1 )
			{
				nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
				nX = max( 0L, nX );
				styleChanging.m_rcPadding.left = styleChanging.m_rcPadding.right = nX;
			}
			break;
		case 1: // left-right, right
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			if( nCount == 2 || nCount == 3 )
				styleChanging.m_rcPadding.left = nX;
			styleChanging.m_rcPadding.right = nX;
			break;
		case 2: // bottom
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcPadding.bottom = nY;
			break;
		case 3: // left
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			styleChanging.m_rcPadding.left = nX;
			break;
		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_margin( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
LONG nX = 0L, nY = 0L;
int nIndex;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcMargin.top = nY;
			if( nCount <= 2 )
				styleChanging.m_rcMargin.bottom = nY;
			if( nCount == 1 )
			{
				nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
				nX = max( 0L, nX );
				styleChanging.m_rcMargin.left = styleChanging.m_rcMargin.right = nX;
			}
			break;
		case 1: // left-right, right
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			if( nCount == 2 || nCount == 3 )
				styleChanging.m_rcMargin.left = nX;
			styleChanging.m_rcMargin.right = nX;
			break;
		case 2: // bottom
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcMargin.bottom = nY;
			break;
		case 3: // left
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			styleChanging.m_rcMargin.left = nX;
			break;
		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_line_height( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	pRCI->ParseLineHeight( styleChanging, styleCurrent, LPCTSTR( str ) );
}

void CExtRichContentItem::stat_css_parm_handler_text_indent( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
LONG nTextIndent = 0L;
DOUBLE lfPercent = 1.0;
bool bIsPercent = false;
	nTextIndent = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, -1L, &lfPercent, &bIsPercent );
	nTextIndent = max( 0L, nTextIndent );
	styleChanging.m_nParaIndent = nTextIndent;
}

void CExtRichContentItem::stat_css_parm_handler_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
COLORREF clr = pRCI->m_layout.ParseColorString( LPCTSTR( str ) );
	if( clr != COLORREF(-1L) )
		styleChanging.m_clrText = clr;
}

void CExtRichContentItem::stat_css_parm_handler_direction( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("ltr") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahLeft;
	else if( str == _T("rtl") )
	{
		if( styleChanging.m_eaH == CExtRichStyleDescription::eahJustify )
			styleChanging.m_eaH = CExtRichStyleDescription::eahJustifyRight;
		else
			styleChanging.m_eaH = CExtRichStyleDescription::eahRight;
	}
}

void CExtRichContentItem::stat_css_parm_handler_text_align( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("center") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahCenter;
	else if( str == _T("left") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahLeft;
	else if( str == _T("right") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahRight;
	else if( str == _T("justify") )
	{
		if( (styleChanging.m_eaH == CExtRichStyleDescription::eahJustifyRight) || (styleChanging.m_eaH == CExtRichStyleDescription::eahRight) )
			styleChanging.m_eaH = CExtRichStyleDescription::eahJustifyRight;
		else
			styleChanging.m_eaH = CExtRichStyleDescription::eahJustify;
	}
	else if( str == _T("justifywithlastline") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahJustifyWithLastLine;
	else if( str == _T("inherit") )
		styleChanging.m_eaH = CExtRichStyleDescription::eahUnknownChanging;
}

void CExtRichContentItem::stat_css_parm_handler_vertical_align( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("top") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavTop;
	else if( str == _T("middle") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavMiddle;
	else if( str == _T("bottom") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavBottom;
	else if( str == _T("baseline") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavBaseLine;
	else if( str == _T("sub") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavSub;
	else if( str == _T("super") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavSuper;
	else if( str == _T("text-top") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavTextTop;
	else if( str == _T("text-bottom") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavTextBottom;
	else if( str == _T("inherit") )
		styleChanging.m_eaV = CExtRichStyleDescription::eavUnknownChanging;
	else
		styleChanging.m_eaV = CExtRichStyleDescription::eavBottom;
}

void CExtRichContentItem::stat_css_parm_handler_text_decoration( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount < 1 )
		return;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		if( str.IsEmpty() )
			continue;
		str.MakeLower();
		if( str == _T("underline") )
			styleChanging.m_nUnderline = 1;
		if( str == _T("line-through") )
			styleChanging.m_nStrikeOut = 1;
//		if( str == _T("overline") )
//			styleChanging.m_nOverline = 1;
//		if( str == _T("blink") )
//			styleChanging.m_nBlink = 1;
	}
}

void CExtRichContentItem::stat_css_parm_handler_text_transform( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("capitalize") )
		styleChanging.m_etT = CExtRichStyleDescription::ettCapitalize;
	else if( str == _T("uppercase") )
		styleChanging.m_etT = CExtRichStyleDescription::ettUppercase;
	else if( str == _T("lowercase") )
		styleChanging.m_etT = CExtRichStyleDescription::ettLowercase;
	else if( str == _T("inherit") )
		styleChanging.m_etT = CExtRichStyleDescription::ettNone;
}

void CExtRichContentItem::stat_css_parm_handler_word_spacing( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
DOUBLE lfPercent = 1.0;
bool bIsPercent = false;
LONG nWordSpacing = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, &lfPercent, &bIsPercent );
	styleChanging.m_nWordSapcing = nWordSpacing;
}

void CExtRichContentItem::stat_css_parm_handler_letter_spacing( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
DOUBLE lfPercent = 1.0;
bool bIsPercent = false;
LONG nLetterSpacing = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, &lfPercent, &bIsPercent );
	styleChanging.m_nLetterSpacing = nLetterSpacing;
}

void CExtRichContentItem::stat_css_parm_handler_margin_left( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideMarginWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				true, false, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_margin_right( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideMarginWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, true, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_margin_top( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideMarginWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, false, true, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_margin_bottom( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideMarginWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, false, false, true // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_padding_left( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SidePaddingWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				true, false, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_padding_right( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SidePaddingWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, true, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_padding_top( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SidePaddingWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, false, true, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_padding_bottom( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SidePaddingWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, false, false, true // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_left( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		bool bInheritMode = ( strCssSideStyle == _T("inherit") ) ? true : false;
		if(		pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(strCssSideStyle),
					true, false, false, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(strCssSideStyle),
					true, false, false, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
					true, false, false, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_right( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		bool bInheritMode = ( strCssSideStyle == _T("inherit") ) ? true : false;
		if(		pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(strCssSideStyle),
					false, true, false, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(strCssSideStyle),
					false, true, false, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
					false, true, false, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_top( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		bool bInheritMode = ( strCssSideStyle == _T("inherit") ) ? true : false;
		if(		pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(strCssSideStyle),
					false, false, true, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(strCssSideStyle),
					false, false, true, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
					false, false, true, false // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_bottom( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		bool bInheritMode = ( strCssSideStyle == _T("inherit") ) ? true : false;
		if(		pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(strCssSideStyle),
					false, false, false, true // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(strCssSideStyle),
					false, false, false, true // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
		if(		pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
					false, false, false, true // l,r,t,b
					)
			&&	(! bInheritMode )
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_left_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderColor(
				styleChanging, LPCTSTR(strCssSideStyle),
				true, false, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_right_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderColor(
				styleChanging, LPCTSTR(strCssSideStyle),
				false, true, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_top_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderColor(
				styleChanging, LPCTSTR(strCssSideStyle),
				false, false, true, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_bottom_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderColor(
				styleChanging, LPCTSTR(strCssSideStyle),
				false, false, false, true // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_left_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				true, false, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_right_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, true, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_top_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, false, true, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_bottom_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(strCssSideStyle),
				false, false, false, true // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_width( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
	int nIndex;
	POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(str),
				false, false, true, false // l,r,t,b
				);
			if( nCount <= 2 )
				pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(str),
					false, false, false, true // l,r,t,b
					);
			if( nCount == 1 )
			{
				pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(str),
					true, false, false, false // l,r,t,b
					);
				pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(str),
					false, true, false, false // l,r,t,b
					);
			}
			break;
		case 1: // left-right, right
			if( nCount == 2 || nCount == 3 )
				pRCI->ApplyTagParams_CSS_SideBorderWH(
					styleChanging, styleCurrent, LPCTSTR(str),
					true, false, false, false // l,r,t,b
					);
			pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(str),
				false, true, false, false // l,r,t,b
				);
			break;
		case 2: // bottom
			pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(str),
				false, false, false, true // l,r,t,b
				);
			break;
		case 3: // left
			pRCI->ApplyTagParams_CSS_SideBorderWH(
				styleChanging, styleCurrent, LPCTSTR(str),
				true, false, false, false // l,r,t,b
				);
			break;
		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_border_color( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
int nIndex;
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(str),
					false, false, true, false // l,r,t,b
					);
			if( nCount <= 2 )
				pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(str),
					false, false, false, true // l,r,t,b
					);
			if( nCount == 1 )
			{
				pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(str),
					true, false, false, false // l,r,t,b
					);
				pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(str),
					false, true, false, false // l,r,t,b
					);
			}
			break;
		case 1: // left-right, right
			if( nCount == 2 || nCount == 3 )
				pRCI->ApplyTagParams_CSS_SideBorderColor(
					styleChanging, LPCTSTR(str),
					true, false, false, false // l,r,t,b
					);
			pRCI->ApplyTagParams_CSS_SideBorderColor(
				styleChanging, LPCTSTR(str),
				false, true, false, false // l,r,t,b
				);
			break;
		case 2: // bottom
			pRCI->ApplyTagParams_CSS_SideBorderColor(
				styleChanging, LPCTSTR(str),
				false, false, false, true // l,r,t,b
				);
			break;
		case 3: // left
			pRCI->ApplyTagParams_CSS_SideBorderColor(
				styleChanging, LPCTSTR(str),
				true, false, false, false // l,r,t,b
				);
			break;
		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_border_left_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(strCssSideStyle),
				true, false, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_right_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(strCssSideStyle),
				false, true, false, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
	int nIndex;
	POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(str),
				false, false, true, false // l,r,t,b
				);
			if( nCount <= 2 )
				pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(str),
					false, false, false, true // l,r,t,b
					);
			if( nCount == 1 )
			{
				pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(str),
					true, false, false, false // l,r,t,b
					);
				pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(str),
					false, true, false, false // l,r,t,b
					);
			}
			break;
		case 1: // left-right, right
			if( nCount == 2 || nCount == 3 )
				pRCI->ApplyTagParams_CSS_SideBorderStyle(
					styleChanging, LPCTSTR(str),
					true, false, false, false // l,r,t,b
					);
			pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(str),
				false, true, false, false // l,r,t,b
				);
			break;
		case 2: // bottom
			pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(str),
				false, false, false, true // l,r,t,b
				);
			break;
		case 3: // left
			pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(str),
				true, false, false, false // l,r,t,b
				);
			break;		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_border_top_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(strCssSideStyle),
				false, false, true, false // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_border_bottom_style( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
		strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
		strCssSideStyle.MakeLower();
		if( pRCI->ApplyTagParams_CSS_SideBorderStyle(
				styleChanging, LPCTSTR(strCssSideStyle),
				false, false, false, true // l,r,t,b
				)
			)
			continue;
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_disabled( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynDisabled = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynDisabled = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynDisabled = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_active( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynActive = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynActive = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynActive = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_focus( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynFocus = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynFocus = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynFocus = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_selected( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynSelection = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynSelection = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynSelection = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_hover( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynHover = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynHover = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynHover = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_pressed( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynPressed = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynPressed = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynPressed = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_link( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynLink = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynLink = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynLink = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_can_be_visited( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_PCD.m_eynVisited = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_PCD.m_eynVisited = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_PCD.m_eynVisited = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_focus_on_make_selected( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_eynFocusOnMakeSelected = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_eynFocusOnMakeSelected = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_eynFocusOnMakeSelected = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_focus_on_make_unselected_sibling( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_eynFocusOnMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_eynFocusOnMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_eynFocusOnMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_focus_off_make_unselected( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_eynFocusOffMakeUnSelected = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_eynFocusOffMakeUnSelected = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_eynFocusOffMakeUnSelected = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_focus_off_make_unselected_sibling( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") )
		styleChanging.m_eynFocusOffMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("false") || str == _T("0") )
		styleChanging.m_eynFocusOffMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_not;
	else 
		styleChanging.m_eynFocusOffMakeUnSelectedSibling = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_list_navigation( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") || str == _T("list") || str == _T("list-y") )
		styleChanging.m_eUiListNavigation = CExtRichStyleDescription::e_ui_ln_list_y;
	else if( str == _T("list-x") )
		styleChanging.m_eUiListNavigation = CExtRichStyleDescription::e_ui_ln_list_x;
	else if( str == _T("list-xy") )
		styleChanging.m_eUiListNavigation = CExtRichStyleDescription::e_ui_ln_list_xy;
	else if( str == _T("no") || str == _T("not") || str == _T("0") || str == _T("none") )
		styleChanging.m_eUiListNavigation = CExtRichStyleDescription::e_ui_ln_none;
	else
		styleChanging.m_eUiListNavigation = CExtRichStyleDescription::e_ui_ln_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_draw_method( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("hollow") )
		styleChanging.m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_hollow;
	else if( str == _T("center") )
		styleChanging.m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_center;
	else if( str == _T("stretch") )
		styleChanging.m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_stretch;
	else if( str == _T("tile-horizontally") )
		styleChanging.m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_tile_h;
	else if( str == _T("tile-vertically") )
		styleChanging.m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_tile_v;
	else if( str == _T("tile") )
		styleChanging.m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_tile;
	else
		styleChanging.m_eUiDrawMethod = CExtRichStyleDescription::e_ui_dm_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_background_draw_method( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
	int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("hollow") )
		styleChanging.m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_hollow;
	else if( str == _T("center") )
		styleChanging.m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_center;
	else if( str == _T("stretch") )
		styleChanging.m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_stretch;
	else if( str == _T("tile-horizontally") )
		styleChanging.m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_tile_h;
	else if( str == _T("tile-vertically") )
		styleChanging.m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_tile_v;
	else if( str == _T("tile") )
		styleChanging.m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_tile;
	else
		styleChanging.m_eUiBackgroundDrawMethod = CExtRichStyleDescription::e_ui_dm_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_slice( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
	LONG nX = 0L, nY = 0L;
	int nIndex;
	POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcUiSlice.top = nY;
			if( nCount <= 2 )
				styleChanging.m_rcUiSlice.bottom = nY;
			if( nCount == 1 )
			{
				nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
				nX = max( 0L, nX );
				styleChanging.m_rcUiSlice.left = styleChanging.m_rcUiSlice.right = nX;
			}
			break;
		case 1: // left-right, right
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			if( nCount == 2 || nCount == 3 )
				styleChanging.m_rcUiSlice.left = nX;
			styleChanging.m_rcUiSlice.right = nX;
			break;
		case 2: // bottom
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcUiSlice.bottom = nY;
			break;
		case 3: // left
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			styleChanging.m_rcUiSlice.left = nX;
			break;
		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_ui_background_slice( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
	LONG nX = 0L, nY = 0L;
	int nIndex;
	POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcUiBackgroundSlice.top = nY;
			if( nCount <= 2 )
				styleChanging.m_rcUiBackgroundSlice.bottom = nY;
			if( nCount == 1 )
			{
				nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
				nX = max( 0L, nX );
				styleChanging.m_rcUiBackgroundSlice.left = styleChanging.m_rcUiBackgroundSlice.right = nX;
			}
			break;
		case 1: // left-right, right
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			if( nCount == 2 || nCount == 3 )
				styleChanging.m_rcUiBackgroundSlice.left = nX;
			styleChanging.m_rcUiBackgroundSlice.right = nX;
			break;
		case 2: // bottom
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcUiBackgroundSlice.bottom = nY;
			break;
		case 3: // left
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			styleChanging.m_rcUiBackgroundSlice.left = nX;
			break;
		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_ui_transparency( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if(		( _tcsicmp( LPCTSTR(str), _T("thin") ) == 0 )
		||	( _tcsicmp( LPCTSTR(str), _T("medium") ) == 0 )
		||	( _tcsicmp( LPCTSTR(str), _T("thick") ) == 0 )
		)
		return;
static CString strExtensions[] = { _T("px"), _T("pt"), _T("cm"), _T("em"), _T("__qem"), _T("in"), _T("mm"), _T("ex"), _T("pc") };
INT nIndex;
	nCount = INT( sizeof(strExtensions) / sizeof(strExtensions[0]) );
	for( nIndex = 0; nIndex < nCount; nIndex++ )
	{
		LONG nPos = str.Find( strExtensions[nIndex] );
		if( nPos >= 0 )
			return;
	}
LONG nPos = str.Find( _T("%") );
	if( nPos < 0 )
		str += _T("px");
DOUBLE lfPercent = 1.0;
bool bIsPercent = false, bIsNoMeasurementUnit = false;
int nUiTransparency = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
	if( (! bIsPercent) && (! bIsNoMeasurementUnit) )
	{
		nUiTransparency = max( 0, nUiTransparency );
		nUiTransparency = min( 255, nUiTransparency );
		styleChanging.m_nUi_transparency = nUiTransparency;
	}
	else if( bIsPercent )
	{
		lfPercent = max( 0.0, lfPercent );
		lfPercent = min( 1.0, lfPercent );
		styleChanging.m_nUi_transparency = (int)(lfPercent * 255);
	}
}

void CExtRichContentItem::stat_css_parm_handler_ui_background_transparency( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
	CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
	CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if(		( _tcsicmp( LPCTSTR(str), _T("thin") ) == 0 )
		||	( _tcsicmp( LPCTSTR(str), _T("medium") ) == 0 )
		||	( _tcsicmp( LPCTSTR(str), _T("thick") ) == 0 )
		)
		return;
static CString strExtensions[] = { _T("px"), _T("pt"), _T("cm"), _T("em"), _T("__qem"), _T("in"), _T("mm"), _T("ex"), _T("pc") };
INT nIndex;
	nCount = INT( sizeof(strExtensions) / sizeof(strExtensions[0]) );
	for( nIndex = 0; nIndex < nCount; nIndex++ )
	{
		LONG nPos = str.Find( strExtensions[nIndex] );
		if( nPos >= 0 )
			return;
	}
LONG nPos = str.Find( _T("%") );
	if( nPos < 0 )
		str += _T("px");
DOUBLE lfPercent = 1.0;
bool bIsPercent = false, bIsNoMeasurementUnit = false;
int nUiBackgroundTransparency = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent, __EXT_RICH_CONTENT_NEGATIVE_UNUSED, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
	if( (! bIsPercent) && (! bIsNoMeasurementUnit) )
	{
		nUiBackgroundTransparency = max( 0, nUiBackgroundTransparency );
		nUiBackgroundTransparency = min( 255, nUiBackgroundTransparency );
		styleChanging.m_nUi_background_transparency = nUiBackgroundTransparency;
	}
	else if( bIsPercent )
	{
		lfPercent = max( 0.0, lfPercent );
		lfPercent = min( 1.0, lfPercent );
		styleChanging.m_nUi_background_transparency = (int)(lfPercent * 255);
	}
}

void CExtRichContentItem::stat_css_parm_handler_ui_focus_ensure_visibility( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("yes") || str == _T("true") || str == _T("1") || str == _T("ensure") )
		styleChanging.m_eUiFocusEnsureVisibility = CExtRichStyleDescription::e_ui_yn_yes;
	else if( str == _T("no") || str == _T("not") || str == _T("0") || str == _T("none") )
		styleChanging.m_eUiFocusEnsureVisibility = CExtRichStyleDescription::e_ui_yn_not;
	else
		styleChanging.m_eUiFocusEnsureVisibility = CExtRichStyleDescription::e_ui_yn_unspecified;
}

void CExtRichContentItem::stat_css_parm_handler_ui_background_extend( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	int nCount = int( pFoundHI->m_listParms.GetCount() );
	if( nCount <= 0 || nCount > 4 )
		return;
	LONG nX = 0L, nY = 0L;
	int nIndex;
	POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
	for( nIndex = 0; pos != NULL; nIndex++ )
	{
		CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
		CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
		str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
		str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! str.IsEmpty() );
		str.MakeLower();
		switch( nIndex )
		{
		case 0: // all, top-bottom, top
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcUiBackgroundExtend.top = nY;
			if( nCount <= 2 )
				styleChanging.m_rcUiBackgroundExtend.bottom = nY;
			if( nCount == 1 )
			{
				nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
				nX = max( 0L, nX );
				styleChanging.m_rcUiBackgroundExtend.left = styleChanging.m_rcUiBackgroundExtend.right = nX;
			}
			break;
		case 1: // left-right, right
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			if( nCount == 2 || nCount == 3 )
				styleChanging.m_rcUiBackgroundExtend.left = nX;
			styleChanging.m_rcUiBackgroundExtend.right = nX;
			break;
		case 2: // bottom
			nY = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), false, styleCurrent );
			nY = max( 0L, nY );
			styleChanging.m_rcUiBackgroundExtend.bottom = nY;
			break;
		case 3: // left
			nX = pRCI->m_layout.ParseMeasurementString( LPCTSTR(str), true, styleCurrent );
			nX = max( 0L, nX );
			styleChanging.m_rcUiBackgroundExtend.left = nX;
			break;
		default:
			pos = NULL; // stop parsing
			break;
		}
	} // for( ; pos != NULL; nIndex++ )
}

void CExtRichContentItem::stat_css_parm_handler_ui_delayed_draw( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("0") || str == _T("default") || str == _T("bottom") || str == _T("bottommost") )
		styleChanging.m_eUiDelayedDraw = CExtRichStyleDescription::e_ui_dd_default;
	else if( str == _T("1") || str == _T("inherit") )
		styleChanging.m_eUiDelayedDraw = CExtRichStyleDescription::e_ui_dd_inherit;
	else if( str == _T("2") || str == _T("post-sibling") || str == _T("sibling") || str == _T("level") || str == _T("post-level") )
		styleChanging.m_eUiDelayedDraw = CExtRichStyleDescription::e_ui_dd_post_sibling;
	else if( str == _T("3") || str == _T("pre-fa")  || str == _T("pre-fixed-absolute")  || str == _T("non-top") || str == _T("non-topmost") )
		styleChanging.m_eUiDelayedDraw = CExtRichStyleDescription::e_ui_dd_pre_fixed_absolute;
	else if( str == _T("4") || str == _T("post-fa") || str == _T("post-fixed-absolute") || str == _T("top")     || str == _T("topmost") )
		styleChanging.m_eUiDelayedDraw = CExtRichStyleDescription::e_ui_dd_topmost;
}

void CExtRichContentItem::stat_css_parm_handler_ui_sb_type( CExtRichContentItem *, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & )
{
int nCount = int(pFoundHI->m_listParms.GetCount());
	if( nCount != 1 )
		return;
CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetHead();
CExtSafeString str = LPCTSTR(pStylesParmHI->m_strTagPV);
	str.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	str.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( str.IsEmpty() )
		return;
	str.MakeLower();
	if( str == _T("0") || str == _T("default") || str == _T("similar") )
		styleChanging.m_eUiSBT = CExtRichStyleDescription::e_ui_sbt_default;
	else if( str == _T("1") || str == _T("inherit") )
		styleChanging.m_eUiSBT = CExtRichStyleDescription::e_ui_sbt_inherit;
	else if( str == _T("2") || str == _T("classic") )
		styleChanging.m_eUiSBT = CExtRichStyleDescription::e_ui_sbt_classic;
	else if( str == _T("3") || str == _T("pop-over-light") || str == _T("popover-light") || str == _T("pop-light") )
		styleChanging.m_eUiSBT = CExtRichStyleDescription::e_ui_sbt_pop_over_light;
	else if( str == _T("4") || str == _T("pop-over-full") || str == _T("popover-full") || str == _T("pop-full") )
		styleChanging.m_eUiSBT = CExtRichStyleDescription::e_ui_sbt_pop_over_full;
	else if( str == _T("5") || str == _T("none") || str == _T("no") || str == _T("not") || str == _T("empty") || str == _T("hidden") )
		styleChanging.m_eUiSBT = CExtRichStyleDescription::e_ui_sbt_none;
}

//void CExtRichContentItem::stat_css_parm_handler_XXX( CExtRichContentItem * pRCI, CExtRichContentItem * pFoundHI,  CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )

void CExtRichContentItem::ApplyTagParams_CSS( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
typedef void (*parm_handler_func_t)( CExtRichContentItem *, CExtRichContentItem *,  CExtRichStyleRule &, const CExtRichStyleDescription & );
static CExtSafeMapStringToPtr g_mapHandlers;
	if( g_mapHandlers.GetCount() == 0 )
	{
		static struct
		{
			LPCTSTR m_strName;
			parm_handler_func_t m_pHandler;
		} g_arrHandlers[] =
		{
			{ _T("visibility"), stat_css_parm_handler_visibility },
			{ _T("display"), stat_css_parm_handler_display },
			{ _T("ui-dock"), stat_css_parm_handler_ui_dock },
			{ _T("table-layout"), stat_css_parm_handler_table_layout },
			{ _T("empty-cells"), stat_css_parm_handler_empty_cells },
			{ _T("caption-side"), stat_css_parm_handler_caption_side },
			{ _T("border-spacing"), stat_css_parm_handler_border_spacing },
			{ _T("border-collapse"), stat_css_parm_handler_border_collapse },
//			{ _T("page-break-before"), stat_css_parm_handler_page_break_before },
//			{ _T("page-break-after"), stat_css_parm_handler_page_break_after },
			{ _T("z-index"), stat_css_parm_handler_z_index },
			{ _T("quotes"), stat_css_parm_handler_quotes },
			{ _T("counter-increment"), stat_css_parm_handler_counter_increment },
			{ _T("counter-reset"), stat_css_parm_handler_counter_reset },
			{ _T("content"), stat_css_parm_handler_content },
			{ _T("left"), stat_css_parm_handler_left },
			{ _T("top"), stat_css_parm_handler_top },
			{ _T("right"), stat_css_parm_handler_right },
			{ _T("bottom"), stat_css_parm_handler_bottom },
//			{ _T("clear"), stat_css_parm_handler_clear },
			{ _T("clip"), stat_css_parm_handler_clip },
			{ _T("cursor"), stat_css_parm_handler_cursor },
			{ _T("float"), stat_css_parm_handler_float },
			{ _T("overflow"), stat_css_parm_handler_overflow },
			{ _T("ui-sbh"), stat_css_parm_handler_ui_sbh },
			{ _T("ui-sbv"), stat_css_parm_handler_ui_sbv },
			{ _T("position"), stat_css_parm_handler_position },
			{ _T("list-style"), stat_css_parm_handler_list_style },
			{ _T("list-style-image"), stat_css_parm_handler_list_style_image },
			{ _T("list-style-position"), stat_css_parm_handler_list_style_position },
			{ _T("list-style-type"), stat_css_parm_handler_list_style_type },
			{ _T("width"), stat_css_parm_handler_width },
			{ _T("height"), stat_css_parm_handler_height },
			{ _T("max-height"), stat_css_parm_handler_max_height },
			{ _T("max-width"), stat_css_parm_handler_max_width },
			{ _T("min-height"), stat_css_parm_handler_min_height },
			{ _T("min-width"), stat_css_parm_handler_min_width },
			{ _T("outline"), stat_css_parm_handler_outline },
			{ _T("outline-color"), stat_css_parm_handler_outline_color },
			{ _T("outline-style"), stat_css_parm_handler_outline_style },
			{ _T("outline-width"), stat_css_parm_handler_outline_width },
			{ _T("background"), stat_css_parm_handler_background },
			{ _T("background-color"), stat_css_parm_handler_background_color },
			{ _T("background-repeat"), stat_css_parm_handler_background_repeat },
			{ _T("background-attachment"), stat_css_parm_handler_background_attachment },
			{ _T("background-image"), stat_css_parm_handler_background_image },
			{ _T("background-position"), stat_css_parm_handler_background_position },
			{ _T("white-space"), stat_css_parm_handler_white_space },
			{ _T("font"), stat_css_parm_handler_font },
			{ _T("font-family"), stat_css_parm_handler_font_family },
			{ _T("font-style"), stat_css_parm_handler_font_style },
			{ _T("font-size"), stat_css_parm_handler_font_size },
			{ _T("font-weight"), stat_css_parm_handler_font_weight },
			{ _T("border"), stat_css_parm_handler_border },
			{ _T("padding"), stat_css_parm_handler_padding },
			{ _T("margin"), stat_css_parm_handler_margin },
			{ _T("line-height"), stat_css_parm_handler_line_height },
			{ _T("text-indent"), stat_css_parm_handler_text_indent },
			{ _T("color"), stat_css_parm_handler_color },
			{ _T("direction"), stat_css_parm_handler_direction },
			{ _T("text-align"), stat_css_parm_handler_text_align },
			{ _T("vertical-align"), stat_css_parm_handler_vertical_align },
			{ _T("text-decoration"), stat_css_parm_handler_text_decoration },
			{ _T("text-transform"), stat_css_parm_handler_text_transform },
			{ _T("word-spacing"), stat_css_parm_handler_word_spacing },
			{ _T("letter-spacing"), stat_css_parm_handler_letter_spacing },
			{ _T("margin-left"), stat_css_parm_handler_margin_left },
			{ _T("margin-right"), stat_css_parm_handler_margin_right },
			{ _T("margin-top"), stat_css_parm_handler_margin_top },
			{ _T("margin-bottom"), stat_css_parm_handler_margin_bottom },
			{ _T("padding-left"), stat_css_parm_handler_padding_left },
			{ _T("padding-right"), stat_css_parm_handler_padding_right },
			{ _T("padding-top"), stat_css_parm_handler_padding_top },
			{ _T("padding-bottom"), stat_css_parm_handler_padding_bottom },
			{ _T("border-color"), stat_css_parm_handler_border_color },
			{ _T("border-left"), stat_css_parm_handler_border_left },
			{ _T("border-style"), stat_css_parm_handler_border_style },
			{ _T("border-top"), stat_css_parm_handler_border_top },
			{ _T("border-right"), stat_css_parm_handler_border_right },
			{ _T("border-bottom"), stat_css_parm_handler_border_bottom },
			{ _T("border-left-color"), stat_css_parm_handler_border_left_color },
			{ _T("border-top-color"), stat_css_parm_handler_border_top_color },
			{ _T("border-right-color"), stat_css_parm_handler_border_right_color },
			{ _T("border-bottom-color"), stat_css_parm_handler_border_bottom_color },
			{ _T("border-left-width"), stat_css_parm_handler_border_left_width },
			{ _T("border-top-width"), stat_css_parm_handler_border_top_width },
			{ _T("border-right-width"), stat_css_parm_handler_border_right_width },
			{ _T("border-bottom-width"), stat_css_parm_handler_border_bottom_width },
			{ _T("border-width"), stat_css_parm_handler_border_width },
			{ _T("border-left-style"), stat_css_parm_handler_border_left_style },
			{ _T("border-top-style"), stat_css_parm_handler_border_top_style },
			{ _T("border-right-style"), stat_css_parm_handler_border_right_style },
			{ _T("border-bottom-style"), stat_css_parm_handler_border_bottom_style },
			{ _T("ui-can-be-disable"),   stat_css_parm_handler_ui_can_be_disabled },
			{ _T("ui-can-be-disabled"),  stat_css_parm_handler_ui_can_be_disabled },
			{ _T("ui-can-be-active"),    stat_css_parm_handler_ui_can_be_active },
			{ _T("ui-can-be-focus"),     stat_css_parm_handler_ui_can_be_focus },
			{ _T("ui-can-be-focused"),   stat_css_parm_handler_ui_can_be_focus },
			{ _T("ui-can-be-selected"),  stat_css_parm_handler_ui_can_be_selected },
			{ _T("ui-can-be-selection"), stat_css_parm_handler_ui_can_be_selected },
			{ _T("ui-can-be-hover"),     stat_css_parm_handler_ui_can_be_hover },
			{ _T("ui-can-be-hovered"),   stat_css_parm_handler_ui_can_be_hover },
			{ _T("ui-can-be-press"),     stat_css_parm_handler_ui_can_be_pressed },
			{ _T("ui-can-be-pressed"),   stat_css_parm_handler_ui_can_be_pressed },
			{ _T("ui-can-be-link"),      stat_css_parm_handler_ui_can_be_link },
			{ _T("ui-can-be-visit"),     stat_css_parm_handler_ui_can_be_visited },
			{ _T("ui-can-be-visited"),   stat_css_parm_handler_ui_can_be_visited },
			{ _T("ui-focus-on-make-selected"),  stat_css_parm_handler_ui_focus_on_make_selected },
			{ _T("ui-focus-on-make-selection"), stat_css_parm_handler_ui_focus_on_make_selected },
			{ _T("ui-focus-on-make-unselected-sibling"),  stat_css_parm_handler_ui_focus_on_make_unselected_sibling },
			{ _T("ui-focus-on-make-unselection-sibling"), stat_css_parm_handler_ui_focus_on_make_unselected_sibling },
			{ _T("ui-focus-off-make-unselected"),  stat_css_parm_handler_ui_focus_off_make_unselected },
			{ _T("ui-focus-off-make-unselection"), stat_css_parm_handler_ui_focus_off_make_unselected },
			{ _T("ui-focus-off-make-unselected-sibling"),  stat_css_parm_handler_ui_focus_off_make_unselected_sibling },
			{ _T("ui-focus-off-make-unselection-sibling"), stat_css_parm_handler_ui_focus_off_make_unselected_sibling },
			{ _T("ui-list-navigation"), stat_css_parm_handler_ui_list_navigation },
			{ _T("ui-draw-method"), stat_css_parm_handler_ui_draw_method },
			{ _T("ui-background-draw-method"), stat_css_parm_handler_ui_background_draw_method },
			{ _T("ui-slice"), stat_css_parm_handler_ui_slice },
			{ _T("ui-background-slice"), stat_css_parm_handler_ui_background_slice },
			{ _T("ui-transparency"), stat_css_parm_handler_ui_transparency },
			{ _T("ui-background-transparency"), stat_css_parm_handler_ui_background_transparency },
			{ _T("ui-focus-ensure-visibility"), stat_css_parm_handler_ui_focus_ensure_visibility },
			{ _T("ui-background-extend"), stat_css_parm_handler_ui_background_extend },
			{ _T("ui-delayed-draw"), stat_css_parm_handler_ui_delayed_draw },
			{ _T("ui-sb-type"), stat_css_parm_handler_ui_sb_type },
		};
		INT nIndex, nCount = INT( sizeof(g_arrHandlers) / sizeof(g_arrHandlers[0]) );
		for( nIndex = 0; nIndex < nCount; nIndex ++ )
			g_mapHandlers.SetAt( LPCTSTR(g_arrHandlers[nIndex].m_strName), LPVOID(g_arrHandlers[nIndex].m_pHandler) );
	} // if( g_mapHandlers.GetCount() == 0 )

POSITION posStyle = NULL;
CExtRichContentItem * pStyleNodeHI = FindParmByNameFirst( posStyle, _T("style") );
	for( ; pStyleNodeHI != NULL; pStyleNodeHI = FindParmByNameNext( posStyle, _T("style") ) )
	{ // loop for all the style nodes

		CExtRichContentItem * pParmHI = pStyleNodeHI;
		POSITION pos = pParmHI->m_listParms.GetHeadPosition();
		for( ; pos != NULL; )
		{
			pParmHI = pParmHI->m_listParms.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pParmHI != NULL );
			CExtSafeString strParmNameLC = pParmHI->m_strTextParsed;
			strParmNameLC.MakeLower();
			LPVOID ptr = NULL;
			if( ! g_mapHandlers.Lookup( LPCTSTR(strParmNameLC), ptr ) )
				continue;
			__EXT_DEBUG_RICH_CONTENT_ASSERT( ptr != NULL );
			parm_handler_func_t pHandler = (parm_handler_func_t)ptr;
			pHandler( this, pParmHI, styleChanging, styleCurrent );
		}

/*
		CExtRichContentItem * pFoundHI = NULL;

		enum e_parsed_css_side_names_t
		{
			css_side_left   = 0,
			css_side_right  = 1,
			css_side_top    = 2,
			css_side_bottom = 3,
			css_side_all    = 4,
			css_side_count  = 5,
		};
		static LPCTSTR g_arrCssSideNames[ LONG(css_side_count) ] =
			{ _T("left"), _T("right"), _T("top"), _T("bottom"), NULL };
		static struct { bool m_bApplyLeft, m_bApplyRight, m_bApplyTop, m_bApplyBottom; } g_arrCssSideFlags[ LONG(css_side_count) ] =
		{
			{ true,  false, false, false, },
			{ false, true,  false, false, },
			{ false, false, true,  false, },
			{ false, false, false, true,  },
			{ true,  true,  true,  true,  },
		};
		LONG nPartNo;
		for( nPartNo = 0; nPartNo < LONG(css_side_count); nPartNo ++ )
		{
			CExtSafeString strCssParmName;
			// border-left, border-right, border-top, border-bottom, border
			strCssParmName.Format(
				_T("border%s%s"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : _T("-"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : g_arrCssSideNames[ nPartNo ]
				);
			pFoundHI = pStyleNodeHI->FindParmByName( LPCTSTR(strCssParmName) );
			if( pFoundHI != NULL )
			{
				POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
				for( ; pos != NULL; )
				{
					CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
					CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
					strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
					strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
					strCssSideStyle.MakeLower();
					bool bInheritMode = ( strCssSideStyle == _T("inherit") ) ? true : false;
					if(		ApplyTagParams_CSS_SideBorderStyle( styleChanging, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom )
						&&	(! bInheritMode )
						)
						continue;
					if(		ApplyTagParams_CSS_SideBorderColor( styleChanging, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom )
						&&	(! bInheritMode )
						)
						continue;
					if(		ApplyTagParams_CSS_SideBorderWH( styleChanging, styleCurrent, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom )
						&&	(! bInheritMode )
						)
						continue;
				} // for( ; pos != NULL; )
			} // if( pFoundHI != NULL )
			// border-left-color, border-right-color, border-top-color, border-bottom-color, border-color

			strCssParmName.Format(
				_T("border%s%s-color"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : _T("-"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : g_arrCssSideNames[ nPartNo ]
				);
			pFoundHI = pStyleNodeHI->FindParmByName( LPCTSTR(strCssParmName) );
			if( pFoundHI != NULL )
			{
				POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
				for( ; pos != NULL; )
				{
					CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
					CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
					strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
					strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
					strCssSideStyle.MakeLower();
					if( ApplyTagParams_CSS_SideBorderColor( styleChanging, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom ) )
						continue;
				} // for( ; pos != NULL; )
			} // if( pFoundHI != NULL )
			// border-left-width, border-right-width, border-top-width, border-bottom-width, border-width
			strCssParmName.Format(
				_T("border%s%s-width"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : _T("-"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : g_arrCssSideNames[ nPartNo ]
				);
			pFoundHI = pStyleNodeHI->FindParmByName( LPCTSTR(strCssParmName) );
			if( pFoundHI != NULL )
			{
				POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
				for( ; pos != NULL; )
				{
					CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
					CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
					strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
					strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
					strCssSideStyle.MakeLower();
					if( ApplyTagParams_CSS_SideBorderWH( styleChanging, styleCurrent, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom ) )
						continue;
				} // for( ; pos != NULL; )
			} // if( pFoundHI != NULL )
			// border-left-style, border-right-style, border-top-style, border-bottom-style, border-style
			strCssParmName.Format(
				_T("border%s%s-style"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : _T("-"),
				( g_arrCssSideNames[ nPartNo ] == NULL ) ? _T("") : g_arrCssSideNames[ nPartNo ]
				);
			pFoundHI = pStyleNodeHI->FindParmByName( LPCTSTR(strCssParmName) );
			if( pFoundHI != NULL )
			{
				POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
				for( ; pos != NULL; )
				{
					CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
					CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
					strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
					strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
					strCssSideStyle.MakeLower();
					if( ApplyTagParams_CSS_SideBorderStyle( styleChanging, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom ) )
						continue;
				} // for( ; pos != NULL; )
			} // if( pFoundHI != NULL )
			if( nPartNo != LONG(css_side_all) )
			{ // apply one-side only margin and padding here
				__EXT_DEBUG_RICH_CONTENT_ASSERT( g_arrCssSideNames[ nPartNo ] != NULL );
				// margin-left, margin-right, margin-top, margin-bottom
				strCssParmName.Format( _T("margin-%s"), g_arrCssSideNames[ nPartNo ] );
				pFoundHI = pStyleNodeHI->FindParmByName( LPCTSTR(strCssParmName) );
				if( pFoundHI != NULL )
				{
					POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
					for( ; pos != NULL; )
					{
						CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
						CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
						strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
						strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
						strCssSideStyle.MakeLower();
						if( ApplyTagParams_CSS_SideMarginWH( styleChanging, styleCurrent, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom ) )
							continue;
					} // for( ; pos != NULL; )
				}
				// padding-left, padding-right, padding-top, padding-bottom
				strCssParmName.Format( _T("padding-%s"), g_arrCssSideNames[ nPartNo ] );
				pFoundHI = pStyleNodeHI->FindParmByName( LPCTSTR(strCssParmName) );
				if( pFoundHI != NULL )
				{
					POSITION pos = pFoundHI->m_listParms.GetHeadPosition();
					for( ; pos != NULL; )
					{
						CExtRichContentItem * pStylesParmHI = pFoundHI->m_listParms.GetNext( pos );
						CExtSafeString strCssSideStyle = LPCTSTR(pStylesParmHI->m_strTagPV);
						strCssSideStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
						strCssSideStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCssSideStyle.IsEmpty() );
						strCssSideStyle.MakeLower();
						if( ApplyTagParams_CSS_SidePaddingWH( styleChanging, styleCurrent, LPCTSTR(strCssSideStyle), g_arrCssSideFlags[nPartNo].m_bApplyLeft, g_arrCssSideFlags[nPartNo].m_bApplyRight, g_arrCssSideFlags[nPartNo].m_bApplyTop, g_arrCssSideFlags[nPartNo].m_bApplyBottom ) )
							continue;
					} // for( ; pos != NULL; )
				}
			} // apply one-side only margin and padding here
		} // for( nPartNo = 0; nPartNo < LONG(css_side_count); nPartNo ++ )
*/

	} // loop for all the style nodes
}

bool CExtRichContentItem::ParseOutlineColor( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strOutlineColor ) const
{
CExtSafeString _strOutlineColor = LPCTSTR(strOutlineColor);
	_strOutlineColor.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strOutlineColor.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( _strOutlineColor == _T("invert") )
	{
		styleChanging.m_clrOutlineColor = RGB(0,0,0);
		return true;
	}
	else if( _strOutlineColor == _T("inherit") )
	{
		styleChanging.m_clrOutlineColor = styleCurrent.m_clrOutlineColor;
		return true;
	}
	else
	{
		COLORREF clr = m_layout.ParseColorString( LPCTSTR(_strOutlineColor) );
		if( clr != COLORREF(-1L) )
		{
			styleChanging.m_clrOutlineColor = clr;
			return true;
		}
	}
	return false;
}

bool CExtRichContentItem::ParseOutlineStyle( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strOutlineStyle ) const
{
CExtSafeString _strOutlineStyle = LPCTSTR(strOutlineStyle);
	_strOutlineStyle.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strOutlineStyle.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strOutlineStyle.MakeLower();
	if( ! _strOutlineStyle.IsEmpty() )
	{
		if( _strOutlineStyle == _T("none") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_none;
			return true;
		}
		else if( _strOutlineStyle == _T("dotted") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_dotted;
			return true;
		}
		else if( _strOutlineStyle == _T("dashed") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_dashed;
			return true;
		}
		else if( _strOutlineStyle == _T("solid") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_solid;
			return true;
		}
		else if( _strOutlineStyle == _T("double") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_double;
			return true;
		}
		else if( _strOutlineStyle == _T("groove") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_groove;
			return true;
		}
		else if( _strOutlineStyle == _T("ridge") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_ridge;
			return true;
		}
		else if( _strOutlineStyle == _T("inset") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_inset;
			return true;
		}
		else if( _strOutlineStyle == _T("outset") )
		{
			styleChanging.m_eOS = CExtRichStyleDescription::eos_outset;
			return true;
		}
		else if( _strOutlineStyle == _T("inherit") )
		{
			styleChanging.m_eOS = styleCurrent.m_eOS;
			return true;
		}
	}
	return false;
}

bool CExtRichContentItem::ParseOutlineWidth( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strOutlineWidth ) const
{
CExtSafeString _strOutlineWidth = LPCTSTR(strOutlineWidth);
	if( ! _strOutlineWidth.IsEmpty() )
	{
		_strOutlineWidth.MakeLower();
		if( _strOutlineWidth == _T("inherit") )
		{
			styleChanging.m_nOutlineWidth = styleCurrent.m_nOutlineWidth;
			return true;
		}
		else if( _strOutlineWidth == _T("thin") )
		{
			styleChanging.m_nOutlineWidth = 3;	// TO-DO: write correct size
			return true;
		}
		else if( _strOutlineWidth == _T("medium") )
		{
			styleChanging.m_nOutlineWidth = 5;	// TO-DO: write correct size
			return true;
		}
		else if( _strOutlineWidth == _T("thick") )
		{
			styleChanging.m_nOutlineWidth = 7;	// TO-DO: write correct size
			return true;
		}
		else
		{
			bool bIsNoMeasurementUnit = false;
			DOUBLE lfPercent = 1.0;
			bool bIsPercent = false;
			LONG nLineSpacing = m_layout.ParseMeasurementString( LPCTSTR(_strOutlineWidth), true, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
			if( bIsNoMeasurementUnit || bIsPercent )
				return false;
			else
			{
 				nLineSpacing = max( 0L, nLineSpacing );
				styleChanging.m_nOutlineWidth = nLineSpacing;
				return true;
			}
		}
	}
	return false;
}

/*
void CExtRichContentItem::ParsePageBreak( 
	CExtRichStyleRule & styleChanging,
	const CExtRichStyleDescription & styleCurrent,
	__EXT_MFC_SAFE_LPCTSTR strPageBreak,
	bool bBefore // = true 
	) const
{
CExtSafeString _strPageBreak = LPCTSTR(strPageBreak);
	_strPageBreak.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strPageBreak.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strPageBreak.MakeLower();
	if( ! _strPageBreak.IsEmpty() )
	{
		if( _strPageBreak == _T("auto") )
		{
			if( bBefore )
				styleChanging.m_ePBB = CExtRichStyleDescription::epbba_auto;
			else
				styleChanging.m_ePBA = CExtRichStyleDescription::epbba_auto;
		}
		else if( _strPageBreak == _T("always") )
		{
			if( bBefore )
				styleChanging.m_ePBB = CExtRichStyleDescription::epbba_always;
			else
				styleChanging.m_ePBA = CExtRichStyleDescription::epbba_always;
		}
		else if( _strPageBreak == _T("avoid") )
		{
			if( bBefore )
				styleChanging.m_ePBB = CExtRichStyleDescription::epbba_avoid;
			else
				styleChanging.m_ePBA = CExtRichStyleDescription::epbba_avoid;
		}
		else if( _strPageBreak == _T("left") )
		{
			if( bBefore )
				styleChanging.m_ePBB = CExtRichStyleDescription::epbba_left;
			else
				styleChanging.m_ePBA = CExtRichStyleDescription::epbba_left;
		}
		else if( _strPageBreak == _T("right") )
		{
			if( bBefore )
				styleChanging.m_ePBB = CExtRichStyleDescription::epbba_right;
			else
				styleChanging.m_ePBA = CExtRichStyleDescription::epbba_right;
		}
		else if( _strPageBreak == _T("inherit") )
		{
			if( bBefore )
				styleChanging.m_ePBB = styleCurrent.m_ePBB;
			else
				styleChanging.m_ePBA = styleCurrent.m_ePBA;
		}
	}
}
*/

bool CExtRichContentItem::ParseListStyleImage( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strListStyleImage ) const
{
CExtSafeString _strListStyleImage = LPCTSTR(strListStyleImage);
	_strListStyleImage.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strListStyleImage.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strListStyleImage.MakeLower();
	if( _strListStyleImage.IsEmpty() )
		return false;
	if( _strListStyleImage == _T("inherit") )
	{
		styleChanging.m_strListStyleImagePath = styleCurrent.m_strListStyleImagePath;
		return true;
	}
	if( _strListStyleImage == _T("none") )
	{
		styleChanging.m_strListStyleImagePath.Empty();
		return true;
	}
	if( _strListStyleImage.Find( _T("url(") ) >= 0 ) // == 0 
	{
		_strListStyleImage.TrimLeft( _T("url(") );
		_strListStyleImage.TrimRight( _T(")") );
		_strListStyleImage.TrimLeft( _T("'") );
		_strListStyleImage.TrimRight( _T("'") );
		styleChanging.m_strListStyleImagePath = LPCTSTR(_strListStyleImage);
		return true;
	}
	return false;
}

bool CExtRichContentItem::ParseListStylePosition( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strListStylePosition ) const
{
CExtSafeString _strListStylePosition = LPCTSTR(strListStylePosition);
	_strListStylePosition.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strListStylePosition.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strListStylePosition.MakeLower();
	if( ! _strListStylePosition.IsEmpty() )
	{
		if( _strListStylePosition == _T("inside") )
		{
			styleChanging.m_eLSP = CExtRichStyleDescription::elsp_inside;
			return true;
		}
		else if( _strListStylePosition == _T("outside") )
		{
			styleChanging.m_eLSP = CExtRichStyleDescription::elsp_outside;
			return true;
		}
		else if( _strListStylePosition == _T("inherit") )
		{
			styleChanging.m_eLSP = styleCurrent.m_eLSP;
			return true;
		}
	}
	return false;
}

bool CExtRichContentItem::ParseListStyleType( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strListStyleType ) const
{
CExtSafeString _strListStyleType = LPCTSTR(strListStyleType);
	_strListStyleType.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strListStyleType.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strListStyleType.MakeLower();
	if( ! _strListStyleType.IsEmpty() )
	{
		if( _strListStyleType == _T("none") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_none;
			return true;
		}
		else if( _strListStyleType == _T("circle") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_circle;
			return true;
		}
		else if( _strListStyleType == _T("disc") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_disc;
			return true;
		}
		else if( _strListStyleType == _T("square") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_square;
			return true;
		}
		else if( _strListStyleType == _T("decimal") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_decimal;
			return true;
		}
		else if( _strListStyleType == _T("decimal-leading-zero") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_decimal_leading_zero;
			return true;
		}
		else if( _strListStyleType == _T("lower-alpha") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_lower_alpha;
			return true;
		}
		else if( _strListStyleType == _T("lower-latin") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_lower_latin;
			return true;
		}
		else if( _strListStyleType == _T("lower-roman") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_lower_roman;
			return true;
		}
		else if( _strListStyleType == _T("upper-alpha") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_upper_alpha;
			return true;
		}
		else if( _strListStyleType == _T("upper-latin") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_upper_latin;
			return true;
		}
		else if( _strListStyleType == _T("upper-roman") )
		{
			styleChanging.m_eLST = CExtRichStyleDescription::elst_upper_roman;
			return true;
		}
		else if( _strListStyleType == _T("inherit") )
		{
			styleChanging.m_eLST = styleCurrent.m_eLST;
			return true;
		}
	}
	return false;
}

void CExtRichContentItem::ParseOuter( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strOuter, CExtRichStyleDescription::e_outer_type_t eOT ) const
{
CExtSafeString _strOuter = LPCTSTR(strOuter);
	_strOuter.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strOuter.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( ! _strOuter.IsEmpty() )
	{
		_strOuter.MakeLower();
		if( _strOuter == _T("auto") )
		{
		}
		else if( _strOuter == _T("inherit") )
		{
			switch( eOT )
			{
			case CExtRichStyleDescription::eot_left:
				styleChanging.m_rcOuter.left = styleCurrent.m_rcOuter.left;
				styleChanging.m_rcOuterP.left = styleCurrent.m_rcOuterP.left;
			break;
			case CExtRichStyleDescription::eot_top:
				styleChanging.m_rcOuter.top = styleCurrent.m_rcOuter.top;
				styleChanging.m_rcOuterP.top = styleCurrent.m_rcOuterP.top;
			break;
			case CExtRichStyleDescription::eot_right:
				styleChanging.m_rcOuter.right = styleCurrent.m_rcOuter.right;
				styleChanging.m_rcOuterP.right = styleCurrent.m_rcOuterP.right;
			break;
			case CExtRichStyleDescription::eot_bottom:
				styleChanging.m_rcOuter.bottom = styleCurrent.m_rcOuter.bottom;
				styleChanging.m_rcOuterP.bottom = styleCurrent.m_rcOuterP.bottom;
			break;
			}
		}
		else
		{
			DOUBLE lfPercent = 1.0;
			bool bIsPercent = false;
			bool bHorz = ( ( eOT == CExtRichStyleDescription::eot_left ) || ( eOT == CExtRichStyleDescription::eot_right ) ) ? true : false;
			LONG nParsedPX = m_layout.ParseMeasurementString( LPCTSTR(_strOuter),  bHorz, styleCurrent, -1L, &lfPercent, &bIsPercent, NULL, true );
			if( bIsPercent )
			{
				LONG nParsedPercent = LONG( lfPercent * 100.0 );
//				nParsedPercent = max( nParsedPercent, 0 );
//				nParsedPercent = min( nParsedPercent, 100 );
				switch( eOT )
				{
				case CExtRichStyleDescription::eot_left:
					styleChanging.m_rcOuterP.left = nParsedPercent;
					styleChanging.m_rcOuter.left = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				case CExtRichStyleDescription::eot_top:
					styleChanging.m_rcOuterP.top = nParsedPercent;
					styleChanging.m_rcOuter.top = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				case CExtRichStyleDescription::eot_right:
					styleChanging.m_rcOuterP.right = nParsedPercent;
					styleChanging.m_rcOuter.right = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				case CExtRichStyleDescription::eot_bottom:
					styleChanging.m_rcOuterP.bottom = nParsedPercent;
					styleChanging.m_rcOuter.bottom = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				}
			}
			else
			{
				switch( eOT )
				{
				case CExtRichStyleDescription::eot_left:
					styleChanging.m_rcOuter.left = nParsedPX;
					styleChanging.m_rcOuterP.left = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				case CExtRichStyleDescription::eot_top:
					styleChanging.m_rcOuter.top = nParsedPX;
					styleChanging.m_rcOuterP.top = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				case CExtRichStyleDescription::eot_right:
					styleChanging.m_rcOuter.right = nParsedPX;
					styleChanging.m_rcOuterP.right = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				case CExtRichStyleDescription::eot_bottom:
					styleChanging.m_rcOuter.bottom = nParsedPX;
					styleChanging.m_rcOuterP.bottom = __EXT_RICH_CONTENT_NEGATIVE_UNUSED;
				break;
				}
			}
		}
	}
}

bool CExtRichContentItem::ParseBackgroundColor( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strBackgroundColor ) const
{
CExtSafeString _strBackgroundColor = LPCTSTR(strBackgroundColor);
	_strBackgroundColor.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundColor.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( _strBackgroundColor == _T("transparent") )
	{
		styleChanging.m_clrBack = COLORREF(-2L);
		styleChanging.m_eBCT = CExtRichStyleDescription::ebct_transparent;
		return true;
	}
	else if( _strBackgroundColor == _T("inherit") )
	{
		styleChanging.m_clrBack = styleCurrent.m_clrBack;
		styleChanging.m_eBCT = CExtRichStyleDescription::ebct_inherit; // styleCurrent.m_eBCT;
		return true;
	}
	else
	{
		COLORREF clr = m_layout.ParseColorString( _strBackgroundColor );
		if( clr != COLORREF(-1L) )
		{
			styleChanging.m_clrBack = clr;
			styleChanging.m_eBCT = CExtRichStyleDescription::ebct_color;
			return true;
		}
	}
	return false;
}

bool CExtRichContentItem::ParseBackgroundImage( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strBackgroundImage ) const
{
CExtSafeString _strBackgroundImage = LPCTSTR(strBackgroundImage);
	_strBackgroundImage.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundImage.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundImage.MakeLower();
	if( ! _strBackgroundImage.IsEmpty() )
	{
		if( _strBackgroundImage == _T("inherit") )
		{
			styleChanging.m_strBackgroundImagePath = LPCTSTR(styleCurrent.m_strBackgroundImagePath);
			styleChanging.m_eBPT = styleCurrent.m_eBPT;
			return true;
		}
		else if( _strBackgroundImage == _T("none") )
		{
			styleChanging.m_strBackgroundImagePath.Empty();
			return true;
		}
		else
		{
			if( _strBackgroundImage.Find( _T("url(") ) >= 0 )
			{
				_strBackgroundImage.TrimLeft( _T("url(") );
				_strBackgroundImage.TrimRight( _T(")") );
				_strBackgroundImage.TrimLeft( _T("'") );
				_strBackgroundImage.TrimRight( _T("'") );
				styleChanging.m_strBackgroundImagePath = LPCTSTR(_strBackgroundImage);
				if( styleChanging.m_eBPT == CExtRichStyleDescription::ebpt_unspecified )
					styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_absolute;
				return true;
			}
			else
			{
				_strBackgroundImage.TrimLeft( _T("(") );
				_strBackgroundImage.TrimRight( _T(")") );
				_strBackgroundImage.TrimLeft( _T("'") );
				_strBackgroundImage.TrimRight( _T("'") );
				styleChanging.m_strBackgroundImagePath = LPCTSTR(_strBackgroundImage);
				if( styleChanging.m_eBPT == CExtRichStyleDescription::ebpt_unspecified )
					styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_absolute;
				return true;
			}
		}
	}
	return false;
}

bool CExtRichContentItem::ParseBackgroundRepeat( CExtRichStyleRule & styleChanging, __EXT_MFC_SAFE_LPCTSTR strBackgroundRepeat ) const
{
CExtSafeString _strBackgroundRepeat = LPCTSTR(strBackgroundRepeat);
	_strBackgroundRepeat.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundRepeat.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundRepeat.MakeLower();
	if( ! _strBackgroundRepeat.IsEmpty() )
	{
		if( _strBackgroundRepeat == _T("repeat") )
		{
			styleChanging.m_eBR = CExtRichStyleDescription::ebrRepeat;
			return true;
		}
		else if( _strBackgroundRepeat == _T("repeat-x") )
		{
			styleChanging.m_eBR = CExtRichStyleDescription::ebrRepeatX;
			return true;
		}
		else if( _strBackgroundRepeat == _T("repeat-y") )
		{
			styleChanging.m_eBR = CExtRichStyleDescription::ebrRepeatY;
			return true;
		}
		else if( _strBackgroundRepeat == _T("no-repeat") )
		{
			styleChanging.m_eBR = CExtRichStyleDescription::ebrNoRepeat;
			return true;
		}
		else if( _strBackgroundRepeat == _T("inherit") )
		{
			styleChanging.m_eBR = CExtRichStyleDescription::ebrInherit;
			return true;
		}
	}
	return false;
}

bool CExtRichContentItem::ParseBackgroundAttachment( CExtRichStyleRule & styleChanging, __EXT_MFC_SAFE_LPCTSTR strBackgroundAttachment ) const
{
CExtSafeString _strBackgroundAttachment = LPCTSTR(strBackgroundAttachment);
	_strBackgroundAttachment.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundAttachment.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundAttachment.MakeLower();
	if( ! _strBackgroundAttachment.IsEmpty() )
	{
		if( _strBackgroundAttachment == _T("scroll") )
		{
			styleChanging.m_eBA = CExtRichStyleDescription::ebaScroll;
			return true;
		}
		else if( _strBackgroundAttachment == _T("fixed") )
		{
			styleChanging.m_eBA = CExtRichStyleDescription::ebaFixed;
			return true;
		}
		else if( _strBackgroundAttachment == _T("inherit") )
		{
			styleChanging.m_eBA = CExtRichStyleDescription::ebaInherit;
			return true;
		}
	}
	return false;
}

bool CExtRichContentItem::ParseBackgroundPosition( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strBackgroundPosition, int nCount, int nIndex ) const
{
CExtSafeString _strBackgroundPosition = LPCTSTR(strBackgroundPosition);
	_strBackgroundPosition.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundPosition.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strBackgroundPosition.MakeLower();
	if( ! _strBackgroundPosition.IsEmpty() )
	{
		_strBackgroundPosition.MakeLower();
		switch( nCount )
		{
			case 1:
				if( _strBackgroundPosition == _T("inherit") )
				{
					styleChanging.m_eBPA = styleCurrent.m_eBPA;
					styleChanging.m_eBPT = styleCurrent.m_eBPT;
					styleChanging.m_ptBackgroundAlignment = styleCurrent.m_ptBackgroundAlignment;
					return true;
				}
				else if( _strBackgroundPosition == _T("top") )
				{
					styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_top_center;
					styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
					return true;
				}
				else if( _strBackgroundPosition == _T("center") )
				{
					styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_center_center;
					styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
					return true;
				}
				else if( _strBackgroundPosition == _T("bottom") )
				{
					styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_bottom_center;
					styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
					return true;
				}
				else if( _strBackgroundPosition == _T("left") )
				{
					styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_center_left;
					styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
					return true;
				}
				else if( _strBackgroundPosition == _T("right") )
				{
					styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_center_right;
					styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
					return true;
				}
			break;
			case 2:
				switch( nIndex )
				{
					case 1:
						if( _strBackgroundPosition == _T("top") )
						{
							styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_impl_vert_top;
							styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
							return true;
						}
						else if( _strBackgroundPosition == _T("center") )
						{
							styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_impl_vert_center;
							styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
							return true;
						}
						else if( _strBackgroundPosition == _T("bottom") )
						{
							styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_impl_vert_bottom;
							styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
							return true;
						}
						else if( _strBackgroundPosition == _T("left") )
						{
							styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_impl_horz_left;
							styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
							return true;
						}
						else if( _strBackgroundPosition == _T("right") )
						{
							styleChanging.m_eBPA = CExtRichStyleDescription::ebpa_impl_horz_right;
							styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_align;
							return true;
						}
						else
						{
							DOUBLE lfPercent = 1.0;
							bool bIsPercent = false;
							LONG nParsedPX = m_layout.ParseMeasurementString( LPCTSTR(_strBackgroundPosition), true, styleCurrent, -1L, &lfPercent, &bIsPercent );
							if( bIsPercent )
							{
								styleChanging.m_ptBackgroundAlignment.x = LONG( lfPercent * 100.0 );
								styleChanging.m_ptBackgroundAlignment.x = max( styleChanging.m_ptBackgroundAlignment.x, 0 );
								styleChanging.m_ptBackgroundAlignment.x = min( styleChanging.m_ptBackgroundAlignment.x, 100 );
								styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_percent;
								return true;
							}
							else
							{
								styleChanging.m_ptBackgroundAlignment.x = nParsedPX;
								styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_absolute;
								return true;
							}
						}
					break;
					case 2:
						bool _bIsPercent = false;
						switch( styleChanging.m_eBPT )
						{
							case CExtRichStyleDescription::ebpt_align:
								if( _strBackgroundPosition == _T("left") )
								{
									styleChanging.m_eBPA = CExtRichStyleDescription::e_background_postion_alignment_t(styleChanging.m_eBPA|CExtRichStyleDescription::ebpa_impl_horz_left);
									return true;
								}
								else if( _strBackgroundPosition == _T("center") )
								{
									styleChanging.m_eBPA = CExtRichStyleDescription::e_background_postion_alignment_t(styleChanging.m_eBPA|CExtRichStyleDescription::ebpa_impl_horz_center);
									return true;
								}
								else if( _strBackgroundPosition == _T("right") )
								{
									styleChanging.m_eBPA = CExtRichStyleDescription::e_background_postion_alignment_t(styleChanging.m_eBPA|CExtRichStyleDescription::ebpa_impl_horz_right);
									return true;
								}
								else if( _strBackgroundPosition == _T("top") )
								{
									styleChanging.m_eBPA = ( styleChanging.m_eBPA == CExtRichStyleDescription::ebpa_impl_vert_center ) ? CExtRichStyleDescription::ebpa_impl_horz_center : styleChanging.m_eBPA;
									styleChanging.m_eBPA = CExtRichStyleDescription::e_background_postion_alignment_t(styleChanging.m_eBPA|CExtRichStyleDescription::ebpa_impl_vert_top);
									return true;
								}
								else if( _strBackgroundPosition == _T("bottom") )
								{
									styleChanging.m_eBPA = ( styleChanging.m_eBPA == CExtRichStyleDescription::ebpa_impl_vert_center ) ? CExtRichStyleDescription::ebpa_impl_horz_center : styleChanging.m_eBPA;
									styleChanging.m_eBPA = CExtRichStyleDescription::e_background_postion_alignment_t(styleChanging.m_eBPA|CExtRichStyleDescription::ebpa_impl_vert_bottom);
									return true;
								}
								else
								{
									styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_unspecified;
									return false;
								}
							break;
							case CExtRichStyleDescription::ebpt_percent:
								_bIsPercent = true;
							case CExtRichStyleDescription::ebpt_absolute:
								DOUBLE lfPercent = 1.0;
								bool bIsPercent = false;
								LONG nParsedPY = m_layout.ParseMeasurementString( LPCTSTR(_strBackgroundPosition), false, styleCurrent, -1L, &lfPercent, &bIsPercent );
								if( bIsPercent )
								{
									if( _bIsPercent )
									{
										styleChanging.m_ptBackgroundAlignment.y = LONG( lfPercent * 100.0 );
										styleChanging.m_ptBackgroundAlignment.y = max( styleChanging.m_ptBackgroundAlignment.y, 0 );
										styleChanging.m_ptBackgroundAlignment.y = min( styleChanging.m_ptBackgroundAlignment.y, 100 );
										return true;
									}
									else
									{
										styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_unspecified;
										return false;
									}
								}
								else
								{
									if( ! _bIsPercent )
									{
										styleChanging.m_ptBackgroundAlignment.y = nParsedPY;
										return true;
									}
									else
									{
										styleChanging.m_eBPT = CExtRichStyleDescription::ebpt_unspecified;
										return false;
									}
								}
							break;
						}
					break;
				}
			break;
		}
	} // if( ! str.IsEmpty() )
	return false;
}

bool CExtRichContentItem::ParseFontFamily( CExtRichStyleRule & styleChanging, __EXT_MFC_SAFE_LPCTSTR strFontFamily ) const
{
	if( stat_FontParmIsEmptyOrInherit( LPCTSTR(strFontFamily) ) )
		return false;
	if( stat_FontParmIsDesktopFontReference( LPCTSTR(strFontFamily) ) )
	{
		LOGFONT _lf;
		::memset( &_lf, 0, sizeof(LOGFONT) );
		g_PaintManager->m_FontNormal.GetLogFont( &_lf );
		styleChanging.m_strFontFaceName = _lf.lfFaceName;
		return true;
	}
CExtSafeString _strFontFamily = LPCTSTR(strFontFamily);
	_strFontFamily.MakeLower();
	styleChanging.m_strFontFaceName = LPCTSTR(_strFontFamily);
	return true;
}

bool CExtRichContentItem::ParseFontStyle( CExtRichStyleRule & styleChanging, __EXT_MFC_SAFE_LPCTSTR strFontStyle ) const
{
CExtSafeString _strFontStyle = LPCTSTR(strFontStyle);
	if( ! _strFontStyle.IsEmpty() )
	{
		_strFontStyle.MakeLower();
		if( _strFontStyle == _T("italic") || _strFontStyle == _T("oblique") )
			styleChanging.m_nItalic = 1;
		else if( _strFontStyle == _T("normal") )
			styleChanging.m_nItalic = 0;
		else if( _strFontStyle == _T("inherit") )
			styleChanging.m_nItalic = styleChanging.m_nItalic;
		else
			return false;
		return true;
	}
	return false;
}

bool CExtRichContentItem::ParseFontSize( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strFontSize ) const
{
CExtSafeString _strFontSize = LPCTSTR(strFontSize);
	if( ! _strFontSize.IsEmpty() )
	{
		_strFontSize.MakeLower();
		if( _strFontSize == _T("xx-small") )
			styleChanging.m_nFontSizeAbs = 9;
		else if( _strFontSize == _T("x-small") )
			styleChanging.m_nFontSizeAbs = 10;
		else if( _strFontSize == _T("small") )
			styleChanging.m_nFontSizeAbs = 13;
		else if( _strFontSize == _T("medium") )
			styleChanging.m_nFontSizeAbs = 16;
		else if( _strFontSize == _T("large") )
			styleChanging.m_nFontSizeAbs = 18;
		else if( _strFontSize == _T("x-large") )
			styleChanging.m_nFontSizeAbs = 24;
		else if( _strFontSize == _T("xx-large") )
			styleChanging.m_nFontSizeAbs = 32;
		else if( _strFontSize == _T("smaller") )
			//styleChanging.m_nFontSizeRel = -1;
			styleChanging.m_lfFontSizePercentRel = 0.75;
		else if( _strFontSize == _T("larger") )
			styleChanging.m_lfFontSizePercentRel = 1.25;
		else if( _strFontSize == _T("inherit") )
			styleChanging.m_nFontSizeAbs = styleChanging.m_nFontSizeAbs;
		else
		{
			bool bIsNoMeasurementUnit = false;
			bool bIsPercent = false;
			double lfPercent = 1.0;
			LONG nY = m_layout.ParseMeasurementString( LPCTSTR(_strFontSize), false, styleCurrent, 1, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
			if( bIsNoMeasurementUnit )
			{
				LONG nFontSize = _ttol( LPCTSTR(_strFontSize) );
				if( nFontSize == 0 )
					return false;
				else
				{
					nY = max( 0L, nY );
					styleChanging.m_nFontSizeAbs = nY;
				}
			}
			else if( bIsPercent )
				styleChanging.m_lfFontSizePercentRel = lfPercent;
			else
			{
				nY = max( 0L, nY );
				styleChanging.m_nFontSizeAbs = nY;
			}
		}
		return true;
	}
	return false;
}

bool CExtRichContentItem::ParseFontWeight( CExtRichStyleRule & styleChanging, __EXT_MFC_SAFE_LPCTSTR strFontWeight ) const
{
CExtSafeString _strFontWeight = LPCTSTR(strFontWeight);
	if( ! _strFontWeight.IsEmpty() )
	{
		_strFontWeight.MakeLower();
		if( _strFontWeight == _T("normal") )
			styleChanging.m_nFontWeightAbs = 400;
		else if( _strFontWeight == _T("bold") )
			styleChanging.m_nFontWeightAbs = 700;
		else if( _strFontWeight == _T("lighter") )
			styleChanging.m_nFontWeightRel = -300; // TO-CHECK
		else if( _strFontWeight == _T("bolder") )
			styleChanging.m_nFontWeightRel = +300; // TO-CHECK
		else
		{
			LONG nWeight = _ttol( LPCTSTR(_strFontWeight) );
			if( nWeight != 0 )
				styleChanging.m_nFontWeightAbs = INT( nWeight );
			else
				return false;
		}
		return true;
	}
	return false;
}

bool CExtRichContentItem::ParseLineHeight( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strLineHeight ) const
{
CExtSafeString _strLineHeight = LPCTSTR(strLineHeight);
	if( ! _strLineHeight.IsEmpty() )
	{
		_strLineHeight.MakeLower();
		if( _strLineHeight == _T("inherit") )
		{
		}
		else if( _strLineHeight == _T("normal") )
		{
			styleChanging.m_nLineSpacingPX = -1;
			styleChanging.m_lfLineSpacingPercent = 1.0;
		}
		else
		{
			bool bIsNoMeasurementUnit = false;
			DOUBLE lfPercent = 1.0;
			bool bIsPercent = false;
			LONG nLineSpacing = m_layout.ParseMeasurementString( LPCTSTR(_strLineHeight), false, styleCurrent, -1L, &lfPercent, &bIsPercent, &bIsNoMeasurementUnit );
			if( bIsNoMeasurementUnit )
			{
				nLineSpacing = _ttol( LPCTSTR( _strLineHeight ) );
				if( nLineSpacing == 0 )
					return false;
				nLineSpacing = styleCurrent.m_fd.m_lf.lfHeight * nLineSpacing;
				nLineSpacing = abs( nLineSpacing );
				styleChanging.m_nLineSpacingPX = nLineSpacing;
			}
			else if( bIsPercent )
				styleChanging.m_lfLineSpacingPercent = lfPercent;
			else
			{
				nLineSpacing = max( 0L, nLineSpacing );
				styleChanging.m_nLineSpacingPX = nLineSpacing;
			}
		}
		return true;
	}
	return false;
}

bool CExtRichContentItem::ParseTextRange(
	bool bParentPreTag // = false
	)
{
	if( m_eType != __EHIT_TEXT_RANGE || m_strTextParsed.IsEmpty() )
		return true;
LPCTSTR p = LPCTSTR(m_strTextParsed);
CExtSafeString strGatheredText, strCommonlyUsedCharacter;
bool bCommonlyUsedCharacter = false, bPreviousSpace = false, bSpace = false;
	for( ; (*p) != _T('\0'); p++ )
	{
		if( ( (*p) == _T(' ') || ( (*p) == _T('\t') ) || ( (*p) == _T('\n') ) ) && ! bSpace )
		{
//  				strGatheredText.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
//  				strGatheredText.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
			if( ! strGatheredText.IsEmpty() )
			{
				CExtRichContentItem * pRCI = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_TEXT_RANGE );
				pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
				m_layout.m_listHeap.AddTail( pRCI );
				strGatheredText.Empty();
				bPreviousSpace = false;
			}

			if( bParentPreTag && ( (*p) == _T('\n') ) )
			{
				CExtRichContentItem * pRCI = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_GENERIC_TAG );
				pRCI->m_strTextParsed = LPCTSTR( _T("br") );
				m_layout.m_listHeap.AddTail( pRCI );
				//bPreviousSpace = true;	// Don't need to add a space if parent tag is pre
				strGatheredText.Empty();
				bPreviousSpace = false;
			}

			bSpace = false;
			if( (*p	) != _T(' ') && ( (*p) != _T('\t') ) && ( (*p) != _T('\n') ) )
				continue;

			bSpace = true;
			bPreviousSpace = true;

// 				if( ! bPreviousSpace )
// 				{
// 					CExtRichContentItem * pRCI = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_TEXT_SPACE );
// 					pRCI->m_strTextParsed = LPCTSTR( _T(" ") );
// 					m_layout.m_listHeap.AddTail( pRCI );
// 					bPreviousSpace = true;
// 				}
		}
		//if( bPreviousSpace && (*p) != _T(' ') )
		if( bPreviousSpace && ( (*p	) != _T(' ') && ( (*p) != _T('\t') ) && ( (*p) != _T('\n') ) ) )
		{
			CExtRichContentItem * pRCI = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_TEXT_SPACE );
			//pRCI->m_strTextParsed = LPCTSTR( _T(" ") );
			pRCI->m_strTextParsed = LPCTSTR( strGatheredText );
			m_layout.m_listHeap.AddTail( pRCI );
			bPreviousSpace = false;

			strGatheredText.Empty();
			bSpace = false;
		}
		if( (*p) == _T('&') )
		{
			bCommonlyUsedCharacter = true;
			continue;
		}
		if( (*p) == _T(';') && bCommonlyUsedCharacter )
		{
			bCommonlyUsedCharacter = false;

			TCHAR thSymbol = (TCHAR) m_layout.SpecToChar( LPCTSTR( strCommonlyUsedCharacter ) );
			if( thSymbol != 0 )
				strGatheredText += thSymbol;
			else
				strGatheredText += _T("&") + strCommonlyUsedCharacter + _T(";");

			strCommonlyUsedCharacter.Empty();
			continue;
		}

		if( ( (*p) != _T('\r') ) /*&& ( (*p) != _T('\n') )*/ )
		{
			if( ! bCommonlyUsedCharacter )
				strGatheredText += (*p);
			else
				strCommonlyUsedCharacter += (*p);
		}
 	}
	if( ! strGatheredText.IsEmpty() )
	{
		CExtRichContentItem::e_html_item_type_t e_hit = bSpace ? CExtRichContentItem::__EHIT_TEXT_SPACE : CExtRichContentItem::__EHIT_TEXT_RANGE;
		CExtRichContentItem * pRCI = new CExtRichContentItem( m_layout, e_hit );
		pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
		m_layout.m_listHeap.AddTail( pRCI );
	}

	strGatheredText.Empty();
	m_strTextParsed.Empty();
	return true;
}

bool CExtRichContentItem::ParseParameters()
{
	if(		m_eType != __EHIT_CLASS_NODE
		&&	( m_eType != __EHIT_GENERIC_TAG || m_bClosingTag || m_strTextParsed.IsEmpty() )
		)
		return true;
	// step 1: split tag name from parameters
LONG nGatheredLength = 0;
LPCTSTR p = LPCTSTR(m_strTextParsed);
	__EXT_DEBUG_RICH_CONTENT_ASSERT( p != NULL );
	for( ; (*p) != _T('\0'); p++, nGatheredLength++ )
	{
		if( stat_IsCharOneOf( (*p), __EXT_RICH_CONTENT_TRIM_CHARS ) )
			break;
	}
	if( nGatheredLength == 0 )
		return false;
	for( ; (*p) != _T('\0'); p++ )
	{
		if( ! stat_IsCharOneOf( (*p), __EXT_RICH_CONTENT_TRIM_CHARS ) )
			break;
	}
	if( (*p) != _T('\0') )
		m_strTagPV = p;
	else
		m_strTagPV.Empty();
	
	m_strTextParsed = m_strTextParsed.Left( nGatheredLength );

	//////////////////////////////////////////////////////////////////////////

	// step 2: parse array of parameters
	p = LPCTSTR(m_strTagPV);
bool bGatheringName = true;
CExtSafeString strGatheredName, strGatheredValue;
	for( ; (*p) != _T('\0'); p++ )
	{
		if(		(*p) == _T('\\')
			&&	(	(*(p+1)) == _T('\"')
				||	(*(p+1)) == _T('\'')
				||	(*(p+1)) == _T('\\')
				)
			)
			p++;
		if( (*p) == _T('/') )
		{
			p++;
			if( (*p) == _T('*') )
			{
				p++;
				// find next * than /
				for( ; (*p) != _T('\0'); p++ )
				{
					if( (*p) == _T('*') )
					{
						p ++;
						if( (*p) == _T('/') )
							break;
					}
				}
				continue;
			}
			else
				p --;
		}

		if( bGatheringName && (*p) == _T('=') )
		{
			strGatheredName.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
			strGatheredName.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
			if( strGatheredName.IsEmpty() )
			{
				m_eError = __EHIE_INVALID_PARAMETER_NAME;
				return false;
			}
			bGatheringName = false;
			strGatheredValue.Empty();
			continue;
		}
		else if( ( ! bGatheringName ) && stat_IsCharOneOf( (*p), __EXT_RICH_CONTENT_TRIM_CHARS ) && ( ! strGatheredValue.IsEmpty() ) )
		{
			__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strGatheredName.IsEmpty() );
			strGatheredValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
			strGatheredValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
			CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_BASIC );
			strGatheredName.MakeLower();
			/////strGatheredValue.MakeLower();
			pParm->m_strTextParsed = LPCTSTR(strGatheredName);
			pParm->m_strTagPV = LPCTSTR(strGatheredValue);
			m_listParms.AddTail( pParm );
			strGatheredName.Empty();
			strGatheredValue.Empty();
			bGatheringName = true;
			continue;
		}
		if( bGatheringName )
			strGatheredName += (*p);
		else
		{
			if( (*p) == _T('"') )
			{
				// value started with ", walk until next "
				for( p++; (*p) != _T('\0'); p++ )
				{
					bool bBreak = true;
					if(	(*p) == _T('\\') && (*(p+1)) == _T('\"') )
						bBreak = false;
					if(		(*p) == _T('\\')
						&&	(	(*(p+1)) == _T('\"')
							||	(*(p+1)) == _T('\'')
							||	(*(p+1)) == _T('\\')
							)
						)
						p++;
					if( (*p) == _T('\"') && bBreak )
						break;
					else if( (*p) == _T('\'') )
					{
						for( p++; (*p) != _T('\0'); p++ )
						{
							if(		(*p) == _T('\\')
								&&	(	(*(p+1)) == _T('\"')
									||	(*(p+1)) == _T('\'')
									||	(*(p+1)) == _T('\\')
									)
								)
								p++;
							if( (*p) == _T('\'') )
							{
								p++;
								break;
							}
							strGatheredValue += (*p);
						}
						if( (*p) == _T('\0') )
							break;
					}
					else if( (*p) == _T('\\') && (*(p+1)) == _T('\"') )
						p++;
					strGatheredValue += (*p);
				}
				if( (*p) == _T('\0') )
					break;
			}
			else if( (*p) == _T('\'') )
			{
				// value started with ", walk until next "
				for( p++; (*p) != _T('\0'); p++ )
				{
					bool bBreak = true;
					if(	(*p) == _T('\\') && (*(p+1)) == _T('\'') )
						bBreak = false;
					if(		(*p) == _T('\\')
						&&	(	(*(p+1)) == _T('\"')
							||	(*(p+1)) == _T('\'')
							||	(*(p+1)) == _T('\\')
							)
						)
						p++;
					if( (*p) == _T('\'') && bBreak )
						break;
					else if( (*p) == _T('\"') )
					{
						if(		(*p) == _T('\\')
							&&	(	(*(p+1)) == _T('\"')
								||	(*(p+1)) == _T('\'')
								||	(*(p+1)) == _T('\\')
								)
							)
							p++;
						for( p++; (*p) != _T('\0'); p++ )
						{
							if( (*p) == _T('\"') )
							{
								p++;
								break;
							}
							strGatheredValue += (*p);
						}
						if( (*p) == _T('\0') )
							break;
					}
					strGatheredValue += (*p);
				}
				if( (*p) == _T('\0') )
					break;
			}
			else
				strGatheredValue += (*p);
		}
	}
	strGatheredValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	strGatheredValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( ( ! strGatheredName.IsEmpty() ) && ( ! strGatheredValue.IsEmpty() ) )
	{
		CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_BASIC );
		strGatheredName.MakeLower();
		/////strGatheredValue.MakeLower();
		pParm->m_strTextParsed = LPCTSTR(strGatheredName);
		pParm->m_strTagPV = LPCTSTR(strGatheredValue);
		m_listParms.AddTail( pParm );
		strGatheredName.Empty();
		strGatheredValue.Empty();
	}

	// step 3: parse CSS lists into trees
POSITION pos = m_listParms.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listParms.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->m_strTagPV.Replace( _T("\""), _T("\\\"") );
		pRCI->ParseTransformCSS();
	} // for( ; pos != NULL; )

	// finish:
	m_strTagPV.Empty();
	return true;
}

bool CExtRichContentItem::ParseTransformCSS()
{
	if( m_eType != CExtRichContentItem::__EHIT_PARAMETER_BASIC && m_eType != CExtRichContentItem::__EHIT_PARAMETER_CSS_CONTAINER )
		return true;
	if( _tcscmp( LPCTSTR(m_strTextParsed), _T("style") ) != 0 )
		return true;
	m_eType = CExtRichContentItem::__EHIT_PARAMETER_CSS_CONTAINER;
LPCTSTR p = LPCTSTR(m_strTagPV);
bool bGatheringName = true;
CExtSafeString strGatheredName, strGatheredValue;
	for( ; (*p) != _T('\0'); p++ )
	{
		if( bGatheringName && (*p) == _T(':') )
		{
			strGatheredName.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
			strGatheredName.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
			if( strGatheredName.IsEmpty() )
			{
				m_eError = __EHIE_INVALID_PARAMETER_NAME;
				return false;
			}
			bGatheringName = false;
			continue;
		}
		else if( ( ! bGatheringName ) && (*p) == _T(';') )
		{
			__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strGatheredName.IsEmpty() );
			CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
			strGatheredName.MakeLower();
//			strGatheredValue.MakeLower();
			pParm->m_strTextParsed = LPCTSTR(strGatheredName);
//			pParm->m_strTagPV = LPCTSTR(strGatheredValue);
//			pParm->RemoveValueSpaces();
			m_listParms.AddTail( pParm );
			if( pParm->m_strTextParsed == _T("content") ) // TO-DO: hard coded, implement virtual method-based version
				ParseCSSValue_content( pParm->m_listParms, strGatheredValue );
			else if( pParm->m_strTextParsed == _T("font-family") ) // TO-DO: hard coded, implement virtual method-based version
				ParseCSSValue_font_family( pParm->m_listParms, strGatheredValue );
			else
				ParseCSSValue( pParm->m_listParms, strGatheredValue );
			strGatheredName.Empty();
			strGatheredValue.Empty();
			bGatheringName = true;
			continue;
		}
		if(		(*p) == _T('\\')
			&&	(	(*(p+1)) == _T('\"')
				||	(*(p+1)) == _T('\'')
				||	(*(p+1)) == _T('\\')
				)
			)
		{
			p++;
			if( bGatheringName )
				strGatheredName += (*p);
			else
				strGatheredValue += (*p);
			continue;
		}
		if( (*p) == _T('\"') )
		{
			
			for( p++; (*p) != _T('\0') && (*p) != _T('\"'); p++ )
			{
				if(		(*p) == _T('\\')
					&&	(	(*(p+1)) == _T('\"')
						||	(*(p+1)) == _T('\'')
						||	(*(p+1)) == _T('\\')
						)
					)
					p++;
				if( bGatheringName )
					strGatheredName += (*p);
				else
					strGatheredValue += (*p);
			}
		}
		else if( bGatheringName )
			strGatheredName += (*p);
		else
			strGatheredValue += (*p);
	}
	if( ! strGatheredName.IsEmpty() )
	{
		CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
		strGatheredName.MakeLower();
		pParm->m_strTextParsed = LPCTSTR(strGatheredName);
		m_listParms.AddTail( pParm );
		if( pParm->m_strTextParsed == _T("content") ) // TO-DO: hard coded, implement virtual method-based version
			ParseCSSValue_content( pParm->m_listParms, strGatheredValue );
		else if( pParm->m_strTextParsed == _T("font-family") ) // TO-DO: hard coded, implement virtual method-based version
			ParseCSSValue_font_family( pParm->m_listParms, strGatheredValue );
		else
			ParseCSSValue( pParm->m_listParms, strGatheredValue );
		strGatheredName.Empty();
		strGatheredValue.Empty();
	}
	m_strTagPV.Empty();
	return true;
}

bool CExtRichContentItem::ParseCSSValue_content( CTypedPtrList < CPtrList, CExtRichContentItem * > & listItems, __EXT_MFC_SAFE_LPCTSTR strParmValue )
{
	if( m_eType != __EHIT_PARAMETER_CSS_CONTAINER )
		return true;
CExtSafeString strGatheredValue = LPCTSTR(strParmValue);
	strGatheredValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	strGatheredValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( strGatheredValue.IsEmpty() )
	{
		CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
		pParm->m_strTagPV = _T("none");
		listItems.AddTail( pParm );
		return true;
	}
INT nValLen = INT( strGatheredValue.GetLength() );
	if( nValLen >= 2 )
	{
		TCHAR tchrFirst = strGatheredValue[ 0 ], tchrLast = strGatheredValue[ nValLen - 1 ];
		if( tchrFirst == tchrLast && ( tchrFirst == _T('\"') || tchrFirst == _T('\'') ) )
		{
			if( nValLen > 2 )
			{
				CString strContentValue, strAttr;
				LPCTSTR p = LPCTSTR(strGatheredValue);
				bool bQuote1, bQuote2, bAttr;
				bQuote1 = bQuote2 = bAttr = false;
				for( ; (*p) != _T('\0'); p++ )
				{
					if( (*p) == _T('\"') )
					{
						bQuote1 = (!bQuote1);
						if( bAttr )
						{
 							strAttr += _T(")");
							strAttr.MakeLower();
							strContentValue += strAttr;
							strAttr.Empty();
						}
						bAttr = false;
						continue;
					}
					if( (*p) == _T('\'') )
					{
						bQuote2 = (!bQuote2);
						if( bAttr )
						{
 							strAttr += _T(")");
							strAttr.MakeLower();
							strContentValue += strAttr;
							strAttr.Empty();
						}
						bAttr = false;
						continue;
					}
					if(		(!bQuote1) && (!bQuote2) 
						&&	(*p) == _T('a')
						&&	(*(p+1)) == _T('t')
						&&	(*(p+2)) == _T('t')
						&&	(*(p+3)) == _T('r')
						&&	(*(p+4)) == _T('(')
						)
					{
						bAttr = true;
						p += 4;
 						strAttr = _T("attr(");
						continue;
					}

					if( bAttr && (*p) == _T(')') )
					{
						bAttr = false;
 						strAttr += _T(")");
						strAttr.MakeLower();
						strContentValue += strAttr;
						strAttr.Empty();
						continue;
					}

					if( bQuote1 || bQuote2 )
						strContentValue += (*p);
					if( bAttr )
						strAttr += (*p);
				}
				strGatheredValue = strContentValue;
			}
			else
			{
				CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
				pParm->m_strTagPV = _T("none");
				listItems.AddTail( pParm );
				return true;
			}
		}
	}
CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
	pParm->m_strTagPV = strGatheredValue;
	//pParmC->RemoveValueSpaces();
	listItems.AddTail( pParm );
	return true;
}


bool CExtRichContentItem::ParseCSSValue_font_family( CTypedPtrList < CPtrList, CExtRichContentItem * > & listItems, __EXT_MFC_SAFE_LPCTSTR strParmValue )
{
	if( m_eType != __EHIT_PARAMETER_CSS_CONTAINER || strParmValue == NULL || strParmValue[0] == _T('\0') )
		return true;
CExtSafeString strValue = LPCTSTR(strParmValue);
	strValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	strValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
CExtSafeString strCurValue;
LPCTSTR p = LPCTSTR(strValue);
	for( ; (*p) != _T('\0'); p++ )
	{
		if( (*p) == _T(',') )
		{
			strCurValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
			strCurValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
			if( ! strCurValue.IsEmpty() )
			{
				CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
				pParm->m_strTagPV = LPCTSTR(strCurValue);
				pParm->RemoveValueSpaces();
				listItems.AddTail( pParm );
			}
			strCurValue.Empty();
			continue;
		}
		strCurValue += (*p);
	} // for( ; (*p) != _T('\0'); p++ )
	strCurValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	strCurValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
	if( ! strCurValue.IsEmpty() )
	{
		CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
		pParm->m_strTagPV = LPCTSTR(strCurValue);
		pParm->RemoveValueSpaces();
		listItems.AddTail( pParm );
	}
	return true;
}

bool CExtRichContentItem::ParseCSSValue( CTypedPtrList < CPtrList, CExtRichContentItem * > & listItems, __EXT_MFC_SAFE_LPCTSTR strParmValue )
{
	if( m_eType != __EHIT_PARAMETER_CSS_CONTAINER || strParmValue == NULL || strParmValue[0] == _T('\0') )
		return true;
CExtSafeString strValue = LPCTSTR(strParmValue);
	strValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	strValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
LPCTSTR p = LPCTSTR(strValue);
CExtSafeString strCurValue;
bool bQuotes1 = false;
bool bQuotes2 = false;
bool bBracket = false;
bool bPreviousSpace = false;
bool bPreviousSlash = false;
bool bPreviousComma = false;
	for( ; (*p) != _T('\0'); p++ )
	{
		if(		//( (*p) == _T(' ') /*|| (*p) == _T(',')*/ ) 
				(	( bPreviousSpace && ( (*p) != _T('(') && (*p) != _T('/') && (*p) != _T(' ') ) )
				&&	(!bPreviousSlash)
				&&	(!bQuotes1)
				&&	(!bQuotes2)
				&&	(!bBracket)
//  			&&	(!bPreviousComma)
				)
			||	bPreviousComma
			)
		{
			CString strCurValueWithoutSpaces = strCurValue;
			strCurValueWithoutSpaces.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
			if( strCurValueWithoutSpaces.IsEmpty() )
				strCurValue.Empty();
			if( ! strCurValue.IsEmpty() )
				//continue;
			{
				CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
				pParm->m_strTagPV = LPCTSTR(strCurValue);
				pParm->RemoveValueSpaces();
				listItems.AddTail( pParm );
				strCurValue.Empty();
				bPreviousSpace = false;
			}
			//continue;
		}
		if( (*p) == _T('(') )
							bBracket = true;
		if( (*p) == _T(')') )
							bBracket = false;
		if( (*p) == _T('\"') )
							bQuotes1 = ! bQuotes1;
		if( (*p) == _T('\'') )
							bQuotes2 = ! bQuotes2;

		if( (*p) == _T(',') )
							bPreviousComma = true;
		else if( ! bPreviousSpace )
							bPreviousComma = false;

		if(	(	( ! bPreviousSpace && (*p) == _T(' ') && (!bBracket) )
			||	(*p) != _T(' ')
				)
			&&	( (*p) != _T('"') )
			&&	( (*p) != _T('\'') )
			&&	(	( (*p) != _T(',') ) 
				||	( ( (*p) == _T(',') ) && bBracket ) 
					)
			)
		{
			strCurValue += (*p);
			if( (*p) != _T(' ') )
				bPreviousSlash = false;
			bPreviousComma = false;
		}

		if( (*p) == _T('/') )
			bPreviousSlash = true;

		if( (*p) == _T(' ') )
			bPreviousSpace = true;
		else
			bPreviousSpace = false;

// 		if( (*p) == _T(',') )
// 			bPreviousComma = true;
// 		else if( ! bPreviousSpace )
// 			bPreviousComma = false;
	}

	if( ! strCurValue.IsEmpty() )
	{
		CExtRichContentItem * pParm = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_PARAMETER_CSS_VALUE );
		pParm->m_strTagPV = LPCTSTR(strCurValue);
		pParm->RemoveValueSpaces();
		listItems.AddTail( pParm );
	}

	strValue.Empty();
	strCurValue.Empty();
	return true;
}

bool CExtRichContentItem::IsGlobalScope() const
{
	if( m_eType == __EHIT_ROOT )
		return true;
	return false;
}

LONG CExtRichContentItem::GetWordShift() const
{
	if( m_pParent == NULL )
		return 0L;
LONG nShift = 0L;
	if( ! m_pParent->IsParagraphItem() && m_pParent->m_pPrev != NULL && ! m_pParent->m_pPrev->IsParagraphItem() )
		nShift += m_pParent->m_pPrev->GetWordShift();
const CExtRichStyleDescription & _style = GetEffectiveStyle();
	if( _style.m_eaV == CExtRichStyleDescription::eavSuper )
		nShift += - GetHelperTmInternalLeading() - LONG( DOUBLE( m_sizePreCalc.cy ) * 0.33 );
	else if( _style.m_eaV == CExtRichStyleDescription::eavSub )
		nShift += LONG( DOUBLE( m_sizePreCalc.cy ) * 0.33 );
	return nShift;
}

bool CExtRichContentItem::stat_FontParmIsEmptyOrInherit( __EXT_MFC_SAFE_LPCTSTR strFontFace )
{
	if( LPCTSTR(strFontFace) == NULL )
		return true;
	if( LPCTSTR(strFontFace)[0] == _T('\0') )
		return true;
	if( _tcsicmp( LPCTSTR(strFontFace), _T("inherit") ) == 0 )
		return true;
	return false;
}

bool CExtRichContentItem::stat_FontParmIsDesktopFontReference( __EXT_MFC_SAFE_LPCTSTR strFontFace )
{
	if( LPCTSTR(strFontFace) == NULL )
		return false;
	if( LPCTSTR(strFontFace)[0] == _T('\0') )
		return false;
	if( 	( _tcsicmp( LPCTSTR(strFontFace), _T("caption") ) == 0 )
		||	( _tcsicmp( LPCTSTR(strFontFace), _T("icon") ) == 0 )
		||	( _tcsicmp( LPCTSTR(strFontFace), _T("menu") ) == 0 )
		||	( _tcsicmp( LPCTSTR(strFontFace), _T("message-box") ) == 0 )
		||	( _tcsicmp( LPCTSTR(strFontFace), _T("small-caption") ) == 0 )
		||	( _tcsicmp( LPCTSTR(strFontFace), _T("status-bar") ) == 0 )
		)
		return true;
	return false;
}

LONG CExtRichContentItem::GetHelperTmAscent() const
{
	if( m_nHelperTmAscent > 0 )
		return m_nHelperTmAscent;
	if( m_nHelperTmAscent == 0 && IsNoWrapSequence() )
	{
		POSITION pos = m_listItems.GetHeadPosition();
		for( ; pos != NULL; )
		{
			CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			LONG nHelperTmAscent = pRCI->GetHelperTmAscent();
			m_nHelperTmAscent = max( m_nHelperTmAscent, nHelperTmAscent );
		}
	}
	return m_nHelperTmAscent;
}

LONG CExtRichContentItem::GetHelperTmInternalLeading() const
{
	if( m_nHelperTmInternalLeading > 0 )
		return m_nHelperTmInternalLeading;
	if( m_nHelperTmInternalLeading == 0 && IsNoWrapSequence() )
	{
		POSITION pos = m_listItems.GetHeadPosition();
		for( ; pos != NULL; )
		{
			CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			LONG nHelperTmInternalLeading = pRCI->GetHelperTmInternalLeading();
			m_nHelperTmInternalLeading = max( m_nHelperTmInternalLeading, nHelperTmInternalLeading );
		}
	}
	return m_nHelperTmInternalLeading;
}

bool CExtRichContentItem::ApplyTagParams_CSS_SideBorderStyle( CExtRichStyleRule & styleChanging, __EXT_MFC_SAFE_LPCTSTR strCssSideStyle, bool bApplyLeft, bool bApplyRight, bool bApplyTop, bool bApplyBottom )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strCssSideStyle) != NULL && LPCTSTR(strCssSideStyle)[0] != _T('\0') );
	if( ! ( bApplyLeft || bApplyRight || bApplyTop || bApplyBottom ) )
		return false;
CExtRichStyleDescription::e_border_style_t eBS = CExtRichStyleDescription::ebsUnknown;
	if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("inherit") ) == 0 )
		eBS = CExtRichStyleDescription::ebsInherit;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("none") ) == 0 )
		eBS = CExtRichStyleDescription::ebsNone;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("hidden") ) == 0 )
		eBS = CExtRichStyleDescription::ebsHidden;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("dotted") ) == 0 )
		eBS = CExtRichStyleDescription::ebsDotted;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("dashed") ) == 0 )
		eBS = CExtRichStyleDescription::ebsDashed;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("solid") ) == 0 )
		eBS = CExtRichStyleDescription::ebsSolid;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("double") ) == 0 )
		eBS = CExtRichStyleDescription::ebsDouble;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("groove") ) == 0 )
		eBS = CExtRichStyleDescription::ebsGroove;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("ridge") ) == 0 )
		eBS = CExtRichStyleDescription::ebsRidge;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("inset") ) == 0 )
		eBS = CExtRichStyleDescription::ebsInset;
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("outset") ) == 0 )
		eBS = CExtRichStyleDescription::ebsOutset;
	else
		return false;
	if( bApplyLeft )
		styleChanging.m_ebsLeft = eBS;
	if( bApplyRight )
		styleChanging.m_ebsRight = eBS;
	if( bApplyTop )
		styleChanging.m_ebsTop = eBS;
	if( bApplyBottom )
		styleChanging.m_ebsBottom = eBS;
	return true;
}

bool CExtRichContentItem::ApplyTagParams_CSS_SideBorderColor( CExtRichStyleRule & styleChanging, __EXT_MFC_SAFE_LPCTSTR strCssSideStyle, bool bApplyLeft, bool bApplyRight, bool bApplyTop, bool bApplyBottom )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strCssSideStyle) != NULL && LPCTSTR(strCssSideStyle)[0] != _T('\0') );
	if( ! ( bApplyLeft || bApplyRight || bApplyTop || bApplyBottom ) )
		return false;
bool bRetVal = true;
COLORREF clr = COLORREF(-1L);
	if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("inherit") ) == 0 )
	{
		bRetVal = false; // let the other CExtRichContentItem::ApplyTagParams_CSS_SideBorder***() methods be invoked
		// TO-DO: compute CSS from parent and inherit it here
	}
	else if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("transparent") ) != 0 )
	{
		clr = m_layout.ParseColorString( LPCTSTR(strCssSideStyle) );
		if( clr == COLORREF(-1L) )
			return false;
	}
	if( bApplyLeft )
		styleChanging.m_clrBorderLeft = clr;
	if( bApplyRight )
		styleChanging.m_clrBorderRight = clr;
	if( bApplyTop )
		styleChanging.m_clrBorderTop = clr;
	if( bApplyBottom )
		styleChanging.m_clrBorderBottom = clr;
	return bRetVal;
}

bool CExtRichContentItem::ApplyTagParams_CSS_SideBorderWH( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strCssSideStyle, bool bApplyLeft, bool bApplyRight, bool bApplyTop, bool bApplyBottom )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strCssSideStyle) != NULL && LPCTSTR(strCssSideStyle)[0] != _T('\0') );
	if( ! ( bApplyLeft || bApplyRight || bApplyTop || bApplyBottom ) )
		return false;
	if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("inherit") ) == 0 )
	{
		// TO-DO: compute CSS from parent and inherit it here
		return false;
	}
LONG nX = -1, nY = -1;
	if( bApplyLeft || bApplyRight )
	{
		nX = m_layout.ParseMeasurementString( LPCTSTR(strCssSideStyle), true, styleCurrent );
		if( nX < 0L )
			return false;
	}
	if( bApplyTop || bApplyBottom )
	{
		nY = m_layout.ParseMeasurementString( LPCTSTR(strCssSideStyle), false, styleCurrent );
		if( nY < 0L )
			return false;
	}
	if( bApplyLeft && nX >= 0 )
		styleChanging.m_rcBorder.left = nX;
	if( bApplyRight && nX >= 0 )
		styleChanging.m_rcBorder.right = nX;
	if( bApplyTop && nY >= 0 )
		styleChanging.m_rcBorder.top = nY;
	if( bApplyBottom && nY >= 0 )
		styleChanging.m_rcBorder.bottom = nY;
	return true;
}

bool CExtRichContentItem::ApplyTagParams_CSS_SideMarginWH( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strCssSideStyle, bool bApplyLeft, bool bApplyRight, bool bApplyTop, bool bApplyBottom )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strCssSideStyle) != NULL && LPCTSTR(strCssSideStyle)[0] != _T('\0') );
	if( ! ( bApplyLeft || bApplyRight || bApplyTop || bApplyBottom ) )
		return false;
	if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("inherit") ) == 0 )
	{
		// TO-DO: compute CSS from parent and inherit it here
		return false;
	}
LONG nX = -1, nY = -1;
	if( bApplyLeft || bApplyRight )
	{
		nX = m_layout.ParseMeasurementString( LPCTSTR(strCssSideStyle), true, styleCurrent );
		if( nX < 0L )
			return false;
	}
	if( bApplyTop || bApplyBottom )
	{
		nY = m_layout.ParseMeasurementString( LPCTSTR(strCssSideStyle), false, styleCurrent );
		if( nY < 0L )
			return false;
	}
	if( bApplyLeft && nX >= 0 )
		styleChanging.m_rcMargin.left = nX;
	if( bApplyRight && nX >= 0 )
		styleChanging.m_rcMargin.right = nX;
	if( bApplyTop && nY >= 0 )
		styleChanging.m_rcMargin.top = nY;
	if( bApplyBottom && nY >= 0 )
		styleChanging.m_rcMargin.bottom = nY;
	return true;
}

bool CExtRichContentItem::ApplyTagParams_CSS_SidePaddingWH( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent, __EXT_MFC_SAFE_LPCTSTR strCssSideStyle, bool bApplyLeft, bool bApplyRight, bool bApplyTop, bool bApplyBottom )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strCssSideStyle) != NULL && LPCTSTR(strCssSideStyle)[0] != _T('\0') );
	if( ! ( bApplyLeft || bApplyRight || bApplyTop || bApplyBottom ) )
		return false;
	if( _tcsicmp( LPCTSTR(strCssSideStyle), _T("inherit") ) == 0 )
	{
		// TO-DO: compute CSS from parent and inherit it here
		return false;
	}
LONG nX = -1, nY = -1;
	if( bApplyLeft || bApplyRight )
	{
		nX = m_layout.ParseMeasurementString( LPCTSTR(strCssSideStyle), true, styleCurrent );
		if( nX < 0L )
			return false;
	}
	if( bApplyTop || bApplyBottom )
	{
		nY = m_layout.ParseMeasurementString( LPCTSTR(strCssSideStyle), false, styleCurrent );
		if( nY < 0L )
			return false;
	}
	if( bApplyLeft && nX >= 0 )
		styleChanging.m_rcPadding.left = nX;
	if( bApplyRight && nX >= 0 )
		styleChanging.m_rcPadding.right = nX;
	if( bApplyTop && nY >= 0 )
		styleChanging.m_rcPadding.top = nY;
	if( bApplyBottom && nY >= 0 )
		styleChanging.m_rcPadding.bottom = nY;
	return true;
}

void CExtRichContentItem::QueryStyleChanging( CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( _IsStyleOwner() || m_eType == __EHIT_CLASS_NODE );
	styleChanging.Empty();
CExtRichStyleRule & ruleRefForThis = _GetStyleChangingCache();
	if( m_bHaveStyleChangingCache )
	{
		styleChanging = ruleRefForThis;
		return;
	}
	ApplyTagParams( styleChanging, styleCurrent );
	m_bHaveStyleChangingCache = true;
	ruleRefForThis = styleChanging;
}

void CExtRichContentItem::ComputeLinearListForParagraph( 
		CTypedPtrList < CPtrList, CExtRichContentItem * >  & _listItems
	,	bool bParentIsParagraph // = false
	)
{
	if(		m_eType == __EHIT_TEXT_RANGE 
		||	m_eType == __EHIT_TEXT_SPACE 
		||	(	bParentIsParagraph 
			&&	(	IsParagraphItem() 
				||	QueryGenericTagName() == _T("img")
				||	GetDisplay() == CExtRichStyleDescription::ed_table
				||	GetDisplay() == CExtRichStyleDescription::ed_inline_table
				||	GetDisplay() == CExtRichStyleDescription::ed_inline_block
				) 
			)
		||	IsNoWrapSequence()
		)
		_listItems.AddTail( this );

	if( bParentIsParagraph || IsNoWrapSequence() )
		return;

POSITION pos = m_listItems.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		if( pRCI->m_eType == __EHIT_GENERIC_TAG )
		{
			CExtRichStyleDescription::e_position_t eP = pRCI->GetPosition();
			if( eP != CExtRichStyleDescription::ep_static && eP != CExtRichStyleDescription::ep_relative )
				continue;
		}
		if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_none
			||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock
			)
			continue;
		bool bParent = 
				(	pRCI->IsParagraphItem() 
				||	pRCI->QueryGenericTagName() == _T("img")
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
// 				||	( pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline && ( styleNext.m_eP == CExtRichStyleDescription::ep_absolute || styleNext.m_eP == CExtRichStyleDescription::ep_fixed ) )
				);
		pRCI->ComputeLinearListForParagraph( _listItems, bParent );
	} // for( ; pos != NULL; )
}

bool CExtRichContentItem::IsSingleTag() const
{
	if( m_bIsSingleItem_Have )
		return m_bIsSingleItem_Val;
	m_bIsSingleItem_Have = true;
	m_bIsSingleItem_Val = false;
	if(		m_eType != __EHIT_ROOT
		&&	m_eType != __EHIT_TEXT_RANGE
		&&	m_eType != __EHIT_TEXT_SPACE
		)
	{
		static CExtSafeMapStringToPtr g_mapIST;
		if( g_mapIST.GetCount() == 0 )
		{
			static LPCTSTR g_arrIST[] = { _T("br"), _T("hr"), _T("meta"), _T("link"), _T("![if"), _T("![endif]"), /*_T("!-"),*/ _T("!--"), _T("!DOCTYPE"), };
			for( int i = 0; i < sizeof(g_arrIST)/sizeof(g_arrIST[0]); i++ )
				g_mapIST.SetAt( g_arrIST[i], NULL );
		}
		CExtSafeString strGenericTagName = QueryGenericTagName();
		LPVOID ptr = NULL;
		if( g_mapIST.Lookup( strGenericTagName, ptr )  )
			m_bIsSingleItem_Val = true;
//		if( (! m_bIsSingleItem_Val ) && (! strGenericTagName.IsEmpty() ) && strGenericTagName[0] == _T('!') )
//			m_bIsSingleItem_Val = true;
	}
	return m_bIsSingleItem_Val;
}

bool CExtRichContentItem::IsNoLayoutRectItem() const
{
	if( INT(m_eType) >= INT(__EHIT_SPEC_START) )
		return true;
	if( m_bIsNoLayoutRectItem_Have )
		return m_bIsNoLayoutRectItem_Val;
	m_bIsNoLayoutRectItem_Have = true;
	m_bIsNoLayoutRectItem_Val = false;
	if( m_eType == __EHIT_GENERIC_TAG )
	{
		CExtRichStyleDescription::e_display_t eD = GetDisplay();
		if(		eD == CExtRichStyleDescription::ed_inline
	///		||	eD == CExtRichStyleDescription::ed_inline_block
//			||	eD == CExtRichStyleDescription::ed_inline_table
			||	eD == CExtRichStyleDescription::ed_none
			)
			m_bIsNoLayoutRectItem_Val = true;
	}
	return m_bIsNoLayoutRectItem_Val;
}

bool CExtRichContentItem::IsParagraphItem() const
{
	if( m_bParagraphItem_Have )
		return m_bParagraphItem_Val;
	m_bParagraphItem_Have = true;
	m_bParagraphItem_Val = false;
	if( m_eType == __EHIT_ROOT )
		m_bParagraphItem_Val = true;
	else
	if( m_eType == __EHIT_GENERIC_TAG )
	{
		CExtRichStyleDescription::e_display_t eD = GetDisplay();
		if(		eD == CExtRichStyleDescription::ed_block
			||	eD == CExtRichStyleDescription::ed_run_in
			||	eD == CExtRichStyleDescription::ed_list_item
			||	eD == CExtRichStyleDescription::ed_table_caption
			||	eD == CExtRichStyleDescription::ed_table_cell
			||	eD == CExtRichStyleDescription::ed_ui_dock
			)
			m_bParagraphItem_Val = true;
	}
	return m_bParagraphItem_Val;
}

bool CExtRichContentItem::IsNoWrapSequence() const
{
	if( m_bIsNoWrapSequence_Have )
		return m_bIsNoWrapSequence_Val;
	m_bIsNoWrapSequence_Val = false;
	if( IsNoLayoutRectItem() )
	{
		const CExtRichStyleDescription & style = GetEffectiveStyle();
		if( style.m_eWST == CExtRichStyleDescription::ewstNoWrap )
			m_bIsNoWrapSequence_Val = true;
	}
	m_bIsNoWrapSequence_Have = true;
	return m_bIsNoWrapSequence_Val;
}

bool CExtRichContentItem::IsUnknownItem() const
{
	if( IsNoLayoutRectItem() || IsParagraphItem() )
		return false;
	return true;
}

CExtSafeString CExtRichContentItem::ProcessContentSpec( __EXT_MFC_SAFE_LPCTSTR strContentSpec )
{
	if( LPCTSTR(strContentSpec) == NULL )
		return _T("");
//CString str = LPCTSTR(strContentSpec);
// 	str.Replace( _T("open-quote"), _T("\"") );
// 	str.Replace( _T("close-quote"), _T("\"") );
// 	str.Replace( _T("none"), _T("") );
static const TCHAR g_strOpenQuote[] = _T("open-quote");
static const TCHAR g_strCloseQuote[] = _T("close-quote");
static const TCHAR g_strNone[] = _T("none");
static const TCHAR g_strAttr[] = _T("attr(");
CExtSafeString strOut;
	for( LPCTSTR p = LPCTSTR(strContentSpec); (*p) != _T('\0');  )
	{
		LPCTSTR strPart = g_strOpenQuote;
		INT nLenPart = INT(_tcslen(strPart));
		if( _tcsncmp( p, strPart, nLenPart ) == 0 )
		{
			strOut += _T('\"');
			p += nLenPart;
			continue;
		}

		strPart = g_strCloseQuote;
		nLenPart = INT(_tcslen(strPart));
		if( _tcsncmp( p, strPart, nLenPart ) == 0 )
		{
			strOut += _T('\"');
			p += nLenPart;
			continue;
		}

		strPart = g_strNone;
		nLenPart = INT(_tcslen(strPart));
		if( _tcsncmp( p, strPart, nLenPart ) == 0 )
		{
			p += nLenPart;
			continue;
		}

		strPart = g_strAttr;
		nLenPart = INT(_tcslen(strPart));
		if( _tcsncmp( p, strPart, nLenPart ) == 0 )
		{
			CExtSafeString strAttrName;
			for( p += nLenPart; (*p) != _T('\0'); p++ )
			{
				if( (*p) == _T(')') )
				{
					p++;
					break;
				}
				strAttrName += (*p);
			}
			strAttrName.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
			strAttrName.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
			strAttrName.MakeLower();
			if( ! strAttrName.IsEmpty() )
			{
				CExtRichContentItem * pRCI_Attr = FindParmByName( LPCTSTR(strAttrName) );
				if( pRCI_Attr != NULL )
					strOut += pRCI_Attr->m_strTagPV;
			}
			continue;
		}
		
		strOut += (*p);
		p++;
	}

/*
	for( ; ; )
	{
		int nAttrPos = str.Find( strAttr );
		if( nAttrPos >= 0 )
		{
			int nAttrValueStartPos = nAttrPos + strAttr.GetLength();
			int nAttrEnd = str.Find( _T(")"), nAttrValueStartPos );
			if( nAttrEnd >= nAttrPos )
			{
				CExtSafeString strAttrName = str.Mid( nAttrValueStartPos, ( nAttrEnd - nAttrValueStartPos ) ), strAttrVal;
				CExtRichContentItem * pRCI_Attr = FindParmByName( LPCTSTR(strAttrName) );
				strAttrVal = strAttr + strAttrName + _T(")");
				if( pRCI_Attr != NULL )
					str.Replace( strAttrVal, pRCI_Attr->m_strTagPV );
				else
					str.Replace( strAttrVal, _T("") );
			}
			else
				break;
		}
		else
			break;
	}

	return str;
*/

	return strOut;
}

void CExtRichContentItem::DoLayoutRoot( CDC & dc, const CRect & rcStartLayout ) // should be invoked for root only
{
CRect rcStartLayoutNew( rcStartLayout );
CRect rcStartLayoutSaved( m_layout.m_rcStartLayoutSaved );
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
	{
		CRect rcLayoutRotated( m_layout.m_rcStartLayoutSaved );
		CSize sizeLayout = m_layout.m_rcStartLayoutSaved.Size();
		switch( m_layout.m_eLO )
		{
		case CExtRichContentLayout::__ELOT_90_CW:
		case CExtRichContentLayout::__ELOT_270_CW:
			rcLayoutRotated.right = rcLayoutRotated.left + sizeLayout.cy;
			rcLayoutRotated.bottom = rcLayoutRotated.top + sizeLayout.cx;
		break;
		} // switch( m_eLO )
		rcStartLayoutNew = m_layout.m_rcStartLayoutSaved = rcLayoutRotated;
	} // if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
CExtRichStyleDescription styleWalk;
	styleWalk.m_fd.FromSurfaceCurrentFont( dc );
	PreLayout( dc, styleWalk, /*rcStartLayout*/ rcStartLayoutNew );
	DoSizePreCalc( dc, /*rcStartLayout*/ rcStartLayoutNew );
	DoLayout( dc, /*rcStartLayout*/ rcStartLayoutNew, NULL, false );
POSITION posEFA = m_layout.m_listEFA.GetHeadPosition();
	for( ; posEFA != NULL; )
	{
		CExtRichContentItem * pRCIFA = m_layout.m_listEFA.GetNext( posEFA );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCIFA != NULL );
		pRCIFA->DoLayout( dc, /*rcStartLayout*/ rcStartLayoutNew, pRCIFA, false );
	}
	m_layout.m_rcStartLayoutSaved = rcStartLayoutSaved;
	PostLayout( dc );
}

CExtRichStyleDescription & CExtRichContentItem::ReStyle(
	CDC & dc,
	const CExtRichStyleDescription & styleWalk,
	bool bForceRestyle, // = false
	bool bDeep // = true
	)
{
	if( ! _IsStyleOwner() )
		return GetEffectiveStyle();
	if( bForceRestyle )
		m_bHaveEffectiveStyleCache = false;
CExtRichStyleDescription & styleRefForThis =  GetEffectiveStyle();
	if( ! m_bHaveEffectiveStyleCache )
	{
/*
		CExtRichStyleRule styleChanging;
		QueryStyleChanging( styleChanging, styleWalk );
		bool bEmptyChanging = styleChanging.IsEmpty();
		CExtRichStyleDescription styleModified;
		if( ! bEmptyChanging )
			styleChanging.GetStyle( styleWalk, styleModified );
		const CExtRichStyleDescription & styleNext = bEmptyChanging ? styleWalk : styleModified;
		styleRefForThis = styleNext;
		m_bHaveEffectiveStyleCache = true;
*/
		CExtRichStyleRule styleChanging;
		QueryStyleChanging( styleChanging, styleWalk );
		bool bEmptyChanging = styleChanging.IsEmpty();
		if( bEmptyChanging )
			styleRefForThis = styleWalk;
		else
		{
			styleRefForThis.Empty();
			styleChanging.GetStyle( styleWalk, styleRefForThis );
		}
		m_bHaveEffectiveStyleCache = true;
	} // if( ! m_bHaveEffectiveStyleCache )
	if( bDeep )
	{
		for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
		{
			CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			pRCI->ReStyle( dc, styleRefForThis, bForceRestyle, bDeep );
		} // for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
	} // if( bDeep )
	return styleRefForThis;
}

void CExtRichContentItem::PreLayout( CDC & dc, const CExtRichStyleDescription & styleWalk, const CRect & rcStartLayout )
{
const CExtRichStyleDescription & styleNext = ReStyle( dc, styleWalk, false, false );
// 	if( _IsStyleOwner() )
// 	{
// 		styleNext.m_strContentBefore.Empty();
// 		styleNext.m_strContentAfter.Empty();
// 	} // if( _IsStyleOwner() )

CExtSafeString strContentBefore, strContentAfter;
	strContentBefore = styleNext.m_strContentBefore;
	strContentAfter = styleNext.m_strContentAfter;
	styleNext.m_strContentBefore = styleNext.m_strContentAfter = _T("");

	m_sizeOverflow.cx = m_sizeOverflow.cy = 0L;
CExtRichStyleDescription::e_position_t eP = GetPosition();
	if( eP == CExtRichStyleDescription::ep_relative )
		m_layout.m_listER.AddTail( this );
	else if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )
		m_layout.m_listEFA.AddTail( this );
	m_listDS.RemoveAll();
	m_listDF.RemoveAll();
CExtRichContentItem * pLastReviewHI = NULL;
POSITION pos = m_listItems.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->m_bHaveEffectiveStyleCache = false;
		pRCI->m_pParent = this;
		if( pLastReviewHI != NULL )
		{
			pRCI->m_pPrev = pLastReviewHI;
			pLastReviewHI->m_pNext = pRCI;
		}

		CExtRichContentItem * pFirstRCI = NULL, * pLastRCI = NULL;
		if( pRCI->m_eType == __EHIT_GENERIC_TAG )
		{
			pFirstRCI = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetHead() : NULL;
			pLastRCI  = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetTail() : NULL;
			if( pFirstRCI != NULL && pFirstRCI->m_bDynamicItemBefore )
			{
				if( pFirstRCI->m_pNext != NULL )
					pFirstRCI->m_pNext->m_pPrev = NULL;
				pFirstRCI->m_pNext = NULL;
				POSITION posHeap = pRCI->m_layout.m_listHeap.Find( pFirstRCI );
				if( posHeap != NULL )
					pRCI->m_layout.m_listHeap.RemoveAt( posHeap );
				pRCI->m_listItems.RemoveHead();
				delete pFirstRCI;
				pFirstRCI = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetHead() : NULL;
			}
			if( pLastRCI != NULL && pLastRCI->m_bDynamicItemAfter )
			{
				if( pLastRCI->m_pPrev != NULL )
					pLastRCI->m_pPrev->m_pNext = NULL;
				pLastRCI->m_pPrev = NULL;
				POSITION posHeap = pRCI->m_layout.m_listHeap.Find( pLastRCI );
				if( posHeap != NULL )
					pRCI->m_layout.m_listHeap.RemoveAt( posHeap );
				pRCI->m_listItems.RemoveTail();
				delete pLastRCI;
				pLastRCI = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetTail() : NULL;
			}
		}

		pLastReviewHI = pRCI;
		pRCI->PreLayout( dc, styleNext, rcStartLayout );

		if( pRCI->m_eType == __EHIT_GENERIC_TAG )
		{
			const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
			if( styleRCI.m_eD == CExtRichStyleDescription::ed_ui_dock )
			{
				if(		styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_unspecified
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_fill
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_fill
					)
					m_listDF.AddTail( pRCI );
				else
					m_listDS.AddTail( pRCI );
			}
			if( ! styleRCI.m_strContentBefore.IsEmpty() )
			{
				pFirstRCI = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetHead() : NULL;
				CExtRichContentItem * pDynRCI = new CExtRichContentItem( m_layout, __EHIT_TEXT_RANGE, pRCI );
				pRCI->m_layout.m_listHeap.AddTail( pDynRCI );
				pDynRCI->m_bHaveEffectiveStyleCache = false;
				pDynRCI->m_bDynamicItemBefore = true;
				pDynRCI->m_pParent = pRCI;
				if( pFirstRCI != NULL )
					pFirstRCI->m_pPrev = pRCI;
				pDynRCI->m_pNext = pFirstRCI;
				CString str( styleRCI.m_strContentBefore );

				str = pRCI->ProcessContentSpec( LPCTSTR(str) );
				//str.Replace( _T("open-quote"), _T("\"") );
				//str.Replace( _T("close-quote"), _T("\"") );
				//str.Replace( _T("none"), _T("") );

				pDynRCI->m_strTextParsed = pDynRCI->m_strTextEffective = str;
				pRCI->m_listItems.AddHead( pDynRCI );
				pDynRCI->PreLayout( dc, styleRCI, rcStartLayout );
			}
			if( ! styleRCI.m_strContentAfter.IsEmpty() )
			{
				pLastRCI = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetTail() : NULL;
				CExtRichContentItem * pDynRCI = new CExtRichContentItem( m_layout, __EHIT_TEXT_RANGE, pRCI );
				pRCI->m_layout.m_listHeap.AddTail( pDynRCI );
				pDynRCI->m_bHaveEffectiveStyleCache = false;
				pDynRCI->m_bDynamicItemAfter = true;
				pDynRCI->m_pParent = pRCI;
				if( pLastRCI != NULL )
					pLastRCI->m_pNext = pRCI;
				pDynRCI->m_pPrev = pLastRCI;
				CString str( styleRCI.m_strContentAfter );

				str = pRCI->ProcessContentSpec( LPCTSTR(str) );
				//str.Replace( _T("open-quote"), _T("\"") );
				//str.Replace( _T("close-quote"), _T("\"") );
				//str.Replace( _T("none"), _T("") );

				pDynRCI->m_strTextParsed = pDynRCI->m_strTextEffective = str;
				pRCI->m_listItems.AddTail( pDynRCI );
				pDynRCI->PreLayout( dc, styleRCI, rcStartLayout );
			}
		}
	} // for( ; pos != NULL; )

	pos = m_listItems.GetHeadPosition();
INT nWalkIndex = 0;
INT nAppliedIndex = nWalkIndex + styleNext.m_nFirstNumberInList;
//LONG nMarginLeft = 0;
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->m_nZeroBasedListIndex = nWalkIndex;
		nWalkIndex++;
		CExtRichStyleDescription::e_display_t eD = pRCI->GetDisplay();
		if( eD == CExtRichStyleDescription::ed_none )
			continue;
		if( eD == CExtRichStyleDescription::ed_list_item )
		{
			CExtRichContentItem * pParmHI = pRCI->FindParmByName( _T("value") );
			if( pParmHI != NULL )
				nAppliedIndex = _ttol( LPCTSTR(pParmHI->m_strTagPV) );
			pRCI->m_nAppliedListIndex = nAppliedIndex;
			nAppliedIndex++;

//////////////////////////////////////////////////////////////////////////
			CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
			if( styleRCI.m_eLSP == CExtRichStyleDescription::elsp_inside )
			{
				CExtRichContentItem * _pRCI = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetHead() : NULL;
				if( _pRCI->m_bDynamicItemList )
				{
					POSITION posHeap = pRCI->m_layout.m_listHeap.Find( _pRCI );
					if( posHeap != NULL )
						pRCI->m_layout.m_listHeap.RemoveAt( posHeap );
					if( _pRCI->m_pNext != NULL )
						_pRCI->m_pNext->m_pPrev = NULL;
					_pRCI->m_pNext = NULL;
					pRCI->m_listItems.RemoveHead();
					delete _pRCI;
					_pRCI = NULL;
				}
				CExtRichContentItem * pFirstRCI = ( pRCI->m_listItems.GetCount() > 0 ) ? pRCI->m_listItems.GetHead() : NULL;
				CExtRichContentItem * pDynRCI = new CExtRichContentItem( pRCI->m_layout, __EHIT_GENERIC_TAG, pRCI );
				pRCI->m_layout.m_listHeap.AddTail( pDynRCI );
				pDynRCI->m_bHaveEffectiveStyleCache = false;
				pDynRCI->m_bDynamicItemList = true;
				pDynRCI->m_pParent = pRCI;
				if( pFirstRCI != NULL )
					pFirstRCI->m_pPrev = pDynRCI;
				pDynRCI->m_pNext = pFirstRCI;
				pRCI->m_listItems.AddHead( pDynRCI );
				pDynRCI->PreLayout( dc, styleRCI, rcStartLayout );
				CExtRichStyleDescription & styleDynRCI = pDynRCI->GetEffectiveStyle();
				styleDynRCI.Assign( styleRCI );
				styleDynRCI.m_eD = CExtRichStyleDescription::ed_inline_block;
				if( ! styleRCI.m_strListStyleImagePath.IsEmpty() )
				{
					CExtBitmap * pBMP = pRCI->m_layout.ImageByName( LPCTSTR(styleRCI.m_strListStyleImagePath) );
					if( pBMP != NULL )
					{
						__EXT_DEBUG_RICH_CONTENT_ASSERT( ! pBMP->IsEmpty() );
						CSize sizeMarker = pBMP->GetSize();
						//sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
						//sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
						styleDynRCI.m_nSpacerModeMinWidth = sizeMarker.cx;
						INT nExtraSpace = ::MulDiv( 10, g_PaintManager.m_nLPX, 96 );
						styleDynRCI.m_nSpacerModeMinWidth += nExtraSpace;
						styleDynRCI.m_sizeWH = sizeMarker;
						styleDynRCI.m_sizeWH.cx += nExtraSpace;
					} // if( pBMP != NULL )
				}
				else if( styleRCI.m_eLST == CExtRichStyleDescription::elst_none )
				{
				}
				else if( styleRCI.m_eLST == CExtRichStyleDescription::elst_circle )
				{
					CSize sizeMarker = CExtRichContentLayout::stat_GetListMarkerSizeDiskAt96DPI();
					sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
					//sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
					styleDynRCI.m_nSpacerModeMinWidth = sizeMarker.cx;
					INT nExtraSpace = ::MulDiv( 10, g_PaintManager.m_nLPX, 96 );
					styleDynRCI.m_nSpacerModeMinWidth += nExtraSpace;
					styleDynRCI.m_sizeWH = sizeMarker;
					styleDynRCI.m_sizeWH.cx += nExtraSpace;
				}
				else if( styleRCI.m_eLST == CExtRichStyleDescription::elst_disc )
				{
					CSize sizeMarker = CExtRichContentLayout::stat_GetListMarkerSizeDiskAt96DPI();
					sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
					//sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
					styleDynRCI.m_nSpacerModeMinWidth = sizeMarker.cx;
					INT nExtraSpace = ::MulDiv( 10, g_PaintManager.m_nLPX, 96 );
					styleDynRCI.m_nSpacerModeMinWidth += nExtraSpace;
					styleDynRCI.m_sizeWH = sizeMarker;
					styleDynRCI.m_sizeWH.cx += nExtraSpace;
				}
				else if( styleRCI.m_eLST == CExtRichStyleDescription::elst_square )
				{
					CSize sizeMarker = CExtRichContentLayout::stat_GetListMarkerSizeSquareAt96DPI();
					sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
					//sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
					styleDynRCI.m_nSpacerModeMinWidth = sizeMarker.cx;
					INT nExtraSpace = ::MulDiv( 10, g_PaintManager.m_nLPX, 96 );
					styleDynRCI.m_nSpacerModeMinWidth += nExtraSpace;
					styleDynRCI.m_sizeWH = sizeMarker;
					styleDynRCI.m_sizeWH.cx += nExtraSpace;
				}
				else
				{
					CExtSafeString strNumber = CExtRichContentLayout::stat_GenListItemText( styleRCI.m_eLST, pRCI->m_nAppliedListIndex );
					CExtSafeString strListSign;
					strListSign.Format( _T("%s.  "), LPCTSTR(strNumber) );
					_StyleRestore_t _restore( dc, styleDynRCI, INT(m_layout.m_eLO), m_thUnderline );
					CSize sizeListSign = pRCI->m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(strListSign) );
					styleDynRCI.m_nSpacerModeMinWidth = sizeListSign.cx;
					styleDynRCI.m_sizeWH = sizeListSign;
				}
				styleDynRCI.m_sizeWH.cy = 1;
			}
			else if( styleRCI.m_eLSP == CExtRichStyleDescription::elsp_outside )
			{
				if(		styleRCI.m_strListStyleImagePath.IsEmpty() 
					&&	( styleRCI.m_eLST != CExtRichStyleDescription::elst_none )
					&&	( styleRCI.m_eLST != CExtRichStyleDescription::elst_circle )
					&&	( styleRCI.m_eLST != CExtRichStyleDescription::elst_disc )
					&&	( styleRCI.m_eLST != CExtRichStyleDescription::elst_square )
					)
				{
					CExtSafeString strNumber = CExtRichContentLayout::stat_GenListItemText( styleRCI.m_eLST, pRCI->m_nAppliedListIndex );
					CExtSafeString strListSign;
					strListSign.Format( _T("%s.  "), LPCTSTR(strNumber) );
// 					CSize sizeListSign = pRCI->m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(strListSign) );
// 					nMarginLeft = max( nMarginLeft, sizeListSign.cx );
					pRCI->m_nListNumberWidth = pRCI->m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(strListSign) ).cx;
				}
			}
//////////////////////////////////////////////////////////////////////////
		}
	}

// 	if( nMarginLeft != 0 )
// 	{
// 		pos = m_listItems.GetHeadPosition();
// 		for( ; pos != NULL; )
// 		{
// 			CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
// 			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
// 			CExtRichStyleDescription::e_display_t eD = pRCI->GetDisplay();
// 			if( eD == CExtRichStyleDescription::ed_none )
// 				continue;
// 			if( eD == CExtRichStyleDescription::ed_list_item )
// 			{
// 				CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
// 				if( styleRCI.m_eLSP == CExtRichStyleDescription::elsp_outside )
// 					styleRCI.m_rcMargin.left = max( styleRCI.m_rcMargin.left, nMarginLeft );
// 			}
// 		}
// 	}

	styleNext.m_strContentAfter = strContentAfter;
	styleNext.m_strContentBefore = strContentBefore;
}

void CExtRichContentItem::PostLayout( CDC & dc )
{
POSITION pos = m_listItems.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->PostLayout( dc );
	} // for( ; pos != NULL; )
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
	{
		//CExtRichStyleDescription & style = GetEffectiveStyle();
		//style.RotateStyleOptions( INT(m_layout.m_eLO) );
		CRect rcLayoutRotated( m_rcLayout );
		CRect rcDistances(
			m_rcLayout.left - m_layout.m_rcStartLayoutSaved.left,
			m_rcLayout.top - m_layout.m_rcStartLayoutSaved.top,
			m_layout.m_rcStartLayoutSaved.right - m_rcLayout.right,
			m_layout.m_rcStartLayoutSaved.bottom - m_rcLayout.bottom
			);
		CSize sizeLayout = m_rcLayout.Size();
		switch( m_layout.m_eLO )
		{
		case CExtRichContentLayout::__ELOT_90_CW:
			rcLayoutRotated.SetRect(
				m_layout.m_rcStartLayoutSaved.right - rcDistances.top - sizeLayout.cy, 
				m_layout.m_rcStartLayoutSaved.top + rcDistances.left,
				m_layout.m_rcStartLayoutSaved.right - rcDistances.top, 
				m_layout.m_rcStartLayoutSaved.top + rcDistances.left + sizeLayout.cx
				);
		break;
		case CExtRichContentLayout::__ELOT_180_CW:
			rcLayoutRotated.SetRect(
				m_layout.m_rcStartLayoutSaved.left + rcDistances.right,
				m_layout.m_rcStartLayoutSaved.top + rcDistances.bottom,
				m_layout.m_rcStartLayoutSaved.left + rcDistances.right + sizeLayout.cx, 
				m_layout.m_rcStartLayoutSaved.top + rcDistances.bottom + sizeLayout.cy
				);
		break;
		case CExtRichContentLayout::__ELOT_270_CW:
			rcLayoutRotated.SetRect(
				m_layout.m_rcStartLayoutSaved.left + rcDistances.top, 
				m_layout.m_rcStartLayoutSaved.bottom - rcDistances.left - sizeLayout.cx,
				m_layout.m_rcStartLayoutSaved.left + rcDistances.top + sizeLayout.cy, 
				m_layout.m_rcStartLayoutSaved.bottom - rcDistances.left
				);
		break;
		} // switch( m_layout.m_eLO )
		m_rcLayout = rcLayoutRotated;
	} // if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
}

HDWP CExtRichContentItem::LayoutAttachedControl( HDWP hDWP, const CPoint & ptControlScrollPos )
{
	if( hDWP == NULL )
		return NULL;
	if( m_hWndAttached == NULL )
		return hDWP;
	if( ! ::IsWindow( m_hWndAttached ) )
	{
		m_hWndAttached = NULL;
		return hDWP;
	}
bool bVisible = IsParticipantOfPaint();
CRect rcLayout( CalcEffectiveRect() );
	rcLayout.OffsetRect( - ptControlScrollPos );
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
	rcLayout.DeflateRect( &styleEffective.m_rcCellPadding );
CExtRichStyleDescription::e_position_t eP = GetPosition();
	if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
		rcLayout.DeflateRect( &styleEffective.m_rcMargin );
	rcLayout.DeflateRect( &styleEffective.m_rcBorder );
	rcLayout.DeflateRect( &styleEffective.m_rcPadding );
	hDWP =
		::DeferWindowPos(
			hDWP, m_hWndAttached, NULL, rcLayout.left, rcLayout.top, rcLayout.Width(), rcLayout.Height(),
			SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_NOACTIVATE | ( bVisible ? SWP_SHOWWINDOW : SWP_HIDEWINDOW )
			);
	return hDWP;
}

void CExtRichContentItem::DoSizePreCalc( CDC & dc, const CRect & rcStartLayout )
{
	if( ! IsParticipantOfLayout() )
		return;
	if( (!m_bEwstProcessingComplete) && m_strTextEffective.IsEmpty() && (!m_strTextParsed.IsEmpty()) )
		m_strTextEffective = m_strTextParsed;
	m_sizePreCalc.cx = m_sizePreCalc.cy = m_sizeMaxChild.cx = m_sizeMaxChild.cy = 0;
const CExtRichStyleDescription & styleNext = GetEffectiveStyle();
POSITION pos = m_listItems.GetHeadPosition();
INT nMaxFloatingChildWidth = 0;
CSize sizeDock( 0, 0 );
	for( ; pos != NULL; )
	{
		POSITION posSaved = pos;
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		bool bRestorePos = false;
		if( pRCI->m_eType == __EHIT_TEXT_SPACE && ( ! pRCI->m_bEwstProcessingComplete ) )
			bRestorePos = true;
		pRCI->DoSizePreCalc( dc, rcStartLayout );
		const CExtRichStyleDescription & styleElemFT = pRCI->GetEffectiveStyle();
		if(		styleElemFT.m_eF == CExtRichStyleDescription::ef_left
			||	styleElemFT.m_eF == CExtRichStyleDescription::ef_right
			)
		{
			nMaxFloatingChildWidth = max( nMaxFloatingChildWidth, pRCI->m_sizePreCalc.cx );
			continue;
		}
		if( pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock )
		{
/*
			switch( pRCI->GetEffectiveStyle().m_eDock )
			{
			case CExtRichStyleDescription::e_ui_dock_left:
			case CExtRichStyleDescription::e_ui_dock_pre_left:
			case CExtRichStyleDescription::e_ui_dock_right:
			case CExtRichStyleDescription::e_ui_dock_pre_right:
				sizeDock.cx += pRCI->m_sizePreCalc.cx;
				sizeDock.cy = max( sizeDock.cy, pRCI->m_sizePreCalc.cy );
			break;
			case CExtRichStyleDescription::e_ui_dock_top:
			case CExtRichStyleDescription::e_ui_dock_pre_top:
			case CExtRichStyleDescription::e_ui_dock_bottom:
			case CExtRichStyleDescription::e_ui_dock_pre_bottom:
				sizeDock.cx = max( sizeDock.cx, pRCI->m_sizePreCalc.cx );
				sizeDock.cy += pRCI->m_sizePreCalc.cy;
			break;
			} // switch( pRCI->GetEffectiveStyle().m_eDock )
*/
			continue;
		} // if( pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock )
		if( pRCI->IsNoLayoutRectItem() )
		{
			m_sizeMaxChild.cx = max( m_sizeMaxChild.cx, pRCI->m_sizeMaxChild.cx );
			m_sizeMaxChild.cy = max( m_sizeMaxChild.cy, pRCI->m_sizeMaxChild.cy );
		}
		else
		{
			m_sizeMaxChild.cx = max( m_sizeMaxChild.cx, pRCI->m_sizePreCalc.cx );
			m_sizeMaxChild.cy = max( m_sizeMaxChild.cy, pRCI->m_sizePreCalc.cy );
		}
		if( bRestorePos )
		{
			pos = posSaved;
			m_listItems.GetNext( pos );
		}
	} // for( ; pos != NULL; )

	switch( m_eType )
	{
	case __EHIT_ROOT:
	{
	}
	break;
	case __EHIT_TEXT_RANGE:
	{
/*
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcPadding == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcMargin == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcBorder == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcCellPadding == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_sizeCellSpacing == CSize(0,0) );
*/
		_StyleRestore_t _restore( dc, styleNext, INT(m_layout.m_eLO), m_thUnderline );
		int nLettersCount = m_strTextEffective.GetLength();
		LONG nWordLength = m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(m_strTextEffective) ).cx;
		if( nLettersCount > 0 && m_pNext != NULL && m_pNext->m_eType == __EHIT_TEXT_SPACE )
			nLettersCount --;
		int nAddingSpace = nLettersCount * ( ( styleNext.m_nLetterSpacing > __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) ? styleNext.m_nLetterSpacing : 0 );
		m_sizeMaxChild.cx = m_sizePreCalc.cx = nWordLength + nAddingSpace;
		m_sizeMaxChild.cy = m_sizePreCalc.cy = _restore.m_TextMetric.tmHeight;
		m_nHelperTmAscent = _restore.m_TextMetric.tmAscent;
		//m_nHelperTmInternalLeading = _restore.m_TextMetric.tmInternalLeading;
		m_nHelperTmInternalLeading = _restore.m_TextMetric.tmExternalLeading;
	}
	break;
	case __EHIT_TEXT_SPACE:
	{
/*
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcPadding == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcMargin == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcBorder == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_rcCellPadding == CRect(0,0,0,0) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_sizeCellSpacing == CSize(0,0) );
*/
		if( ! m_bEwstProcessingComplete )
		{
			m_bEwstProcessingComplete = true;
			if( styleNext.ewstIsSingleSpaceMode() )
			{
				m_strTextParsed.Replace( _T("\r"), _T("") );
				m_strTextParsed.Replace( _T("\t"), _T(" ") );
				if( ! styleNext.ewstIsNewLineMode() )
					m_strTextParsed.Replace( _T("\n"), _T(" ") );
				for( ; m_strTextParsed.Replace( _T("  "), _T(" ") ) > 0; );
			} // if( styleNext.ewstIsSingleSpaceMode() )
			else
				m_strTextParsed.Replace( _T("\t"), LPCTSTR(m_layout.m_strTab) );
			m_strTextEffective = m_strTextParsed;
			if( styleNext.ewstIsNewLineMode() )
			{
				CExtSafeStringList listParts;
				INT nPos = -1, nPosPrev = 0, nPosLast = -1;
				for( ; true ; )
				{
					nPos = m_strTextParsed.Find( _T('\n'), nPosPrev );
					if( nPos < 0 )
						break;
					CExtSafeString strPart;
					if( nPosPrev >= 0 )
					{
						INT nCount = nPos - nPosPrev; // - 1;
						strPart = m_strTextParsed.Mid( nPosPrev, nCount );
					}
					else
						strPart = m_strTextParsed.Left( nPos );
					nPosLast = nPos;
					nPosPrev = nPos + 1;
					if( ! strPart.IsEmpty() )
						listParts.AddTail( strPart );
					listParts.AddTail( __EXT_MFC_SAFE_LPCTSTR( _T("\n") ) );
				}
				if( nPosLast >= 0 && (*(LPCTSTR(m_strTextParsed)+nPosLast+1)) != _T('\0') )
					listParts.AddTail( __EXT_MFC_SAFE_LPCTSTR( LPCTSTR(m_strTextParsed) + nPosLast + 1 ) );
				INT nPartCount = INT(listParts.GetCount());
				if( nPartCount > 0 )
				{
					__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pParent != NULL );
					POSITION posSiblingInsertionAfter = m_pParent->m_listItems.Find( this );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( posSiblingInsertionAfter != NULL );
					POSITION posPart = listParts.GetHeadPosition();
					for( INT nPartIndex = 0; posPart != NULL; nPartIndex ++ )
					{
						const CExtSafeString & strPart = listParts.GetNext( posPart );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strPart.IsEmpty() );
						bool bBR = ( strPart[0] == _T('\n') ) ? true : false, bAddDynamicBR = false, bAddDynamicPart = false;
						if( nPartIndex == 0 )
						{
							if( bBR )
							{
								m_strTextEffective.Empty();
								bAddDynamicBR = true;
 								m_eType = __EHIT_TEXT_RANGE;
							}
							else
								m_strTextEffective = strPart;
						}
						else
						{
							if( bBR )
								bAddDynamicBR = true;
							else
								bAddDynamicPart = true;
						}
						if( bAddDynamicBR || bAddDynamicPart )
						{
							CExtRichContentItem * pDynamicHI = NULL;
							if( bAddDynamicBR )
							{
								pDynamicHI = new CExtRichContentItem( m_layout, CExtRichContentItem::__EHIT_GENERIC_TAG );
								pDynamicHI->m_strTextEffective = pDynamicHI->m_strTextParsed = _T("br");
							}
							if( bAddDynamicPart )
							{
								CExtRichContentItem::e_html_item_type_t _eType = CExtRichContentItem::__EHIT_TEXT_SPACE;
								pDynamicHI = new CExtRichContentItem( m_layout, _eType );
								pDynamicHI->m_strTextEffective = pDynamicHI->m_strTextParsed = strPart;
							}
							if( pDynamicHI != NULL )
							{
								pDynamicHI->m_bDynamicTagFromParseMode = true;
								m_pParent->m_listItems.InsertBefore( posSiblingInsertionAfter, pDynamicHI );
								m_layout.m_listHeap.AddTail( pDynamicHI );
								pDynamicHI->m_bEwstProcessingComplete = true;
								if( pDynamicHI->_IsStyleOwner() )
								{
									const CExtRichStyleDescription & styleWalk = GetEffectiveStyle();
/*
									CExtRichStyleRule styleChanging;
									pDynamicHI->QueryStyleChanging( styleChanging, styleWalk );
									bool bEmptyChanging = styleChanging.IsEmpty();
									CExtRichStyleDescription styleModified;
									if( ! bEmptyChanging )
										styleChanging.GetStyle( styleWalk, styleModified );
									const CExtRichStyleDescription & styleNext = bEmptyChanging ? styleWalk : styleModified;
									CExtRichStyleDescription & styleRefEffectifveForDynamicHI = pDynamicHI->GetEffectiveStyle();
									styleRefEffectifveForDynamicHI = styleNext;
									styleNext.m_strContentBefore.Empty();
									styleNext.m_strContentAfter.Empty();
									pDynamicHI->m_bHaveEffectiveStyleCache = true;
*/
									CExtRichStyleDescription & styleRefEffectifveForDynamicHI = pDynamicHI->GetEffectiveStyle();
									CExtRichStyleRule styleChanging;
									pDynamicHI->QueryStyleChanging( styleChanging, styleWalk );
									bool bEmptyChanging = styleChanging.IsEmpty();
									if( bEmptyChanging )
										styleRefEffectifveForDynamicHI = styleWalk;
									else
									{
										styleRefEffectifveForDynamicHI.Empty();
										styleChanging.GetStyle( styleWalk, styleRefEffectifveForDynamicHI );
									}
									styleRefEffectifveForDynamicHI.m_strContentBefore.Empty();
									styleRefEffectifveForDynamicHI.m_strContentAfter.Empty();
									pDynamicHI->m_bHaveEffectiveStyleCache = true;

								} // if( pDynamicHI->_IsStyleOwner() )
							}
						}
					}
				}
			} // if( styleNext.ewstIsNewLineMode() )
		} // if( ! m_bEwstProcessingComplete )

		if( m_strTextEffective.IsEmpty() )
		{
			m_sizeMaxChild.cx = m_sizePreCalc.cx = 0;
			m_sizeMaxChild.cy = m_sizePreCalc.cy = 0;
		}
		else
		{
			_StyleRestore_t _restore( dc, styleNext, INT(m_layout.m_eLO), m_thUnderline );
			m_nHelperTmAscent = _restore.m_TextMetric.tmAscent;
			m_nHelperTmInternalLeading = _restore.m_TextMetric.tmExternalLeading;
			m_sizeMaxChild.cy = m_sizePreCalc.cy = _restore.m_TextMetric.tmHeight;
			if( styleNext.ewstIsSingleSpaceMode() )
				m_sizeMaxChild.cx = m_sizePreCalc.cx = ( ( styleNext.m_nWordSapcing > __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) ? styleNext.m_nWordSapcing : m_layout.GetTextExtent( dc.m_hDC, _T(" "), 1 ).cx );
			else if( ! m_strTextEffective.IsEmpty() )
				m_sizeMaxChild.cx = m_sizePreCalc.cx = m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(m_strTextEffective), m_strTextEffective.GetLength() ).cx;
		}
	}
	break;
	case __EHIT_GENERIC_TAG:
	{
		CExtSafeString strGenericTagName = QueryGenericTagName();
		if( strGenericTagName == _T("img") )
		{
			CExtBitmap * pBMP = ImageBySrc();
			if( pBMP != NULL )
			{
				__EXT_DEBUG_RICH_CONTENT_ASSERT( ! pBMP->IsEmpty() );
				m_sizeMaxChild = m_sizePreCalc = pBMP->GetSize();
				m_nHelperTmAscent = m_sizePreCalc.cy;
			} // if( pBMP != NULL )
		}
		else
		{
			CExtRichStyleDescription::e_position_t eP = GetPosition();
			CExtRichStyleDescription::e_display_t eD = GetDisplay();
			switch( eD )
			{
			case CExtRichStyleDescription::ed_inline_block:
			{
				m_sizePreCalc.cx = m_sizePreCalc.cy = 0;
				pos = m_listItems.GetHeadPosition();
				for( ; pos != NULL; )
				{
					CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
					if( pRCI->GetPosition() != CExtRichStyleDescription::ep_static )
						continue;
					if(		pRCI->m_eType == __EHIT_TEXT_RANGE
						||	pRCI->m_eType == __EHIT_TEXT_SPACE
						||	pRCI->IsParagraphItem()
						||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
						||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
						)
					{
						m_sizePreCalc.cx += pRCI->m_sizePreCalc.cx;
						m_sizePreCalc.cy = max( m_sizePreCalc.cy, pRCI->m_sizePreCalc.cy );
					}
				}
				INT nWidthLimitForInlineBlock =
					rcStartLayout.Width()
					- styleNext.m_rcPadding.left - styleNext.m_rcPadding.right
					- styleNext.m_rcBorder.left - styleNext.m_rcBorder.right
					;
				if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
					nWidthLimitForInlineBlock += - styleNext.m_rcMargin.left - styleNext.m_rcMargin.right;
				m_sizePreCalc.cx = min( m_sizePreCalc.cx, nWidthLimitForInlineBlock );
			}
			break; // case CExtRichStyleDescription::ed_inline_block
			case CExtRichStyleDescription::ed_table:
			case CExtRichStyleDescription::ed_inline_table:
				{
					// step 1: compute column/row counts
					CList < CPoint, CPoint & > listSpanRoots;
					CList < CSize, CSize & > listSpanSizes;
					CList < CExtRichContentItem *, CExtRichContentItem * & > listSpanItems;
					CTypedPtrList < CPtrList, CExtRichContentItem * > listRowItems;
					CSize sizeDim( 0, 0 );
					CExtRichTableLayout & aTable = _GetTable();
					aTable.SniffTable( this, sizeDim, listSpanRoots, listSpanSizes, listSpanItems, listRowItems );
					if( sizeDim.cx == 0 || sizeDim.cy == 0 )
						break;
					// step 2: init table layout, compute column widths and row heights
					bool bHaveSpanRoots = ( listSpanRoots.GetCount() > 0 ) ? true : false;
					aTable.Init( sizeDim );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( INT( listRowItems.GetCount() == sizeDim.cy ) );
					LONG nColNo = 0, nRowNo = 0;
					for( pos = listRowItems.GetHeadPosition(); pos != NULL; )
					{
						CExtRichContentItem * pTableRowHI = listRowItems.GetNext( pos );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pTableRowHI != NULL );
						if(		pTableRowHI->GetDisplay() == CExtRichStyleDescription::ed_table_row
							||	pTableRowHI->GetDisplay() == CExtRichStyleDescription::ed_table_header_group
							||	pTableRowHI->GetDisplay() == CExtRichStyleDescription::ed_table_footer_group
							||	pTableRowHI->GetDisplay() == CExtRichStyleDescription::ed_table_row_group
							)
						{
							CExtRichTableRow * pRow = aTable.GetAt( nRowNo );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
							pRow->m_pRCI_TableRow = pTableRowHI;
							POSITION posCell = pTableRowHI->m_listItems.GetHeadPosition();
							//const CExtRichStyleDescription & styleNextForRow = pTableRowHI->GetEffectiveStyle();
							for( nColNo = 0; posCell != NULL; )
							{
								CExtRichContentItem * pTableCellHI = pTableRowHI->m_listItems.GetNext( posCell );
								const CExtRichStyleDescription & styleNextForCellHI = pTableCellHI->GetEffectiveStyle();
								if( pTableCellHI == NULL )
									continue;
								if( pTableCellHI->GetDisplay() == CExtRichStyleDescription::ed_table_cell )
								{
									pRow->SetAt( nColNo, pTableCellHI );
									if( ! bHaveSpanRoots )
									{ // if we have no colspan/rowspan, the we can pre-measure rows/columns right here
										CRect _rcStartLayout( 0, 0, __EXT_RICH_CONTENT_BIG_EXTENT, __EXT_RICH_CONTENT_BIG_EXTENT );
										pTableCellHI->DoSizePreCalc( dc, _rcStartLayout );
										pTableCellHI->DoLayout( dc, _rcStartLayout, NULL, false );
										pTableCellHI->m_sizePreCalc = pTableCellHI->m_sizeMaxChild;
										pTableCellHI->m_sizePreCalc.cx = max( pTableCellHI->m_sizePreCalc.cx, pTableCellHI->m_rcLayout.Width() );
										pTableCellHI->m_sizePreCalc.cx +=
											  styleNextForCellHI.m_rcMargin.left + styleNextForCellHI.m_rcMargin.right
											+ styleNextForCellHI.m_rcBorder.left + styleNextForCellHI.m_rcBorder.right
											+ styleNextForCellHI.m_rcPadding.left + styleNextForCellHI.m_rcPadding.right
											+ styleNextForCellHI.m_rcCellPadding.left + styleNextForCellHI.m_rcCellPadding.right
											;
										pTableCellHI->m_sizePreCalc.cy +=
											  styleNextForCellHI.m_rcMargin.top + styleNextForCellHI.m_rcMargin.bottom
											+ styleNextForCellHI.m_rcBorder.top + styleNextForCellHI.m_rcBorder.bottom
											+ styleNextForCellHI.m_rcPadding.top + styleNextForCellHI.m_rcPadding.bottom
											+ styleNextForCellHI.m_rcCellPadding.top + styleNextForCellHI.m_rcCellPadding.bottom
											;
										pRow->m_nRowHeightCur = max( pRow->m_nRowHeightCur, pTableCellHI->m_sizePreCalc.cy );
										pRow->m_nRowHeightMin = max( pRow->m_nRowHeightMin, pTableCellHI->m_sizeMaxChild.cy );
										LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
										LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ]; // !!!
										LONG _nX = 0L;
										CExtRichStyleDescription & styleRefEffectifveForTableCellHI = pTableCellHI->GetEffectiveStyle();
										if( styleRefEffectifveForTableCellHI.m_sizeWH.cx >= 0 )
											_nX = styleRefEffectifveForTableCellHI.m_sizeWH.cx;
										else
											_nX = pTableCellHI->m_rcLayout.Width();
										LONG nColWidthAfterCur = max( nColWidthBeforeCur, _nX );
									//	LONG nColWidthAfterCur = max( nColWidthBeforeCur, pTableCellHI->m_sizePreCalc.cx );
										nColWidthAfterCur = max( nColWidthAfterCur, pTableCellHI->m_rcLayout.Width() );
										if( nColWidthAfterCur != nColWidthBeforeCur )
											aTable.m_arrCWcur.SetAt( nColNo, nColWidthAfterCur );
										LONG nColWidthMin = pTableCellHI->m_sizeMaxChild.cx; // !!!
										nColWidthMin +=
											styleNextForCellHI.m_rcMargin.left + styleNextForCellHI.m_rcMargin.right
											+ styleNextForCellHI.m_rcBorder.left + styleNextForCellHI.m_rcBorder.right
											+ styleNextForCellHI.m_rcPadding.left + styleNextForCellHI.m_rcPadding.right
											+ styleNextForCellHI.m_rcCellPadding.left + styleNextForCellHI.m_rcCellPadding.right
											; // !!!
										LONG nColWidthAfterMin = max( nColWidthBeforeMin, nColWidthMin ); // !!!
										if( nColWidthAfterMin != nColWidthBeforeMin ) // !!!
											aTable.m_arrCWmin.SetAt( nColNo, nColWidthAfterMin ); // !!!
									} // if we have no colspan/rowspan, the we can pre-measure rows/columns right here
									nColNo ++;
								} // if( pTableCellHI->GetDisplay() == CExtRichStyleDescription::ed_table_cell )
							} // for( nColNo = 0; posCell != NULL; )
							nRowNo ++;
						} // if( pTableRowHI->GetDisplay() == CExtRichStyleDescription::ed_table_row )
					} // for( pos = listRowItems.GetHeadPosition(); pos != NULL; )
					span_info_array_ptr_t p_sia;
					if( bHaveSpanRoots )
					{ // if we have colspan/rowspan, then make table larger, recompute row/column counts
						__EXT_DEBUG_RICH_CONTENT_ASSERT( listSpanRoots.GetCount() == listSpanSizes.GetCount() );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( listSpanRoots.GetCount() == listSpanItems.GetCount() );
						POSITION posSpanRoot = listSpanRoots.GetHeadPosition();
						POSITION posSpanSize = listSpanSizes.GetHeadPosition();
						//POSITION posSpanItem = listSpanItems.GetHeadPosition();
						for( ; posSpanRoot != NULL; )
						{
							CPoint ptSpanCurrent = listSpanRoots.GetNext( posSpanRoot );
							CSize sizeSpanCurrent = listSpanSizes.GetNext( posSpanSize );
							POSITION posSpanNext = posSpanRoot; // listSpanRoots.GetHeadPosition(); // 
							for( ; posSpanNext != NULL; )
							{
								CPoint & ptSpanNext = listSpanRoots.GetNext( posSpanNext );
								if(		ptSpanCurrent.y <= ptSpanNext.y && ptSpanNext.y < ( ptSpanCurrent.y + sizeSpanCurrent.cy )
									&&	ptSpanNext.x >= ptSpanCurrent.x
									)
								{
									ptSpanNext.x += sizeSpanCurrent.cx;
									if( ptSpanNext.y == ptSpanCurrent.y )
										ptSpanNext.x --;
								}
								if( ptSpanNext.y >= ( ptSpanCurrent.y + sizeSpanCurrent.cy ) )
									break;
							}
						}

						LONG nNewColCount = sizeDim.cx;
						p_sia = new span_info_array_t( listSpanRoots, listSpanSizes, listSpanItems );
						INT nSpanIndex, nSpanCount = INT( p_sia->GetSize() );
						for( nSpanIndex = 0; nSpanIndex < nSpanCount; nSpanIndex ++ )
						{
							span_info_t & _si = p_sia->ElementAt( nSpanIndex );
							CSize sizeSpan( _si.m_sizeSpan );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( sizeSpan.cx > 1 || sizeSpan.cy > 1 );
							CSize sizeSpanAvail( sizeDim.cx - _si.m_ptSpan.x, sizeDim.cy - _si.m_ptSpan.y );
							sizeSpan.cx = min( sizeSpan.cx, sizeSpanAvail.cx );
							_si.m_pRCI->m_sizeComputedSpan = sizeSpan;
/*
CExtSafeString strDebugTrace;
strDebugTrace.Format(
	_T("%d) Walking through span (%d,%d), size (%d,%d), \"%s\"\r\n"),
	nSpanIndex, _si.m_ptSpan.y, _si.m_ptSpan.x, sizeSpan.cy, sizeSpan.cx, LPCTSTR(_si.m_pRCI->m_listItems.GetHead()->m_strTextParsed) );
TRACE( LPCTSTR(strDebugTrace) );
*/
							LONG nRowWalk, nRowTo = _si.m_ptSpan.y + sizeSpan.cy - 1;
							for( nRowWalk = _si.m_ptSpan.y; nRowWalk <= nRowTo; nRowWalk ++ )
							{
								if( nRowWalk >= INT(aTable.GetSize()) )
									break;
								LONG nInsertColPos = _si.m_ptSpan.x;
								LONG nInsertColCount = sizeSpan.cx;
								if( nRowWalk == _si.m_ptSpan.y )
								{
									nInsertColCount --;
									nInsertColPos ++;
								}
								CExtRichTableRow * pRow = aTable.GetAt( nRowWalk );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
								if( nInsertColCount > 0 )
								{
									static CExtRichContentItem * g_pNullHI = NULL;
									pRow->InsertAt( nInsertColPos, g_pNullHI, nInsertColCount );
								}

								LONG nNewColCountInRow = LONG(pRow->GetSize());
/**/
								LONG nColCountInRow = nNewColCountInRow;
								for( INT nCellIndex = nInsertColCount; nCellIndex > 0; nCellIndex-- )
								{
									CExtRichContentItem * pTableCellHI = pRow->GetAt( nColCountInRow - 1 );
									if( pTableCellHI != NULL )
										break;
									pRow->RemoveAt( nColCountInRow - 1 );
									nColCountInRow --;
								} // for( INT nCellIndex = nAddColCount; nCellIndex >= 0; nCellIndex-- )
								nNewColCountInRow = LONG(pRow->GetSize());
/**/
								nNewColCount = max( nNewColCount, nNewColCountInRow );
							} // for( nRowWalk = ptSpanCurrent.y; nRowWalk <= nRowTo; nRowWalk ++ )
						}
						__EXT_DEBUG_RICH_CONTENT_ASSERT( nNewColCount >= sizeDim.cx );

						LONG nColNo, nRowNo;
						if( nNewColCount > sizeDim.cx )
						{ // re-initialize table rows to new col counts
							for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
							{
								CExtRichTableRow * pRow = aTable.GetAt( nRowNo );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
								pRow->Init( nNewColCount );
							}
							LONG nZeroColWidth = 0;
							static DOUBLE nZeroPercent = 0.0;
							LONG nCurCWsize = LONG( aTable.m_arrCWcur.GetSize() );
							aTable.m_arrCWcur.InsertAt( nCurCWsize, nZeroColWidth, nNewColCount - sizeDim.cx );
							aTable.m_arrCWmin.InsertAt( nCurCWsize, nZeroColWidth, nNewColCount - sizeDim.cx );
							aTable.m_arrWidthPrecents.InsertAt( nCurCWsize, nZeroPercent, nNewColCount - sizeDim.cx );
							sizeDim.cx = nNewColCount;
							__EXT_DEBUG_RICH_CONTENT_ASSERT( LONG( aTable.m_arrCWcur.GetSize() ) == sizeDim.cx );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( LONG( aTable.m_arrCWmin.GetSize() ) == sizeDim.cx );
						} // re-initialize table rows to new col counts
						// now we need to pre-measure layout after the rowspan/colspan rules was applied
//aTable.SpanInfoArray_Init();
						for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
						{
							CExtRichTableRow * pRow = aTable.GetAt( nRowNo );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
							CExtRichContentItem * pTableRowHI = pRow->m_pRCI_TableRow;
							pTableRowHI;
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pTableRowHI != NULL );
							for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
							{
// if( pRow->GetSize() >= nColNo )
// 	continue;
								CExtRichContentItem * pTableCellHI = pRow->GetAt( nColNo );
								if( pTableCellHI == NULL )
									continue;
								CRect _rcStartLayout( 0, 0, __EXT_RICH_CONTENT_BIG_EXTENT, __EXT_RICH_CONTENT_BIG_EXTENT );
								pTableCellHI->DoLayout( dc, _rcStartLayout, NULL, false ); // pre-layout styleNextForRow
								pTableCellHI->m_sizePreCalc = pTableCellHI->m_rcLayout.Size();
								CSize sizeSpan = pTableCellHI->m_sizeComputedSpan;
								//CSize sizeSpan = aTable.SpanInfoArray_GetAt( nColNo, nRowNo );
								if(		( sizeSpan.cx > 1 || sizeSpan.cy > 1 )
									&&	( ! ( sizeSpan.cx > 1 && sizeSpan.cy == 1 ) )
									)
									continue;
								pRow->m_nRowHeightCur = max( pRow->m_nRowHeightCur, pTableCellHI->m_sizePreCalc.cy );
								pRow->m_nRowHeightMin = max( pRow->m_nRowHeightMin, pTableCellHI->m_sizePreCalc.cy );
								if( sizeSpan.cx > 1 || sizeSpan.cy > 1 )
									continue;
								LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
								LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
								LONG nColWidthAfterCur = max( nColWidthBeforeCur, pTableCellHI->m_sizePreCalc.cx );
								LONG nColWidthAfterMin = max( nColWidthBeforeMin, pTableCellHI->m_sizeMaxChild.cx );
								nColWidthAfterMin += pTableCellHI->GetEffectiveStyle().m_rcBorder.right; // !!!
								nColWidthAfterCur = max( nColWidthAfterCur, nColWidthAfterMin ); // !!!
								if( nColWidthAfterCur != nColWidthBeforeCur )
									aTable.m_arrCWcur.SetAt( nColNo, nColWidthAfterCur );
								if( nColWidthAfterMin != nColWidthBeforeMin )
									aTable.m_arrCWmin.SetAt( nColNo, nColWidthAfterMin );
							} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						} // for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
					} // if we have colspan/rowspan, then make table larger, recompute row/column counts
					// step 3: initialize span info array
					aTable.SpanInfoArray_Init();
					POSITION posSpanRoot = listSpanRoots.GetHeadPosition();
					POSITION posSpanItem = listSpanItems.GetHeadPosition();
					for( ; posSpanRoot != NULL; )
					{
						CPoint ptSpanRootLocation = listSpanRoots.GetNext( posSpanRoot );
						CExtRichContentItem * pTableCellHI = listSpanItems.GetNext( posSpanItem );
						if( pTableCellHI->m_sizeComputedSpan.cx < 1 || pTableCellHI->m_sizeComputedSpan.cy < 1 )
							continue; // some incorrect span area intersection
						if( pTableCellHI->m_sizeComputedSpan.cx == 1 && pTableCellHI->m_sizeComputedSpan.cy == 1 )
							continue;
						aTable.SpanInfoArray_SetAt( ptSpanRootLocation.x, ptSpanRootLocation.y, pTableCellHI->m_sizeComputedSpan );
						INT nX, nY;
						for( nY = 0; nY < pTableCellHI->m_sizeComputedSpan.cy; nY ++ )
						{
							for( nX = 0; nX < pTableCellHI->m_sizeComputedSpan.cx; nX ++ )
							{
								if( nX == 0 && nY == 0 )
									continue;
								CSize sizeShiftSpan(
									- nX, // nX - pTableCellHI->m_sizeComputedSpan.cx + 1,
									- nY  // nY - pTableCellHI->m_sizeComputedSpan.cy + 1
									);
								__EXT_DEBUG_RICH_CONTENT_ASSERT( sizeShiftSpan.cx <= 0 && sizeShiftSpan.cy <= 0 );
								aTable.SpanInfoArray_SetAt( nX+ptSpanRootLocation.x, nY+ptSpanRootLocation.y, sizeShiftSpan );
							} // for( nX = 0; nX < pTableCellHI->m_sizeComputedSpan.cx ; nX ++ )
						} // for( nY = 0; nY < pTableCellHI->m_sizeComputedSpan.cy ; nY ++ )
						CSize sizeSpanTablePartMinPx =
							aTable.GetPartAreaRect(
								ptSpanRootLocation.x,
								ptSpanRootLocation.y,
								ptSpanRootLocation.x + pTableCellHI->m_sizeComputedSpan.cx - 1,
								ptSpanRootLocation.y + pTableCellHI->m_sizeComputedSpan.cy - 1,
								true
								).Size();
						if( sizeSpanTablePartMinPx.cx < pTableCellHI->m_sizeMaxChild.cx )
						{ // extend minimal column width in span region
							INT nDistributePx = pTableCellHI->m_sizeMaxChild.cx - sizeSpanTablePartMinPx.cx;
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nDistributePx > 0 );
							INT nPartPx = nDistributePx / pTableCellHI->m_sizeComputedSpan.cx;
							if( nPartPx > 0 )
							{
								for( nX = 0; nX < pTableCellHI->m_sizeComputedSpan.cx ; nX ++ )
								{
									LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nX + ptSpanRootLocation.x ];
									LONG nColWidthAfterMin = nColWidthBeforeMin + nPartPx;
									aTable.m_arrCWmin.SetAt( nX + ptSpanRootLocation.x, nColWidthAfterMin );
									LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nX + ptSpanRootLocation.x ];
									LONG nColWidthAfterCur = max( nColWidthBeforeCur, nColWidthAfterMin );
									if( nColWidthAfterCur != nColWidthBeforeCur )
										aTable.m_arrCWcur.SetAt( nX + ptSpanRootLocation.x, nColWidthAfterCur );
									nDistributePx -= nPartPx;
									__EXT_DEBUG_RICH_CONTENT_ASSERT( nDistributePx >= 0 );
								} // for( nX = 0; nX < pTableCellHI->m_sizeComputedSpan.cx ; nX ++ )
							} // if( nPartPx > 0 )
							for( nX = 0; nDistributePx > 0 && nX < pTableCellHI->m_sizeComputedSpan.cx ; nX ++ )
							{
								LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nX + ptSpanRootLocation.x ];
								LONG nColWidthAfterMin = nColWidthBeforeMin + 1;
								aTable.m_arrCWmin.SetAt( nX + ptSpanRootLocation.x, nColWidthAfterMin );
								LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nX + ptSpanRootLocation.x ];
								LONG nColWidthAfterCur = max( nColWidthBeforeCur, nColWidthAfterMin );
								if( nColWidthAfterCur != nColWidthBeforeCur )
									aTable.m_arrCWcur.SetAt( nX + ptSpanRootLocation.x, nColWidthAfterCur );
								nDistributePx --;
								__EXT_DEBUG_RICH_CONTENT_ASSERT( nDistributePx >= 0 );
							} // for( nX = 0; nDistributePx > 0 && nX < pTableCellHI->m_sizeComputedSpan.cx ; nX ++ )
						} // extend minimal column width in span region
					} // for( ; posSpanRoot != NULL; )

					// set m_arrWidthPercent
					for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
					{
						CExtRichTableRow * pRow = aTable.GetAt( nRowNo );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
							CExtRichContentItem * pTableCellHI = pRow->GetAt( nColNo );
							if( pTableCellHI == NULL )
								continue;
							CExtRichStyleDescription & styleNextForCell = pTableCellHI->GetEffectiveStyle();
							if( 0 < styleNextForCell.m_sizeWHP.cx && styleNextForCell.m_sizeWHP.cx <= 100 )
							{
								DOUBLE lfColP = DOUBLE(styleNextForCell.m_sizeWHP.cx) / 100.0;
								aTable.m_arrWidthPrecents.SetAt( nColNo, lfColP );
							} // if( 0 < styleNextForCell.m_sizeWHP.cx && styleNextForCell.m_sizeWHP.cx <= 100 )
						} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
					} // for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )

					// step 4: compute table size
					__EXT_DEBUG_RICH_CONTENT_ASSERT( m_sizePreCalc.cx == 0 && m_sizePreCalc.cy == 0 );
					if( sizeDim.cx > 1 && styleNext.m_sizeCellSpacing.cx >= 0 )
						m_sizePreCalc.cx += styleNext.m_sizeCellSpacing.cx * ( sizeDim.cx - 1 );
					if( sizeDim.cy > 1 && styleNext.m_sizeCellSpacing.cy >= 0 )
						m_sizePreCalc.cy += styleNext.m_sizeCellSpacing.cy * ( sizeDim.cy - 1 );
					if( bHaveSpanRoots )
					{
						__EXT_DEBUG_RICH_CONTENT_ASSERT( ! p_sia.IsEmpty() );
						INT nSpanIndex, nSpanCount = INT( p_sia->GetSize() );
						for( nSpanIndex = 0; nSpanIndex < nSpanCount; nSpanIndex ++ )
						{
							span_info_t & _si = p_sia->ElementAt( nSpanIndex );
							CSize sizeSpan( _si.m_sizeSpan );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( sizeSpan.cx > 1 || sizeSpan.cy > 1 );
							if( sizeSpan.cx > 1 )
							{
										//CRect _rcStartLayout( 0, 0, __EXT_RICH_CONTENT_BIG_EXTENT, __EXT_RICH_CONTENT_BIG_EXTENT );
										//_si.m_pRCI->DoSizePreCalc( dc, _rcStartLayout );
								LONG nX, nWidthPart = _si.m_pRCI->m_sizeMaxChild.cx / sizeSpan.cx, nRest = _si.m_pRCI->m_sizeMaxChild.cx % sizeSpan.cx;
								for( nX = 0; nX < sizeSpan.cx; nX ++ )
								{
									if( nX >= aTable.m_arrCWcur.GetSize() )
										continue;
									LONG nC = _si.m_ptSpan.x + nX;
									LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nC ];
									LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nC ];
									LONG nApplyWidthPart = ( nX < nRest ) ? ( nWidthPart + 1 ) : nWidthPart;
									LONG nColWidthAfterCur = max( nColWidthBeforeCur, nApplyWidthPart );
									LONG nColWidthAfterMin = max( nColWidthBeforeMin, nApplyWidthPart );
									if( nColWidthAfterCur != nColWidthBeforeCur )
										aTable.m_arrCWcur.SetAt( nC, nColWidthAfterCur );
									if( nColWidthAfterMin != nColWidthBeforeMin )
										aTable.m_arrCWmin.SetAt( nC, nColWidthAfterMin );
								}
							}
						}
					}
					for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
					{
						CExtRichTableRow * pRow = aTable.GetAt( nRowNo );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
						m_sizePreCalc.cy += pRow->m_nRowHeightCur;
						m_sizeMaxChild.cy += pRow->m_nRowHeightMin;
						int nRowWidthCur = 0, nRowWidthMin = 0;
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
// if( pRow->GetSize() >= nColNo )
// 	continue;
							CExtRichContentItem * pTableCellHI = pRow->GetAt( nColNo );
							LONG nColWidthCur = aTable.m_arrCWcur[ nColNo ];
							LONG nColWidthMin = aTable.m_arrCWmin[ nColNo ];
							CSize sizeSpan( 0, 0 );
							if( pTableCellHI != NULL )
							{
								sizeSpan = pTableCellHI->m_sizeComputedSpan;
								if( sizeSpan.cx == 1 )
								{
									pTableCellHI->m_sizePreCalc.cx = aTable.m_arrCWcur[ nColNo ];
									pTableCellHI->m_sizePreCalc.cy = pRow->m_nRowHeightCur;
									pTableCellHI->m_sizeMaxChild.cy = pRow->m_nRowHeightMin;
								}
							}
							if( sizeSpan.cx > 0 )
							{
								nRowWidthCur += nColWidthCur;
								nRowWidthMin += nColWidthMin;
							}
						} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						if( sizeDim.cx > 1 && styleNext.m_nBorderSpacingHoriz >= 0 && (styleNext.m_eBC == CExtRichStyleDescription::ebc_separate) )
						{
							nRowWidthCur += styleNext.m_nBorderSpacingHoriz * ( sizeDim.cx + 1 ); // !!! add border_spacing
							nRowWidthMin += styleNext.m_nBorderSpacingHoriz * ( sizeDim.cx + 1 ); // !!! add border_spacing
						}
						m_sizePreCalc.cx = max( m_sizePreCalc.cx, nRowWidthCur );
						m_sizeMaxChild.cx = max( m_sizeMaxChild.cx, nRowWidthMin );
					} // for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
// 					if( sizeDim.cx > 1 && styleNext.m_sizeCellSpacing.cx >= 0 )
// 						m_sizePreCalc.cx += styleNext.m_sizeCellSpacing.cx * ( sizeDim.cx - 1 );
// 					if( sizeDim.cy > 1 && styleNext.m_sizeCellSpacing.cy >= 0 )
// 						m_sizePreCalc.cy += styleNext.m_sizeCellSpacing.cy * ( sizeDim.cy - 1 );

// 					if( sizeDim.cx > 1 && styleNext.m_nBorderSpacingHoriz >= 0 && (styleNext.m_eBC == CExtRichStyleDescription::ebc_separate) )
// 						m_sizePreCalc.cx += styleNext.m_nBorderSpacingHoriz * ( sizeDim.cx + 1 ); // !!! add border_spacing
					if( sizeDim.cy > 1 && styleNext.m_nBorderSpacingVert >= 0 && (styleNext.m_eBC == CExtRichStyleDescription::ebc_separate) )
						m_sizePreCalc.cy += styleNext.m_nBorderSpacingVert * ( sizeDim.cy + 1 ); // !!! add border_spacing
				}
			break; // case CExtRichStyleDescription::ed_table, case CExtRichStyleDescription::ed_inline_table
			} // switch( eD )
		} // else 
	} // case __EHIT_GENERIC_TAG
	break;
	case __EHIT_TITLE:
	case __EHIT_STYLE:
	case __EHIT_SCRIPT:
	case __EHIT_META:
	case __EHIT_LINK:
	break;
#ifdef _DEBUG
	default:
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
	break;
#endif // _DEBUG
	} // switch( m_eType )

	//m_bEwstProcessingComplete = true;

	if( m_thSizeWH.cx >= 0 )
	{
		m_sizeMaxChild.cx = max( m_sizeMaxChild.cx, m_thSizeWH.cx );
		m_sizePreCalc.cx  = max( m_sizePreCalc.cx,  m_thSizeWH.cx );
	}
	if( m_thSizeWH.cy >= 0 )
	{
		m_sizeMaxChild.cy = max( m_sizeMaxChild.cy, m_thSizeWH.cy );
		m_sizePreCalc.cy  = max( m_sizePreCalc.cy,  m_thSizeWH.cy );
	}

	if( _IsStyleOwner() )
	{
		CExtRichStyleDescription::e_display_t eD_Table = GetDisplay();
		if( styleNext.m_sizeWH.cx >= 0 )
		{
			m_sizePreCalc.cx = /*m_sizeMaxChild.cx = */styleNext.m_sizeWH.cx;
			if( m_eType == __EHIT_GENERIC_TAG && QueryGenericTagName() == _T("img") )
				m_sizeMaxChild.cx = styleNext.m_sizeWH.cx;
		}
		if( styleNext.m_sizeWH.cy >= 0 )
		{
			if(		eD_Table == CExtRichStyleDescription::ed_table
				||	eD_Table == CExtRichStyleDescription::ed_inline_table
				)
			{
				m_sizePreCalc.cy = max( m_sizePreCalc.cy, styleNext.m_sizeWH.cy );
				m_sizeMaxChild.cy = max( m_sizeMaxChild.cy, styleNext.m_sizeWH.cy );
			}
			else
			{
				m_sizePreCalc.cy = m_sizeMaxChild.cy = styleNext.m_sizeWH.cy;
				if( m_eType == __EHIT_GENERIC_TAG && QueryGenericTagName() == _T("img") )
					m_nHelperTmAscent = m_sizePreCalc.cy;
			}
		}
		m_sizePreCalc.cx = max( m_sizePreCalc.cx, nMaxFloatingChildWidth );
		CSize sizeOuter(
			  styleNext.m_rcBorder.left + styleNext.m_rcBorder.right
			+ styleNext.m_rcPadding.left + styleNext.m_rcPadding.right
			+ styleNext.m_rcCellPadding.left + styleNext.m_rcCellPadding.right
			,
			  styleNext.m_rcBorder.top + styleNext.m_rcBorder.bottom
			+ styleNext.m_rcPadding.top + styleNext.m_rcPadding.bottom
			+ styleNext.m_rcCellPadding.top + styleNext.m_rcCellPadding.bottom
			);
		CExtRichStyleDescription::e_position_t eP = GetPosition();
		if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
		{
			sizeOuter.cx += styleNext.m_rcMargin.left + styleNext.m_rcMargin.right;
			sizeOuter.cy += styleNext.m_rcMargin.top + styleNext.m_rcMargin.bottom;
		}

		m_sizePreCalc.cx  += sizeOuter.cx;
		m_sizePreCalc.cy  += sizeOuter.cy;
	//	m_sizeMaxChild.cx += sizeOuter.cx; // - styleNext.m_rcCellPadding.left - styleNext.m_rcCellPadding.right;
	//	m_sizeMaxChild.cy += sizeOuter.cy; // - styleNext.m_rcCellPadding.top - styleNext.m_rcCellPadding.bottom;

		if( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL )
		{
			if( styleNext.m_esbtH == CExtRichStyleDescription::esbt_visible )
				m_sizePreCalc.cy  += Scrolling_GetHorizontalScrollBarHeight();
			if( styleNext.m_esbtV == CExtRichStyleDescription::esbt_visible )
				m_sizePreCalc.cx  += Scrolling_GetVerticalScrollBarWidth();
		}
		m_sizePreCalc.cx += sizeDock.cx;
		m_sizePreCalc.cy += sizeDock.cy;
		if( m_eType == __EHIT_GENERIC_TAG )
		{
			if( styleNext.m_nMaxHeight >= 0 )
				m_sizePreCalc.cy = min( m_sizePreCalc.cy, styleNext.m_nMaxHeight );
			if( styleNext.m_nMaxWidth >= 0 )
				m_sizePreCalc.cx = min( m_sizePreCalc.cx, styleNext.m_nMaxWidth );
			if( styleNext.m_nMinHeight >= 0 )
				m_sizePreCalc.cy = max( m_sizePreCalc.cy, styleNext.m_nMinHeight );
			if( styleNext.m_nMinWidth >= 0 )
				m_sizePreCalc.cx = max( m_sizePreCalc.cx, styleNext.m_nMinWidth );
		}
		if( styleNext.m_nSpacerModeMinWidth != 0 )
			m_sizePreCalc.cx = max( m_sizePreCalc.cx, styleNext.m_nSpacerModeMinWidth );

		if( styleNext.m_sizeWH.cx >= 0 )
			m_sizeMaxChild.cx = max( m_sizeMaxChild.cx, styleNext.m_sizeWH.cx );
		if( styleNext.m_sizeWH.cy >= 0 )
			m_sizeMaxChild.cy = max( m_sizeMaxChild.cy, styleNext.m_sizeWH.cy );

		if( styleNext.m_sizeWH.cx >= 0 )
			m_sizePreCalc.cx = max( m_sizePreCalc.cx, styleNext.m_sizeWH.cx );
		if( styleNext.m_sizeWH.cy >= 0 )
			m_sizePreCalc.cy = max( m_sizePreCalc.cy, styleNext.m_sizeWH.cy );
	} // if( _IsStyleOwner() )
}

void CExtRichContentItem::DoLayout_JustifiedLine(
	CDC & dc, const CRect & rcStartLayout,
	LONG nWidthOfLine, POSITION posWalkLineSaved, POSITION posLineEOF,
	CTypedPtrList < CPtrList, CExtRichContentItem * >  & _listItems, bool bFirstLine,
	const CExtRichStyleDescription & styleNext
	)
{
	dc;
	if( nWidthOfLine >= rcStartLayout.Width() )
		return;
	// compose line layout first
POSITION posWalkLine = posWalkLineSaved;
CTypedPtrList < CPtrList, CExtRichContentItem * >  _listLineLayout;
bool bPreviousSpace = true;
	for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
	{
		CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		if( pRCI->IsParagraphItem() )
			break;
		if( pRCI->m_rcLayout.IsRectEmpty() )
			continue;
		pRCI->m_bHelperWordStartItem = false;
		if(		bPreviousSpace
			&&	(	pRCI->m_eType == __EHIT_TEXT_RANGE
				||	pRCI->IsNoWrapSequence()
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
				)
			)
		{
			_listLineLayout.AddTail( pRCI );
			bPreviousSpace = false;
			pRCI->m_bHelperWordStartItem = true;
		}
		if( pRCI->m_eType == __EHIT_TEXT_SPACE )
			bPreviousSpace = true;
	}

LONG nWordCount = LONG( _listLineLayout.GetCount() );
	if( nWordCount <= 1 )
		return;

	// do justify alignment
LONG nAvailSpace = rcStartLayout.Width() - nWidthOfLine - ( bFirstLine ? styleNext.m_nParaIndent : 0 );
	if( nAvailSpace < 0 )
		return;
LONG nSpaceCount = nWordCount - 1;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nSpaceCount >= 1 );
LONG nFixedSpace = nAvailSpace / nSpaceCount;
LONG nRestSpace  = nAvailSpace % nSpaceCount;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nFixedSpace >= 0 && nRestSpace >= 0 );
	if( nFixedSpace == 0 && nRestSpace == 0 )
		return;

	// distribute available space
LONG nShift = 0;
POSITION posWS = _listLineLayout.GetHeadPosition();
	for( ; posWS != NULL ; )
	{
		CExtRichContentItem * pRCI = _listLineLayout.GetNext( posWS );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		// apply shift to range of a single word
		POSITION posX = _listItems.Find( pRCI ), posAlignRestSpaces = NULL;
		__EXT_DEBUG_RICH_CONTENT_ASSERT( posX != NULL );
		for( ; posX != NULL;  )
		{
			POSITION posSavedGlobal = posX;
			CExtRichContentItem * pShiftHI = _listItems.GetNext( posX );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pShiftHI != NULL );
			if(		pShiftHI != pRCI
				&&	pShiftHI->m_bHelperWordStartItem
				)
				break;
			if( pShiftHI->IsParagraphItem() )
				break;
			if( pShiftHI->m_rcLayout.IsRectEmpty() )
				continue;
//			pShiftHI->m_rcLayout.OffsetRect( nShift, 0 );
			pShiftHI->OffsetSubTree( CSize(nShift, 0 ), true, true );

			if( posAlignRestSpaces == NULL && pShiftHI->m_eType == __EHIT_TEXT_SPACE )
				posAlignRestSpaces = posSavedGlobal;
		}
		// align spaces after word
		CExtRichContentItem * pLastWalkSpaceHI = NULL;
		for( ; posAlignRestSpaces != NULL; )
		{
			CExtRichContentItem * pRCI = _listItems.GetNext( posAlignRestSpaces );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			if(		pRCI->m_eType == __EHIT_TEXT_RANGE
				||	pRCI->IsNoWrapSequence()
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
				||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
				)
			{
				if( pLastWalkSpaceHI != NULL )
				{
					pLastWalkSpaceHI->m_rcLayout.right = pRCI->m_rcLayout.left + nShift + nFixedSpace;
					if( nRestSpace > 0 )
						pLastWalkSpaceHI->m_rcLayout.right += 1;
				}
				break;
			}
			pLastWalkSpaceHI = pRCI;
		}
		nShift += nFixedSpace;
		if( nRestSpace > 0 )
		{
			nShift ++;
			nRestSpace --;
		}
	} // for( ; posWS != NULL ; )
}

CExtRichStyleDescription::e_ui_sb_type_t CExtRichContentItem::Scrolling_GetEffectiveSBT() const { return m_layout.Scrolling_GetEffectiveSBT( this ); }
LONG CExtRichContentItem::Scrolling_GetHorizontalScrollBarHeight()                              { return m_layout.Scrolling_GetHorizontalScrollBarHeight( this ); }
LONG CExtRichContentItem::Scrolling_GetVerticalScrollBarWidth()                                 { return m_layout.Scrolling_GetVerticalScrollBarWidth( this ); }

void CExtRichContentItem::DoLayout( CDC & dc, const CRect & rcStartLayout, CExtRichContentItem * pRCIFA, bool bOverflowComputed )
{
	if( ! IsParticipantOfLayout() )
		return;
bool bThisIsStyleOwner = _IsStyleOwner();
CRect _rcStartLayout( rcStartLayout );
const CExtRichStyleDescription & styleNext = GetEffectiveStyle();
	if( bThisIsStyleOwner )
	{
		if( styleNext.m_nMaxWidth >= 0 )
		{
			if( _rcStartLayout.Width() > styleNext.m_nMaxWidth )
				_rcStartLayout.right = _rcStartLayout.left + styleNext.m_nMaxWidth;
		}
		if( styleNext.m_nMaxHeight >= 0 )
		{
			if( _rcStartLayout.Height() > styleNext.m_nMaxHeight )
				_rcStartLayout.bottom = _rcStartLayout.top + styleNext.m_nMaxHeight;
		}
		if( styleNext.m_nMinWidth >= 0 )
		{
			if( _rcStartLayout.Width() < styleNext.m_nMinWidth )
				_rcStartLayout.right = _rcStartLayout.left + styleNext.m_nMinWidth;
		}
		if( styleNext.m_nSpacerModeMinWidth != 0 )
		{
			if( _rcStartLayout.Width() < styleNext.m_nSpacerModeMinWidth )
				_rcStartLayout.right = _rcStartLayout.left + styleNext.m_nSpacerModeMinWidth;
		}
		if( styleNext.m_nMinHeight >= 0 )
		{
			if( _rcStartLayout.Height() < styleNext.m_nMinHeight )
				_rcStartLayout.bottom = _rcStartLayout.top + styleNext.m_nMinHeight;
		}
	} // if( bThisIsStyleOwner )
CRect rcLayout( _rcStartLayout );
CExtRichStyleDescription::e_position_t eP = GetPosition();
bool bHaveExactWidthSpec = false, bHaveExactHeightSpec = false;
	if( bThisIsStyleOwner )
	{
		if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )
		{
			if( LPVOID(pRCIFA) != LPVOID(this) )
				return;
			CRect rcOuter = styleNext.m_rcOuter;
			if( m_pParent != NULL && ( m_pParent->m_eType == __EHIT_GENERIC_TAG || m_pParent->m_eType == __EHIT_ROOT ) )
			{
				if( styleNext.m_rcOuterP.left != __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
					rcOuter.left = m_pParent->m_rcLayout.left + ::MulDiv( m_pParent->m_rcLayout.Width(), styleNext.m_rcOuterP.left, 100 );
				if( styleNext.m_rcOuterP.top != __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
					rcOuter.top = m_pParent->m_rcLayout.top + ::MulDiv( m_pParent->m_rcLayout.Height(), styleNext.m_rcOuterP.top, 100 );
				if( styleNext.m_rcOuterP.right != __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
					rcOuter.right = m_pParent->m_rcLayout.right - ::MulDiv( m_pParent->m_rcLayout.Width(), styleNext.m_rcOuterP.right, 100 );
				if( styleNext.m_rcOuterP.bottom != __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
					rcOuter.bottom = m_pParent->m_rcLayout.bottom - ::MulDiv( m_pParent->m_rcLayout.Height(), styleNext.m_rcOuterP.bottom, 100 );
			}
			if( rcOuter.left == __EXT_RICH_CONTENT_NEGATIVE_UNUSED || rcOuter.top == __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
			{
				CExtRichContentItem * pWalkParentRCI = m_pParent;
				for( ; pWalkParentRCI != NULL; pWalkParentRCI = pWalkParentRCI->m_pParent )
				{
					CExtRichStyleDescription::e_position_t eParentP = pWalkParentRCI->GetPosition();
					if( ! ( eParentP == CExtRichStyleDescription::ep_absolute || eParentP == CExtRichStyleDescription::ep_fixed ) )
						continue;
					const CExtRichStyleDescription & styleParent = pWalkParentRCI->GetEffectiveStyle();
					if( rcOuter.left == __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
						rcOuter.left = pWalkParentRCI->m_rcLayout.left + styleParent.m_rcBorder.left + styleParent.m_rcMargin.left;
					if( rcOuter.top == __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
						rcOuter.top = pWalkParentRCI->m_rcLayout.top + styleParent.m_rcBorder.top + styleParent.m_rcMargin.top;
					if( ! ( rcOuter.left == __EXT_RICH_CONTENT_NEGATIVE_UNUSED || rcOuter.top == __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) )
						break;
				}
			}
			else if( eP == CExtRichStyleDescription::ep_absolute )
			{
				CExtRichContentItem * pWalkParentRCI = m_pParent;
				for( ; pWalkParentRCI != NULL; pWalkParentRCI = pWalkParentRCI->m_pParent )
				{
					CExtRichStyleDescription::e_position_t eParentP = pWalkParentRCI->GetPosition();
					if( ! ( eParentP == CExtRichStyleDescription::ep_absolute || eParentP == CExtRichStyleDescription::ep_fixed ) )
						continue;
					const CExtRichStyleDescription & styleParent = pWalkParentRCI->GetEffectiveStyle();
					if( rcOuter.left == __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
						rcOuter.left  = pWalkParentRCI->m_rcLayout.left + styleParent.m_rcBorder.left + styleParent.m_rcMargin.left;
					else
						rcOuter.left += pWalkParentRCI->m_rcLayout.left + styleParent.m_rcBorder.left + styleParent.m_rcMargin.left;
					if( rcOuter.top == __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
						rcOuter.top  = pWalkParentRCI->m_rcLayout.top + styleParent.m_rcBorder.top + styleParent.m_rcMargin.top;
					else
						rcOuter.top += pWalkParentRCI->m_rcLayout.top + styleParent.m_rcBorder.top + styleParent.m_rcMargin.top;
					break;
				}
			}

			if( eP == CExtRichStyleDescription::ep_fixed )
				CExtRichStyleDescription::stat_impl_ApplyRectUV( rcLayout, rcOuter );
			else if( eP == CExtRichStyleDescription::ep_absolute )
			{
				if( m_pParent != NULL && ( m_pParent->m_eType == __EHIT_GENERIC_TAG || m_pParent->m_eType == __EHIT_ROOT ) )
				{
					if( rcLayout.left == __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
						rcLayout.left = m_pParent->m_rcLayout.left;
					if( rcLayout.top == __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
						rcLayout.top = m_pParent->m_rcLayout.top;
				}
				CRect rcOffsetCalc( 0, 0, rcLayout.Width(), rcLayout.Height() );
				CExtRichStyleDescription::stat_impl_ApplyRectUV( rcOffsetCalc, rcOuter );
				rcLayout.SetRect(
					rcLayout.left + rcOffsetCalc.left,
					rcLayout.top + rcOffsetCalc.top,
					rcLayout.left + rcOffsetCalc.left + rcOffsetCalc.Width(),
					rcLayout.top + rcOffsetCalc.top + rcOffsetCalc.Height()
					);
			}
			rcLayout.OffsetRect( styleNext.m_rcMargin.TopLeft() );
		} // if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )

		CExtRichStyleDescription::e_display_t eD_TD = GetDisplay();
		if( eD_TD != CExtRichStyleDescription::ed_table_cell )
		{
			LONG nWidthBefore = rcLayout.Width();
			LONG nWidthAfter = nWidthBefore;
			if( styleNext.m_sizeWHP.cx >= 0 || styleNext.m_sizeWH.cx >= 0 )
			{
				bHaveExactWidthSpec = true;
				if( styleNext.m_sizeWHP.cx >= 0 )
				{ // if we gave width=some% in percents
					__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= styleNext.m_sizeWHP.cx && styleNext.m_sizeWHP.cx <= 100 );
					nWidthAfter = ::MulDiv( nWidthBefore, styleNext.m_sizeWHP.cx, 100 );
				} // if we gave width=some% in pixels
				else if( styleNext.m_sizeWH.cx >= 0 )
					nWidthAfter = styleNext.m_sizeWH.cx;
				if(		styleNext.m_eO != CExtRichStyleDescription::eo_scroll
					&&	styleNext.m_eO != CExtRichStyleDescription::eo_hidden
					&&	styleNext.m_eO != CExtRichStyleDescription::eo_auto
					)
					nWidthAfter = max( nWidthAfter, m_sizeMaxChild.cx );
			} // if( styleNext.m_sizeWHP.cx >= 0 || styleNext.m_sizeWH.cx >= 0 )
			LONG nShiftX = 0;
			if( nWidthAfter != nWidthBefore )
			{
				switch( styleNext.m_eaH )
				{
				case CExtRichStyleDescription::eahCenter:
					nShiftX = ( nWidthBefore - nWidthAfter ) / 2;
					nShiftX = ( nShiftX < 0 ) ? 0 : nShiftX;
					rcLayout.left += nShiftX;
				break;
				case CExtRichStyleDescription::eahRight:
					nShiftX = nWidthBefore - nWidthAfter;
					nShiftX = ( nShiftX < 0 ) ? 0 : nShiftX;
					rcLayout.left += nShiftX;
				break;
				} // switch( styleNext.m_eaH )
				rcLayout.right = rcLayout.left + nWidthAfter;
			} // if( nWidthAfter != nWidthBefore )

			if( ! m_layout.m_bDrawTextInvocation )
			{
				LONG nHeightBefore = rcLayout.Height();
				LONG nHeightAfter = nHeightBefore;
				if( styleNext.m_sizeWHP.cy >= 0 || styleNext.m_sizeWH.cy >= 0 )
				{
					bHaveExactHeightSpec = true;
					if( styleNext.m_sizeWHP.cy >= 0 )
					{ // if we gave width=some% in percents
						__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= styleNext.m_sizeWHP.cy && styleNext.m_sizeWHP.cy <= 100 );
						nHeightAfter = ::MulDiv( nHeightBefore, styleNext.m_sizeWHP.cy, 100 );
					} // if we gave width=some% in pixels
					else if( styleNext.m_sizeWH.cy >= 0 )
					{
						// nHeightAfter = styleNext.m_sizeWH.cy;
						LONG nMinHeight = (styleNext.m_rcBorder.top + styleNext.m_rcBorder.bottom );
						if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
							nMinHeight += styleNext.m_rcMargin.top + styleNext.m_rcMargin.bottom;
						nHeightAfter = max( styleNext.m_sizeWH.cy, nMinHeight );
					}
					if(		styleNext.m_eO != CExtRichStyleDescription::eo_scroll
						&&	styleNext.m_eO != CExtRichStyleDescription::eo_hidden
						&&	styleNext.m_eO != CExtRichStyleDescription::eo_auto
						)
						nHeightAfter = max( nHeightAfter, m_sizeMaxChild.cy );
				} // if( styleNext.m_sizeWHP.cy >= 0 || styleNext.m_sizeWH.cy >= 0 )
				LONG nShiftY = 0;
				if( nHeightAfter != nHeightBefore )
				{
					switch( styleNext.m_eaV )
					{
					case CExtRichStyleDescription::eahCenter:
						nShiftY = ( nHeightBefore - nHeightAfter ) / 2;
						nShiftY = ( nShiftY < 0 ) ? 0 : nShiftY;
						rcLayout.top += nShiftY;
					break;
					case CExtRichStyleDescription::eahRight:
						nShiftY = nHeightBefore - nHeightAfter;
						nShiftY = ( nShiftY < 0 ) ? 0 : nShiftY;
						rcLayout.top += nShiftY;
					break;
					} // switch( styleNext.m_eaV )
					rcLayout.bottom = rcLayout.top + nHeightAfter;
				} // if( nHeightAfter != nHeightBefore )
			} // if( ! m_layout.m_bDrawTextInvocation )
		} // if( eD_TD != CExtRichStyleDescription::ed_table_cell )
	} // if( bThisIsStyleOwner )
bool bCheckSbInfoH = false, bCheckSbInfoV = false;
CRect rcLayoutExactNC( rcLayout );
	if( bThisIsStyleOwner )
	{
		if( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL )
		{
			if(		styleNext.m_esbtH == CExtRichStyleDescription::esbt_visible
				||	( bOverflowComputed && styleNext.m_eO == CExtRichStyleDescription::eo_scroll && m_sizeOverflow.cx > 0 )
				)
			{
				bCheckSbInfoH = true;
				rcLayout.DeflateRect( 0, 0, 0, Scrolling_GetHorizontalScrollBarHeight() );
			}
			if(		styleNext.m_esbtV == CExtRichStyleDescription::esbt_visible
				||	( bOverflowComputed && styleNext.m_eO == CExtRichStyleDescription::eo_scroll && m_sizeOverflow.cy > 0 )
				)
			{
				bCheckSbInfoV = true;
				rcLayout.DeflateRect( 0, 0, Scrolling_GetVerticalScrollBarWidth(), 0 );
			}
		}
		rcLayout.DeflateRect( &styleNext.m_rcCellPadding );
		if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
			rcLayout.DeflateRect( &styleNext.m_rcMargin );
		rcLayout.DeflateRect( &styleNext.m_rcBorder );
		rcLayout.DeflateRect( &styleNext.m_rcPadding );
		if( m_listDS.GetCount() > 0 )
		{
			POSITION posSide = m_listDS.GetHeadPosition();
			for( ; posSide != NULL; )
			{
				CExtRichContentItem * pSideRCI = m_listDS.GetNext( posSide );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pSideRCI != NULL );
				const CExtRichStyleDescription & styleRCI = pSideRCI->GetEffectiveStyle();
				__EXT_DEBUG_RICH_CONTENT_ASSERT( styleRCI.m_eD == CExtRichStyleDescription::ed_ui_dock );
				__EXT_DEBUG_RICH_CONTENT_ASSERT(
						styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_left
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_left
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_right
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_right
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_top
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_top
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_bottom
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_bottom
					);
				CRect rcSideLayout( rcLayout );
				switch( styleRCI.m_eDock )
				{
				case CExtRichStyleDescription::e_ui_dock_left:
				case CExtRichStyleDescription::e_ui_dock_pre_left:
					rcSideLayout.right = rcSideLayout.left + pSideRCI->m_sizePreCalc.cx;
					rcLayout.left += pSideRCI->m_sizePreCalc.cx;
				break;
				case CExtRichStyleDescription::e_ui_dock_right:
				case CExtRichStyleDescription::e_ui_dock_pre_right:
					rcSideLayout.left = rcSideLayout.right - pSideRCI->m_sizePreCalc.cx;
					rcLayout.right -= pSideRCI->m_sizePreCalc.cx;
				break;
				case CExtRichStyleDescription::e_ui_dock_top:
				case CExtRichStyleDescription::e_ui_dock_pre_top:
					rcSideLayout.bottom = rcSideLayout.top + pSideRCI->m_sizePreCalc.cy;
					rcLayout.top += pSideRCI->m_sizePreCalc.cy;
				break;
				case CExtRichStyleDescription::e_ui_dock_bottom:
				case CExtRichStyleDescription::e_ui_dock_pre_bottom:
					rcSideLayout.top = rcSideLayout.bottom - pSideRCI->m_sizePreCalc.cy;
					rcLayout.bottom -= pSideRCI->m_sizePreCalc.cy;
				break;
				} // switch( styleRCI.m_eDock )
				pSideRCI->DoLayout( dc, rcSideLayout, pRCIFA, false );
			} // for( ; posSide != NULL; )
		} // if( m_listDS.GetCount() > 0 )
		if( m_listDF.GetCount() > 0 )
		{
			POSITION posFill = m_listDF.GetHeadPosition();
			for( ; posFill != NULL; )
			{
				CExtRichContentItem * pFillRCI = m_listDF.GetNext( posFill );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pFillRCI != NULL );
				const CExtRichStyleDescription & styleRCI = pFillRCI->GetEffectiveStyle();
				__EXT_DEBUG_RICH_CONTENT_ASSERT( styleRCI.m_eD == CExtRichStyleDescription::ed_ui_dock );
				__EXT_DEBUG_RICH_CONTENT_ASSERT(
						styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_unspecified
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_fill
					||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_fill
					);
				styleRCI;
				pFillRCI->DoLayout( dc, rcLayout, pRCIFA, false );
			} // for( ; posFill != NULL; )
		} // if( m_listDF.GetCount() > 0 )
	} // if( bThisIsStyleOwner )
CRect rcLayoutExact( rcLayout );
LONG nHelperTmInternalLeadingMax_LastP = 0L;
bool bWalkChildren = false, bComputeUnionLayout = false, bFullWidthParagraphLayout = false, bComputeUnionLayoutForTableParts = false;
	switch( m_eType )
	{
// 	case __EHIT_ROOT:
// 	{
// 		bWalkChildren = bComputeUnionLayout = true;
// 	}
	break;
	case __EHIT_TEXT_RANGE:
	case __EHIT_TEXT_SPACE:
	break;
	case __EHIT_ROOT:
		bWalkChildren = bComputeUnionLayout = true;
	// continue falling here...
	case __EHIT_GENERIC_TAG:
	{
		bComputeUnionLayout = true;
		if(		IsParagraphItem()
			||	GetDisplay() == CExtRichStyleDescription::ed_inline_block
			)
		{
			if(		( ! m_layout.m_bDrawTextInvocation )
				&&	( ! bHaveExactWidthSpec )
				&&	GetDisplay() == CExtRichStyleDescription::ed_block
				&&	styleNext.m_eF == CExtRichStyleDescription::ef_none
				&&	eP == CExtRichStyleDescription::ep_static
				)
				bFullWidthParagraphLayout = true;
			bool bSingleSpaceMode = styleNext.ewstIsSingleSpaceMode();
			bool bLineWrapMode = styleNext.ewstIsLineWrapMode();
			bool bHaveInitialUnionLayout = false;
			CTypedPtrList < CPtrList, CExtRichContentItem * > _listItems;
			ComputeLinearListForParagraph( _listItems );
			POSITION pos = _listItems.GetHeadPosition();
			POSITION posLineStart = pos, posLineStartTemp = NULL;
			POSITION posCompositeWord = pos;
			CRect rcPrevious( rcLayout.left, rcLayout.top, rcLayout.left, rcLayout.top );
			LONG nMaxHeight = 0, nHelperTmAscentMax = 0, nHelperTmInternalLeadingMax = 0 /*, nMetricForBR = rcLayout.top*/ ;
// 				LONG nSubSupMaxHeight = 0, nSubSupHelperTmAscentMax = 0, nSubSupHelperTmInternalLeadingMax = 0;
// 				LONG nSubSupMaxShift = 0;
			if( styleNext.m_nParaIndent > 0 )
				rcPrevious.right += styleNext.m_nParaIndent;

			CRect rcStartLine( rcPrevious.left, rcPrevious.top, rcPrevious.left, rcPrevious.top );

POSITION posLineEOF = pos, posLineEOF_Temp = pos;
bool bOffset = false;
bool bFirstLine = true;
bool bForceLineStartMode = true;
bool bDoLineAreaUnion = false;
CList < CExtRichContentItem *, CExtRichContentItem * > listFloatLeft, listFloatRight;
CExtRichContentItem * _pRCI_previous = NULL;
			for( ; pos != NULL; )
			{
				posLineEOF = pos;
				posLineEOF_Temp = pos;

				CExtRichContentItem * pRCI = _listItems.GetNext( pos );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );

				CExtRichContentItem * pFtRCI = pRCI;
				const CExtRichStyleDescription & styleElemFT = pFtRCI->GetEffectiveStyle();
				if(		styleElemFT.m_eF == CExtRichStyleDescription::ef_left
					||	styleElemFT.m_eF == CExtRichStyleDescription::ef_right
					)
				{
					CList < CExtRichContentItem *, CExtRichContentItem * > & listFloat =
						( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
						? listFloatLeft : listFloatRight;
					if(		pFtRCI->GetDisplay() != CExtRichStyleDescription::ed_none
						&&	listFloat.Find( pFtRCI ) == NULL
						)
					{
						listFloat.AddTail( pFtRCI );
						INT nTopLineY = rcLayout.top;
						INT nBottomLineY = nTopLineY + pFtRCI->m_sizePreCalc.cy;
						CRect rcFtElem;
						if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
							rcFtElem.SetRect( rcLayout.left, nTopLineY, rcLayout.left + pFtRCI->m_sizePreCalc.cx, nBottomLineY );
						else
							rcFtElem.SetRect( rcLayout.right - pFtRCI->m_sizePreCalc.cx, nTopLineY, rcLayout.right, nBottomLineY );
						pFtRCI->m_rcLayout = rcFtElem;
						pFtRCI->DoLayout( dc, rcFtElem, pRCIFA, false );
						rcFtElem.bottom = rcFtElem.top + pFtRCI->m_rcLayout.Height();
						if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
							rcFtElem.right = rcFtElem.left + pFtRCI->m_rcLayout.Width();
						else
							rcFtElem.left = rcFtElem.right - pFtRCI->m_rcLayout.Width();
						pFtRCI->m_rcLayout = rcFtElem;
						if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
							rcLayout.left += pFtRCI->m_rcLayout.Width();
						else
							rcLayout.right -= pFtRCI->m_rcLayout.Width();
						bForceLineStartMode = true;
						pos = posLineStart;
						rcPrevious.left = rcPrevious.right = rcLayout.left;
						rcStartLine = rcPrevious;
						CSize sizeShift( 0, 0 );
						if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
						{
							if( rcFtElem.right > rcLayout.right && ( ! listFloatRight.IsEmpty() ) )
							{
								CExtRichContentItem * pRelRCI = listFloatRight.GetTail();
								sizeShift.cy = pRelRCI->m_rcLayout.bottom - rcFtElem.top;
							}
						}
						else
						{
							if( rcFtElem.left < rcLayout.left && ( ! listFloatLeft.IsEmpty() ) )
							{
								CExtRichContentItem * pRelRCI = listFloatLeft.GetTail();
								sizeShift.cy = pRelRCI->m_rcLayout.bottom - rcFtElem.top;
							}
						}
						if( sizeShift.cy > 0 )
						{
							pFtRCI->OffsetSubTree( sizeShift, true, true, true );
							rcStartLine.top += sizeShift.cy;
							rcStartLine.bottom += sizeShift.cy;
							rcLayout.top += sizeShift.cy;
						}
					}
					continue;
				}

//		if( ( styleNext.m_nWordSapcing > __EXT_RICH_CONTENT_NEGATIVE_UNUSED ) )
//			int iad = 13;

				if( bForceLineStartMode )
				{
					bForceLineStartMode = false;
//					bFirstLine = false;
 					nMaxHeight = 0;
// 					nHelperTmAscentMax = 0;
// 					nHelperTmInternalLeadingMax = 0;
//					nMaxHeight = pRCI->m_sizePreCalc.cy;
					nHelperTmAscentMax = pRCI->GetHelperTmAscent();
					nHelperTmInternalLeadingMax = pRCI->GetHelperTmInternalLeading();
					pRCI->m_rcLayout.left = rcPrevious.right;
					pRCI->m_rcLayout.top = rcPrevious.top;
					pRCI->m_rcLayout.right = rcPrevious.right + pRCI->m_sizePreCalc.cx;
					pRCI->m_rcLayout.bottom = rcPrevious.top + pRCI->m_sizePreCalc.cy;
						//rcPrevious = pRCI->m_rcLayout;
						//bOffset = false;
						//_pRCI_previous = pRCI;
						posLineStart = posLineEOF;
				}

POSITION posPostLineProcessing = NULL;
POSITION posTemp = posLineEOF;
				posCompositeWord = pos;
				CExtRichContentItem * pSavedHI = pRCI;
				CTypedPtrList < CPtrList, CExtRichContentItem * >  _listWordItems;
				//_listWordItems.RemoveAll();
				int nWidthLineItems = 0;
				for( ; ; )
				{
					bool bImg =
						(	pSavedHI->QueryGenericTagName() == _T("img")
						||	pSavedHI->IsNoWrapSequence()
//						||	pSavedHI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
						) ? true : false;

					CExtRichContentItem * pFtRCI = pSavedHI;
					const CExtRichStyleDescription & styleElemFT = pFtRCI->GetEffectiveStyle();
					if(		styleElemFT.m_eF == CExtRichStyleDescription::ef_left
						||	styleElemFT.m_eF == CExtRichStyleDescription::ef_right
						)
					{
						CList < CExtRichContentItem *, CExtRichContentItem * > & listFloat =
							( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
							? listFloatLeft : listFloatRight;
						if(		pFtRCI->GetDisplay() != CExtRichStyleDescription::ed_none
							&&	listFloat.Find( pFtRCI ) == NULL
							)
						{
							listFloat.AddTail( pFtRCI );
							INT nTopLineY = rcLayout.top;
							INT nBottomLineY = nTopLineY + pFtRCI->m_sizePreCalc.cy;
							CRect rcFtElem;
							if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
								rcFtElem.SetRect( rcLayout.left, nTopLineY, rcLayout.left + pFtRCI->m_sizePreCalc.cx, nBottomLineY );
							else
								rcFtElem.SetRect( rcLayout.right - pFtRCI->m_sizePreCalc.cx, nTopLineY, rcLayout.right, nBottomLineY );
							pFtRCI->m_rcLayout = rcFtElem;
							pFtRCI->DoLayout( dc, rcFtElem, pRCIFA, false );
							rcFtElem.bottom = rcFtElem.top + pFtRCI->m_rcLayout.Height();
							if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
								rcFtElem.right = rcFtElem.left + pFtRCI->m_rcLayout.Width();
							else
								rcFtElem.left = rcFtElem.right - pFtRCI->m_rcLayout.Width();
							pFtRCI->m_rcLayout = rcFtElem;
							if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
								rcLayout.left += pFtRCI->m_rcLayout.Width();
							else
								rcLayout.right -= pFtRCI->m_rcLayout.Width();
							bForceLineStartMode = true;
							pos = posLineStart;
							rcPrevious.left = rcPrevious.right = rcLayout.left;
							rcStartLine = rcPrevious;
							CSize sizeShift( 0, 0 );
							if( styleElemFT.m_eF == CExtRichStyleDescription::ef_left )
							{
								if( rcFtElem.right > rcLayout.right && ( ! listFloatRight.IsEmpty() ) )
								{
									CExtRichContentItem * pRelRCI = listFloatRight.GetTail();
									sizeShift.cy = pRelRCI->m_rcLayout.bottom - rcFtElem.top;
								}
							}
							else
							{
								if( rcFtElem.left < rcLayout.left && ( ! listFloatLeft.IsEmpty() ) )
								{
									CExtRichContentItem * pRelRCI = listFloatLeft.GetTail();
									sizeShift.cy = pRelRCI->m_rcLayout.bottom - rcFtElem.top;
								}
							}
							if( sizeShift.cy > 0 )
							{
								pFtRCI->OffsetSubTree( sizeShift, true, true, true );
								rcStartLine.top += sizeShift.cy;
								rcStartLine.bottom += sizeShift.cy;
								rcLayout.top += sizeShift.cy;
							}
						}
					}
					else
					{
						if( ( pSavedHI->m_eType == __EHIT_TEXT_SPACE && bLineWrapMode ) || bImg )
						{
							if( pSavedHI->IsNoWrapSequence() )
							{
								CExtSafeString strTagNameOldParsed = pSavedHI->m_strTextParsed;
								CExtSafeString strTagNameOldEffective = pSavedHI->m_strTextEffective;
								pSavedHI->m_strTextParsed = pSavedHI->m_strTextEffective = _T("p");
								pSavedHI->_ClearHaveFlags();
								CRect rcBig( 0, 0, __EXT_RICH_CONTENT_BIG_EXTENT, __EXT_RICH_CONTENT_BIG_EXTENT );
//								CExtRichStyleDescription styleNextCopy( styleNext );
								CExtRichStyleDescription styleNextCopy = styleNext, styleNextRestore = pSavedHI->GetEffectiveStyle();
								styleNextCopy.m_eaH = CExtRichStyleDescription::eahLeft;
								bool _bRemoveSpaceBetweenParagraph = pSavedHI->m_layout.m_bRemoveSpacecBetweenParagraphs;
								pSavedHI->m_layout.m_bRemoveSpacecBetweenParagraphs = false;
								pSavedHI->PreLayout( dc, styleNextCopy, rcBig );
								pSavedHI->DoLayout( dc, rcBig, pRCIFA, false );
								pSavedHI->PreLayout( dc, styleNextRestore, rcBig );
								pSavedHI->m_layout.m_bRemoveSpacecBetweenParagraphs = _bRemoveSpaceBetweenParagraph;
								pSavedHI->m_sizePreCalc = pSavedHI->m_sizeMaxChild = pSavedHI->m_rcLayout.Size();
								nWidthLineItems += pSavedHI->m_sizePreCalc.cx;
								pSavedHI->m_strTextParsed = strTagNameOldParsed;
								pSavedHI->m_strTextEffective = strTagNameOldEffective;
								pSavedHI->_ClearHaveFlags();
								pSavedHI->m_bHelperWordStartItem = true;
								_listWordItems.AddTail( pSavedHI );
							}
							else if( _listWordItems.GetCount() <= 0 )
							{
								_listWordItems.AddTail( pSavedHI );
								nWidthLineItems += pSavedHI->m_sizePreCalc.cx;
								pos = posCompositeWord;
							}
							break;
						}
						else if( pSavedHI->m_eType == __EHIT_TEXT_RANGE || ( pSavedHI->m_eType == __EHIT_TEXT_SPACE && (!bLineWrapMode) ) )
						{
							_listWordItems.AddTail( pSavedHI );
							nWidthLineItems += pSavedHI->m_sizePreCalc.cx;
							pos = posCompositeWord;
						}
						else if(	pSavedHI->IsParagraphItem() 
							||	pSavedHI->GetDisplay() == CExtRichStyleDescription::ed_table 
							)
						{
							posPostLineProcessing = posTemp;
							posLineEOF = posPostLineProcessing; // ??? that was commented, that's needed for situation, when there is a block item after very long word which is placed to new line in order to calculate word high
							break;
						}
						else if(
							pSavedHI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
							||	pSavedHI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
							)
						{
							if( _listWordItems.GetCount() <= 0 )
							{
								CRect rcPostLayout = rcLayout;
								pSavedHI->m_rcLayout.SetRect(0,0,0,0);

								pSavedHI->DoLayout( dc, rcPostLayout, pRCIFA, false );

								_listWordItems.AddTail( pSavedHI );
								nWidthLineItems += pSavedHI->m_rcLayout.Width();
								pos = posCompositeWord;
								pSavedHI->m_bHelperWordStartItem = true;
							}
							break;
						}
					}

					if( posCompositeWord == NULL )
						break;

					posTemp = posCompositeWord;
					pSavedHI = _listItems.GetNext( posCompositeWord );
				}

				INT nClientWidth = rcLayout.Width();
				if( listFloatLeft.IsEmpty() && listFloatRight.IsEmpty() && (!bHaveExactWidthSpec) )
					nClientWidth = max( nClientWidth, m_sizeMaxChild.cx );

				bool bInside = ( (!bLineWrapMode) || nClientWidth >= ( rcPrevious.right - rcLayout.left + nWidthLineItems ) ) ? true : false;
				if( ! bInside )
					bInside = ( ( nClientWidth <= nWidthLineItems ) && ( rcPrevious.right == 0 ) );
				if(	( ! bInside ) && bFirstLine )
				{
					if( styleNext.m_nParaIndent > 0 )
					{
						nClientWidth -= styleNext.m_nParaIndent;
						bInside = ( ( nClientWidth <= nWidthLineItems ) && ( rcPrevious.right - styleNext.m_nParaIndent == 0 ) );
					}
				}
				if( (! bInside) && (rcPrevious.right - rcLayout.left) == 0 )
					bInside = true;

				POSITION _posCompositeWord = _listWordItems.GetHeadPosition();
				bool bCompositeWord = ( _posCompositeWord != NULL ) ? true : false;
//				bool bSubSup = false;

				for( ; _posCompositeWord != NULL; )
				{
					CExtRichContentItem * pWordPartHI = _listWordItems.GetNext( _posCompositeWord );
					bool bWordComplete = false;
					if( bInside )
					{
						bool bImg = ( 
								pWordPartHI->QueryGenericTagName() == _T("img") 
							||	pWordPartHI->IsNoWrapSequence() 
							||	pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
							||	pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
							) ? true : false;

						bool bSpaceIsFirst = ( bSingleSpaceMode && rcPrevious.right == 0 && pWordPartHI->m_eType == __EHIT_TEXT_SPACE ) ? true : false;
						if( bSpaceIsFirst )
							pWordPartHI->m_rcLayout.right = pWordPartHI->m_rcLayout.left;
						if(		bSpaceIsFirst
							||	( pWordPartHI->m_eType == __EHIT_GENERIC_TAG && ( ! bImg ) )
 							||	pWordPartHI->IsParagraphItem()
							||	pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_table
							)
							continue;

// 						nMaxHeight = max( nMaxHeight, pWordPartHI->m_sizePreCalc.cy );
						if(		pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
							||	pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
							)
						{
							nHelperTmAscentMax = max( nHelperTmAscentMax, pWordPartHI->m_rcLayout.Height() );
							nMaxHeight = max( nMaxHeight, pWordPartHI->m_rcLayout.Height() );
						}
						else
						{
							nHelperTmAscentMax = max( nHelperTmAscentMax, pWordPartHI->GetHelperTmAscent() );
							nMaxHeight = max( nMaxHeight, pWordPartHI->m_sizePreCalc.cy );
						}
						nHelperTmInternalLeadingMax = max( nHelperTmInternalLeadingMax, pWordPartHI->GetHelperTmInternalLeading() );

						pWordPartHI->OffsetSubTree( CSize(-pWordPartHI->m_rcLayout.left,-pWordPartHI->m_rcLayout.top), true, true );
						pWordPartHI->OffsetSubTree( CSize(rcPrevious.right,rcPrevious.top), true, true );

						if(		pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
							||	pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
							)
						{
							pWordPartHI->m_rcLayout.right = rcPrevious.right + pWordPartHI->m_rcLayout.Width();
							pWordPartHI->m_rcLayout.bottom = rcPrevious.top + pWordPartHI->m_rcLayout.Height();
						}
						else
						{
							pWordPartHI->m_rcLayout.right = rcPrevious.right + pWordPartHI->m_sizePreCalc.cx;
							pWordPartHI->m_rcLayout.bottom = rcPrevious.top + pWordPartHI->m_sizePreCalc.cy;
						}

						LONG nShift = pWordPartHI->GetWordShift();
						if( nShift != 0 )
							bDoLineAreaUnion = true;

						pWordPartHI->m_rcLayout.OffsetRect( 0, nShift );

						rcPrevious = pWordPartHI->m_rcLayout;
						rcPrevious.OffsetRect( 0, -nShift );
						bOffset = false;
						_pRCI_previous = pWordPartHI;
						if( posPostLineProcessing != NULL && _posCompositeWord == NULL )
						{
							if( _posCompositeWord != NULL )
								posLineEOF = _posCompositeWord;
							bWordComplete = true;
						}

						if( posPostLineProcessing != NULL )
							posLineEOF = posPostLineProcessing;
					}

					if( ( ! bInside ) || ( posPostLineProcessing != NULL && _posCompositeWord == NULL ) )
					{
						if(		_pRCI_previous != NULL
							&&	_pRCI_previous->m_eType == __EHIT_TEXT_SPACE
							)
							_pRCI_previous->m_rcLayout.right = _pRCI_previous->m_rcLayout.left;

 						POSITION posWalkLine = posLineStart;

 						POSITION posSaved = posWalkLine;
						POSITION _posLineEOF = ( (!bInside) && (posPostLineProcessing != NULL) ) ? posLineEOF_Temp : posLineEOF;

						posLineStartTemp = ( (!bInside) && (posPostLineProcessing != NULL) ) ? _posLineEOF : NULL;

						if( ! bOffset )
						{
							LONG nWidthOfLine = 0;
							for( ; posWalkLine != _posLineEOF && posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
								if(		pRCI->IsParagraphItem() 
									||	pRCI->m_rcLayout.IsRectEmpty() 
									)
									continue;
								int nHelperTmAscent = pRCI->GetHelperTmAscent();
								if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
									||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
									)
									nHelperTmAscent = pRCI->m_rcLayout.Height();
								pRCI->OffsetSubTree(
											CSize(
													0
												,	nHelperTmAscentMax 
												-	nHelperTmAscent
												-	( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 ) 
												),
											true, true
											);

								nWidthOfLine += pRCI->m_rcLayout.Width();
							}

							CPoint ptStyleOffset( 0, 0 );
							CExtRichStyleDescription::e_align_horz_t eaH = styleNext.m_eaH;
							//CExtRichStyleDescription::ptr p_styleNext( NULL, &styleNext );
							if(		rcLayout.Width() < nWidthOfLine
								//&&	p_styleNext.GetPtrObjectNoAssign()->m_eaH != CExtRichStyleDescription::eahLeft
								&&	eaH != CExtRichStyleDescription::eahLeft
								)
								//p_styleNext->m_eaH = CExtRichStyleDescription::eahLeft;
								eaH = CExtRichStyleDescription::eahLeft;
							switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )
							{
							case CExtRichStyleDescription::eahLeft:
							break;
							case CExtRichStyleDescription::eahCenter:
								ptStyleOffset.x = ( rcLayout.Width() - nWidthOfLine ) / 2;
							break;
							case CExtRichStyleDescription::eahRight:
								ptStyleOffset.x = rcLayout.Width() - nWidthOfLine;
							break;
							case CExtRichStyleDescription::eahJustifyRight:
							case CExtRichStyleDescription::eahJustify:
							case CExtRichStyleDescription::eahJustifyWithLastLine:
								DoLayout_JustifiedLine(
									dc, rcLayout,
									nWidthOfLine, posSaved, posLineEOF,
									_listItems, bFirstLine,
									styleNext
									);
							break;
							} // switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )
							posWalkLine = posSaved;
							for( ; posWalkLine != _posLineEOF && posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 								if(		pRCI->IsParagraphItem() 
									//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
									)
 									break;
/*
								if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline
									&&	pRCI->m_listItems.GetCount() == 0
									)
									continue;
*/
								if( pRCI->m_rcLayout.IsRectEmpty() )
									continue;
								if( ptStyleOffset.x != 0 || ptStyleOffset.y != 0 )
									pRCI->OffsetSubTree( CSize( ptStyleOffset.x, ptStyleOffset.y ), true, true );

								if(		(! pRCI->IsNoLayoutRectItem() )
									&&	pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
									)
								{
									if( bHaveInitialUnionLayout )
									{
										m_rcLayout.left = min( m_rcLayout.left, pRCI->m_rcLayout.left );
										m_rcLayout.right = max( m_rcLayout.right, pRCI->m_rcLayout.right );
										m_rcLayout.top = min( m_rcLayout.top, pRCI->m_rcLayout.top );
										m_rcLayout.bottom = max( m_rcLayout.bottom, pRCI->m_rcLayout.bottom );
									}
									else 
									{
										m_rcLayout.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
										bHaveInitialUnionLayout = true;
									}
								}
							}

							bOffset = true;
						}

						LONG nNewMaxHeight = 0L;
						nNewMaxHeight = DoVerticalAlign( posSaved, posLineEOF, &_listItems, nMaxHeight );
						if( nNewMaxHeight != 0L )
							nMaxHeight = nNewMaxHeight;

						if( bDoLineAreaUnion )
						{
							bool bHaveInitialLineLayout = false;
							bDoLineAreaUnion = false;
							CRect rcLine(0,0,0,0);

 							POSITION posWalkLine = posLineStart;

							for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 								if(		pRCI->IsParagraphItem() 
									//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
									)
 									break;
								if( pRCI->m_rcLayout.IsRectEmpty() )
									continue;

								if(	/*	(! pRCI->IsNoLayoutRectItem() )*/
									/*&&	*/pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
									)
								{
									if( bHaveInitialLineLayout )
									{
										rcLine.left = min( rcLine.left, pRCI->m_rcLayout.left );
										rcLine.right = max( rcLine.right, pRCI->m_rcLayout.right );
										rcLine.top = min( rcLine.top, pRCI->m_rcLayout.top );
										rcLine.bottom = max( rcLine.bottom, pRCI->m_rcLayout.bottom );
									}
									else 
									{
										rcLine.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
										bHaveInitialLineLayout = true;
									}
								}
							}

							LONG _nLineShift = 0L;

							if( rcLine.top < rcStartLine.top )
							{
								_nLineShift = rcStartLine.top - rcLine.top;
								posWalkLine = posLineStart;
								for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
								{
									CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
									__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 									if(		pRCI->IsParagraphItem() 
										//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
										)
 										break;
									if( pRCI->m_rcLayout.IsRectEmpty() )
										continue;
									pRCI->OffsetSubTree(
												CSize(
														0
													,	_nLineShift
													),
												true, true
												);
								}

								rcPrevious.OffsetRect( 0, _nLineShift );
							}

							rcPrevious.top = rcLine.top;
							nMaxHeight = max( nMaxHeight, rcLine.Height() + _nLineShift );
						}

						bFirstLine = false;
						bool bSpace = false;

						if( pWordPartHI->m_eType == __EHIT_TEXT_SPACE  && (!bWordComplete) /*&& posPostLineProcessing == NULL*/ )
						{
							pWordPartHI->m_rcLayout.left = 0;
							pWordPartHI->m_rcLayout.top = 0;
							pWordPartHI->m_rcLayout.right = 0;
							pWordPartHI->m_rcLayout.bottom = 0;
							bSpace = true;
							//continue;
						}

						if( (!bSpace) && (!bWordComplete) )
						{
							if( posPostLineProcessing != NULL && _posCompositeWord != NULL )
								posLineEOF = _posCompositeWord;

							if(		pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
								||	pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
								)
							{
								pWordPartHI->m_sizePreCalc.cx = pWordPartHI->m_rcLayout.Width();
								pWordPartHI->m_sizePreCalc.cy = pWordPartHI->m_rcLayout.Height();
							}

							pWordPartHI->m_rcLayout.left = rcLayout.left;
							pWordPartHI->m_rcLayout.right = rcLayout.left + pWordPartHI->m_sizePreCalc.cx;

							CSize sizeOffset(
								-pWordPartHI->m_rcLayout.left
									+ rcLayout.left
								,
								-pWordPartHI->m_rcLayout.top
									//+ rcLayout.top
									+ rcPrevious.top
								+	(
										( styleNext.m_fd.m_lfLineSpacingPercent != 1.0 )
										//? ( LONG(DOUBLE(nMaxHeight-nHelperTmInternalLeadingMax)*styleNext.m_fd.m_lfLineSpacingPercent) )
										? ( LONG(DOUBLE( nMaxHeight + ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? 0 : nHelperTmInternalLeadingMax ) )*styleNext.m_fd.m_lfLineSpacingPercent) )
										//: ( ( styleNext.m_fd.m_nLineSpacingPX >= 0 ) ? styleNext.m_fd.m_nLineSpacingPX : (nMaxHeight - ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 )) )
										: ( ( styleNext.m_fd.m_nLineSpacingPX >= 0 ) ? styleNext.m_fd.m_nLineSpacingPX : (nMaxHeight + ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? 0 : nHelperTmInternalLeadingMax )) )
									)
								//-	( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 )
								);
							pWordPartHI->m_rcLayout.bottom = pWordPartHI->m_rcLayout.top + pWordPartHI->m_sizePreCalc.cy;
							pWordPartHI->OffsetSubTree( sizeOffset, true, true );
						}

						if( posPostLineProcessing != NULL )
						{
							bForceLineStartMode = true;
							// adjust for next paragraph
							posWalkLine = posSaved;
							POSITION posLineSaved = posWalkLine;
							for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
							{
								posLineSaved = posWalkLine;
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 								if(		pRCI->IsParagraphItem() 
									//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
									)
 									break;
								if( pRCI->IsParagraphItem() || pRCI->m_rcLayout.IsRectEmpty() )
									continue;
								rcPrevious.top = max( rcPrevious.top, pRCI->m_rcLayout.bottom );
							}
							rcPrevious.bottom = rcPrevious.top; 
							rcPrevious.left = rcLayout.left;
							rcPrevious.right = rcLayout.left;

							rcStartLine = rcPrevious;

// 							posPostLineProcessing = posLineSaved;
							if( posCompositeWord != NULL )
								posLineEOF = pos = posCompositeWord;
							break;
						}

						POSITION posPrevLine = posLineStart;
						posLineStart = posLineEOF;
						_pRCI_previous = pWordPartHI;

						if( ! bSpace )
						{
							LONG nShift = pWordPartHI->GetWordShift();
							if( nShift != 0 )
								bDoLineAreaUnion = true;
							rcLayout.top = pWordPartHI->m_rcLayout.top; // adjust for next paragraph

							pWordPartHI->m_rcLayout.OffsetRect( 0, nShift );

							rcPrevious = pWordPartHI->m_rcLayout;
							rcPrevious.OffsetRect( 0, -nShift );
							if(		pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
								||	pWordPartHI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
								)
							{
								nMaxHeight = pWordPartHI->m_rcLayout.Height();
								nHelperTmAscentMax = pWordPartHI->m_rcLayout.Height();
								nHelperTmInternalLeadingMax = pWordPartHI->GetHelperTmInternalLeading();
							}
							else
							{
								nMaxHeight = pWordPartHI->m_sizePreCalc.cy;
								nHelperTmAscentMax = pWordPartHI->GetHelperTmAscent();
								nHelperTmInternalLeadingMax = pWordPartHI->GetHelperTmInternalLeading();
							}

							rcStartLine = rcPrevious;
							if( _listWordItems.GetCount() > 1 )
								bInside = true;
						}
						else
						{
							rcPrevious.left = rcLayout.left;
							rcPrevious.right = rcLayout.left;
							rcPrevious.top = 
									rcPrevious.top 
								+	(
										( styleNext.m_fd.m_lfLineSpacingPercent != 1.0 )
										//? ( LONG(DOUBLE(nMaxHeight-nHelperTmInternalLeadingMax)*styleNext.m_fd.m_lfLineSpacingPercent) )
										? ( LONG(DOUBLE( nMaxHeight + ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? 0 : nHelperTmInternalLeadingMax ) )*styleNext.m_fd.m_lfLineSpacingPercent) )
										//: ( ( styleNext.m_fd.m_nLineSpacingPX >= 0 ) ? styleNext.m_fd.m_nLineSpacingPX : (nMaxHeight - ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 ) ) )
										: ( ( styleNext.m_fd.m_nLineSpacingPX >= 0 ) ? styleNext.m_fd.m_nLineSpacingPX : (nMaxHeight + ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? 0 : nHelperTmInternalLeadingMax )) )
									) 
								//-	( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 )
								;
							rcPrevious.bottom = rcPrevious.top + pWordPartHI->m_sizePreCalc.cy;

							rcLayout.top = rcPrevious.bottom; // adjust for next paragraph

							nMaxHeight = _pRCI_previous->m_sizePreCalc.cy;
							nHelperTmAscentMax = pWordPartHI->GetHelperTmAscent();
							nHelperTmInternalLeadingMax = pWordPartHI->GetHelperTmInternalLeading();

							rcStartLine = rcPrevious;
						}

						if( (! listFloatLeft.IsEmpty()) || (! listFloatRight.IsEmpty()) )
						{
							bool bHaveInitialLineLayout = false;
							CRect rcLine(0,0,0,0);
							bool bMoveLine = false;
							POSITION posReview = posPrevLine;
							for( ; posReview != posLineStart; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posReview );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
								if(		pRCI->IsParagraphItem() 
									||	pRCI->m_rcLayout.IsRectEmpty()
									)
									continue;
								const CExtRichStyleDescription & styleElemFT = pRCI->GetEffectiveStyle();
								if(		styleElemFT.m_eD != CExtRichStyleDescription::ed_inline
									||	styleElemFT.m_eF == CExtRichStyleDescription::ef_left
									||	styleElemFT.m_eF == CExtRichStyleDescription::ef_right
									)
									continue;
								if(	/*	(! pRCI->IsNoLayoutRectItem() )*/
									/*&&	*/pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
									)
								{
									if( bHaveInitialLineLayout )
									{
										rcLine.left = min( rcLine.left, pRCI->m_rcLayout.left );
										rcLine.right = max( rcLine.right, pRCI->m_rcLayout.right );
										rcLine.top = min( rcLine.top, pRCI->m_rcLayout.top );
										rcLine.bottom = max( rcLine.bottom, pRCI->m_rcLayout.bottom );
									}
									else 
									{
										rcLine.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
										bHaveInitialLineLayout = true;
									}
									if( pRCI->m_rcLayout.right > rcLayout.right )
									{
										bMoveLine = true;
										//break;
									}
								}
							}
							if( bMoveLine )
							{
								INT nTargetY = INT_MAX;
								if( ! listFloatLeft.IsEmpty() )
								{
									CExtRichContentItem * pFtRCI = listFloatLeft.GetTail();
									nTargetY = min( nTargetY, pFtRCI->m_rcLayout.bottom );
								}
								if( ! listFloatRight.IsEmpty() )
								{
									CExtRichContentItem * pFtRCI = listFloatRight.GetTail();
									nTargetY = min( nTargetY, pFtRCI->m_rcLayout.bottom );
								}
								if( nTargetY != INT_MAX && nTargetY > rcLine.top )
								{
									CSize sizeLineShift( 0, nTargetY - rcLine.top );
									posReview = posPrevLine;
									for( ; posReview != posLineStart; )
									{
										CExtRichContentItem * pRCI = _listItems.GetNext( posReview );
										__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
										if(		pRCI->IsParagraphItem() 
											||	pRCI->m_rcLayout.IsRectEmpty()
											)
											continue;
										const CExtRichStyleDescription & styleElemFT = pRCI->GetEffectiveStyle();
										if(		styleElemFT.m_eD != CExtRichStyleDescription::ed_inline
											||	styleElemFT.m_eF == CExtRichStyleDescription::ef_left
											||	styleElemFT.m_eF == CExtRichStyleDescription::ef_right
											)
											continue;
										pRCI->OffsetSubTree( sizeLineShift );
									}
									bForceLineStartMode = true;
									pos = posLineStart = posPrevLine;
								}
							}
							for( ; ! listFloatLeft.IsEmpty(); )
							{
								CExtRichContentItem * pFtRCI = listFloatLeft.GetTail();
								if( pFtRCI->m_rcLayout.bottom > rcStartLine.top )
									break;
								listFloatLeft.RemoveTail();
								rcLayout.left -= pFtRCI->m_rcLayout.Width();;
								rcPrevious.left = rcPrevious.right = rcLayout.left;
								rcStartLine = rcPrevious;
								bForceLineStartMode = true;
								pos = posLineStart;
							}
							for( ; ! listFloatRight.IsEmpty(); )
							{
								CExtRichContentItem * pFtRCI = listFloatRight.GetTail();
								if( pFtRCI->m_rcLayout.bottom > rcStartLine.top )
									break;
								listFloatRight.RemoveTail();
								rcLayout.right += pFtRCI->m_rcLayout.Width();
								//rcPrevious.left = rcPrevious.right = rcLayout.left;
								//rcStartLine = rcPrevious;
								//bForceLineStartMode = true;
								//pos = posLineStart;
							}
						}

					} // if( ( ! bInside ) || ( posPostLineProcessing != NULL && _posCompositeWord == NULL ) )
				} // for( ; _posCompositeWord != NULL; )

				if( ! bCompositeWord )
				{
					POSITION posWalkLine = posLineStart;
					POSITION posSaved = posWalkLine;
					if( ! bOffset )
					{
						LONG nWidthOfLine = 0;
						for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
						{
							CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
							if(		pRCI->IsParagraphItem() 
								||	pRCI->m_rcLayout.IsRectEmpty() 
								||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
								)
								continue;
							int nHelperTmAscent = pRCI->GetHelperTmAscent();
							if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
								||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
								)
								nHelperTmAscent = pRCI->m_rcLayout.Height();
							pRCI->OffsetSubTree(
										CSize(
												0
											,	nHelperTmAscentMax 
											-	nHelperTmAscent 
											-	( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 ) 
											),
										true, true
										);

							nWidthOfLine += pRCI->m_rcLayout.Width();
						}
						CPoint ptStyleOffset( 0, 0 );
						CExtRichStyleDescription::e_align_horz_t eaH = styleNext.m_eaH;
						//CExtRichStyleDescription::ptr p_styleNext( NULL, &styleNext );
						if(		rcLayout.Width() < nWidthOfLine
							//&&	p_styleNext.GetPtrObjectNoAssign()->m_eaH != CExtRichStyleDescription::eahLeft
							&&	eaH != CExtRichStyleDescription::eahLeft
							)
							//p_styleNext->m_eaH = CExtRichStyleDescription::eahLeft;
							eaH = CExtRichStyleDescription::eahLeft;
						switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )
						{
						case CExtRichStyleDescription::eahLeft:
						break;
						case CExtRichStyleDescription::eahCenter:
							ptStyleOffset.x = ( rcLayout.Width() - nWidthOfLine ) / 2;
						break;
						case CExtRichStyleDescription::eahRight:
							ptStyleOffset.x = rcLayout.Width() - nWidthOfLine;
						break;
						case CExtRichStyleDescription::eahJustifyRight:
						case CExtRichStyleDescription::eahJustify:
						case CExtRichStyleDescription::eahJustifyWithLastLine:
							DoLayout_JustifiedLine(
								dc, rcLayout,
								nWidthOfLine, posSaved, posLineEOF,
								_listItems, bFirstLine,
								styleNext
								);
						break;
						} // switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )
						posWalkLine = posSaved;
						for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
						{
							CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 							if(		pRCI->IsParagraphItem() 
								//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
								)
 								break;
/*
							if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline
								&&	pRCI->m_listItems.GetCount() == 0
								)
								continue;
*/
							if( pRCI->m_rcLayout.IsRectEmpty() )
								continue;
							if( ptStyleOffset.x != 0 || ptStyleOffset.y != 0 )
								//pRCI->m_rcLayout.OffsetRect( ptStyleOffset );
								pRCI->OffsetSubTree( CSize( ptStyleOffset.x, ptStyleOffset.y ), true, true );

							if(		(! pRCI->IsNoLayoutRectItem() )
								&&	pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
								)
							{
								if( bHaveInitialUnionLayout )
								{
									m_rcLayout.left = min( m_rcLayout.left, pRCI->m_rcLayout.left );
									m_rcLayout.right = max( m_rcLayout.right, pRCI->m_rcLayout.right );
									m_rcLayout.top = min( m_rcLayout.top, pRCI->m_rcLayout.top );
									m_rcLayout.bottom = max( m_rcLayout.bottom, pRCI->m_rcLayout.bottom );
								}
								else 
								{
									m_rcLayout.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
									bHaveInitialUnionLayout = true;
								}
							}
						}

						bOffset = true;
					}

					if( bDoLineAreaUnion )
					{
						bool bHaveInitialLineLayout = false;
						bDoLineAreaUnion = false;
						CRect rcLine(0,0,0,0);

 						POSITION posWalkLine = posLineStart;

						for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
						{
							CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 							if(		pRCI->IsParagraphItem() 
								//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
								)
 								break;
							if( pRCI->m_rcLayout.IsRectEmpty() )
								continue;

							if(	/*	(! pRCI->IsNoLayoutRectItem() )*/
								/*&&	*/pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
								)
							{
								if( bHaveInitialLineLayout )
								{
									rcLine.left = min( rcLine.left, pRCI->m_rcLayout.left );
									rcLine.right = max( rcLine.right, pRCI->m_rcLayout.right );
									rcLine.top = min( rcLine.top, pRCI->m_rcLayout.top );
									rcLine.bottom = max( rcLine.bottom, pRCI->m_rcLayout.bottom );
								}
								else 
								{
									rcLine.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
									bHaveInitialLineLayout = true;
								}
							}
						}

						if( rcLine.top < rcStartLine.top )
						{
							LONG _nLineShift = rcStartLine.top - rcLine.top;
							posWalkLine = posLineStart;
							for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 								if(		pRCI->IsParagraphItem() 
									//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
									)
 									break;
								if( pRCI->m_rcLayout.IsRectEmpty() )
									continue;
								pRCI->OffsetSubTree(
											CSize(
													0
												,	_nLineShift
												),
											true, true
											);
							}

							rcPrevious.OffsetRect( 0, _nLineShift );
						}
// 						else if( rcLine.bottom > rcStartLine.bottom )
// 						{
// 							LONG _nLineShift = rcLine.bottom - rcStartLine.bottom;
// 
// 							rcPrevious.OffsetRect( 0, _nLineShift );
// 						}

						rcPrevious.top = rcLine.top;
						nMaxHeight = max( nMaxHeight, rcLine.Height() );
					}

						{
							if( posPostLineProcessing != NULL && _posCompositeWord != NULL )
								posLineEOF = _posCompositeWord;

							rcPrevious.top = rcPrevious.bottom =
									rcPrevious.top 
								+	(
										( styleNext.m_fd.m_lfLineSpacingPercent != 1.0 )
										//? ( LONG(DOUBLE(nMaxHeight-nHelperTmInternalLeadingMax)*styleNext.m_fd.m_lfLineSpacingPercent) )
										? ( LONG(DOUBLE( nMaxHeight + ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? 0 : nHelperTmInternalLeadingMax ) )*styleNext.m_fd.m_lfLineSpacingPercent) )
										//: ( ( styleNext.m_fd.m_nLineSpacingPX >= 0 ) ? styleNext.m_fd.m_nLineSpacingPX : (nMaxHeight - ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 )) )
										: ( ( styleNext.m_fd.m_nLineSpacingPX >= 0 ) ? styleNext.m_fd.m_nLineSpacingPX : (nMaxHeight + ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? 0 : nHelperTmInternalLeadingMax )) )
									)
								//-	( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 )
								;
						}
				}
////////////////

				if( posPostLineProcessing != NULL )
				{
					if( ! bInside && false )
					{
						posLineStart = _listWordItems.GetHeadPosition();

  						POSITION posWalkLine = posLineStart;
  						POSITION posSaved = posWalkLine;
						posLineEOF = posPostLineProcessing;

						//if( ! bOffset )
						{
							LONG nWidthOfLine = 0;
							for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
								if(		pRCI->IsParagraphItem() 
									||	pRCI->m_rcLayout.IsRectEmpty() 
									)
									continue;
								int nHelperTmAscent = pRCI->GetHelperTmAscent();
								if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
									||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
									)
									nHelperTmAscent = pRCI->m_rcLayout.Height();
								pRCI->OffsetSubTree(
											CSize(
													0
												,	nHelperTmAscentMax 
												-	nHelperTmAscent
												-	( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 ) 
												),
											true, true
											);

								nWidthOfLine += pRCI->m_rcLayout.Width();
							}

							CPoint ptStyleOffset( 0, 0 );
							CExtRichStyleDescription::e_align_horz_t eaH = styleNext.m_eaH;
							//CExtRichStyleDescription::ptr p_styleNext( NULL, &styleNext );
							if(		rcLayout.Width() < nWidthOfLine
								//&&	p_styleNext.GetPtrObjectNoAssign()->m_eaH != CExtRichStyleDescription::eahLeft
								&&	eaH != CExtRichStyleDescription::eahLeft
								)
								//p_styleNext->m_eaH = CExtRichStyleDescription::eahLeft;
								eaH = CExtRichStyleDescription::eahLeft;
							switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )
							{
							case CExtRichStyleDescription::eahLeft:
							break;
							case CExtRichStyleDescription::eahCenter:
								ptStyleOffset.x = ( rcLayout.Width() - nWidthOfLine ) / 2;
							break;
							case CExtRichStyleDescription::eahRight:
								ptStyleOffset.x = rcLayout.Width() - nWidthOfLine;
							break;
							case CExtRichStyleDescription::eahJustifyRight:
							case CExtRichStyleDescription::eahJustify:
							case CExtRichStyleDescription::eahJustifyWithLastLine:
								DoLayout_JustifiedLine(
									dc, rcLayout,
									nWidthOfLine, posSaved, posLineEOF,
									_listItems, bFirstLine,
									styleNext
									);
							break;
							} // switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )
							posWalkLine = posSaved;
							for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 								if(		pRCI->IsParagraphItem() 
									//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
									)
 									break;
/*
								if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline
									&&	pRCI->m_listItems.GetCount() == 0
									)
									continue;
*/
								if( pRCI->m_rcLayout.IsRectEmpty() )
									continue;
								if( ptStyleOffset.x != 0 || ptStyleOffset.y != 0 )
									pRCI->OffsetSubTree( CSize( ptStyleOffset.x, ptStyleOffset.y ), true, true );

								if(		(! pRCI->IsNoLayoutRectItem() )
									&&	pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
									)
								{
									if( bHaveInitialUnionLayout )
									{
										m_rcLayout.left = min( m_rcLayout.left, pRCI->m_rcLayout.left );
										m_rcLayout.right = max( m_rcLayout.right, pRCI->m_rcLayout.right );
										m_rcLayout.top = min( m_rcLayout.top, pRCI->m_rcLayout.top );
										m_rcLayout.bottom = max( m_rcLayout.bottom, pRCI->m_rcLayout.bottom );
									}
									else 
									{
										m_rcLayout.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
										bHaveInitialUnionLayout = true;
									}
								}
							}

							bOffset = true;
						}

						if( bDoLineAreaUnion )
						{
							bool bHaveInitialLineLayout = false;
							bDoLineAreaUnion = false;
							CRect rcLine(0,0,0,0);

 							POSITION posWalkLine = posLineStart;

							for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 								if(		pRCI->IsParagraphItem() 
									//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
									)
 									break;
								if( pRCI->m_rcLayout.IsRectEmpty() )
									continue;

								if(	/*	(! pRCI->IsNoLayoutRectItem() )*/
									/*&&	*/pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
									)
								{
									if( bHaveInitialLineLayout )
									{
										rcLine.left = min( rcLine.left, pRCI->m_rcLayout.left );
										rcLine.right = max( rcLine.right, pRCI->m_rcLayout.right );
										rcLine.top = min( rcLine.top, pRCI->m_rcLayout.top );
										rcLine.bottom = max( rcLine.bottom, pRCI->m_rcLayout.bottom );
									}
									else 
									{
										rcLine.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
										bHaveInitialLineLayout = true;
									}
								}
							}

							LONG _nLineShift = 0L;

							if( rcLine.top < rcStartLine.top )
							{
								_nLineShift = rcStartLine.top - rcLine.top;
								posWalkLine = posLineStart;
								for( ; posWalkLine != posLineEOF && posWalkLine != NULL ; )
								{
									CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
									__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 									if(		pRCI->IsParagraphItem() 
										//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
										)
 										break;
									if( pRCI->m_rcLayout.IsRectEmpty() )
										continue;
									pRCI->OffsetSubTree(
												CSize(
														0
													,	_nLineShift
													),
												true, true
												);
								}

								rcPrevious.OffsetRect( 0, _nLineShift );
							}

							rcPrevious.top = rcLine.top;
							nMaxHeight = max( nMaxHeight, rcLine.Height() + _nLineShift );
						}
					}

					posLineStart = posLineEOF;

					CExtRichContentItem * pRCI = _listItems.GetNext( posPostLineProcessing );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
					CRect rcPostLayout = rcLayout;
					rcPostLayout.top = rcPrevious.bottom;
					if( styleNext.m_sizeWH.cx >= 0 )
						rcPostLayout.right = rcPostLayout.left + styleNext.m_sizeWH.cx;
					if( styleNext.m_sizeWH.cy >= 0 )
						rcPostLayout.bottom = rcPostLayout.top + styleNext.m_sizeWH.cy;
					bForceLineStartMode = true;
					pRCI->m_rcLayout.SetRect(0,0,0,0);
 					pRCI->DoLayout( dc, rcPostLayout, pRCIFA, false );
					rcPrevious.left = rcLayout.left;
					rcPrevious.right = rcLayout.left;
					rcPrevious.top = rcPrevious.bottom = pRCI->m_rcLayout.bottom;
					pos = posPostLineProcessing;

				}

			} // for( ; pos != NULL; )

				//if( ! bOffset )
				{
					if( _pRCI_previous != NULL )
					{
						if( _pRCI_previous->m_eType == __EHIT_TEXT_SPACE )
						{
							_pRCI_previous->m_rcLayout.right = _pRCI_previous->m_rcLayout.left;
						}
					}

					//posLineStartTemp = ( (!bInside) && (posPostLineProcessing != NULL) ) ? pos : NULL;
					POSITION posWalkLine = ( posLineStartTemp != NULL ) ? posLineStartTemp: posLineStart;
					LONG nWidthOfLine = 0;
					POSITION posSaved = posWalkLine;

					for( ; posWalkLine != NULL; )
					{
						CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
						if(		pRCI->IsParagraphItem() 
							||	pRCI->m_rcLayout.IsRectEmpty() 
							//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
							)
							continue;
						int nHelperTmAscent = pRCI->GetHelperTmAscent();
						if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_table
							||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline_block
							)
							nHelperTmAscent = pRCI->m_rcLayout.Height();
//						pRCI->m_rcLayout.OffsetRect( 0, nHelperTmAscentMax - pRCI->GetHelperTmAscent() - (m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0) );
						pRCI->OffsetSubTree(
							CSize(
								0,
								nHelperTmAscentMax - nHelperTmAscent
								- ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? nHelperTmInternalLeadingMax : 0 )
								),
							true, true
							);
						nWidthOfLine += pRCI->m_rcLayout.Width();
					}
						if( bDoLineAreaUnion )
						{
							bool bHaveInitialLineLayout = false;
							bDoLineAreaUnion = false;
							CRect rcLine(0,0,0,0);

 							POSITION posWalkLine = posLineStart;

							for( ; posWalkLine != NULL ; )
							{
								CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
								__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 								if(		pRCI->IsParagraphItem() 
									//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
									)
 									break;
								if( pRCI->m_rcLayout.IsRectEmpty() )
									continue;

								if(	/*	(! pRCI->IsNoLayoutRectItem() )*/
									/*&&	*/pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
									)
								{
									if( bHaveInitialLineLayout )
									{
										rcLine.left = min( rcLine.left, pRCI->m_rcLayout.left );
										rcLine.right = max( rcLine.right, pRCI->m_rcLayout.right );
										rcLine.top = min( rcLine.top, pRCI->m_rcLayout.top );
										rcLine.bottom = max( rcLine.bottom, pRCI->m_rcLayout.bottom );
									}
									else 
									{
										rcLine.SetRect( pRCI->m_rcLayout.TopLeft(), pRCI->m_rcLayout.BottomRight() );
										bHaveInitialLineLayout = true;
									}
								}
							}

							if( rcLine.top < rcStartLine.top )
							{
								LONG _nLineShift = rcStartLine.top - rcLine.top;
								posWalkLine = posLineStart;
								for( ; posWalkLine != NULL ; )
								{
									CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
									__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 									if(		pRCI->IsParagraphItem() 
										//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
										)
 										break;
									if( pRCI->m_rcLayout.IsRectEmpty() )
										continue;
									pRCI->OffsetSubTree(
												CSize(
														0
													,	_nLineShift
													),
												true, true
												);
								}

								rcPrevious.OffsetRect( 0, _nLineShift );
							}
							rcPrevious.top = rcLine.top;
							nMaxHeight = max( nMaxHeight, rcLine.Height() );
						}


					CPoint ptStyleOffset( 0, 0 );
					CExtRichStyleDescription::e_align_horz_t eaH = styleNext.m_eaH;
					//CExtRichStyleDescription::ptr p_styleNext( NULL, &styleNext );
					if(		rcLayout.Width() < nWidthOfLine
						//&&	p_styleNext.GetPtrObjectNoAssign()->m_eaH != CExtRichStyleDescription::eahLeft
						&&	eaH != CExtRichStyleDescription::eahLeft
						)
						//p_styleNext->m_eaH = CExtRichStyleDescription::eahLeft;
						eaH = CExtRichStyleDescription::eahLeft;
					switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )
					{
					case CExtRichStyleDescription::eahLeft:
					break;
					case CExtRichStyleDescription::eahCenter:
 						ptStyleOffset.x = ( rcLayout.Width() - nWidthOfLine ) / 2;
					break;
					case CExtRichStyleDescription::eahJustifyRight:
					case CExtRichStyleDescription::eahRight:
						ptStyleOffset.x = rcLayout.Width() - nWidthOfLine;
					break;
					case CExtRichStyleDescription::eahJustify:
					break;
					case CExtRichStyleDescription::eahJustifyWithLastLine:
						DoLayout_JustifiedLine(
							dc, rcLayout,
							nWidthOfLine, posSaved, NULL,
							_listItems, bFirstLine,
							styleNext
							);
					break;
					} // switch( eaH /*p_styleNext.GetPtrObjectNoAssign()->m_eaH*/ )

					posWalkLine = posSaved;

					for( ; posWalkLine != NULL; )
					{
						CExtRichContentItem * pRCI = _listItems.GetNext( posWalkLine );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
 						if(		pRCI->IsParagraphItem() 
							//||	pRCI->GetDisplay() == CExtRichStyleDescription::ed_table
							)
 							continue;
/*
						if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline
							&&	pRCI->m_listItems.GetCount() == 0
							)
							continue;
*/
						if( pRCI->m_rcLayout.IsRectEmpty() )
							continue;

						if(		( ptStyleOffset.x != 0 || ptStyleOffset.y != 0 ) 
							&&	(! pRCI->IsParagraphItem())
							)
							pRCI->OffsetSubTree( CSize( ptStyleOffset.x, ptStyleOffset.y ), true, true );

						bool bNoLayoutRectItem =
								(	pRCI->IsNoLayoutRectItem()
								&&	pRCI->QueryGenericTagName() != _T("img") 
								&&	(! pRCI->IsNoWrapSequence() )
//&&	( pRCI->GetDisplay() != CExtRichStyleDescription::ed_inline_table )
								&&	(pRCI->m_listItems.GetCount() > 0)
								) 
								? true : false;
						if( bNoLayoutRectItem )
							pRCI->CalcualateNoLayoutRectItemsSize();
						if(		pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
							//&&	( ! pRCI->IsNoLayoutRectItem() || pRCI->QueryGenericTagName() == _T("img") )
							)
						{
							if( bHaveInitialUnionLayout )
							{
								m_rcLayout.left = min( m_rcLayout.left, pRCI->m_rcLayout.left );
								m_rcLayout.right = max( m_rcLayout.right, pRCI->m_rcLayout.right );
								m_rcLayout.top = min( m_rcLayout.top, pRCI->m_rcLayout.top );
								m_rcLayout.bottom = max( m_rcLayout.bottom, pRCI->m_rcLayout.bottom );
							}
							else
							{
								POINT ptTopLeft = pRCI->m_rcLayout.TopLeft();
								if( styleNext.m_eWST == CExtRichStyleDescription::ewstNoWrap )
								{
									ptTopLeft.x	-= styleNext.m_nParaIndent;
									if( ptTopLeft.x	< 0 )
										ptTopLeft.x = 0;
								}
								m_rcLayout.SetRect( ptTopLeft, pRCI->m_rcLayout.BottomRight() );
								bHaveInitialUnionLayout = true;
							}
						}
						if( bNoLayoutRectItem )
							pRCI->EmptyNoLayoutRectItemsSize();
					}

					int nNewMaxHeight = 0L;
					nNewMaxHeight = DoVerticalAlign( posSaved, NULL, &_listItems, nMaxHeight );
					if( nNewMaxHeight != 0L )
						nMaxHeight = nNewMaxHeight;

					if( styleNext.m_nMaxWidth >= 0 )
					{
						if( m_rcLayout.Width() > styleNext.m_nMaxWidth )
							m_rcLayout.right = m_rcLayout.left + styleNext.m_nMaxWidth;
					}
					if( styleNext.m_nMaxHeight >= 0 )
					{
						if( m_rcLayout.Height() > styleNext.m_nMaxHeight )
							m_rcLayout.bottom = m_rcLayout.top + styleNext.m_nMaxHeight;
					}
					if( styleNext.m_nMinWidth >= 0 )
					{
						if( m_rcLayout.Width() < styleNext.m_nMinWidth )
							m_rcLayout.right = m_rcLayout.left + styleNext.m_nMinWidth;
					}
					if( styleNext.m_nSpacerModeMinWidth != 0 )
					{
						if( m_rcLayout.Width() < styleNext.m_nSpacerModeMinWidth )
							m_rcLayout.right = m_rcLayout.left + styleNext.m_nSpacerModeMinWidth;
					}
					if( styleNext.m_nMinHeight >= 0 )
					{
						if( m_rcLayout.Height() < styleNext.m_nMinHeight )
							m_rcLayout.bottom = m_rcLayout.top + styleNext.m_nMinHeight;
					}
				}

				rcLayout.top =
					rcPrevious.top + nMaxHeight 
					+ ( m_layout.m_bRemoveSpacecBetweenLinesInParagraphs ? 0 : nHelperTmInternalLeadingMax ); // adjust for next paragraph
				nHelperTmInternalLeadingMax_LastP = nHelperTmInternalLeadingMax;

		} // if( IsParagraphItem() )
		else
		{
			CExtRichStyleDescription::e_display_t eD = GetDisplay();
			switch( eD )
			{
			case CExtRichStyleDescription::ed_table_footer_group:
			case CExtRichStyleDescription::ed_table_header_group:
			case CExtRichStyleDescription::ed_table_row_group:
			case CExtRichStyleDescription::ed_table_row:
				bWalkChildren = bComputeUnionLayout = false;
				bComputeUnionLayoutForTableParts = true;
			break;

			case CExtRichStyleDescription::ed_table:
			case CExtRichStyleDescription::ed_inline_table:
				{
					CExtRichTableLayout & aTable = _GetTable();
					bWalkChildren = bComputeUnionLayout = false;
					LONG nColNo, nRowNo;
					CSize sizeDim = aTable.GetDim();
					LONG nLayoutWidthMeasured = aTable.GetMeasuredWidthMax();
					LONG nBorderSpacingHoriz, nBorderSpacingVert;
					nBorderSpacingHoriz = nBorderSpacingVert = 0;
					if( styleNext.m_eBC == CExtRichStyleDescription::ebc_separate )
					{
						nBorderSpacingHoriz = styleNext.m_nBorderSpacingHoriz;
						nBorderSpacingVert = styleNext.m_nBorderSpacingVert;
					}
					LONG nAvailableTableWidth = rcLayout.Width()
						- styleNext.m_sizeCellSpacing.cx * ( ( sizeDim.cx > 0 ) ? ( sizeDim.cx - 1 ) : 0 )
						- nBorderSpacingHoriz * ( ( sizeDim.cx > 0 ) ? ( sizeDim.cx + 1 ) : 0 ); // !!! subtract border spacing
					LONG nTargetTableWidth = nAvailableTableWidth;
					bool bHaveExplicitWidth =  false;
					if( styleNext.m_sizeWHP.cx >= 0 )
					{
						bHaveExplicitWidth = true;
						nTargetTableWidth = nAvailableTableWidth; // nAvailableTableWidth is already multiplied, rcLayout is already prepared
					}
					else if( styleNext.m_sizeWH.cx >= 0 )
					{
						bHaveExplicitWidth = true;
						nTargetTableWidth = nAvailableTableWidth; // nAvailableTableWidth is already adjusted, rcLayout is already prepared
					}
					else
						nTargetTableWidth = min( nLayoutWidthMeasured, nAvailableTableWidth );
					// step 1: compute desired size as is
					LONG nTableAsIsWidth = 0L;
					DOUBLE lfPercentRest = 1.0;
					for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
					{
						LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
						LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
//						__EXT_DEBUG_RICH_CONTENT_ASSERT( nColWidthBeforeCur >= nColWidthBeforeMin );
						LONG nColWidthAfterCur = nColWidthBeforeCur;
						DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
						if( lfColP > 0.0 )
						{
							if( lfColP > lfPercentRest )
							{
								lfColP = lfPercentRest;
								lfPercentRest = 0.0;
								aTable.m_arrWidthPrecents.SetAt( nColNo, lfColP );
							}
							else
							{
								lfPercentRest -= lfColP;
								__EXT_DEBUG_RICH_CONTENT_ASSERT( lfPercentRest >= 0.0 );
							}
							nColWidthAfterCur = LONG( DOUBLE(nTargetTableWidth) * lfColP );
						} // if( lfColP > 0.0 )
						nColWidthAfterCur = max( nColWidthAfterCur, nColWidthBeforeMin );
						if( nColWidthAfterCur != nColWidthBeforeCur )
							aTable.m_arrCWcur.SetAt( nColNo, nColWidthAfterCur );
						nTableAsIsWidth += nColWidthAfterCur;
					} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
					//nTableAsIsWidth += nBorderSpacingHoriz * ( ( sizeDim.cx > 0 ) ? ( sizeDim.cx + 1 ) : 0 ); // !!! add border spacing
					// step 2: compress/expand columns
					if( nTableAsIsWidth != nTargetTableWidth )
					{
						LONG nExpandRest = nTargetTableWidth - nTableAsIsWidth;
						LONG nAvail = nExpandRest;
						bool bExpand = ( nExpandRest > 0 ) ? true : false;
						// step 2a: compress/expand non-percent columns
						int nColWithoutPercent = 0;
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
							DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
							if( lfColP == 0.0 )
								nColWithoutPercent++;
						}
						if( nColWithoutPercent > 0 )
							nAvail /= nColWithoutPercent;
						if( ! bExpand )
						{
							// step 2b: compress non-percent columns proportionally or totally
							LONG nAvailableForCollapsing = 0L;
							for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
							{
								DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
								if( lfColP != 0.0 )
									continue;
								LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
								LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
								LONG nAvail = nColWidthBeforeCur - nColWidthBeforeMin;
								__EXT_DEBUG_RICH_CONTENT_ASSERT( nAvail >= 0 );
								nAvailableForCollapsing += nAvail;
							} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
							LONG nNom = -nExpandRest, nDeNom = nAvailableForCollapsing;
							for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
							{
								DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
								if( lfColP != 0.0 )
									continue;
								LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
								LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
								LONG nAvail = nColWidthBeforeCur - nColWidthBeforeMin;
								__EXT_DEBUG_RICH_CONTENT_ASSERT( nAvail >= 0 );
								if( nAvail == 0 )
									continue;
								LONG nColWidthAfterCur = nColWidthBeforeCur;
								if( nAvailableForCollapsing <= (-nExpandRest) )
								{
									nColWidthAfterCur -= nAvail;
									nExpandRest += nAvail;
									nAvailableForCollapsing -= nAvail;
								}
								else
								{
									nAvail = ::MulDiv( nAvail, nNom, nDeNom );
									nColWidthAfterCur -= nAvail;
									nExpandRest += nAvail;
									nAvailableForCollapsing -= nAvail;
								}
								if( nColWidthAfterCur != nColWidthBeforeCur )
									aTable.m_arrCWcur.SetAt( nColNo, nColWidthAfterCur );
								//__EXT_DEBUG_RICH_CONTENT_ASSERT( nExpandRest >= 0 );
								if( nExpandRest == 0 )
									break;
							} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nAvailableForCollapsing >= 0 );
						} // if( ! bExpand )
						// step 2c: compress/expand non-percent using rest of available spaces per column
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
							DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
							if( lfColP != 0.0 )
								continue;
							LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
							LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nColWidthBeforeCur >= nColWidthBeforeMin );
							LONG nColWidthAfterCur = nColWidthBeforeCur;
							if( bExpand )
							{
								nColWidthAfterCur += nAvail;
								nExpandRest -= nAvail;
							} // if( bExpand )
							else
							{
								LONG nAvail = nColWidthBeforeCur - nColWidthBeforeMin;
								__EXT_DEBUG_RICH_CONTENT_ASSERT( nAvail >= 0 );
								if( nAvail == 0 )
									continue;
								nAvail = min( nAvail, (-nExpandRest) );
								nColWidthAfterCur -= nAvail;
								nExpandRest += nAvail;
							} // else from if( bExpand )
							if( nColWidthAfterCur != nColWidthBeforeCur )
								aTable.m_arrCWcur.SetAt( nColNo, nColWidthAfterCur );
							//__EXT_DEBUG_RICH_CONTENT_ASSERT( nExpandRest >= 0 );
							if( nExpandRest == 0 )
								break;
						} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						if( nExpandRest != 0 )
						{
							for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
							{
								DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
								if( lfColP != 0.0 )
									continue;
								LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
								LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
								__EXT_DEBUG_RICH_CONTENT_ASSERT( nColWidthBeforeCur >= nColWidthBeforeMin );
								LONG nColWidthAfterCur = nColWidthBeforeCur;
								if( bExpand )
								{
									nColWidthAfterCur ++;
									nExpandRest --;
								} // if( bExpand )
								else
								{
									LONG nAvail = nColWidthBeforeCur - nColWidthBeforeMin;
									__EXT_DEBUG_RICH_CONTENT_ASSERT( nAvail >= 0 );
									if( nAvail == 0 )
										continue;
									nColWidthAfterCur --;
									nExpandRest ++;
								} // else from if( bExpand )
								if( nColWidthAfterCur != nColWidthBeforeCur )
									aTable.m_arrCWcur.SetAt( nColNo, nColWidthAfterCur );
								//__EXT_DEBUG_RICH_CONTENT_ASSERT( nExpandRest >= 0 );
								if( nExpandRest == 0 )
									break;
							} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						}
						LONG nAvailableForCollapsing = 0L;
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
							DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
							if( lfColP == 0.0 )
								continue;
							LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
							LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
							LONG nAvail = nColWidthBeforeCur - nColWidthBeforeMin;
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nAvail >= 0 );
							nAvailableForCollapsing += nAvail;
						} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						LONG nNom = -nExpandRest, nDeNom = nAvailableForCollapsing;
						// step 2d: compress/expand percent columns
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
							DOUBLE lfColP = aTable.m_arrWidthPrecents[nColNo];
							if( lfColP == 0.0 )
								continue;
							LONG nColWidthBeforeCur = aTable.m_arrCWcur[ nColNo ];
							LONG nColWidthBeforeMin = aTable.m_arrCWmin[ nColNo ];
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nColWidthBeforeCur >= nColWidthBeforeMin );
							LONG nAvail = nColWidthBeforeCur - nColWidthBeforeMin;///
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nAvail >= 0 );///
							if( nAvail == 0 )
								continue;
							LONG nColWidthAfterCur = nColWidthBeforeCur;
							//if( bExpand )
							if( nAvailableForCollapsing <= (-nExpandRest) )///
							{
								nColWidthAfterCur -= nAvail;///
								nExpandRest += nAvail;///
								nAvailableForCollapsing -= nAvail;///
							} // if( bExpand )
							else
							{
								nAvail = ::MulDiv( nAvail, nNom, nDeNom );///
								if( nAvail <= 0 )
									continue;
								nColWidthAfterCur -= nAvail;
								nExpandRest += nAvail;
								nAvailableForCollapsing -= nAvail;///
							} // else from if( bExpand )
							if( nColWidthAfterCur != nColWidthBeforeCur )
								aTable.m_arrCWcur.SetAt( nColNo, nColWidthAfterCur );
							//__EXT_DEBUG_RICH_CONTENT_ASSERT( nExpandRest >= 0 );
							if( nExpandRest == 0 )
								break;
						} // for( nColNo = 0; nColNo < sizeDim.cx; nCol
					} // if( nTableAsIsWidth != nTargetTableWidth )
					bool bTableLayoutChanged = true;
					// step 3: update layout back
					m_rcLayout = rcLayout;
					m_rcLayout.InflateRect( &styleNext.m_rcCellPadding );
					if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
						m_rcLayout.InflateRect( &styleNext.m_rcMargin );
					m_rcLayout.InflateRect( &styleNext.m_rcBorder );
					m_rcLayout.InflateRect( &styleNext.m_rcPadding );
					m_sizePreCalc.cx = m_rcLayout.Width();
					LONG nShiftX = 0, nShiftY = 0;
					if( sizeDim.cx > 1 && styleNext.m_sizeCellSpacing.cx >= 0 )
						nShiftX = styleNext.m_sizeCellSpacing.cx;
					if( sizeDim.cy > 1 && styleNext.m_sizeCellSpacing.cy >= 0 )
						nShiftY = styleNext.m_sizeCellSpacing.cy;
					nShiftX += nBorderSpacingHoriz; // !!! add border spacing
					nShiftY += nBorderSpacingVert; // !!! add border spacing
					LONG nX, nY = m_rcLayout.top
						+ styleNext.m_rcBorder.top
						+ styleNext.m_rcPadding.top + styleNext.m_rcCellPadding.top
						+ nBorderSpacingVert // !!! add border spacing
						;
					if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
						nY += styleNext.m_rcMargin.top;
					LONG nMaxWidth = 0, nRowWidth = 0;
					for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
					{
						CExtRichTableRow * pRow = aTable.GetAt( nRowNo );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
						if( bTableLayoutChanged )
							pRow->m_pRCI_TableRow->m_sizePreCalc.cx = rcLayout.Width();
						nX = m_rcLayout.left
							+ styleNext.m_rcBorder.left
							+ styleNext.m_rcPadding.left + styleNext.m_rcCellPadding.left
							+ nBorderSpacingHoriz // !!! add border spacing
							;
						if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
							nX += styleNext.m_rcMargin.left;
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
// if( pRow->GetSize() >= nColNo )
// 	continue;
							CExtRichContentItem * pTableCellHI = pRow->GetAt( nColNo );
							if( pTableCellHI != NULL && aTable.SpanInfoArray_GetSpanTypeAt( nColNo, nRowNo ) == 0 )
							{
								if( bTableLayoutChanged )
									pTableCellHI->m_sizePreCalc.cx = aTable.m_arrCWcur[ nColNo ];
								LONG _nX = 0L, _nY = 0L;
								CExtRichStyleDescription & styleRefEffectifveForTableCellHI = pTableCellHI->GetEffectiveStyle();
								if( styleRefEffectifveForTableCellHI.m_sizeWH.cx >= 0 )
									_nX = styleRefEffectifveForTableCellHI.m_sizeWH.cx;
								else
									_nX = pTableCellHI->m_sizePreCalc.cx;
								if( styleRefEffectifveForTableCellHI.m_sizeWH.cy >= 0 )
									_nY = styleRefEffectifveForTableCellHI.m_sizeWH.cy;
								else
									_nY = pTableCellHI->m_sizePreCalc.cy;
// 								CRect rcTableCell( nX, nY, nX + pTableCellHI->m_sizePreCalc.cx, nY + pTableCellHI->m_sizePreCalc.cy );
								CRect rcTableCell( nX, nY, nX + _nX, nY + _nY );
								CRect rcTableCellBeforeLayout = rcTableCell;
								pTableCellHI->DoLayout( dc, rcTableCell, pRCIFA, false );
								CSize sizeOffsetTableCell = rcTableCellBeforeLayout.TopLeft() - pTableCellHI->m_rcLayout.TopLeft();
								pTableCellHI->OffsetSubTree( sizeOffsetTableCell, true, true );
								pTableCellHI->m_sizePreCalc = pTableCellHI->m_rcLayout.Size();
								pRow->m_nRowHeightCur = max( pRow->m_nRowHeightCur, pTableCellHI->m_sizePreCalc.cy );
							///	pRow->m_nRowHeightMin = max( pRow->m_nRowHeightMin, pTableCellHI->m_sizeMaxChild.cy );
							} // if( pTableCellHI != NULL && aTable.SpanInfoArray_GetSpanTypeAt( nColNo, nRowNo ) == 0 )
							nX += aTable.m_arrCWcur[ nColNo ] + nShiftX;
						} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						INT _nRowWidth = nX 
							//- styleNext.m_rcBorder.right
							- styleNext.m_rcPadding.right - styleNext.m_rcCellPadding.right
							;
						if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
							_nRowWidth -= styleNext.m_rcMargin.right;
						pRow->m_pRCI_TableRow->m_rcLayout.SetRect( rcLayout.left, nY, rcLayout.left + _nRowWidth, nY + pRow->m_nRowHeightCur );
						nX = m_rcLayout.left
							+ styleNext.m_rcBorder.left
							+ styleNext.m_rcPadding.left + styleNext.m_rcCellPadding.left
							+ nBorderSpacingHoriz // !!! add border spacing
							;
						if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
							nX += styleNext.m_rcMargin.left;
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
// if( pRow->GetSize() >= nColNo )
// 	continue;
							CExtRichContentItem * pTableCellHI = pRow->GetAt( nColNo );
							if( pTableCellHI != NULL && aTable.SpanInfoArray_GetSpanTypeAt( nColNo, nRowNo ) == 0 )
							{
								pTableCellHI->m_sizePreCalc.cy = pRow->m_nRowHeightCur;
								LONG _nX = 0L, _nY = 0L;
								CExtRichStyleDescription & styleRefEffectifveForTableCellHI = pTableCellHI->GetEffectiveStyle();
								if( styleRefEffectifveForTableCellHI.m_sizeWH.cx >= 0 )
									_nX = styleRefEffectifveForTableCellHI.m_sizeWH.cx;
								else
									_nX = pTableCellHI->m_sizePreCalc.cx;
								if( styleRefEffectifveForTableCellHI.m_sizeWH.cy >= 0 )
									_nY = styleRefEffectifveForTableCellHI.m_sizeWH.cy;
								else
									_nY = pTableCellHI->m_sizePreCalc.cy;
// 								CRect rcTableCell( nX, nY, nX + pTableCellHI->m_sizePreCalc.cx, nY + pTableCellHI->m_sizePreCalc.cy );
								CRect rcTableCell( nX, nY, nX + _nX, nY + _nY );
								CRect rcTableCellBeforeLayout = rcTableCell;
								pTableCellHI->DoLayout( dc, rcTableCell, pRCIFA, false );
								CSize sizeOffsetTableCell = rcTableCellBeforeLayout.TopLeft() - pTableCellHI->m_rcLayout.TopLeft();
								pTableCellHI->OffsetSubTree( sizeOffsetTableCell, true, true );
								nRowWidth += rcTableCell.Width();
							} // if( pTableCellHI != NULL && aTable.SpanInfoArray_GetSpanTypeAt( nColNo, nRowNo ) == 0 )
							else
								nRowWidth += aTable.m_arrCWcur[nColNo];
							nX += aTable.m_arrCWcur[ nColNo ] + nShiftX;
						} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						//nRowWidth += styleNext.m_rcBorder.right; // !!!
						nMaxWidth = max( nMaxWidth, nRowWidth );
						nRowWidth = 0;
						nY += pRow->m_nRowHeightCur + nShiftY;
						if( nRowNo == ( sizeDim.cy - 1 ) && sizeDim.cy > 1 && styleNext.m_sizeCellSpacing.cy >= 0 )
							nY -= styleNext.m_sizeCellSpacing.cy;
					} // for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )

					// step 4a: adjust locations of span areas
					CList < CPoint, CPoint & > listOverflowSpanLocations;
					for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
					{
						CExtRichTableRow * pRow = aTable.GetAt( nRowNo );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
						for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
						{
// if( pRow->GetSize() >= nColNo )
// 	continue;
							CExtRichContentItem * pTableCellHI = pRow->GetAt( nColNo );
							if( pTableCellHI == NULL || bOverflowComputed ) // !!! add bOverflowComputed in case of span cells have double layout and text align
								continue;
							CSize sizeSpan = aTable.SpanInfoArray_GetAt( nColNo, nRowNo );
							if( sizeSpan.cx <= 1 && sizeSpan.cy <= 1 )
								continue;
							//pTableCellHI->GetEffectiveStyle().m_eV = CExtRichStyleDescription::ev_hidden; // <<< debug hide span roots
							CRect rcTableCell =
								aTable.GetPartAreaRect(
								nColNo,
								nRowNo,
								nColNo + sizeSpan.cx - 1,
								nRowNo + sizeSpan.cy - 1,
								true
								);
							LONG nShiftX = nBorderSpacingHoriz * (nColNo + 1); // !!! shift on border spacing
							LONG nShiftY = nBorderSpacingVert * (nRowNo + 1); // !!! shift on border spacing
							rcTableCell.left += nShiftX; // !!! add border spacing
							rcTableCell.top += nShiftY; // !!! add border spacing
							rcTableCell.right += nShiftX + ( ( sizeSpan.cx - 1 ) * nBorderSpacingHoriz ); // !!! add border spacing
							rcTableCell.bottom += nShiftY + ( ( sizeSpan.cy - 1 ) * nBorderSpacingVert ); // !!! add border spacing
							rcTableCell.OffsetRect( rcLayout.TopLeft() );
							pTableCellHI->DoLayout( dc, rcTableCell, pRCIFA, false );
							//pTableCellHI->m_rcLayout = rcTableCell;
							pTableCellHI->m_rcLayout.left = rcTableCell.left;
							pTableCellHI->m_rcLayout.right = rcTableCell.right;
							//pTableCellHI->m_rcLayout.left = rcTableCell.left;
							pTableCellHI->m_rcLayout.top = rcTableCell.top;
							LONG nDistribute = pTableCellHI->m_rcLayout.Height() - rcTableCell.Height();
							if( nDistribute > 0 )
							{
								CPoint ptSpanRoot( nColNo, nRowNo );
								listOverflowSpanLocations.AddTail( ptSpanRoot );
							}
							else
								pTableCellHI->m_rcLayout.bottom = pTableCellHI->m_rcLayout.top + rcTableCell.Height();
							pTableCellHI->m_sizePreCalc = pTableCellHI->m_rcLayout.Size();
						} // for( nColNo = 0; nColNo < sizeDim.cx; nColNo ++ )
					} // for( nRowNo = 0; nRowNo < sizeDim.cy; nRowNo ++ )
					// step 4b: extend row heights for overflow span areas
					POSITION posOverflowSpanLocation = listOverflowSpanLocations.GetHeadPosition();
					for( ; posOverflowSpanLocation != NULL; )
					{
						CPoint ptSpanRoot = listOverflowSpanLocations.GetNext( posOverflowSpanLocation );
						CExtRichContentItem * pSpanRootHI = aTable.GetAt( ptSpanRoot.y ) -> GetAt( ptSpanRoot.x );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( pSpanRootHI != NULL );
						CSize sizeSpan = aTable.SpanInfoArray_GetAt( ptSpanRoot.x, ptSpanRoot.y );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( sizeSpan.cx > 1  || sizeSpan.cy >  1 );
						__EXT_DEBUG_RICH_CONTENT_ASSERT( sizeSpan.cx >= 1 && sizeSpan.cy >= 1 );
						CSize sizeCurrentPartLayout =
							aTable.GetPartAreaRect(
							ptSpanRoot.x,
							ptSpanRoot.y,
							ptSpanRoot.x + sizeSpan.cx - 1,
							ptSpanRoot.y + sizeSpan.cy - 1,
							true
							).Size();

						LONG nHeight = pSpanRootHI->m_sizePreCalc.cy;
						LONG nDistribute = nHeight - sizeCurrentPartLayout.cy;
						if( nDistribute <= 0 )
							continue;
						CArray < LONG, LONG & > arrExtPx;
						static LONG g_nZeroVal = 0L;

						arrExtPx.InsertAt( 0, g_nZeroVal, sizeSpan.cy );
						LONG nPart = nDistribute / sizeSpan.cy, nWalkX, nWalkY;
						if( nPart > 0 )
						{
							for( nWalkY = 0; nWalkY < sizeSpan.cy; nWalkY ++ )
							{
								//CExtRichTableRow * pRow = aTable.GetAt( nWalkY + ptSpanRoot.y );
								//__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
								arrExtPx[ nWalkY ] = nPart + arrExtPx[ nWalkY ];
								//pRow->m_nRowHeightCur += nPart;
								nDistribute -= nPart;
								__EXT_DEBUG_RICH_CONTENT_ASSERT( nDistribute >= 0 );
							} // for( nWalkY = 0; nWalkY < sizeSpan.cy; nWalkY ++ )
						} // if( nPart > 0 )
						for( nWalkY = 0; nDistribute > 0 && nWalkY < sizeSpan.cy; nWalkY ++ )
						{
							//CExtRichTableRow * pRow = aTable.GetAt( nWalkY + ptSpanRoot.y );
							//__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
							//pRow->m_nRowHeightCur ++;
							arrExtPx[ nWalkY ] = 1 + arrExtPx[ nWalkY ];
							nDistribute --;
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nDistribute >= 0 );
						} // for( nWalkY = 0; nDistribute > 0 && nWalkY < sizeSpan.cy; nWalkY ++ )
						__EXT_DEBUG_RICH_CONTENT_ASSERT( nDistribute == 0 );
						LONG nAccumulatedOffset = 0L;
						for( nWalkY = 0; nWalkY < sizeSpan.cy; nWalkY ++ )
						{
							LONG nExt = arrExtPx[ nWalkY ];
							__EXT_DEBUG_RICH_CONTENT_ASSERT( nExt >= 0L );
							if( nExt == 0 )
								continue;
							CExtRichTableRow * pRow = aTable.GetAt( nWalkY + ptSpanRoot.y );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
							pRow->m_nRowHeightCur += nExt;
							for( nWalkX = 0; nWalkX < sizeDim.cx; )
							{
// if( pRow->GetSize() >= nColNo )
// 	continue;
								CExtRichContentItem * pTableCellHI = pRow->GetAt( nWalkX );
								CSize sizeSpanOther = aTable.SpanInfoArray_GetAt( nWalkX, nWalkY + ptSpanRoot.y );
								if( sizeSpanOther.cy < 1 )
								{
									if( sizeSpanOther.cx == 0 )
									{
										CExtRichContentItem * pOtherSpanHI =
											aTable.GetAt( nWalkY + ptSpanRoot.y + sizeSpanOther.cy ) -> GetAt( nWalkX );
										pOtherSpanHI->m_rcLayout.bottom += nExt;
									}
									nWalkX ++;
									continue;
								}
/*
								if( sizeSpanOther.cy > 1 )
								{
									if( sizeSpanOther.cx >= 1 )
									{
										CExtRichContentItem * pOtherSpanHI =
											aTable.GetAt( nWalkY + ptSpanRoot.y + sizeSpanOther.cy ) -> GetAt( nWalkX );
										pOtherSpanHI->m_rcLayout.bottom += nExt;
//					CSize sizeOffset( 0, nAccumulatedOffset );
//					pOtherSpanHI->OffsetSubTree( sizeOffset, true, true );
										nWalkX += sizeSpanOther.cx;
									}
									else
										nWalkX ++;
									continue;
								}
*/
								if( pTableCellHI == NULL )
								{
									nWalkX ++;
									continue;
								}
								pTableCellHI->m_rcLayout.bottom += nExt;
								CSize sizeOffset( 0, nAccumulatedOffset );
								pTableCellHI->OffsetSubTree( sizeOffset, true, true );
								nWalkX ++;
								if( nWalkX == ptSpanRoot.x )
									nWalkX += sizeSpan.cx;
							} // for( nWalkX = 0; nWalkX < sizeDim.cx; )
							nAccumulatedOffset += nExt;
						} // for( nWalkY = 0; nWalkY < sizeSpan.cy; nWalkY ++ )
						nY += nAccumulatedOffset;
						for( nWalkY = ptSpanRoot.y + sizeSpan.cy; nWalkY < sizeDim.cy; nWalkY ++ )
						{ // offset rest of bottom rows
							CExtRichTableRow * pRow = aTable.GetAt( nWalkY );
							__EXT_DEBUG_RICH_CONTENT_ASSERT( pRow != NULL );
							for( nWalkX = 0; nWalkX < sizeDim.cx; nWalkX ++ )
							{
// if( pRow->GetSize() >= nColNo )
// 	continue;
								CExtRichContentItem * pTableCellHI = pRow->GetAt( nWalkX );
								if( pTableCellHI == NULL )
									continue;
								CSize sizeOffset( 0, nAccumulatedOffset );
								pTableCellHI->OffsetSubTree( sizeOffset, true, true );
							} // for( nWalkX = 0; nWalkX < sizeDim.cx; nWalkX ++ )
						} // offset rest of bottom rows
					} // for( ; posOverflowSpanLocation != NULL; )

					// step 5:  finalize
					m_sizePreCalc.cy = nY - m_rcLayout.top // rcLayout.top
						//+ styleNext.m_rcBorder.bottom
						+ styleNext.m_rcPadding.bottom + styleNext.m_rcCellPadding.bottom
						;
					if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
						m_sizePreCalc.cy += styleNext.m_rcMargin.bottom;
					LONG nRight = m_rcLayout.left + nMaxWidth 
						//+ styleNext.m_rcBorder.left + styleNext.m_rcBorder.right 
						+ styleNext.m_rcPadding.left + styleNext.m_rcPadding.right
						+ ( ( sizeDim.cx > 1 && styleNext.m_sizeCellSpacing.cx >= 0 ) ? ( styleNext.m_sizeCellSpacing.cx * ( sizeDim.cx - 1 ) ) : 0 )
						;
					if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
						nRight += styleNext.m_rcMargin.left + styleNext.m_rcMargin.right
								+ nBorderSpacingHoriz * ( ( sizeDim.cx > 0 ) ? ( sizeDim.cx + 1 ) : 0 ); // !!! add border spacing
					nRight += styleNext.m_rcBorder.left; // + styleNext.m_rcBorder.right;
					m_rcLayout.SetRect(
						m_rcLayout.left, //  + styleNext.m_rcBorder.left
						m_rcLayout.top + styleNext.m_rcBorder.top,
						nRight + styleNext.m_rcCellPadding.left + styleNext.m_rcCellPadding.right,
						m_rcLayout.top + m_sizePreCalc.cy 
						//+ nBorderSpacingVert * ( ( sizeDim.cy > 0 ) ? ( sizeDim.cy + 1 ) : 0 ) // !!! add border spacing
						);
					//rcLayout.InflateRect( &styleNext.m_rcBorder );
					m_sizePreCalc.cx = m_rcLayout.Width();
				}
			break; // case CExtRichStyleDescription::ed_table, case CExtRichStyleDescription::ed_inline_table
			} // switch( eD )
		} // else from if( IsParagraphItem() )
	}
	break;
	case __EHIT_TITLE:
	case __EHIT_STYLE:
	case __EHIT_SCRIPT:
	case __EHIT_META:
	case __EHIT_LINK:
	break;
#ifdef _DEBUG
	default:
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
	break;
#endif // _DEBUG
	} // switch( m_eType )

	if( ! bThisIsStyleOwner )
		return;

bool bComputeOverflowH = false, bComputeOverflowV = false;
CRect rcLayoutCompare( m_rcLayout );
	if( GetDisplay() == CExtRichStyleDescription::ed_ui_dock )
	{
		m_rcLayout = rcLayoutExactNC = _rcStartLayout;
		bComputeOverflowH = bComputeOverflowV = bComputeUnionLayout = true;
	}
	else
	{
		if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
			rcLayoutCompare.InflateRect( &styleNext.m_rcMargin );
		rcLayoutCompare.InflateRect( &styleNext.m_rcBorder );
		rcLayoutCompare.InflateRect( &styleNext.m_rcPadding );
		if( ! bOverflowComputed )
		{
			if( bHaveExactWidthSpec )
			{
				bComputeOverflowH = bComputeUnionLayout = true;
				m_rcLayout.left = rcLayoutExactNC.left;
				m_rcLayout.right = rcLayoutExactNC.right;
				if( GetDisplay() == CExtRichStyleDescription::ed_table || GetDisplay() == CExtRichStyleDescription::ed_inline_table ) // !!!
				{
					CExtRichTableLayout & aTable = _GetTable();
					LONG nLayoutWidthMin = aTable.GetMeasuredWidthMin();
					LONG nMinWidth = nLayoutWidthMin
						+ styleNext.m_rcBorder.left + styleNext.m_rcBorder.right
						+ styleNext.m_rcMargin.left + styleNext.m_rcMargin.right
						+ styleNext.m_rcPadding.left + styleNext.m_rcPadding.right
						;
					if( styleNext.m_eBC == CExtRichStyleDescription::ebc_separate )
					{
						LONG nBorderSpacingH = styleNext.m_nBorderSpacingHoriz * ( ( aTable.GetDim().cx > 0 )? ( aTable.GetDim().cx + 1 ) : 0 );
						nMinWidth += nBorderSpacingH;
						nLayoutWidthMin += nBorderSpacingH;
					}

					if( m_rcLayout.Width() < nMinWidth ) // !!!
					{
						m_rcLayout.left += styleNext.m_rcBorder.left + styleNext.m_rcMargin.left + styleNext.m_rcPadding.left;
						m_rcLayout.right = m_rcLayout.left + nLayoutWidthMin; // !!!
						m_sizePreCalc.cx = m_rcLayout.Width();
						bComputeOverflowH = false; // !!!
					}
				} // if( GetDisplay() == CExtRichStyleDescription::ed_table || GetDisplay() == CExtRichStyleDescription::ed_inline_table )
			}
			if( bHaveExactHeightSpec )
			{
				bComputeOverflowV = bComputeUnionLayout = true;
				m_rcLayout.top = rcLayoutExactNC.top;
				m_rcLayout.bottom = rcLayoutExactNC.bottom;
			}
		} // if( ! bOverflowComputed )
	}

	if( bWalkChildren || bComputeUnionLayout )
	{
		bool bHaveInitialUnionLayout = false;
		POSITION pos = m_listItems.GetHeadPosition();
		for( ; pos != NULL; ) 
		{
			CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			if( INT(pRCI->m_eType) >= INT(__EHIT_SPEC_START) )
				continue;
			if(		pRCI->IsUnknownItem() 
				&&	pRCI->m_eType == __EHIT_GENERIC_TAG 
				&&	pRCI->GetDisplay() != CExtRichStyleDescription::ed_table
				&&	pRCI->GetDisplay() != CExtRichStyleDescription::ed_inline_table
				&&	pRCI->GetDisplay() != CExtRichStyleDescription::ed_inline_block
				)
				continue;
			CExtRichStyleDescription::e_position_t eP_RCI = pRCI->GetPosition();
			if( eP_RCI == CExtRichStyleDescription::ep_absolute || eP_RCI == CExtRichStyleDescription::ep_fixed )
				continue;
			if( pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock )
				continue;
			bool bNoLayoutRectItem = 
					(	pRCI->IsNoLayoutRectItem() 
					&&	pRCI->QueryGenericTagName() != _T("img") 
					&&	(! pRCI->IsNoWrapSequence() )
					&&	pRCI->m_listItems.GetCount() > 0 
					) 
					? true : false;
			if( bNoLayoutRectItem )
				pRCI->CalcualateNoLayoutRectItemsSize();
			if(		bComputeUnionLayout
				&&	pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom
				)
			{
				if( bHaveInitialUnionLayout )
				{
					if( ! bHaveExactWidthSpec )
					{
						m_rcLayout.left = min( m_rcLayout.left, pRCI->m_rcLayout.left );
						m_rcLayout.right = max( m_rcLayout.right, pRCI->m_rcLayout.right );
					}
					if( ! bHaveExactHeightSpec )
					{
						m_rcLayout.top = min( m_rcLayout.top, pRCI->m_rcLayout.top );
						m_rcLayout.bottom = max( m_rcLayout.bottom, pRCI->m_rcLayout.bottom );
					}
				}
				else
				{
					POINT ptTopLeft = pRCI->m_rcLayout.TopLeft();
					if( styleNext.m_eWST == CExtRichStyleDescription::ewstNoWrap )
					{
						ptTopLeft.x	-= styleNext.m_nParaIndent;
						if( ptTopLeft.x < 0 )
							ptTopLeft.x = 0;
					}
					CRect rcU( ptTopLeft, pRCI->m_rcLayout.BottomRight() );
					if( ! bHaveExactWidthSpec )
					{
						m_rcLayout.left = rcU.left;
						m_rcLayout.right = rcU.right;
					}
					if( ! bHaveExactHeightSpec )
					{
						m_rcLayout.top = rcU.top;
						m_rcLayout.bottom = rcU.bottom;
					}
					bHaveInitialUnionLayout = true;
				}
			}

			if( bNoLayoutRectItem )
				pRCI->EmptyNoLayoutRectItemsSize();
		} // for( ; pos != NULL; )
		if( bComputeUnionLayout )
		{
			CExtRichStyleDescription::e_display_t eD_TD = GetDisplay();
			if( m_rcLayout.IsRectEmpty() && IsParagraphItem() && eD_TD != CExtRichStyleDescription::ed_table_cell )
			{
				if( ! bHaveExactHeightSpec )
				{
					m_rcLayout.top = rcLayout.top;
					m_rcLayout.bottom = rcLayout.top;
				}
				if( ! bHaveExactWidthSpec )
				{
					m_rcLayout.left = rcLayout.left;
					m_rcLayout.right = rcLayout.left;
					LONG nWidthBefore = rcLayout.Width();
					LONG nWidthAfter = nWidthBefore;
					if( styleNext.m_sizeWHP.cx >= 0 || styleNext.m_sizeWH.cx >= 0 )
					{
						if( styleNext.m_sizeWHP.cx >= 0 )
						{ // if we gave width=some% in percents
							__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= styleNext.m_sizeWHP.cx && styleNext.m_sizeWHP.cx <= 100 );
							nWidthAfter = ::MulDiv( nWidthBefore, styleNext.m_sizeWHP.cx, 100 );
						} // if we gave width=some% in pixels
						else if( styleNext.m_sizeWH.cx >= 0 )
							nWidthAfter = styleNext.m_sizeWH.cx;
						nWidthAfter = max( nWidthAfter, m_sizeMaxChild.cx );
					} // if( styleNext.m_sizeWHP.cx >= 0 || styleNext.m_sizeWH.cx >= 0 )
					if( nWidthAfter != nWidthBefore || styleNext.m_sizeWHP.cx >= 0 )
						m_rcLayout.right = rcLayout.right;
				}
			}
			m_rcLayout.InflateRect( &styleNext.m_rcCellPadding );
			if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
				m_rcLayout.InflateRect( &styleNext.m_rcMargin );
			m_rcLayout.InflateRect( &styleNext.m_rcBorder );
			m_rcLayout.InflateRect( &styleNext.m_rcPadding );
			if( m_layout.m_bRemoveSpacecBetweenParagraphs )
				m_rcLayout.bottom -= nHelperTmInternalLeadingMax_LastP;
		}
		if( bComputeUnionLayout && bFullWidthParagraphLayout )
		{
			m_rcLayout.left = min( m_rcLayout.left, _rcStartLayout.left );
			if( _rcStartLayout.right < __EXT_RICH_CONTENT_BIG_EXTENT )
				m_rcLayout.right = max( m_rcLayout.right, _rcStartLayout.right );
		}
	} // if( bWalkChildren || bComputeUnionLayout )

CSize sizeOffset( 0, 0 );
CSize sizeMin( max( styleNext.m_sizeWH.cx, m_sizePreCalc.cx ), max( styleNext.m_sizeWH.cy, m_sizePreCalc.cy ) );
	if( sizeMin.cx >= 0 && m_rcLayout.Width() < sizeMin.cx )
	{
		switch( styleNext.m_eaH )
		{
		case CExtRichStyleDescription::eahCenter:
			sizeOffset.cx = ( sizeMin.cx - m_rcLayout.Width() ) / 2;
		break;
		case CExtRichStyleDescription::eahRight:
			sizeOffset.cx = sizeMin.cx - m_rcLayout.Width();
		break;
		} // switch( styleNext.m_eaH )
		m_rcLayout.right = m_rcLayout.left + sizeMin.cx;
	}
	if( sizeMin.cy >= 0 && m_rcLayout.Height() < sizeMin.cy )
	{
		switch( styleNext.m_eaV )
		{
		case CExtRichStyleDescription::eavMiddle:
			sizeOffset.cy = ( sizeMin.cy - m_rcLayout.Height() ) / 2;
		break;
		case CExtRichStyleDescription::eavBottom:
			sizeOffset.cy = sizeMin.cy - m_rcLayout.Height();
		break;
		} // switch( styleNext.m_eaV )
		m_rcLayout.bottom = m_rcLayout.top + sizeMin.cy;
	}

/*
	if( styleNext.m_nMaxWidth >= 0 )
	{
		if( m_rcLayout.Width() > styleNext.m_nMaxWidth )
			m_rcLayout.right = m_rcLayout.left + styleNext.m_nMaxWidth;
		bComputeOverflowH = true;
	}
	if( styleNext.m_nMaxHeight >= 0 )
	{
		if( m_rcLayout.Height() > styleNext.m_nMaxHeight )
			m_rcLayout.bottom = m_rcLayout.top + styleNext.m_nMaxHeight;
		bComputeOverflowV = true;
	}
	if( styleNext.m_nMinWidth >= 0 )
	{
		if( m_rcLayout.Width() < styleNext.m_nMinWidth )
			m_rcLayout.right = m_rcLayout.left + styleNext.m_nMinWidth;
		bComputeOverflowH = true;
	}
	if( styleNext.m_nSpacerModeMinWidth != 0 )
	{
		if( m_rcLayout.Width() < styleNext.m_nSpacerModeMinWidth )
			m_rcLayout.right = m_rcLayout.left + styleNext.m_nSpacerModeMinWidth;
		bComputeOverflowH = true;
	}
	if( styleNext.m_nMinHeight >= 0 )
	{
		if( m_rcLayout.Height() < styleNext.m_nMinHeight )
			m_rcLayout.bottom = m_rcLayout.top + styleNext.m_nMinHeight;
		bComputeOverflowV = true;
	}
*/

	if( styleNext.m_sizeWH.cx >= 0 && m_rcLayout.Width() < styleNext.m_sizeWH.cx )
	{
		switch( styleNext.m_eaH )
		{
		case CExtRichStyleDescription::eahCenter:
			sizeOffset.cx = ( styleNext.m_sizeWH.cx - m_rcLayout.Width() ) / 2;
		break;
		case CExtRichStyleDescription::eahRight:
			sizeOffset.cx = styleNext.m_sizeWH.cx - m_rcLayout.Width();
		break;
		} // switch( styleNext.m_eaH )
		m_rcLayout.right = m_rcLayout.left + styleNext.m_sizeWH.cx;
	}
	if( styleNext.m_sizeWH.cy >= 0 && m_rcLayout.Height() < styleNext.m_sizeWH.cy )
	{
		switch( styleNext.m_eaV )
		{
		case CExtRichStyleDescription::eavMiddle:
			sizeOffset.cy = ( styleNext.m_sizeWH.cy - m_rcLayout.Height() ) / 2;
		break;
		case CExtRichStyleDescription::eavBottom:
			sizeOffset.cy = styleNext.m_sizeWH.cy - m_rcLayout.Height();
		break;
		} // switch( styleNext.m_eaV )
		m_rcLayout.bottom = m_rcLayout.top + styleNext.m_sizeWH.cy;
	}

	if( m_pParent != NULL )
	{
		const CExtRichStyleDescription & styleWalk = m_pParent->GetEffectiveStyle();
		if( styleWalk.m_sizeWH.cx > 0 )
		{
			if( styleNext.m_lfMaxWidthP >= 0.0 )
			{
				LONG nMaxWidth = LONG( DOUBLE(styleWalk.m_sizeWH.cx) * styleNext.m_lfMaxWidthP / 100.0 );
				if( m_rcLayout.Width() > nMaxWidth )
					m_rcLayout.right = m_rcLayout.left + nMaxWidth;
			}
			if( styleNext.m_lfMinWidthP >= 0.0 )
			{
				LONG nMinWidth = LONG( DOUBLE(styleWalk.m_sizeWH.cx) * styleNext.m_lfMinWidthP / 100.0 );
				if( m_rcLayout.Width() < nMinWidth )
					m_rcLayout.right = m_rcLayout.left + nMinWidth;
			}
		} // if( styleWalk.m_sizeWH.cx > 0 )
		if( styleWalk.m_sizeWH.cy > 0 )
		{
			if( styleNext.m_lfMaxHeightP >= 0.0 )
			{
				LONG nMaxHeight = LONG( DOUBLE(styleWalk.m_sizeWH.cy) * styleNext.m_lfMaxHeightP / 100.0 );
				if( m_rcLayout.Height() > nMaxHeight )
					m_rcLayout.bottom = m_rcLayout.top + nMaxHeight;
			}
			if( styleNext.m_lfMinHeightP >= 0.0 )
			{
				LONG nMinHeight = LONG( DOUBLE(styleWalk.m_sizeWH.cy) * styleNext.m_lfMinHeightP / 100.0 );
				if( m_rcLayout.Height() < nMinHeight )
					m_rcLayout.bottom = m_rcLayout.top + nMinHeight;
			}
		} // if( styleWalk.m_sizeWH.cy > 0 )
	} // if( m_pParent != NULL )

	OffsetSubTree( sizeOffset, false );

	if( bComputeUnionLayoutForTableParts )
	{
		CExtRichStyleDescription::e_display_t eD = GetDisplay();
		switch( eD )
		{
		case CExtRichStyleDescription::ed_inline_table:
		case CExtRichStyleDescription::ed_table:
		case CExtRichStyleDescription::ed_table_header_group:
		case CExtRichStyleDescription::ed_table_row_group:
		case CExtRichStyleDescription::ed_table_footer_group:
		case CExtRichStyleDescription::ed_table_row:
		{
			for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
			{
				CExtRichContentItem * pChildRCI = m_listItems.GetNext( pos );
				CExtRichStyleDescription::e_display_t eD_child = pChildRCI->GetDisplay();
				switch( eD_child )
				{
				case CExtRichStyleDescription::ed_table_header_group:
				case CExtRichStyleDescription::ed_table_row_group:
				case CExtRichStyleDescription::ed_table_footer_group:
				case CExtRichStyleDescription::ed_table_row:
					pChildRCI->DoLayout( dc, _rcStartLayout, pRCIFA, false );
				break;
				} // switch( eD_child )
			} // for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
		}
		break;
		} // switch( eD )
		if(		eD != CExtRichStyleDescription::ed_table
			&&	eD != CExtRichStyleDescription::ed_inline_table
			)
			DoLayout_ComputeChildUnionForTableGroup();
	} // if( bComputeUnionLayoutForTableParts )

	if( GetDisplay() == CExtRichStyleDescription::ed_ui_dock )
		m_rcLayout = rcLayoutExactNC = _rcStartLayout;

	if( ! bOverflowComputed )
	{
		bool bReLayoutAfterOverflow = false;
		if( bComputeOverflowH )
		{
			bReLayoutAfterOverflow = true;
			m_sizeOverflow.cx = rcLayoutCompare.Width() - rcLayoutExactNC.Width();
			m_rcLayout.left = rcLayoutExactNC.left;
			m_rcLayout.right = rcLayoutExactNC.right;
		}
		if( bComputeOverflowV )
		{
			bReLayoutAfterOverflow = true;
			m_sizeOverflow.cy = rcLayoutCompare.Height() - rcLayoutExactNC.Height();
			m_rcLayout.top = rcLayoutExactNC.top;
			m_rcLayout.bottom = rcLayoutExactNC.bottom;
		}
		if( m_sizeOverflow.cx > 0 && m_sizeOverflow.cy > 0 )
		{
			m_sizeOverflow.cx += Scrolling_GetVerticalScrollBarWidth();
			m_sizeOverflow.cy += Scrolling_GetHorizontalScrollBarHeight();
		}
		m_sizeOverflow.cx = max( m_sizeOverflow.cx, 0 );
		m_sizeOverflow.cy = max( m_sizeOverflow.cy, 0 );
		if( bReLayoutAfterOverflow )
		{
			CRect rcLayoutSaved = m_rcLayout;
			DoLayout( dc, _rcStartLayout, pRCIFA, true );
			m_rcLayout = rcLayoutSaved;
		}
	} // if( ! bOverflowComputed )
	if( bCheckSbInfoH )
	{
		CRect rcSB_tmp( 0, 0, 20, 200 );
		CExtPaintManager::PAINTSCROLLBARDATA _psbd;
		Scrolling_FillScrollBarInfo( true, rcSB_tmp, &_psbd );
	}
	if( bCheckSbInfoV )
	{
		CRect rcSB_tmp( 0, 0, 200, 20 );
		CExtPaintManager::PAINTSCROLLBARDATA _psbd;
		Scrolling_FillScrollBarInfo( false, rcSB_tmp, &_psbd );
	}
}

void CExtRichContentItem::DoLayout_ComputeChildUnionForTableGroup()
{
bool bFirst = true;
	for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pChildRCI = m_listItems.GetNext( pos );
		CExtRichStyleDescription::e_display_t eD_child = pChildRCI->GetDisplay();
		switch( eD_child )
		{
		case CExtRichStyleDescription::ed_table_header_group:
		case CExtRichStyleDescription::ed_table_row_group:
		case CExtRichStyleDescription::ed_table_footer_group:
		case CExtRichStyleDescription::ed_table_row:
		case CExtRichStyleDescription::ed_table_cell:
			if( bFirst )
			{
				m_rcLayout = pChildRCI->m_rcLayout;
				bFirst = false;
			}
			else
			{
				m_rcLayout.left = min( m_rcLayout.left, pChildRCI->m_rcLayout.left );
				m_rcLayout.top = min( m_rcLayout.top, pChildRCI->m_rcLayout.top );
				m_rcLayout.right = max( m_rcLayout.right, pChildRCI->m_rcLayout.right );
				m_rcLayout.bottom = max( m_rcLayout.bottom, pChildRCI->m_rcLayout.bottom );
			}
		break;
		} // switch( eD_child )
	} // for( POSITION pos = m_listItems.GetHeadPosition(); pos != NULL; )
}

void CExtRichContentItem::CalcualateNoLayoutRectItemsSize()
{
	if( ( ! m_rcLayout.IsRectEmpty() ) && ( ! m_rcLayout.IsRectNull() ) && (! IsNoLayoutRectItem() ) )
		return;
	if( QueryGenericTagName() == _T("img") )
		return;

	if( IsNoLayoutRectItem() )
		m_rcLayout.SetRect( 0, 0, 0, 0 );

	POSITION pos = m_listItems.GetHeadPosition();
	for( ;pos != NULL; )
	{
		CExtRichContentItem * _hHIChild = m_listItems.GetNext( pos );
		if( _hHIChild->m_rcLayout.IsRectEmpty() || _hHIChild->m_rcLayout.IsRectNull() || _hHIChild->IsNoLayoutRectItem() )
			_hHIChild->CalcualateNoLayoutRectItemsSize();

		if(		_hHIChild->m_rcLayout.IsRectEmpty() 
			&&	_hHIChild->GetDisplay() == CExtRichStyleDescription::ed_inline 
			&&	_hHIChild->m_listItems.GetCount() == 0
			)
			continue;

 		if( m_rcLayout.IsRectEmpty() )
			m_rcLayout.CopyRect( LPCRECT( _hHIChild->m_rcLayout ) );
		else if( ! ( _hHIChild->m_eType == __EHIT_TEXT_SPACE && _hHIChild->m_rcLayout.IsRectEmpty() ) )
		{
			m_rcLayout.left = min( m_rcLayout.left, _hHIChild->m_rcLayout.left );
			m_rcLayout.top = min( m_rcLayout.top, _hHIChild->m_rcLayout.top );
			m_rcLayout.right = max( m_rcLayout.right, _hHIChild->m_rcLayout.right );
			m_rcLayout.bottom = max( m_rcLayout.bottom, _hHIChild->m_rcLayout.bottom );
		}
	} // for( ;pos != NULL; )
}

void CExtRichContentItem::EmptyNoLayoutRectItemsSize()
{
	if( (! IsNoLayoutRectItem()) || QueryGenericTagName() == _T("img") || IsNoWrapSequence() )
		return;
// 	if( m_rcLayout.IsRectEmpty() && m_rcLayout.IsRectNull() )
// 		return;

	POSITION pos = m_listItems.GetHeadPosition();
	for( ;pos != NULL; )
	{
		CExtRichContentItem * _hHIChild = m_listItems.GetNext( pos );
		if( _hHIChild->IsNoLayoutRectItem() )
		{
			_hHIChild->EmptyNoLayoutRectItemsSize();
			if( ( ! m_rcLayout.IsRectEmpty() ) || ( ! m_rcLayout.IsRectNull() ) )
				m_rcLayout.SetRect( 0, 0, 0, 0 );
		}
	}
}

void CExtRichContentItem::OffsetSubTree(
	const SIZE & sizeOffset,
	bool bOffsetThisNode, // = true
	bool bOffsetSubTree, // = true
	bool bOffsetFloatingElements // = false
	)
{
	if( ! bOffsetFloatingElements )
	{
		const CExtRichStyleDescription & styleElemFT = GetEffectiveStyle();
		if(		styleElemFT.m_eF == CExtRichStyleDescription::ef_left
			||	styleElemFT.m_eF == CExtRichStyleDescription::ef_right
			)
		return;
	}
	if( sizeOffset.cx == 0 && sizeOffset.cy == 0 )
		return;
	if( bOffsetThisNode )
		m_rcLayout.OffsetRect( sizeOffset );
	if( ! bOffsetSubTree )
		return;
POSITION pos = m_listItems.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		//const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
		CExtRichStyleDescription::e_position_t eP_RCI = pRCI->GetPosition();
		if( eP_RCI == CExtRichStyleDescription::ep_absolute || eP_RCI == CExtRichStyleDescription::ep_fixed )
			continue;
		pRCI->OffsetSubTree( sizeOffset );
	} // for( ; pos != NULL; )
}

void CExtRichContentItem::UnionSubTree(
	bool bOneLevelOnly // = true
	)
{
bool bFirst = true;
POSITION pos = m_listItems.GetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		CExtRichStyleDescription::e_display_t eD = pRCI->GetDisplay();
		if( eD == CExtRichStyleDescription::ed_none )
			continue;
/*
		if(		eD == CExtRichStyleDescription::ed_inline
			&&	pRCI->m_listItems.GetCount() == 0
			)
			continue;
*/
		CExtRichStyleDescription::e_visibility_t eV = pRCI->GetVisibility();
		if( eV == CExtRichStyleDescription::ev_hidden )
			continue;
		if( ! bOneLevelOnly )
			pRCI->UnionSubTree( false );
		if( bFirst )
		{
			bFirst = false;
			m_rcLayout = pRCI->m_rcLayout;
		}
		else
		{
			m_rcLayout.left   = min( m_rcLayout.left,   pRCI->m_rcLayout.left   );
			m_rcLayout.top    = min( m_rcLayout.top,    pRCI->m_rcLayout.top    );
			m_rcLayout.right  = max( m_rcLayout.right,  pRCI->m_rcLayout.right  );
			m_rcLayout.bottom = max( m_rcLayout.bottom, pRCI->m_rcLayout.bottom );
		}
	} // for( ; pos != NULL; )
	if( bFirst )
		m_rcLayout.SetRect( 0, 0, 0, 0 );
}

LONG CExtRichContentItem::DoVerticalAlign( POSITION posStart, POSITION posEnd, CTypedPtrList < CPtrList, CExtRichContentItem * > * listItems, LONG nLineHeight )
{
	if( posStart == NULL || listItems->GetCount() == 0 || nLineHeight <= 0 )
		return 0L;
LONG nRetVal = 0L;
LONG nLineHeightWithoutTopMiddleVertAlign, nTextLineHeight, nMaxMiddleHeight, nMaxTextBottomHeight, nMaxTextTopHeight;
	nLineHeightWithoutTopMiddleVertAlign = nTextLineHeight = nMaxMiddleHeight = nMaxTextBottomHeight = nMaxTextTopHeight = 0;
bool bThereIsMiddle, bThereIsTop, bThereIsBottom, bThereIsTextTop, bThereIsTextBottom, bThereIsBaseLine;
	bThereIsMiddle = bThereIsTop = bThereIsBottom = bThereIsTextTop = bThereIsTextBottom = bThereIsBaseLine = false;
POSITION posSaved = posStart;
POSITION posStartLine = posSaved;
	for( ; posStartLine != posEnd && posStartLine != NULL; )
	{
		CExtRichContentItem * pRCI = listItems->GetNext( posStartLine );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		const CExtRichStyleDescription & _styleVertAlign = pRCI->GetEffectiveStyle();
		if( pRCI->QueryGenericTagName() == _T("img") )
		{
			if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavMiddle )
				bThereIsMiddle = true;
			if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavTop )
				bThereIsTop = true;
			if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavTextTop )
				bThereIsTextTop = true;
			if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavTextBottom )
				bThereIsTextBottom = true;
			if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavBottom )
				bThereIsBottom = true;
			if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavBaseLine )
				bThereIsBaseLine = true;
			if( bThereIsMiddle && bThereIsTop && bThereIsBottom && bThereIsTextTop && bThereIsTextBottom && bThereIsBaseLine )
				break;
		}
	}
	if(		bThereIsMiddle
		||	bThereIsTop
		||	bThereIsTextTop
		)
	{
		posStartLine = posSaved;
		for( ; posStartLine != posEnd && posStartLine != NULL; )
		{
			CExtRichContentItem * pRCI = listItems->GetNext( posStartLine );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			const CExtRichStyleDescription & _styleVertAlign = pRCI->GetEffectiveStyle();
			if( pRCI->QueryGenericTagName() == _T("img") )
			{
				if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavMiddle )
					nMaxMiddleHeight = max( nMaxMiddleHeight, pRCI->m_rcLayout.Height() );
				if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavTextBottom )
					nMaxTextBottomHeight = max( nMaxTextBottomHeight, pRCI->m_rcLayout.Height() );
				if( _styleVertAlign.m_eaV == CExtRichStyleDescription::eavTextTop )
					nMaxTextTopHeight = max( nMaxTextTopHeight, pRCI->m_rcLayout.Height() );
			}
			if(		pRCI->IsParagraphItem() 
				||	pRCI->m_rcLayout.IsRectEmpty() 
				||	(	pRCI->QueryGenericTagName() == _T("img") 
					&&	(	_styleVertAlign.m_eaV == CExtRichStyleDescription::eavMiddle
						||	_styleVertAlign.m_eaV == CExtRichStyleDescription::eavTop
						||	_styleVertAlign.m_eaV == CExtRichStyleDescription::eavTextTop
 						||	_styleVertAlign.m_eaV == CExtRichStyleDescription::eavBottom
						)
					)
				)
				continue;
			nLineHeightWithoutTopMiddleVertAlign = max( nLineHeightWithoutTopMiddleVertAlign, pRCI->m_rcLayout.Height() );
			if( pRCI->m_eType == __EHIT_TEXT_RANGE )
				nTextLineHeight = max( nTextLineHeight, pRCI->m_rcLayout.Height() );
		}
		__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineHeightWithoutTopMiddleVertAlign <= nLineHeight );

		LONG nUpPartOfHeight = max( 
			( ( nMaxMiddleHeight - nTextLineHeight ) / 2 ),
			( nMaxTextBottomHeight - nTextLineHeight )
			);

		LONG nBottomPartOfHeight = max( 
			( ( nMaxMiddleHeight - nTextLineHeight ) / 2 ),
			( nMaxTextTopHeight - nTextLineHeight )
			);
		
		LONG nNewLineHeight = nUpPartOfHeight + nBottomPartOfHeight + nTextLineHeight;

		if( nNewLineHeight > nLineHeight ) // Offset every element in line to bottom of NewLineHeight
		{
			nRetVal = nNewLineHeight;
			posStartLine = posSaved;
			for( ; posStartLine != posEnd && posStartLine != NULL; )
			{
				CExtRichContentItem * pRCI = listItems->GetNext( posStartLine );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				// const CExtRichStyleDescription & _styleVertAlign = pRCI->GetEffectiveStyle();
				if(	pRCI->IsParagraphItem() )
					break;
				if(	pRCI->m_rcLayout.IsRectEmpty() )
					continue;
				int nVertAlignShift = (nNewLineHeight - nLineHeight);
				if( nVertAlignShift == 0 )
					continue;
				if( nVertAlignShift != 0 )
					pRCI->OffsetSubTree( CSize( 0, nVertAlignShift ), true, true );
			}
		}
////////////////////////////////////////////////////////////////////////// TextTop
		if( bThereIsTextTop )
		{
			posStartLine = posSaved;
			for( ; posStartLine != posEnd && posStartLine != NULL; )
			{
				CExtRichContentItem * pRCI = listItems->GetNext( posStartLine );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				const CExtRichStyleDescription & _styleVertAlign = pRCI->GetEffectiveStyle();
				if(	pRCI->IsParagraphItem() )
					break;
				if(		pRCI->m_rcLayout.IsRectEmpty()
					||	pRCI->QueryGenericTagName() != _T("img") 
					||	(	pRCI->QueryGenericTagName() == _T("img") 
						&&	_styleVertAlign.m_eaV != CExtRichStyleDescription::eavTextTop
						)
					)
					continue;
				int nVertAlignShift = ( pRCI->m_rcLayout.Height() - nTextLineHeight );
				if( nVertAlignShift == 0 )
					continue;
				if( nVertAlignShift != 0 )
					pRCI->OffsetSubTree( CSize( 0, nVertAlignShift ), true, true );
			}
		}
////////////////////////////////////////////////////////////////////////// Middle
		if( bThereIsMiddle )
		{
			posStartLine = posSaved;
			for( ; posStartLine != posEnd && posStartLine != NULL; )
			{
				CExtRichContentItem * pRCI = listItems->GetNext( posStartLine );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				const CExtRichStyleDescription & _styleVertAlign = pRCI->GetEffectiveStyle();
				if(	pRCI->IsParagraphItem() )
					break;
				if(		pRCI->m_rcLayout.IsRectEmpty()
					||	pRCI->QueryGenericTagName() != _T("img") 
					||	(	pRCI->QueryGenericTagName() == _T("img") 
						&&	_styleVertAlign.m_eaV != CExtRichStyleDescription::eavMiddle
						)
					)
					continue;
				int nVertAlignShift = ( pRCI->m_rcLayout.Height() - nTextLineHeight ) / 2;
				if( nVertAlignShift == 0 )
					continue;
				if( nVertAlignShift != 0 )
					pRCI->OffsetSubTree( CSize( 0, nVertAlignShift ), true, true );
			}
		}
////////////////////////////////////////////////////////////////////////// offset elements to higher position except elements with top or bottom vert. align
		if( nBottomPartOfHeight > 0 )
		{
			posStartLine = posSaved;
			for( ; posStartLine != posEnd && posStartLine != NULL; )
			{
				CExtRichContentItem * pRCI = listItems->GetNext( posStartLine );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				const CExtRichStyleDescription & _styleVertAlign = pRCI->GetEffectiveStyle();
				if(	pRCI->IsParagraphItem() )
					break;
				if(		pRCI->m_rcLayout.IsRectEmpty()
					||	(	pRCI->QueryGenericTagName() == _T("img") 
						&&	(	_styleVertAlign.m_eaV == CExtRichStyleDescription::eavBottom
							||	_styleVertAlign.m_eaV == CExtRichStyleDescription::eavTop
							)
						)
					)
					continue;
				pRCI->OffsetSubTree( CSize( 0, -nBottomPartOfHeight ), true, true );
			}
		}
////////////////////////////////////////////////////////////////////////// Top
		if( bThereIsTop )
		{
			int _nLineHeight = max( nLineHeight, nNewLineHeight );
			posStartLine = posSaved;
			for( ; posStartLine != posEnd && posStartLine != NULL; )
			{
				CExtRichContentItem * pRCI = listItems->GetNext( posStartLine );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				const CExtRichStyleDescription & _styleVertAlign = pRCI->GetEffectiveStyle();
				if(	pRCI->IsParagraphItem() )
					break;
				if(		pRCI->m_rcLayout.IsRectEmpty()
					||	pRCI->QueryGenericTagName() != _T("img") 
					||	(	pRCI->QueryGenericTagName() == _T("img") 
						&&	_styleVertAlign.m_eaV != CExtRichStyleDescription::eavTop
						)
					)
					continue;
				int nVertAlignShift = ( _nLineHeight - pRCI->m_rcLayout.Height() );
				if( nVertAlignShift == 0 )
					continue;
				if( nVertAlignShift != 0 )
					pRCI->OffsetSubTree( CSize( 0, -nVertAlignShift ), true, true );
			}
		}
//////////////////////////////////////////////////////////////////////////
	}
	return nRetVal;
}

void CExtRichContentItem::DoPaintRoot( CDC & dc, const CRect & rcDocRenderTarget, const CPoint & ptScrollPosTarget ) // should be invoked for root only
{
	m_layout.m_listDelayedDraw_PreFixedAbsolute.RemoveAll();
	m_layout.m_listDelayedDraw_TopMost.RemoveAll();
	DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, NULL, false );
POSITION pos;
	for( pos = m_layout.m_listDelayedDraw_PreFixedAbsolute.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_layout.m_listDelayedDraw_PreFixedAbsolute.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCI, false );
	}
	for( pos = m_layout.m_listEFA.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCIFA = m_layout.m_listEFA.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCIFA != NULL );
		pRCIFA->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA, false );
	}
	for( pos = m_layout.m_listDelayedDraw_TopMost.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_layout.m_listDelayedDraw_TopMost.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCI, false );
	}
	m_layout.m_listDelayedDraw_PreFixedAbsolute.RemoveAll();
	m_layout.m_listDelayedDraw_TopMost.RemoveAll();
}

CRect CExtRichContentItem::CalcListItemMarkerLocation(
	INT nLO,
	CExtRichStyleDescription::e_list_style_position_t eLSP,
	const CRect & rcLayout,
	const CRect & rcDrawListSign,
	const CSize & sizeMarker,
	INT nFontAscent,
	INT nFreeSpaceOverAscent,
	INT nFreeSpaceBeforeText
	)
{
CRect rcListImage( 0, 0, 0, 0 );
	switch( nLO )
	{
	case INT(CExtRichContentLayout::__ELOT_NORMAL):
		if( eLSP == CExtRichStyleDescription::elsp_outside )
			rcListImage.SetRect( 
					rcDrawListSign.right - sizeMarker.cx - nFreeSpaceBeforeText,
					rcDrawListSign.top + nFontAscent - sizeMarker.cy - nFreeSpaceOverAscent,
					rcDrawListSign.right - nFreeSpaceBeforeText,
					rcDrawListSign.top + nFontAscent - nFreeSpaceOverAscent
					);
		else
			rcListImage.SetRect( 
					rcLayout.left,
					rcLayout.top + nFontAscent - sizeMarker.cy - nFreeSpaceOverAscent,
					rcLayout.left + sizeMarker.cx,
					rcLayout.top + nFontAscent - nFreeSpaceOverAscent
					);
	break;
	case INT(CExtRichContentLayout::__ELOT_90_CW):
		if( eLSP == CExtRichStyleDescription::elsp_outside )
			rcListImage.SetRect( 
					rcDrawListSign.right - nFontAscent - sizeMarker.cx + nFreeSpaceOverAscent,
					rcDrawListSign.bottom - sizeMarker.cy - nFreeSpaceBeforeText,
					rcDrawListSign.right - nFontAscent + nFreeSpaceOverAscent,
					rcDrawListSign.bottom - nFreeSpaceBeforeText
					);
		else
			rcListImage.SetRect( 
					rcLayout.right - nFontAscent + nFreeSpaceOverAscent,
					rcLayout.top,
					rcLayout.right - nFontAscent + sizeMarker.cx + nFreeSpaceOverAscent,
					rcLayout.top + sizeMarker.cy
					);
	break;
	case INT(CExtRichContentLayout::__ELOT_180_CW):
		if( eLSP == CExtRichStyleDescription::elsp_outside )
			rcListImage.SetRect( 
					rcDrawListSign.left + nFreeSpaceBeforeText,
					rcDrawListSign.bottom - nFontAscent + nFreeSpaceOverAscent,
					rcDrawListSign.left + sizeMarker.cx + nFreeSpaceBeforeText,
					rcDrawListSign.bottom - nFontAscent + sizeMarker.cy + nFreeSpaceOverAscent
					);
		else
			rcListImage.SetRect( 
					rcLayout.right - sizeMarker.cx,
					rcLayout.bottom - nFontAscent - nFreeSpaceOverAscent,
					rcLayout.right,
					rcLayout.bottom - nFontAscent + sizeMarker.cy - nFreeSpaceOverAscent
					);
	break;
	case INT(CExtRichContentLayout::__ELOT_270_CW):
		if( eLSP == CExtRichStyleDescription::elsp_outside )
			rcListImage.SetRect( 
					rcDrawListSign.left + nFontAscent - sizeMarker.cx - nFreeSpaceOverAscent,
					rcDrawListSign.top + nFreeSpaceBeforeText,
					rcDrawListSign.left + nFontAscent - nFreeSpaceOverAscent,
					rcDrawListSign.top + sizeMarker.cy + nFreeSpaceBeforeText
					);
		else
			rcListImage.SetRect( 
					rcLayout.left + nFontAscent - sizeMarker.cx - nFreeSpaceOverAscent,
					rcLayout.bottom - sizeMarker.cy,
					rcLayout.left + nFontAscent - nFreeSpaceOverAscent,
					rcLayout.bottom
					);
	break;
	} // switch( nLO )
	return rcListImage;
}

CExtRichStyleDescription::e_scroll_bar_type_t CExtRichContentItem::GetSBTH()
{
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
		return CExtRichStyleDescription::esbt_hidden;
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
	if(		m_sizeOverflow.cx > 0
		&&	styleEffective.m_eO == CExtRichStyleDescription::eo_scroll
		)
		return CExtRichStyleDescription::esbt_visible;
	if( styleEffective.m_eO == CExtRichStyleDescription::eo_auto )
		return CExtRichStyleDescription::esbt_hidden;
	if( styleEffective.m_esbtH == CExtRichStyleDescription::esbt_auto )
		return CExtRichStyleDescription::esbt_hidden;
	return styleEffective.m_esbtH;
}

CExtRichStyleDescription::e_scroll_bar_type_t CExtRichContentItem::GetSBTV()
{
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
		return CExtRichStyleDescription::esbt_hidden;
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
	if(		m_sizeOverflow.cy > 0
		&&	styleEffective.m_eO == CExtRichStyleDescription::eo_scroll
		)
		return CExtRichStyleDescription::esbt_visible;
	if( styleEffective.m_eO == CExtRichStyleDescription::eo_auto )
		return CExtRichStyleDescription::esbt_hidden;
	if( styleEffective.m_esbtV == CExtRichStyleDescription::esbt_auto )
		return CExtRichStyleDescription::esbt_hidden;
	return styleEffective.m_esbtV;
}

void CExtRichContentItem::Scrolling_FillScrollBarInfo(
	bool bHorz,
	const CRect & _rcSB,
	LPVOID pSbData,
	bool bCorrectScrollingPosition // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pSbData != NULL );
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
		return;
CRect rcSB( _rcSB );

CExtPaintManager * pPM = g_PaintManager.GetPM();
__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pPM );
static const LONG g_nCrossExtX       = pPM->UiScalingDo( 12, CExtPaintManager::__EUIST_X );
static const LONG g_nCrossExtY       = pPM->UiScalingDo( 12, CExtPaintManager::__EUIST_Y );
static const LONG g_nOuterSpaceX     = pPM->UiScalingDo(  4, CExtPaintManager::__EUIST_X );
static const LONG g_nOuterSpaceY     = pPM->UiScalingDo(  4, CExtPaintManager::__EUIST_Y );
// static const LONG g_nMinThumbExtentX = pPM->UiScalingDo(  6, CExtPaintManager::__EUIST_X );
// static const LONG g_nMinThumbExtentY = pPM->UiScalingDo(  6, CExtPaintManager::__EUIST_Y );
// static const LONG g_nButtonExtentX   = pPM->UiScalingDo( 20, CExtPaintManager::__EUIST_X );
// static const LONG g_nButtonExtentY   = pPM->UiScalingDo( 20, CExtPaintManager::__EUIST_Y );
static const LONG g_nButtonSpaceX    = pPM->UiScalingDo(  2, CExtPaintManager::__EUIST_X );
static const LONG g_nButtonSpaceY    = pPM->UiScalingDo(  2, CExtPaintManager::__EUIST_Y );
static const LONG g_nCornerGapX      = pPM->UiScalingDo(  2, CExtPaintManager::__EUIST_X );
static const LONG g_nCornerGapY      = pPM->UiScalingDo(  2, CExtPaintManager::__EUIST_Y );
bool bLightPopOverScrollBars = false;
CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = Scrolling_GetEffectiveSBT();
	if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )
	{
		CExtRichStyleDescription::e_scroll_bar_type_t esbtH = GetSBTH();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
		CExtRichStyleDescription::e_scroll_bar_type_t esbtV = GetSBTV();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
		bool bH = ( esbtH == CExtRichStyleDescription::esbt_visible ) ? true : false;
		bool bV = ( esbtV == CExtRichStyleDescription::esbt_visible ) ? true : false;

		const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();

		CRect rcLayout( CalcEffectiveRect() ); // ( m_rcLayout );
		rcLayout.DeflateRect( &styleEffective.m_rcCellPadding );
		CExtRichStyleDescription::e_position_t eP = GetPosition();
		if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
			rcLayout.DeflateRect( &styleEffective.m_rcMargin );
		rcLayout.DeflateRect( &styleEffective.m_rcBorder );

		bLightPopOverScrollBars = ( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light ) ? true : false;
		CExtPaintManager::PAINTSCROLLBARDATA _psbdH, _psbdV;
		CRect rcPO = rcLayout;
		rcPO.DeflateRect( g_nOuterSpaceX, g_nOuterSpaceY );
		if( ! bLightPopOverScrollBars )
			rcPO.DeflateRect( g_nButtonSpaceX, g_nButtonSpaceY );
		CRect rcH( rcPO.left, rcPO.bottom - g_nCrossExtY, rcPO.right, rcPO.bottom ), rcV( rcPO.right - g_nCrossExtX, rcPO.top, rcPO.right, rcPO.bottom );
		if( bH && bV )
		{
			rcH.right  -= g_nCrossExtX + g_nCornerGapX;
			rcV.bottom -= g_nCrossExtY + g_nCornerGapY;
		}
		if( bHorz )
			rcSB = rcH;
		else
			rcSB = rcV;
	} // if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )

CExtPaintManager::PAINTSCROLLBARDATA & _psbd = (*(CExtPaintManager::PAINTSCROLLBARDATA*)pSbData);
	_psbd.m_bHorzBar = bHorz;
	_psbd.m_rcBar = rcSB;
	_psbd.m_bEnabled = ( ( bHorz && m_sizeOverflow.cx > 0 ) || ( (!bHorz) && m_sizeOverflow.cy > 0 ) ) ? true : false;
	::memset( &_psbd.m_DSI, 0, sizeof(SCROLLINFO) );
	_psbd.m_DSI.fMask = SIF_ALL;
	if( _psbd.m_bEnabled )
	{
		if( bHorz )
		{
			_psbd.m_DSI.nPage = m_rcLayout.Width();
			_psbd.m_DSI.nMax = m_sizeOverflow.cx + _psbd.m_DSI.nPage;
			_psbd.m_DSI.nPos = _psbd.m_DSI.nTrackPos = m_ptScrollPos.x;
		} // if( bHorz )
		else
		{
			_psbd.m_DSI.nPage = m_rcLayout.Height();
			_psbd.m_DSI.nMax = m_sizeOverflow.cy + _psbd.m_DSI.nPage;
			_psbd.m_DSI.nPos = _psbd.m_DSI.nTrackPos = m_ptScrollPos.y;
		} // else from if( bHorz )
	} // if( _psbd.m_bEnabled )
	if(		_psbd.m_DSI.nMin < _psbd.m_DSI.nMax
		&&	_psbd.m_DSI.nMax < (INT_MAX-1)
		&&	_psbd.m_DSI.nPage > 0
		&&	_psbd.m_DSI.nPage == UINT( _psbd.m_DSI.nMax - _psbd.m_DSI.nMin )
		)
	{
		// layout issue
		_psbd.m_DSI.nMax ++;
		if( _psbd.m_DSI.nPos > 0 )
			_psbd.m_DSI.nPos ++;
		if( _psbd.m_DSI.nTrackPos > 0 )
			_psbd.m_DSI.nTrackPos ++;
	}
INT nScrollLimit = 0, nExtentMD = 0, nExtentThumb = 0, nExtentBtn = 0, nExtentThumbMin = 4;
	nScrollLimit =
		  _psbd.m_DSI.nMax
		- _psbd.m_DSI.nMin
		- _psbd.m_DSI.nPage
		+ 1
		;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nScrollLimit >= 0 );
INT nScrollTotalRange = _psbd.m_DSI.nMax;

INT nHorzBarHeight, nVertBarWidth,
	nHorzButtonWidth, nVertButtonHeight,
	nHorzThumbMinWidth, nVertThumbMinHeight;
	if( ! pPM->ScrollBar_GetMetrics(
			&nHorzBarHeight,
			&nVertBarWidth,
			&nHorzButtonWidth,
			&nVertButtonHeight,
			&nHorzThumbMinWidth,
			&nVertThumbMinHeight,
			NULL
			)
		)
	{
		nHorzBarHeight      = ::GetSystemMetrics( SM_CYHSCROLL );
		nVertBarWidth       = ::GetSystemMetrics( SM_CXVSCROLL );
		nHorzButtonWidth    = ::GetSystemMetrics( SM_CXHSCROLL );
		nVertButtonHeight   = ::GetSystemMetrics( SM_CYVSCROLL );
		nHorzThumbMinWidth  = 9; // ::GetSystemMetrics( SM_CXHTHUMB );
		nVertThumbMinHeight = 9; // ::GetSystemMetrics( SM_CYVTHUMB );
	}
	if( bLightPopOverScrollBars )
		nHorzButtonWidth = nVertButtonHeight = 0;

	if( bHorz )
	{
		nExtentBtn = nHorzButtonWidth;
		nExtentThumbMin = nHorzThumbMinWidth;
	}
	else
	{
		nExtentBtn = nVertButtonHeight;
		nExtentThumbMin = nVertThumbMinHeight;
	}
	if( nScrollLimit > 0L )
	{
		if( _psbd.m_DSI.nPage == 0 )
		{
			nExtentThumb = nExtentBtn;
			if( nExtentThumb == 0 )
				nExtentThumb = 6;
		} // if( _psbd.m_DSI.nPage == 0 )
		else
		{
			if( nScrollTotalRange > INT(_psbd.m_DSI.nPage) )
			{
				nExtentMD = nScrollTotalRange/_psbd.m_DSI.nPage;
			} // if( nScrollTotalRange > _psbd.m_DSI.nPage )
		} // else from if( _psbd.m_DSI.nPage == 0 )
	} // if( nScrollLimit > 0L )

	if( ! _psbd.m_bEnabled )
		nExtentThumb = nExtentThumbMin = 0;
CRect rcScrollable = _psbd.m_rcBar;
	_psbd.m_rcButtonUp = _psbd.m_rcBar;
	_psbd.m_rcButtonDown = _psbd.m_rcBar;
	if( _psbd.m_bHorzBar )
	{
		rcScrollable.DeflateRect( nExtentBtn, 0 );
		_psbd.m_rcButtonUp.right = _psbd.m_rcButtonUp.left + nExtentBtn;
		_psbd.m_rcButtonDown.left = _psbd.m_rcButtonDown.right - nExtentBtn;
		if( rcScrollable.Width() > 5 )
		{
			if( nExtentThumb == 0 && nExtentMD != 0L )
				nExtentThumb =
					::MulDiv( rcScrollable.Width(), _psbd.m_DSI.nPage, nScrollTotalRange );
			if( _psbd.m_bEnabled && /*nExtentThumb != 0 &&*/ nExtentThumb < nExtentThumbMin )
				nExtentThumb = nExtentThumbMin;
			if( nExtentThumb != 0 )
			{
				_psbd.m_rcThumb = rcScrollable;
				_psbd.m_rcThumb.right = _psbd.m_rcThumb.left + nExtentThumb;
				if( nScrollLimit > 0 )
				{
					INT nRestSpace = rcScrollable.Width() - _psbd.m_rcThumb.Width();
					if( nRestSpace < 0 )
						nRestSpace = 0;
					INT nOffset = ::MulDiv( nRestSpace, _psbd.m_DSI.nTrackPos, nScrollLimit );
					_psbd.m_rcThumb.OffsetRect( nOffset, 0 );
					if( _psbd.m_DSI.nTrackPos > 0 )
					{
						_psbd.m_rcPageUp = rcScrollable;
						_psbd.m_rcPageUp.right = _psbd.m_rcThumb.left;
					}
					if( _psbd.m_DSI.nTrackPos < nScrollLimit )
					{
						_psbd.m_rcPageDown = rcScrollable;
						_psbd.m_rcPageDown.left = _psbd.m_rcThumb.right;
					}
				} // if( nScrollLimit > 0 )
			} // if( nExtentThumb != 0 )
		} // if( rcScrollable.Width() > 5 )
		if(		(! _psbd.m_rcButtonUp.IsRectEmpty() )
			&&	(! _psbd.m_rcButtonDown.IsRectEmpty() )
			&&	_psbd.m_rcButtonUp.right > _psbd.m_rcButtonDown.left
			)
		{
			_psbd.m_rcButtonUp.right
				= _psbd.m_rcButtonDown.left
				= _psbd.m_rcButtonUp.left
					+ ( _psbd.m_rcButtonDown.right - _psbd.m_rcButtonUp.left ) / 2;
			_psbd.m_rcPageUp.SetRect( 0, 0, 0, 0 );
			_psbd.m_rcPageDown.SetRect( 0, 0, 0, 0 );
			_psbd.m_rcThumb.SetRect( 0, 0, 0, 0 );
		}
	} // if( m_bHorzBar )
	else
	{
		rcScrollable.DeflateRect( 0, nExtentBtn );
		_psbd.m_rcButtonUp.bottom = _psbd.m_rcButtonUp.top + nExtentBtn;
		_psbd.m_rcButtonDown.top = _psbd.m_rcButtonDown.bottom - nExtentBtn;
		if( rcScrollable.Height() > 5 )
		{
			if( nExtentThumb == 0 && nExtentMD != 0L )
				nExtentThumb =
					::MulDiv( rcScrollable.Height(), _psbd.m_DSI.nPage, nScrollTotalRange );
			if( _psbd.m_bEnabled && /*nExtentThumb != 0 &&*/ nExtentThumb < nExtentThumbMin )
				nExtentThumb = nExtentThumbMin;
			if( nExtentThumb != 0 )
			{
				_psbd.m_rcThumb = rcScrollable;
				_psbd.m_rcThumb.bottom = _psbd.m_rcThumb.top + nExtentThumb;
				if( nScrollLimit > 0 )
				{
					INT nRestSpace = rcScrollable.Height() - _psbd.m_rcThumb.Height();
					if( nRestSpace < 0 )
						nRestSpace = 0;
					INT nOffset = ::MulDiv( nRestSpace, _psbd.m_DSI.nTrackPos, nScrollLimit );
					_psbd.m_rcThumb.OffsetRect( 0, nOffset );
					if( _psbd.m_DSI.nTrackPos > 0 )
					{
						_psbd.m_rcPageUp = rcScrollable;
						_psbd.m_rcPageUp.bottom = _psbd.m_rcThumb.top;
					}
					if( _psbd.m_DSI.nTrackPos < nScrollLimit )
					{
						_psbd.m_rcPageDown = rcScrollable;
						_psbd.m_rcPageDown.top = _psbd.m_rcThumb.bottom;
					}
				} // if( nScrollLimit > 0 )
			} // if( nExtentThumb != 0 )
		} // if( rcScrollable.Height() > 5 )
		if(		(! _psbd.m_rcButtonUp.IsRectEmpty() )
			&&	(! _psbd.m_rcButtonDown.IsRectEmpty() )
			&&	_psbd.m_rcButtonUp.bottom > _psbd.m_rcButtonDown.top
			)
		{
			_psbd.m_rcButtonUp.bottom
				= _psbd.m_rcButtonDown.top
				= _psbd.m_rcButtonUp.top
					+ ( _psbd.m_rcButtonDown.bottom - _psbd.m_rcButtonUp.top ) / 2;
			_psbd.m_rcPageUp.SetRect( 0, 0, 0, 0 );
			_psbd.m_rcPageDown.SetRect( 0, 0, 0, 0 );
			_psbd.m_rcThumb.SetRect( 0, 0, 0, 0 );
		}
	} // else from if( m_bHorzBar )

	if( _psbd.m_bHorzBar )
		_psbd.m_rcScrollableArea.SetRect(
			_psbd.m_rcButtonUp.right,
			_psbd.m_rcButtonUp.top,
			_psbd.m_rcButtonDown.left,
			_psbd.m_rcButtonDown.bottom
			);
	else
		_psbd.m_rcScrollableArea.SetRect(
			_psbd.m_rcButtonUp.left,
			_psbd.m_rcButtonUp.bottom,
			_psbd.m_rcButtonDown.right,
			_psbd.m_rcButtonDown.top
			);
	if( bCorrectScrollingPosition )
		Scrolling_CorrectScrollingPosition( pSbData );

	if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )
	{
		if( ! bLightPopOverScrollBars )
		{
			if( bHorz )
			{
				_psbd.m_rcButtonUp.OffsetRect( -g_nButtonSpaceX, 0 );
				_psbd.m_rcButtonDown.OffsetRect( g_nButtonSpaceX, 0 );
			}
			else
			{
				_psbd.m_rcButtonUp.OffsetRect( 0, -g_nButtonSpaceY );
				_psbd.m_rcButtonDown.OffsetRect( 0, g_nButtonSpaceY);
			}
		}
	} // if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )
}

void CExtRichContentItem::Scrolling_CorrectScrollingPosition(
	LPVOID pSbData
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pSbData != NULL );
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
		return;
CExtPaintManager::PAINTSCROLLBARDATA & _psbd = (*(CExtPaintManager::PAINTSCROLLBARDATA*)pSbData);
	if( ! _psbd.m_bEnabled )
		return;
int nScrollLimit =
		  _psbd.m_DSI.nMax
		- _psbd.m_DSI.nMin
		- _psbd.m_DSI.nPage
		+ 1
		;
	if( _psbd.m_DSI.nPos > nScrollLimit )
		_psbd.m_DSI.nPos = nScrollLimit;
	if( _psbd.m_DSI.nTrackPos > nScrollLimit )
		_psbd.m_DSI.nTrackPos = nScrollLimit;
	if( ( _psbd.m_bHorzBar ? m_ptScrollPos.x : m_ptScrollPos.y ) > nScrollLimit )
		( _psbd.m_bHorzBar ? m_ptScrollPos.x : m_ptScrollPos.y ) = nScrollLimit;
}

void CExtRichContentItem::Scrolling_EnsureVisibility(
	bool bEnsureHorz, // = true
	bool bEnsureVert, // = true
	bool bPreferLeft, // = true
	bool bPreferTop, // = true
	bool bDeep // = true
	)
{
	if( ! ( bEnsureHorz || bEnsureVert ) )
		return;
	if( m_pParent == NULL )
		return;
CRect rcAbsoluteLocation( CalcEffectiveRect() );
	m_pParent->Scrolling_EnsureVisibility( rcAbsoluteLocation, bEnsureHorz, bEnsureVert, bPreferLeft, bPreferTop, bDeep );
}

void CExtRichContentItem::Scrolling_EnsureVisibility(
	const CRect & rcAbsoluteLocation,
	bool bEnsureHorz, // = true
	bool bEnsureVert, // = true
	bool bPreferLeft, // = true
	bool bPreferTop, // = true
	bool bDeep // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( bEnsureHorz || bEnsureVert )
CExtRichStyleDescription::e_scroll_bar_type_t esbtH = GetSBTH();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
CExtRichStyleDescription::e_scroll_bar_type_t esbtV = GetSBTV();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
	if( ! ( esbtH == CExtRichStyleDescription::esbt_visible || esbtV == CExtRichStyleDescription::esbt_visible ) )
	{
		if( m_pParent != NULL )
			m_pParent->Scrolling_EnsureVisibility( rcAbsoluteLocation, bEnsureHorz, bEnsureVert, bPreferLeft, bPreferTop, bDeep );
		return;
	}
CExtRichStyleDescription::e_position_t eP = GetPosition();
CRect _rcAbsoluteLocation( rcAbsoluteLocation );
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
CRect rcLayout( CalcEffectiveRect() );
	rcLayout.DeflateRect( &styleEffective.m_rcCellPadding );
	if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
		rcLayout.DeflateRect( &styleEffective.m_rcMargin );
	rcLayout.DeflateRect( &styleEffective.m_rcBorder );
	if( esbtH == CExtRichStyleDescription::esbt_visible )
		rcLayout.bottom -= Scrolling_GetHorizontalScrollBarHeight();
	if( esbtV == CExtRichStyleDescription::esbt_visible )
		rcLayout.right  -= Scrolling_GetVerticalScrollBarWidth();
CSize sizeScroll( 0, 0 );
	if( bEnsureHorz && esbtH == CExtRichStyleDescription::esbt_visible )
	{
		if( bPreferLeft )
		{
			LONG nDistance = _rcAbsoluteLocation.right - rcLayout.right;
			if( nDistance > 0 )
			{
				sizeScroll.cx += nDistance;
				_rcAbsoluteLocation.OffsetRect( -nDistance, 0 );
			}
			nDistance = rcLayout.left - _rcAbsoluteLocation.left;
			if( nDistance > 0 )
			{
				sizeScroll.cx -= nDistance;
				_rcAbsoluteLocation.OffsetRect( nDistance, 0 );
			}
		}
		else
		{
			LONG nDistance = rcLayout.left - _rcAbsoluteLocation.left;
			if( nDistance > 0 )
			{
				sizeScroll.cx -= nDistance;
				_rcAbsoluteLocation.OffsetRect( nDistance, 0 );
			}
			nDistance = _rcAbsoluteLocation.right - rcLayout.right;
			if( nDistance > 0 )
			{
				sizeScroll.cx += nDistance;
				_rcAbsoluteLocation.OffsetRect( -nDistance, 0 );
			}
		}
	}
	if( bEnsureVert && esbtV == CExtRichStyleDescription::esbt_visible )
	{
		if( bPreferTop )
		{
			LONG nDistance = _rcAbsoluteLocation.bottom - rcLayout.bottom;
			if( nDistance > 0 )
			{
				sizeScroll.cy += nDistance;
				_rcAbsoluteLocation.OffsetRect( 0, -nDistance );
			}
			nDistance = rcLayout.top - _rcAbsoluteLocation.top;
			if( nDistance > 0 )
			{
				sizeScroll.cy -= nDistance;
				_rcAbsoluteLocation.OffsetRect( 0, nDistance );
			}
		}
		else
		{
			LONG nDistance = rcLayout.top - _rcAbsoluteLocation.top;
			if( nDistance > 0 )
			{
				sizeScroll.cy -= nDistance;
				_rcAbsoluteLocation.OffsetRect( 0, nDistance );
			}
			nDistance = _rcAbsoluteLocation.bottom - rcLayout.bottom;
			if( nDistance > 0 )
			{
				sizeScroll.cy += nDistance;
				_rcAbsoluteLocation.OffsetRect( 0, -nDistance );
			}
		}
	}
	m_ptScrollPos += sizeScroll;
	if( ( sizeScroll.cx != 0 || sizeScroll.cy != 0 ) && ( ! bDeep ) )
		return;
	if( m_pParent != NULL )
		m_pParent->Scrolling_EnsureVisibility( _rcAbsoluteLocation, bEnsureHorz, bEnsureVert, bPreferLeft, bPreferTop, bDeep );
}

void CExtRichContentItem::DoPaintScrollBar( CDC & dc, bool bHorz, const CRect & rcSB, const CRect & rcDocRenderTarget, const CPoint & ptScrollPosTarget, CExtRichContentItem * pRCIFA )
{
	rcDocRenderTarget; ptScrollPosTarget; pRCIFA;
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
		return;
	if( rcSB.left >= rcSB.right || rcSB.top >= rcSB.bottom )
		return;
CExtPaintManager::PAINTSCROLLBARDATA _psbd;
	Scrolling_FillScrollBarInfo( bHorz, rcSB, &_psbd );
//	_psbd.m_bHelperLightAccent = m_bHelperLightAccent;
	if( _psbd.m_bEnabled && m_bSbProcessingHorzBar == bHorz )
	{
		_psbd.m_eSBMHT = (CExtPaintManager::e_scroll_bar_mouse_hover_type_t) m_nSBMHT;
		_psbd.m_bHoveredAreaIsPressed = m_bSbProcessingClick && (! m_bSbProcessingOutClick );
	}
	g_PaintManager->ScrollBar_Paint( dc, _psbd );
}

void CExtRichContentItem::DoPaintScrollBarCorner( CDC & dc, const CRect & rcCorner, const CRect & rcDocRenderTarget, const CPoint & ptScrollPosTarget, CExtRichContentItem * pRCIFA )
{
	rcDocRenderTarget; ptScrollPosTarget; pRCIFA;
	if( rcCorner.left >= rcCorner.right || rcCorner.top >= rcCorner.bottom )
		return;
	CExtRichContentItem::stat_FillSolidRect( dc, rcCorner, g_PaintManager->GetColor( COLOR_3DFACE ) ); 
}

void CExtRichContentItem::DoPaintScrollBars( CDC & dc, const CRect & rcDocRenderTarget, const CPoint & ptScrollPosTarget, CExtRichContentItem * pRCIFA )
{
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
		return;
CExtRichStyleDescription::e_scroll_bar_type_t esbtH = GetSBTH();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
CExtRichStyleDescription::e_scroll_bar_type_t esbtV = GetSBTV();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
CExtRichStyleDescription::e_position_t eP = GetPosition();
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();
CRect rcLayout( m_rcLayout );
	rcLayout.DeflateRect( &styleEffective.m_rcCellPadding );
	if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
		rcLayout.DeflateRect( &styleEffective.m_rcMargin );
	rcLayout.DeflateRect( &styleEffective.m_rcBorder );
	
CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = Scrolling_GetEffectiveSBT();
	if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light || _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_full )
	{
		bool bH = ( esbtH == CExtRichStyleDescription::esbt_visible ) ? true : false;
		bool bV = ( esbtV == CExtRichStyleDescription::esbt_visible ) ? true : false;
		DoPaintPopOverScrollBars( dc, rcLayout, _eUiSBT, bH, bV );
		return;
	}

	if( esbtH == CExtRichStyleDescription::esbt_visible )
	{
		CRect rcSB( rcLayout.left, rcLayout.bottom - Scrolling_GetHorizontalScrollBarHeight(), rcLayout.right, rcLayout.bottom );
		if( esbtV == CExtRichStyleDescription::esbt_visible )
			rcSB.right -= Scrolling_GetVerticalScrollBarWidth();
		//CExtRichContentItem::stat_FillSolidRect( dc, &rcSB, RGB(255,128,128) );
		DoPaintScrollBar( dc, true, rcSB, rcDocRenderTarget, ptScrollPosTarget, pRCIFA );
	}
	if( esbtV == CExtRichStyleDescription::esbt_visible )
	{
		CRect rcSB( rcLayout.right - Scrolling_GetVerticalScrollBarWidth(), rcLayout.top, rcLayout.right, rcLayout.bottom );
		if( esbtH == CExtRichStyleDescription::esbt_visible )
			rcSB.bottom -= Scrolling_GetHorizontalScrollBarHeight();
		//CExtRichContentItem::stat_FillSolidRect( dc, &rcSB, RGB(128,128,255) );
		DoPaintScrollBar( dc, false, rcSB, rcDocRenderTarget, ptScrollPosTarget, pRCIFA );
	}
	if( esbtH == CExtRichStyleDescription::esbt_visible && esbtV == CExtRichStyleDescription::esbt_visible )
	{
		CRect rcSB( rcLayout.right - Scrolling_GetVerticalScrollBarWidth(), rcLayout.bottom - Scrolling_GetHorizontalScrollBarHeight(), rcLayout.right, rcLayout.bottom );
		//CExtRichContentItem::stat_FillSolidRect( dc, &rcSB, RGB(128,255,128) );
		DoPaintScrollBarCorner( dc, rcSB, rcDocRenderTarget, ptScrollPosTarget, pRCIFA );
	}
}

void CExtRichContentItem::DoPaintPopOverScrollBars( CDC & dc, const CRect & rcLayout, CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT, bool bH, bool bV )
{
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! ( bH || bV ) )
		return;
CExtBitmap & _bmpScrollThumb = CExtRichContentItem::stat_GetScrollThumbBitmap();
	if( _bmpScrollThumb.IsEmpty() )
		return;
bool bLightPopOverScrollBars = ( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_pop_over_light ) ? true : false;
	if( bH )
	{
		CExtPaintManager::PAINTSCROLLBARDATA _psbdH;
		( const_cast < CExtRichContentItem * > ( this ) )->Scrolling_FillScrollBarInfo( true, rcLayout, &_psbdH );
		if( ! _psbdH.m_rcBar.IsRectEmpty() )
		{
			if( ! bLightPopOverScrollBars )
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdH.m_rcScrollableArea, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0x60) );
			if( ! _psbdH.m_rcThumb.IsRectEmpty() )
			{
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdH.m_rcThumb, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0xFF) );
			}
			if( ! _psbdH.m_rcButtonUp.IsRectEmpty() )
			{
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdH.m_rcButtonUp, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0xFF) );
			}
			if( ! _psbdH.m_rcButtonDown.IsRectEmpty() )
			{
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdH.m_rcButtonDown, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0xFF) );
			}
		}
	}
	if( bV )
	{
		CExtPaintManager::PAINTSCROLLBARDATA _psbdV;
		( const_cast < CExtRichContentItem * > ( this ) )->Scrolling_FillScrollBarInfo( false, rcLayout, &_psbdV );
		if( ! _psbdV.m_rcBar.IsRectEmpty() )
		{
			if( ! bLightPopOverScrollBars )
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdV.m_rcScrollableArea, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0x60) );
			if( ! _psbdV.m_rcThumb.IsRectEmpty() )
			{
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdV.m_rcThumb, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0xFF) );
			}
			if( ! _psbdV.m_rcButtonUp.IsRectEmpty() )
			{
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdV.m_rcButtonUp, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0xFF) );
			}
			if( ! _psbdV.m_rcButtonDown.IsRectEmpty() )
			{
				_bmpScrollThumb.AlphaBlendSkinParts( dc.m_hDC, _psbdV.m_rcButtonDown, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true, BYTE(0xFF) );
			}
		}
	}
}

CExtBitmap & CExtRichContentItem::stat_GetScrollThumbBitmap()
{
static CExtBitmap g_bmpScrollThumb;
	if( g_bmpScrollThumb.IsEmpty() && g_bmpScrollThumb.FromColor( RGB(128,128,128), CSize(32,32), BYTE(200), false ) )
	{
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel(  0,  0, RGB(0,0,0),  0 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel(  0,  1, RGB(0,0,0), 50 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel(  1,  0, RGB(0,0,0), 50 ) );

		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel(  0, 31, RGB(0,0,0),  0 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel(  0, 30, RGB(0,0,0), 50 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel(  1, 31, RGB(0,0,0), 50 ) );

		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel( 31,  0, RGB(0,0,0),  0 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel( 31,  1, RGB(0,0,0), 50 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel( 30,  0, RGB(0,0,0), 50 ) );

		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel( 31, 31, RGB(0,0,0),  0 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel( 31, 30, RGB(0,0,0), 50 ) );
		__EXT_DEBUG_RICH_CONTENT_VERIFY( g_bmpScrollThumb.SetPixel( 30, 31, RGB(0,0,0), 50 ) );
	}
	return g_bmpScrollThumb;
}


void CExtRichContentItem::DoPaintBorder( CDC & dc, const CExtRichStyleDescription & styleNext, const CRect & rcDocRenderTarget, const CPoint & ptScrollPosTarget, CExtRichContentItem * pRCIFA  )
{
	rcDocRenderTarget; ptScrollPosTarget; pRCIFA;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( _IsStyleOwner() );
bool bLeftBorder   = ( styleNext.m_ebsLeft   != CExtRichStyleDescription::ebsUnknown && styleNext.m_clrBorderLeft   != COLORREF(-1L) && styleNext.m_rcBorder.left   > 0 ) ? true : false;
bool bRightBorder  = ( styleNext.m_ebsRight  != CExtRichStyleDescription::ebsUnknown && styleNext.m_clrBorderRight  != COLORREF(-1L) && styleNext.m_rcBorder.right  > 0 ) ? true : false;
bool bTopBorder    = ( styleNext.m_ebsTop    != CExtRichStyleDescription::ebsUnknown && styleNext.m_clrBorderTop    != COLORREF(-1L) && styleNext.m_rcBorder.top    > 0 ) ? true : false;
bool bBottomBorder = ( styleNext.m_ebsBottom != CExtRichStyleDescription::ebsUnknown && styleNext.m_clrBorderBottom != COLORREF(-1L) && styleNext.m_rcBorder.bottom > 0 ) ? true : false;
bool bAnyBorder    = ( bLeftBorder || bRightBorder || bTopBorder || bBottomBorder ) ? true : false;

	if( bAnyBorder && styleNext.m_eN != CExtRichStyleDescription::ent_noshade_noshade ) /*&& (! IsNoLayoutRectItem()*/ 
	{ // if have any borders
static const INT g_nDashMetricMutliplier = 3; // defines how much dashes are lengthy than dots
static const DOUBLE g_lfAdjustGrooveRidgeLighter = +0.25;
static const DOUBLE g_lfAdjustGrooveRidgeDarker = -0.25;
static const DOUBLE g_lfAdjustInsetOutsetLighter = +0.25;
static const DOUBLE g_lfAdjustInsetOutsetDarker = -0.25;
		CRect rcCalcBorderOuter = m_rcLayout;
//		rcCalcBorderOuter.DeflateRect( &styleNext.m_rcPadding );
		CExtRichStyleDescription::e_position_t eP = GetPosition();
		if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
			rcCalcBorderOuter.DeflateRect( &styleNext.m_rcMargin );
		CRect rcCalcBorderInner = rcCalcBorderOuter;
		rcCalcBorderInner.DeflateRect( &styleNext.m_rcBorder );
		if( bLeftBorder )
		{
			CExtRichStyleDescription::e_border_style_t ebs = styleNext.m_ebsLeft;
			CRect rcBorderPart( rcCalcBorderOuter.left, rcCalcBorderOuter.top, rcCalcBorderInner.left, rcCalcBorderOuter.bottom );
			COLORREF clr1 = styleNext.m_clrBorderLeft, clr2 = styleNext.m_clrBorderLeft;
			CRgn rgn1, rgn2;
			if( ebs == CExtRichStyleDescription::ebsDouble && rcBorderPart.Width() < 3 )
				ebs = CExtRichStyleDescription::ebsSolid;
			else if(
					( ebs == CExtRichStyleDescription::ebsGroove || ebs == CExtRichStyleDescription::ebsRidge )
				&&	rcBorderPart.Width() < 2
				)
				ebs = CExtRichStyleDescription::ebsSolid;
			switch( ebs )
			{
			case CExtRichStyleDescription::ebsDotted:
			case CExtRichStyleDescription::ebsDashed:
			{
				INT nDotMetric = rcBorderPart.Width(), nOffset = rcBorderPart.bottom;
				if( ebs == CExtRichStyleDescription::ebsDashed )
					nDotMetric *= g_nDashMetricMutliplier;
				for( ; nOffset > rcBorderPart.top; nOffset -= nDotMetric*2 )
				{
					CRect rcDot( rcBorderPart.left, nOffset - nDotMetric, rcBorderPart.right, nOffset  );
					CRgn rgnDot;
					if( rgnDot.CreateRectRgnIndirect( &rcDot ) )
					{
						if( rgn1.GetSafeHandle() == NULL )
							rgn1.Attach( rgnDot.Detach() );
						else
							rgn1.CombineRgn( &rgn1, &rgnDot, RGN_OR );
					}
				}
			}
			break;
			case CExtRichStyleDescription::ebsInset:
			case CExtRichStyleDescription::ebsOutset:
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsOutset ) ? g_lfAdjustInsetOutsetLighter : g_lfAdjustInsetOutsetDarker, 0.0 );
				// continue falling here ...
			case CExtRichStyleDescription::ebsSolid:
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rcBorderPart ) );
			break;
			case CExtRichStyleDescription::ebsDouble:
			{
				INT nLineExt = rcBorderPart.Width() / 3;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt >= 1 );
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.left + nLineExt, rcBorderPart.bottom );
				CRect rc2( rcBorderPart.right - nLineExt, rcBorderPart.top, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
			}
			break;
			case CExtRichStyleDescription::ebsGroove:
			case CExtRichStyleDescription::ebsRidge:
			{
				INT nLineExt1 = rcBorderPart.Width() / 2;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt1 >= 1 );
				INT nLineExt2 = rcBorderPart.Width() - nLineExt1;
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.left + nLineExt1, rcBorderPart.bottom );
				CRect rc2( rcBorderPart.right - nLineExt2, rcBorderPart.top, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeDarker : g_lfAdjustGrooveRidgeLighter, 0.0 );
				clr2 = CExtBitmap::stat_HLS_Adjust( clr2, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeLighter : g_lfAdjustGrooveRidgeDarker, 0.0 );
			}
			break;
			} // switch( ebs )
			//CExtRichContentItem::stat_FillSolidRect( dc, &rcBorderPart, styleNext.m_clrBorderLeft );
			if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
			{
				POINT arrPt[4] =
				{
					{ rcBorderPart.left, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.bottom },
					{ rcBorderPart.left, rcBorderPart.bottom },
				};
				if( ! ( ebs == CExtRichStyleDescription::ebsDotted || ebs == CExtRichStyleDescription::ebsDashed ) )
				{
					if( bTopBorder )
						arrPt[ 1 ].y = rcCalcBorderInner.top;
					if( bBottomBorder )
						arrPt[ 2 ].y = rcCalcBorderInner.bottom;
				}
				CRgn rgnDialonal;
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgnDialonal.CreatePolygonRgn( arrPt, 4, ALTERNATE ) );
				if( rgn1.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn1.CombineRgn( &rgn1, &rgnDialonal, RGN_AND );
					CBrush _brush( clr1 );
					dc.FillRgn( &rgn1, &_brush );
				}
				if( rgn2.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn2.CombineRgn( &rgn2, &rgnDialonal, RGN_AND );
					CBrush _brush( clr2 );
					dc.FillRgn( &rgn2, &_brush );
				}
			} // if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
		} // if( bLeftBorder )
		if( bRightBorder )
		{
			CExtRichStyleDescription::e_border_style_t ebs = styleNext.m_ebsRight;
			CRect rcBorderPart( rcCalcBorderInner.right, rcCalcBorderOuter.top, rcCalcBorderOuter.right, rcCalcBorderOuter.bottom );
			COLORREF clr1 = styleNext.m_clrBorderRight, clr2 = styleNext.m_clrBorderRight;
			CRgn rgn1, rgn2;
			if( ebs == CExtRichStyleDescription::ebsDouble && rcBorderPart.Width() < 3 )
				ebs = CExtRichStyleDescription::ebsSolid;
			else if(
					( ebs == CExtRichStyleDescription::ebsGroove || ebs == CExtRichStyleDescription::ebsRidge )
				&&	rcBorderPart.Width() < 2
				)
				ebs = CExtRichStyleDescription::ebsSolid;
			switch( ebs )
			{
			case CExtRichStyleDescription::ebsDotted:
			case CExtRichStyleDescription::ebsDashed:
			{
				INT nDotMetric = rcBorderPart.Width(), nOffset = rcBorderPart.top;
				if( ebs == CExtRichStyleDescription::ebsDashed )
					nDotMetric *= g_nDashMetricMutliplier;
				for( ; nOffset < rcBorderPart.bottom; nOffset += nDotMetric*2 )
				{
					CRect rcDot( rcBorderPart.left, nOffset, rcBorderPart.right, nOffset + nDotMetric );
					CRgn rgnDot;
					if( rgnDot.CreateRectRgnIndirect( &rcDot ) )
					{
						if( rgn1.GetSafeHandle() == NULL )
							rgn1.Attach( rgnDot.Detach() );
						else
							rgn1.CombineRgn( &rgn1, &rgnDot, RGN_OR );
					}
				}
			}
			break;
			case CExtRichStyleDescription::ebsInset:
			case CExtRichStyleDescription::ebsOutset:
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsOutset ) ? g_lfAdjustInsetOutsetDarker : g_lfAdjustInsetOutsetLighter, 0.0 );
				// continue falling here ...
			case CExtRichStyleDescription::ebsSolid:
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rcBorderPart ) );
			break;
			case CExtRichStyleDescription::ebsDouble:
			{
				INT nLineExt = rcBorderPart.Width() / 3;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt >= 1 );
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.left + nLineExt, rcBorderPart.bottom );
				CRect rc2( rcBorderPart.right - nLineExt, rcBorderPart.top, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
			}
			break;
			case CExtRichStyleDescription::ebsGroove:
			case CExtRichStyleDescription::ebsRidge:
			{
				INT nLineExt1 = rcBorderPart.Width() / 2;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt1 >= 1 );
				INT nLineExt2 = rcBorderPart.Width() - nLineExt1;
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.left + nLineExt2, rcBorderPart.bottom );
				CRect rc2( rcBorderPart.right - nLineExt1, rcBorderPart.top, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeDarker : g_lfAdjustGrooveRidgeLighter, 0.0 );
				clr2 = CExtBitmap::stat_HLS_Adjust( clr2, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeLighter : g_lfAdjustGrooveRidgeDarker, 0.0 );
			}
			break;
			} // switch( ebs )
			//CExtRichContentItem::stat_FillSolidRect( dc, &rcBorderPart, styleNext.m_clrBorderRight );
			if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
			{
				POINT arrPt[4] =
				{
					{ rcBorderPart.left, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.bottom },
					{ rcBorderPart.left, rcBorderPart.bottom },
				};
				if( ! ( ebs == CExtRichStyleDescription::ebsDotted || ebs == CExtRichStyleDescription::ebsDashed ) )
				{
					if( bTopBorder )
						arrPt[ 0 ].y = rcCalcBorderInner.top;
					if( bBottomBorder )
						arrPt[ 3 ].y = rcCalcBorderInner.bottom;
				}
				CRgn rgnDialonal;
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgnDialonal.CreatePolygonRgn( arrPt, 4, ALTERNATE ) );
				if( rgn1.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn1.CombineRgn( &rgn1, &rgnDialonal, RGN_AND );
					CBrush _brush( clr1 );
					dc.FillRgn( &rgn1, &_brush );
				}
				if( rgn2.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn2.CombineRgn( &rgn2, &rgnDialonal, RGN_AND );
					CBrush _brush( clr2 );
					dc.FillRgn( &rgn2, &_brush );
				}
			} // if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
		} // if( bRightBorder )
		if( bTopBorder )
		{
			CExtRichStyleDescription::e_border_style_t ebs = styleNext.m_ebsTop;
			CRect rcBorderPart( rcCalcBorderOuter.left, rcCalcBorderOuter.top, rcCalcBorderOuter.right, rcCalcBorderInner.top );
			COLORREF clr1 = styleNext.m_clrBorderTop, clr2 = styleNext.m_clrBorderTop;
			CRgn rgn1, rgn2;
			if( ebs == CExtRichStyleDescription::ebsDouble && rcBorderPart.Height() < 3 )
				ebs = CExtRichStyleDescription::ebsSolid;
			else if(
					( ebs == CExtRichStyleDescription::ebsGroove || ebs == CExtRichStyleDescription::ebsRidge )
				&&	rcBorderPart.Height() < 2
				)
				ebs = CExtRichStyleDescription::ebsSolid;
			switch( ebs )
			{
			case CExtRichStyleDescription::ebsDotted:
			case CExtRichStyleDescription::ebsDashed:
			{
				INT nDotMetric = rcBorderPart.Height(), nOffset = rcBorderPart.left;
				if( ebs == CExtRichStyleDescription::ebsDashed )
					nDotMetric *= g_nDashMetricMutliplier;
				for( ; nOffset < rcBorderPart.right; nOffset += nDotMetric*2 )
				{
					CRect rcDot( nOffset, rcBorderPart.top, nOffset + nDotMetric, rcBorderPart.bottom );
					CRgn rgnDot;
					if( rgnDot.CreateRectRgnIndirect( &rcDot ) )
					{
						if( rgn1.GetSafeHandle() == NULL )
							rgn1.Attach( rgnDot.Detach() );
						else
							rgn1.CombineRgn( &rgn1, &rgnDot, RGN_OR );
					}
				}
			}
			break;
			case CExtRichStyleDescription::ebsInset:
			case CExtRichStyleDescription::ebsOutset:
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsOutset ) ? g_lfAdjustInsetOutsetLighter : g_lfAdjustInsetOutsetDarker, 0.0 );
				// continue falling here ...
			case CExtRichStyleDescription::ebsSolid:
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rcBorderPart ) );
			break;
			case CExtRichStyleDescription::ebsDouble:
			{
				INT nLineExt = rcBorderPart.Height() / 3;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt >= 1 );
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.right, rcBorderPart.top + nLineExt );
				CRect rc2( rcBorderPart.left, rcBorderPart.bottom - nLineExt, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
			}
			break;
			case CExtRichStyleDescription::ebsGroove:
			case CExtRichStyleDescription::ebsRidge:
			{
				INT nLineExt1 = rcBorderPart.Height() / 2;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt1 >= 1 );
				INT nLineExt2 = rcBorderPart.Height() - nLineExt1;
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.right, rcBorderPart.top + nLineExt1 );
				CRect rc2( rcBorderPart.left, rcBorderPart.bottom - nLineExt2, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeDarker : g_lfAdjustGrooveRidgeLighter, 0.0 );
				clr2 = CExtBitmap::stat_HLS_Adjust( clr2, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeLighter : g_lfAdjustGrooveRidgeDarker, 0.0 );
			}
			break;
			} // switch( ebs )
			//CExtRichContentItem::stat_FillSolidRect( dc, &rcBorderPart, styleNext.m_clrBorderTop );
			if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
			{
				POINT arrPt[4] =
				{
					{ rcBorderPart.left, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.bottom },
					{ rcBorderPart.left, rcBorderPart.bottom },
				};
				if( ! ( ebs == CExtRichStyleDescription::ebsDotted || ebs == CExtRichStyleDescription::ebsDashed ) )
				{
					if( bLeftBorder )
						arrPt[ 3 ].x = rcCalcBorderInner.left;
					if( bRightBorder )
						arrPt[ 2 ].x = rcCalcBorderInner.right;
				}
				CRgn rgnDialonal;
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgnDialonal.CreatePolygonRgn( arrPt, 4, ALTERNATE ) );
				if( rgn1.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn1.CombineRgn( &rgn1, &rgnDialonal, RGN_AND );
					CBrush _brush( clr1 );
					dc.FillRgn( &rgn1, &_brush );
				}
				if( rgn2.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn2.CombineRgn( &rgn2, &rgnDialonal, RGN_AND );
					CBrush _brush( clr2 );
					dc.FillRgn( &rgn2, &_brush );
				}
			} // if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
		} // if( bTopBorder )
		if( bBottomBorder )
		{
			CExtRichStyleDescription::e_border_style_t ebs = styleNext.m_ebsBottom;
			CRect rcBorderPart( rcCalcBorderOuter.left, rcCalcBorderInner.bottom, rcCalcBorderOuter.right, rcCalcBorderOuter.bottom );
			COLORREF clr1 = styleNext.m_clrBorderBottom, clr2 = styleNext.m_clrBorderBottom;
			CRgn rgn1, rgn2;
			if( ebs == CExtRichStyleDescription::ebsDouble && rcBorderPart.Height() < 3 )
				ebs = CExtRichStyleDescription::ebsSolid;
			else if(
					( ebs == CExtRichStyleDescription::ebsGroove || ebs == CExtRichStyleDescription::ebsRidge )
				&&	rcBorderPart.Height() < 2
				)
				ebs = CExtRichStyleDescription::ebsSolid;
			switch( ebs )
			{
			case CExtRichStyleDescription::ebsDotted:
			case CExtRichStyleDescription::ebsDashed:
			{
				INT nDotMetric = rcBorderPart.Height(), nOffset = rcBorderPart.right;
				if( ebs == CExtRichStyleDescription::ebsDashed )
					nDotMetric *= g_nDashMetricMutliplier;
				for( ; nOffset > rcBorderPart.left; nOffset -= nDotMetric*2 )
				{
					CRect rcDot( nOffset - nDotMetric, rcBorderPart.top, nOffset, rcBorderPart.bottom );
					CRgn rgnDot;
					if( rgnDot.CreateRectRgnIndirect( &rcDot ) )
					{
						if( rgn1.GetSafeHandle() == NULL )
							rgn1.Attach( rgnDot.Detach() );
						else
							rgn1.CombineRgn( &rgn1, &rgnDot, RGN_OR );
					}
				}
			}
			break;
			case CExtRichStyleDescription::ebsInset:
			case CExtRichStyleDescription::ebsOutset:
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsOutset ) ? g_lfAdjustInsetOutsetDarker : g_lfAdjustInsetOutsetLighter, 0.0 );
				// continue falling here ...
			case CExtRichStyleDescription::ebsSolid:
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rcBorderPart ) );
			break;
			case CExtRichStyleDescription::ebsDouble:
			{
				INT nLineExt = rcBorderPart.Height() / 3;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt >= 1 );
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.right, rcBorderPart.top + nLineExt );
				CRect rc2( rcBorderPart.left, rcBorderPart.bottom - nLineExt, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
			}
			break;
			case CExtRichStyleDescription::ebsGroove:
			case CExtRichStyleDescription::ebsRidge:
			{
				INT nLineExt1 = rcBorderPart.Height() / 2;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( nLineExt1 >= 1 );
				INT nLineExt2 = rcBorderPart.Height() - nLineExt1;
				CRect rc1( rcBorderPart.left, rcBorderPart.top, rcBorderPart.right, rcBorderPart.top + nLineExt2 );
				CRect rc2( rcBorderPart.left, rcBorderPart.bottom - nLineExt1, rcBorderPart.right, rcBorderPart.bottom );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn1.CreateRectRgnIndirect( &rc1 ) );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgn2.CreateRectRgnIndirect( &rc2 ) );
				clr1 = CExtBitmap::stat_HLS_Adjust( clr1, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeDarker : g_lfAdjustGrooveRidgeLighter, 0.0 );
				clr2 = CExtBitmap::stat_HLS_Adjust( clr2, 0.0, ( ebs == CExtRichStyleDescription::ebsGroove ) ? g_lfAdjustGrooveRidgeLighter : g_lfAdjustGrooveRidgeDarker, 0.0 );
			}
			break;
			} // switch( ebs )
			//CExtRichContentItem::stat_FillSolidRect( dc, &rcBorderPart, styleNext.m_clrBorderBottom );
			if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
			{
				POINT arrPt[4] =
				{
					{ rcBorderPart.left, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.top },
					{ rcBorderPart.right, rcBorderPart.bottom },
					{ rcBorderPart.left, rcBorderPart.bottom },
				};
				if( ! ( ebs == CExtRichStyleDescription::ebsDotted || ebs == CExtRichStyleDescription::ebsDashed ) )
				{
					if( bLeftBorder )
						arrPt[ 0 ].x = rcCalcBorderInner.left;
					if( bRightBorder )
						arrPt[ 1 ].x = rcCalcBorderInner.right;
				}
				CRgn rgnDialonal;
				__EXT_DEBUG_RICH_CONTENT_VERIFY( rgnDialonal.CreatePolygonRgn( arrPt, 4, ALTERNATE ) );
				if( rgn1.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn1.CombineRgn( &rgn1, &rgnDialonal, RGN_AND );
					CBrush _brush( clr1 );
					dc.FillRgn( &rgn1, &_brush );
				}
				if( rgn2.GetSafeHandle() != NULL )
				{
					if( rgnDialonal.GetSafeHandle() != NULL )
						rgn2.CombineRgn( &rgn2, &rgnDialonal, RGN_AND );
					CBrush _brush( clr2 );
					dc.FillRgn( &rgn2, &_brush );
				}
			} // if( rgn1.GetSafeHandle() != NULL || rgn2.GetSafeHandle() != NULL )
		} // if( bBottomBorder )
	} // if have any borders
	if( styleNext.m_eN == CExtRichStyleDescription::ent_noshade_noshade )
	{
		CExtRichStyleDescription::e_position_t eP = GetPosition();
		CRect rcCalcBorderOuter = m_rcLayout;
		if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
			rcCalcBorderOuter.DeflateRect( &styleNext.m_rcMargin );
		CRect rcCalcBorderInner = rcCalcBorderOuter;
		rcCalcBorderInner.DeflateRect( &styleNext.m_rcBorder );
		if( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL )
		{
			if( styleNext.m_esbtH == CExtRichStyleDescription::esbt_visible )
				rcCalcBorderInner.DeflateRect( 0, 0, 0, Scrolling_GetHorizontalScrollBarHeight() );
			if( styleNext.m_esbtV == CExtRichStyleDescription::esbt_visible )
				rcCalcBorderInner.DeflateRect( 0, 0, Scrolling_GetVerticalScrollBarWidth(), 0 );
		}
		CExtRichContentItem::stat_FillSolidRect( dc, rcCalcBorderInner, styleNext.m_clrBorderBottom );
	}
}

void CExtRichContentItem::DoPaint( CDC & dc, const CRect & rcDocRenderTarget, const CPoint & ptScrollPosTarget, CExtRichContentItem * pRCIFA, bool bScrollingAdjusted  )
{
	if( ! IsParticipantOfPaint() )
		return;
bool bThisIsStyleOwner = _IsStyleOwner();
CExtRichStyleDescription::e_position_t eP = CExtRichStyleDescription::ep_static;
	if( bThisIsStyleOwner )
	{
		eP = GetPosition();
		if( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed )
		{
			if( LPVOID(pRCIFA) != LPVOID(this) )
				return;
		}
	} // if( bThisIsStyleOwner )
const CExtRichStyleDescription & styleEffective = GetEffectiveStyle();

/*
CExtRichStyleDescription styleNextRotatedCache;
	if( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL )
	{
		styleNextRotatedCache = styleEffective;
		styleNextRotatedCache.RotateStyleOptions( INT(m_layout.m_eLO) );
		styleNextRotatedCache.m_bDtPrefixOnlyMode = styleEffective.m_bDtPrefixOnlyMode;
	}
const CExtRichStyleDescription & styleNext = ( m_layout.m_eLO != CExtRichContentLayout::__ELOT_NORMAL ) ? styleNextRotatedCache : styleEffective;
*/
const CExtRichStyleDescription & styleNext = styleEffective;

CPoint ptScrollPos = ptScrollPosTarget;
	if( bThisIsStyleOwner )
	{
		if( ! bScrollingAdjusted )
		{
			CRect _rcDocRenderTargetClipped( m_rcLayout );
			CExtRichStyleDescription::e_scroll_bar_type_t esbtH = GetSBTH();
			__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtH == CExtRichStyleDescription::esbt_hidden || esbtH == CExtRichStyleDescription::esbt_visible );
			CExtRichStyleDescription::e_scroll_bar_type_t esbtV = GetSBTV();
			__EXT_DEBUG_RICH_CONTENT_ASSERT( esbtV == CExtRichStyleDescription::esbt_hidden || esbtV == CExtRichStyleDescription::esbt_visible );
			if( esbtH == CExtRichStyleDescription::esbt_visible || esbtV == CExtRichStyleDescription::esbt_visible )
				bScrollingAdjusted = true;
			else if( styleEffective.m_eO == CExtRichStyleDescription::eo_hidden || styleEffective.m_eO == CExtRichStyleDescription::eo_auto )
				bScrollingAdjusted = true;
			if( bScrollingAdjusted )
			{
				_rcDocRenderTargetClipped.DeflateRect( &styleEffective.m_rcCellPadding );
				if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
					_rcDocRenderTargetClipped.DeflateRect( &styleEffective.m_rcMargin );
				_rcDocRenderTargetClipped.DeflateRect( &styleEffective.m_rcBorder );
			//	if( esbtH == CExtRichStyleDescription::esbt_visible )
			//		_rcDocRenderTargetClipped.DeflateRect( 0, 0, 0, Scrolling_GetHorizontalScrollBarHeight() );
			//	if( esbtV == CExtRichStyleDescription::esbt_visible )
			//		_rcDocRenderTargetClipped.DeflateRect( 0, 0, Scrolling_GetVerticalScrollBarWidth(), 0 );
				{ // BLOCK: for dcScrolled
					CExtMemoryDC dcScrolled(
						&dc, &_rcDocRenderTargetClipped,
						CExtMemoryDC::MDCOPT_TO_MEMORY | CExtMemoryDC::MDCOPT_FILL_BITS | CExtMemoryDC::MDCOPT_RTL_COMPATIBILITY
						);
					dcScrolled.OffsetViewportOrg( -m_ptScrollPos.x, -m_ptScrollPos.y );
					DoPaint( dcScrolled, rcDocRenderTarget, ptScrollPos, pRCIFA, true );
					dcScrolled.OffsetViewportOrg( m_ptScrollPos.x, m_ptScrollPos.y );
				} // BLOCK: for dcScrolled
				DoPaintBorder( dc, styleNext, rcDocRenderTarget, ptScrollPosTarget, pRCIFA );
				DoPaintScrollBars( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA );
				return;
			} // if( bScrollingAdjusted )
		} // if( ! bScrollingAdjusted )

		ptScrollPos += m_ptScrollPos;
	} // if( bThisIsStyleOwner )
_RelativePosionShift_t _rps( dc, this, styleNext );

CRect rcLayoutScrolled( m_rcLayout );
	rcLayoutScrolled.OffsetRect( m_ptScrollPos );
bool bVisibleOnTheScreen = false;
	if(		m_eType == __EHIT_ROOT
		||	IsNoLayoutRectItem()
		||	(	m_rcLayout.left < m_rcLayout.right
			&&	m_rcLayout.top < m_rcLayout.bottom
// 			&&	(	( rcDocRenderTarget.left <= m_rcLayout.left && m_rcLayout.left <= rcDocRenderTarget.right )
// 				||	( rcDocRenderTarget.left <= m_rcLayout.right && m_rcLayout.right <= rcDocRenderTarget.right )
// 				)
// 			&&	(	( rcDocRenderTarget.top <= m_rcLayout.top && m_rcLayout.top <= rcDocRenderTarget.bottom )
// 				||	( rcDocRenderTarget.top <= m_rcLayout.bottom && m_rcLayout.bottom <= rcDocRenderTarget.bottom )
// 				)
			&&	dc.RectVisible( &rcLayoutScrolled )
			)
		)
		bVisibleOnTheScreen = true;
 	if( ! bVisibleOnTheScreen )
	{
		DoPaintChildren( dc, rcDocRenderTarget, ptScrollPos, pRCIFA, false );
 		return;
	}

	// draw background
	if(		m_rcLayout.left < m_rcLayout.right
		&&	m_rcLayout.top < m_rcLayout.bottom
		&&	m_eType != __EHIT_TEXT_RANGE
		&&	m_eType != __EHIT_TEXT_SPACE
		)
	{ // background painting
		// solid background painting
		COLORREF clrSolidBackground = COLORREF(-1L);
		if( styleNext.m_eBCT == CExtRichStyleDescription::ebct_color && styleNext.m_clrBack != COLORREF(-1L) && styleNext.m_clrBack != COLORREF(-2L) )
			clrSolidBackground = styleNext.m_clrBack;
		if( clrSolidBackground != COLORREF(-1L) && clrSolidBackground != COLORREF(-2L) )
		{
			CRect rcFillBackground( rcLayoutScrolled );
			rcFillBackground.InflateRect( &styleNext.m_rcUiBackgroundExtend );
			rcFillBackground.DeflateRect( &styleNext.m_rcCellPadding );
			if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
				rcFillBackground.DeflateRect( &styleNext.m_rcMargin );
			rcFillBackground.DeflateRect( &styleNext.m_rcBorder );
			if( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL )
			{
				if( styleNext.m_esbtH == CExtRichStyleDescription::esbt_visible )
					rcFillBackground.DeflateRect( 0, 0, 0, Scrolling_GetHorizontalScrollBarHeight() );
				if( styleNext.m_esbtV == CExtRichStyleDescription::esbt_visible )
					rcFillBackground.DeflateRect( 0, 0, Scrolling_GetVerticalScrollBarWidth(), 0 );
			}
			CExtRichContentItem::stat_FillSolidRect( dc, rcFillBackground, clrSolidBackground );
		} // if( clrSolidBackground != COLORREF(-1L) && clrSolidBackground != COLORREF(-2L) )
		if( bThisIsStyleOwner )
		{
			// image background painting
			if( ! styleNext.m_strBackgroundImagePath.IsEmpty() )
			{
				if( styleNext.m_eBA != CExtRichStyleDescription::ebaScroll )
					dc.OffsetViewportOrg( m_ptScrollPos.x, m_ptScrollPos.y );
				CExtBitmap bmpRotatedCache, * pBmpExtracted = m_layout.ImageByName( LPCTSTR(styleNext.m_strBackgroundImagePath) );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pBmpExtracted == NULL || (! pBmpExtracted->IsEmpty() ) );
				if( pBmpExtracted != NULL )
				{
					switch( m_layout.m_eLO )
					{
					case CExtRichContentLayout::__ELOT_90_CW:
					case CExtRichContentLayout::__ELOT_180_CW:
					case CExtRichContentLayout::__ELOT_270_CW:
					{
						CSize sizeBmp = pBmpExtracted->GetSize();
						__EXT_DEBUG_RICH_CONTENT_VERIFY( bmpRotatedCache.CreateRotated9xStack( *pBmpExtracted, INT(m_layout.m_eLO), 1, sizeBmp.cx, sizeBmp.cy, true, true ) );
					}
					break;
					} // switch( m_layout.m_eLO )
					CExtBitmap & bmp = ( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL ) ? (*pBmpExtracted) : bmpRotatedCache;
					if( ! bmp.IsEmpty() )
					{
						CRect rcImageLayout = m_rcLayout;
						rcImageLayout.InflateRect( &styleNext.m_rcUiBackgroundExtend );
						rcImageLayout.DeflateRect( &styleNext.m_rcCellPadding );
						if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
							rcImageLayout.DeflateRect( &styleNext.m_rcMargin );
						rcImageLayout.DeflateRect( &styleNext.m_rcBorder );
						if( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL )
						{
							if( styleNext.m_esbtH == CExtRichStyleDescription::esbt_visible )
								rcImageLayout.DeflateRect( 0, 0, 0, Scrolling_GetHorizontalScrollBarHeight() );
							if( styleNext.m_esbtV == CExtRichStyleDescription::esbt_visible )
								rcImageLayout.DeflateRect( 0, 0, Scrolling_GetVerticalScrollBarWidth(), 0 );
						}
						CRect rcBackImage = rcImageLayout;
						CSize sizeImage = bmp.GetSize(), sizeLayout = rcImageLayout.Size();
						rcBackImage.right = rcBackImage.left + sizeImage.cx;
						rcBackImage.bottom = rcBackImage.top + sizeImage.cy;
						if( styleNext.m_eBPT != CExtRichStyleDescription::ebpt_unspecified )
						{
							CPoint ptOffset( 0, 0 );
							switch( styleNext.m_eBPT )
							{
							case CExtRichStyleDescription::ebpt_align:
								if( styleNext.m_eBPA != CExtRichStyleDescription::ebpa_unspecified )
								{
									switch( styleNext.m_eBPA )
									{
									case CExtRichStyleDescription::ebpa_top_left:
									break;
									case CExtRichStyleDescription::ebpa_top_center:
										ptOffset.x = ( sizeLayout.cx - sizeImage.cx ) / 2;
									break;
									case CExtRichStyleDescription::ebpa_top_right:
										ptOffset.x = sizeLayout.cx - sizeImage.cx;
									break;
									case CExtRichStyleDescription::ebpa_center_left:
										ptOffset.y = ( sizeLayout.cy - sizeImage.cy ) / 2;
									break;
									case CExtRichStyleDescription::ebpa_center_center:
										ptOffset.x = ( sizeLayout.cx - sizeImage.cx ) / 2;
										ptOffset.y = ( sizeLayout.cy - sizeImage.cy ) / 2;
									break;
									case CExtRichStyleDescription::ebpa_center_right:
										ptOffset.x = sizeLayout.cx - sizeImage.cx;
										ptOffset.y = ( sizeLayout.cy - sizeImage.cy ) / 2;
									break;
									case CExtRichStyleDescription::ebpa_bottom_left:
										ptOffset.y = sizeLayout.cy - sizeImage.cy;
									break;
									case CExtRichStyleDescription::ebpa_bottom_center:
										ptOffset.x = ( sizeLayout.cx - sizeImage.cx ) / 2;
										ptOffset.y = sizeLayout.cy - sizeImage.cy;
									break;
									case CExtRichStyleDescription::ebpa_bottom_right:
										ptOffset.x = sizeLayout.cx - sizeImage.cx;
										ptOffset.y = sizeLayout.cy - sizeImage.cy;
									break;
									}
								} // if( styleNext.m_eBPA != CExtRichStyleDescription::ebpa_unspecified )
							break; // case CExtRichStyleDescription::ebpt_align
							case CExtRichStyleDescription::ebpt_percent:
								ptOffset.x = ::MulDiv( sizeLayout.cx, styleNext.m_ptBackgroundAlignment.x, 100 );
								ptOffset.y = ::MulDiv( sizeLayout.cy, styleNext.m_ptBackgroundAlignment.y, 100 );
							break;
							case CExtRichStyleDescription::ebpt_absolute:
								ptOffset = styleNext.m_ptBackgroundAlignment;
							break;
							} // switch( styleNext.m_eBPT )
							rcBackImage.OffsetRect( ptOffset );
						} // if( styleNext.m_eBPT != CExtRichStyleDescription::ebpt_unspecified )

						CRect rcSurface = rcImageLayout;
						bool bRepeatX = false, bRepeatY = false;
						if( styleNext.m_eBR != CExtRichStyleDescription::ebrNoRepeat )
						{
							switch( styleNext.m_eBR )
							{
							case CExtRichStyleDescription::ebrRepeat:    bRepeatX = bRepeatY = true;   break;
							case CExtRichStyleDescription::ebrRepeatX:   bRepeatX            = true;   break;
							case CExtRichStyleDescription::ebrRepeatY:              bRepeatY = true;   break;
							} // switch( styleNext.m_eBR )
						} // if( styleNext.m_eBR != CExtRichStyleDescription::ebrNoRepeat )

						if( rcSurface.left < rcSurface.right && rcSurface.top < rcSurface.bottom && dc.RectVisible( &rcSurface ) )
						{
							INT   nCountFullX = 1, nLastPartPx = 0, nCountToDrawX = 1
								, nCountFullY = 1, nLastPartPy = 0, nCountToDrawY = 1;
							if( bRepeatX )
							{
								nCountFullX = sizeLayout.cx / sizeImage.cx;
								nLastPartPx = sizeLayout.cx % sizeImage.cx;
								nCountToDrawX = nCountFullX + ( ( nLastPartPx > 0 ) ? 1 : 0 );
								CExtRichStyleDescription::e_background_postion_alignment_t eHorzPart = CExtRichStyleDescription::e_background_postion_alignment_t( (INT(styleNext.m_eBPA)>>INT(CExtRichStyleDescription::ebpa_impl_horz_shift))&INT(CExtRichStyleDescription::ebpa_part_mask) );
								switch( eHorzPart )
								{
								case CExtRichStyleDescription::ebpa_impl_basic_low: // left
								break;
								case CExtRichStyleDescription::ebpa_impl_basic_mid: // center
									rcBackImage.left = rcImageLayout.left - ( ( nLastPartPx > 0 ) ? ( ( sizeImage.cx - nLastPartPx ) / 2 ) : 0 );
									if( nCountToDrawX != 0 && ( (nCountToDrawX & 1 ) ==0 ) )
									{ // center aligning issue, make painted count of images odd
										nCountToDrawX ++;
										rcBackImage.left -= sizeImage.cx / 2;
									} // center aligning issue, make painted count of images odd
								break;
								case CExtRichStyleDescription::ebpa_impl_basic_high: // right
									rcBackImage.left = rcImageLayout.left - ( ( nLastPartPx > 0 ) ? ( sizeImage.cx - nLastPartPx ) : 0 );
								break;
								} // switch( eHorzPart )
								rcBackImage.right = rcBackImage.left + sizeImage.cx;
							} // if( bRepeatX )
							else
							{
								rcSurface.left = max( rcBackImage.left, rcImageLayout.left );
								rcSurface.right = min( rcBackImage.right, rcImageLayout.right );
							} // else from if( bRepeatX )
							if( bRepeatY )
							{
								nCountFullY = sizeLayout.cy / sizeImage.cy;
								nLastPartPy = sizeLayout.cy % sizeImage.cy;
								nCountToDrawY = nCountFullY + ( ( nLastPartPy > 0 ) ? 1 : 0 );
								CExtRichStyleDescription::e_background_postion_alignment_t eVertPart = CExtRichStyleDescription::e_background_postion_alignment_t( (INT(styleNext.m_eBPA)>>INT(CExtRichStyleDescription::ebpa_impl_vert_shift))&INT(CExtRichStyleDescription::ebpa_part_mask) );
								switch( eVertPart )
								{
								case CExtRichStyleDescription::ebpa_impl_basic_low: // top
								break;
								case CExtRichStyleDescription::ebpa_impl_basic_mid: // center
									rcBackImage.top = rcImageLayout.top - ( ( nLastPartPy > 0 ) ? ( ( sizeImage.cy - nLastPartPy ) / 2 ) : 0 );
									if( nCountToDrawY != 0 && ( (nCountToDrawY & 1 ) ==0 ) )
									{ // center aligning issue, make painted count of images odd
										nCountToDrawY ++;
										rcBackImage.top -= sizeImage.cy / 2;
									} // center aligning issue, make painted count of images odd
								break;
								case CExtRichStyleDescription::ebpa_impl_basic_high: // bottom
									rcBackImage.top = rcImageLayout.top - ( ( nLastPartPy > 0 ) ? ( sizeImage.cy - nLastPartPy ) : 0 );
								break;
								} // switch( eVertPart )
								rcBackImage.bottom = rcBackImage.top + sizeImage.cy;
							} // if( bRepeatY )
							else
							{
								rcSurface.top = max( rcBackImage.top, rcImageLayout.top );
								rcSurface.bottom = min( rcBackImage.bottom, rcImageLayout.bottom );
							} // else from if( bRepeatY )

							if( bRepeatX || bRepeatY )
							{
								CExtMemoryDC dcMem(
									&dc, &rcSurface,
									CExtMemoryDC::MDCOPT_TO_MEMORY | CExtMemoryDC::MDCOPT_FILL_BITS | CExtMemoryDC::MDCOPT_RTL_COMPATIBILITY
									);
								int nOldStretchBltMode = ::GetStretchBltMode( dcMem.m_hDC );
								::SetStretchBltMode( dcMem.m_hDC, ( m_layout.m_bDrawImagesSmootherAsPossible && g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
								int nIndexX, nIndexY;
								CRect rcWalkX = rcBackImage;
								for( nIndexX = 0; nIndexX < nCountToDrawX; nIndexX++ )
								{
									CRect rcWalkY = rcWalkX;
									for( nIndexY = 0; nIndexY < nCountToDrawY; nIndexY++ )
									{
										bmp.AlphaBlend( dcMem.m_hDC, rcWalkY );
										rcWalkY.OffsetRect( 0, sizeImage.cy );
									}
									rcWalkX.OffsetRect( sizeImage.cx, 0 );
								} // for( nIndexX = 0; nIndexX < nCountToDrawX; nIndexX++ )
								::SetStretchBltMode( dcMem.m_hDC, nOldStretchBltMode );
							} // if( bRepeatX || bRepeatY )
							else
							{
								if( styleNext.m_eBPA == CExtRichStyleDescription::ebpa_unspecified )
								{
									int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
									::SetStretchBltMode( dc.m_hDC, ( m_layout.m_bDrawImagesSmootherAsPossible && g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
									CExtBitmap::e_DrawMethod_t eDM = CExtBitmap::__EDM_DEFAULT;
									if(		styleNext.m_eUiBackgroundDrawMethod != CExtRichStyleDescription::e_ui_dm_stretch
										&&	styleNext.m_eUiBackgroundDrawMethod != CExtRichStyleDescription::e_ui_dm_unspecified
										)
										eDM = (CExtBitmap::e_DrawMethod_t)(styleNext.m_eUiBackgroundDrawMethod);
									switch( m_layout.m_eLO )
									{
									case CExtRichContentLayout::__ELOT_NORMAL:
										bmp.AlphaBlendSkinParts( dc.m_hDC, rcImageLayout, styleNext.m_rcUiBackgroundSlice, eDM, true, false, (BYTE)styleNext.m_nUi_background_transparency );
									break;
									case CExtRichContentLayout::__ELOT_90_CW:
									case CExtRichContentLayout::__ELOT_180_CW:
									case CExtRichContentLayout::__ELOT_270_CW:
									{
										if(		( m_layout.m_eLO == CExtRichContentLayout::__ELOT_90_CW || m_layout.m_eLO == CExtRichContentLayout::__ELOT_270_CW )
											&&	( eDM == CExtBitmap::__EDM_TILE_H || eDM == CExtBitmap::__EDM_TILE_V )
											)
											eDM = ( eDM == CExtBitmap::__EDM_TILE_H ) ? CExtBitmap::__EDM_TILE_V : CExtBitmap::__EDM_TILE_H;
										CRect rcSlicePadding( styleNext.m_rcUiBackgroundSlice );
										CExtRichStyleDescription::stat_RotateRect( m_layout.m_eLO, rcSlicePadding );
										bmp.AlphaBlendSkinParts( dc.m_hDC, rcImageLayout, rcSlicePadding, eDM, true, false, (BYTE)styleNext.m_nUi_background_transparency );
									}
									break;
									} // switch( m_layout.m_eLO )
									::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
								} // if( styleNext.m_eBPA == CExtRichStyleDescription::ebpa_unspecified )
								else
								{
									CExtMemoryDC dcMem(
										&dc, &rcSurface,
										CExtMemoryDC::MDCOPT_TO_MEMORY | CExtMemoryDC::MDCOPT_FILL_BITS | CExtMemoryDC::MDCOPT_RTL_COMPATIBILITY
										);
									int nOldStretchBltMode = ::GetStretchBltMode( dcMem.m_hDC );
									::SetStretchBltMode( dcMem.m_hDC, ( m_layout.m_bDrawImagesSmootherAsPossible && g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
									bmp.AlphaBlend( dcMem.m_hDC, rcBackImage );
									::SetStretchBltMode( dcMem.m_hDC, nOldStretchBltMode );
								}

		// 			dc.MoveTo( rcBackImage.left+1, rcBackImage.top+1 );
		// 			dc.LineTo( rcBackImage.right-2, rcBackImage.bottom-1 );
		// 			dc.MoveTo( rcBackImage.left+1, rcBackImage.bottom-1 );
		// 			dc.LineTo( rcBackImage.right-2, rcBackImage.top+1 );
							} // if( bRepeatX || bRepeatY )
							
						} // if( rcSurface.left < rcSurface.right && rcSurface.top < rcSurface.bottom && dc.RectVisible( &rcSurface ) )
					} // if( ! bmp.IsEmpty() )
				} // if( pBmpExtracted != NULL )
				if( styleNext.m_eBA != CExtRichStyleDescription::ebaScroll )
					dc.OffsetViewportOrg( -m_ptScrollPos.x, -m_ptScrollPos.y );
			} // if( ! styleNext.m_strBackgroundImagePath.IsEmpty() )
		} // if( bThisIsStyleOwner )
	} // background painting

	if( ( ! bScrollingAdjusted ) && bThisIsStyleOwner )
		DoPaintBorder( dc, styleNext, rcDocRenderTarget, ptScrollPosTarget, pRCIFA );

	DoPaintChildren( dc, rcDocRenderTarget, ptScrollPos, pRCIFA, false );
	// post draw specific effects
	if( ( ! IsNoLayoutRectItem() ) && ( ! dc.RectVisible( m_rcLayout ) ) )
		return;

bool bDtPrefixOnlyMode = false;
	switch( m_eType )
	{
	case __EHIT_ROOT:
	{
	}
	break;
	case __EHIT_TEXT_RANGE:
	{
		if( styleNext.m_bDtPrefixOnlyMode || m_thDtPrefixOnlyMode )
		{
			bDtPrefixOnlyMode = true;
			break;
		}
		_StyleRestore_t _restore( dc, styleNext, INT(m_layout.m_eLO), m_thUnderline );
		CRect rcLayoutForTextOut = m_rcLayout;
		switch( m_layout.m_eLO )
		{
		case CExtRichContentLayout::__ELOT_90_CW:
			rcLayoutForTextOut.OffsetRect( rcLayoutForTextOut.Width(), 0 );
		break;
		case CExtRichContentLayout::__ELOT_180_CW:
			rcLayoutForTextOut.OffsetRect( rcLayoutForTextOut.Width(), rcLayoutForTextOut.Height() );
		break;
		case CExtRichContentLayout::__ELOT_270_CW:
			rcLayoutForTextOut.OffsetRect( 0, rcLayoutForTextOut.Height() );
		break;
		} // switch( m_layout.m_eLO )
		if( styleNext.m_nLetterSpacing > __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
		{
			int nLettersCount = m_strTextEffective.GetLength();
			int nLetterIndex;
			int nX = rcLayoutForTextOut.left;
			for( nLetterIndex = 0; nLetterIndex < nLettersCount; nLetterIndex++ )
			{
				LPCTSTR strChrPtr = LPCTSTR(m_strTextEffective) + nLetterIndex;
				m_layout.TextOut( dc.m_hDC, nX, rcLayoutForTextOut.top, LPCTSTR(strChrPtr), 1 );
				LONG nLetterLength = m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(strChrPtr), 1 ).cx;
				nX += styleNext.m_nLetterSpacing + nLetterLength;
			}
		}
		else
			m_layout.TextOut( dc.m_hDC, rcLayoutForTextOut.left, rcLayoutForTextOut.top, LPCTSTR(m_strTextEffective) );
	}
	break;
	case __EHIT_TEXT_SPACE:
	{
		if( styleNext.m_bDtPrefixOnlyMode || m_thDtPrefixOnlyMode )
		{
			bDtPrefixOnlyMode = true;
			break;
		}
		bool bUnderline = ( styleNext.m_fd.m_lf.lfUnderline != 0 || m_thUnderline ) ? true : false;
		if( ! bUnderline )
			break;
		_StyleRestore_t _restore( dc, styleNext, INT(m_layout.m_eLO), bUnderline );
		CRect rcLayoutForTextOut = m_rcLayout;
		switch( m_layout.m_eLO )
		{
		case CExtRichContentLayout::__ELOT_90_CW:
			rcLayoutForTextOut.OffsetRect( rcLayoutForTextOut.Width(), 0 );
			break;
		case CExtRichContentLayout::__ELOT_180_CW:
			rcLayoutForTextOut.OffsetRect( rcLayoutForTextOut.Width(), rcLayoutForTextOut.Height() );
			break;
		case CExtRichContentLayout::__ELOT_270_CW:
			rcLayoutForTextOut.OffsetRect( 0, rcLayoutForTextOut.Height() );
			break;
		} // switch( m_layout.m_eLO )
		if( styleNext.m_nLetterSpacing > __EXT_RICH_CONTENT_NEGATIVE_UNUSED )
		{
			int nLettersCount = m_strTextEffective.GetLength();
			int nLetterIndex;
			int nX = rcLayoutForTextOut.left;
			for( nLetterIndex = 0; nLetterIndex < nLettersCount; nLetterIndex++ )
			{
				LPCTSTR strChrPtr = LPCTSTR(m_strTextEffective) + nLetterIndex;
				m_layout.TextOut( dc.m_hDC, nX, rcLayoutForTextOut.top, LPCTSTR(strChrPtr), 1 );
				LONG nLetterLength = m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(strChrPtr), 1 ).cx;
				nX += styleNext.m_nLetterSpacing + nLetterLength;
			}
		}
		else
			m_layout.TextOut( dc.m_hDC, rcLayoutForTextOut.left, rcLayoutForTextOut.top, LPCTSTR(m_strTextEffective) );
// 		if( m_rcLayout.left < m_rcLayout.right && m_rcLayout.top < m_rcLayout.bottom )
// 		{
// 			dc.MoveTo( m_rcLayout.left, m_rcLayout.top );
// 			dc.LineTo( m_rcLayout.left, m_rcLayout.bottom-1 );
// 			dc.MoveTo( m_rcLayout.right-1, m_rcLayout.top );
// 			dc.LineTo( m_rcLayout.right-1, m_rcLayout.bottom-1 );
// 
// 			dc.MoveTo( m_rcLayout.left, m_rcLayout.top );
// 			dc.LineTo( m_rcLayout.right-1, m_rcLayout.top );
// 			dc.MoveTo( m_rcLayout.left, m_rcLayout.bottom-1 );
// 			dc.LineTo( m_rcLayout.right-1, m_rcLayout.bottom-1 );
// 
// 			dc.MoveTo( m_rcLayout.left+1, m_rcLayout.top+1 );
// 			dc.LineTo( m_rcLayout.right-2, m_rcLayout.bottom-1 );
// 			dc.MoveTo( m_rcLayout.left+1, m_rcLayout.bottom-1 );
// 			dc.LineTo( m_rcLayout.right-2, m_rcLayout.top+1 );
// 		}
	}
	break;
	case __EHIT_GENERIC_TAG:
	{
		CExtRichStyleDescription::e_display_t eD = GetDisplay();
		switch( eD )
		{
		case CExtRichStyleDescription::ed_list_item:
		{
			_StyleRestore_t _restore( dc, styleNext, INT(m_layout.m_eLO), m_thUnderline );
			int nFontAscent = _restore.m_TextMetric.tmAscent, nFreeSpaceOverAscent = 2, nFreeSpaceBeforeText = 10;
			CRect rcLayout( m_rcLayout );
			rcLayout.DeflateRect( &styleNext.m_rcCellPadding );
			if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
				rcLayout.DeflateRect( &styleNext.m_rcMargin );
			rcLayout.DeflateRect( &styleNext.m_rcBorder );
			rcLayout.DeflateRect( &styleNext.m_rcPadding );
			CRect rcDrawListSign( 0, 0, 0, 0 );
			switch( m_layout.m_eLO )
			{
			case CExtRichContentLayout::__ELOT_NORMAL:
				rcDrawListSign.SetRect( rcDocRenderTarget.left, rcLayout.top, rcLayout.left, rcLayout.bottom );
			break;
			case CExtRichContentLayout::__ELOT_90_CW:
				rcDrawListSign.SetRect( rcLayout.left, rcDocRenderTarget.top, rcLayout.right, rcLayout.top );
			break;
			case CExtRichContentLayout::__ELOT_180_CW:
				rcDrawListSign.SetRect( rcLayout.right, rcLayout.top, rcDocRenderTarget.right, rcLayout.bottom );
			break;
			case CExtRichContentLayout::__ELOT_270_CW:
				rcDrawListSign.SetRect( rcLayout.left, rcLayout.bottom, rcLayout.right, rcDocRenderTarget.bottom );
			break;
			} // switch( m_layout.m_eLO )
			if( ! dc.RectVisible( &rcDrawListSign ) )
				break;
			if( styleNext.m_eLST == CExtRichStyleDescription::elst_none )
			{
				break;
			}
			else if( ! styleNext.m_strListStyleImagePath.IsEmpty() )
			{
				CExtBitmap bmpRotatedCache, * pBmpExtracted = m_layout.ImageByName( LPCTSTR(styleNext.m_strListStyleImagePath) );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pBmpExtracted == NULL || (! pBmpExtracted->IsEmpty() ) );
				if( pBmpExtracted != NULL )
				{
					switch( m_layout.m_eLO )
					{
					case CExtRichContentLayout::__ELOT_90_CW:
					case CExtRichContentLayout::__ELOT_180_CW:
					case CExtRichContentLayout::__ELOT_270_CW:
					{
						CSize sizeBmp = pBmpExtracted->GetSize();
						__EXT_DEBUG_RICH_CONTENT_VERIFY( bmpRotatedCache.CreateRotated9xStack( *pBmpExtracted, INT(m_layout.m_eLO), 1, sizeBmp.cx, sizeBmp.cy, true, true ) );
					}
					break;
					} // switch( m_layout.m_eLO )
					CExtBitmap & bmp = ( m_layout.m_eLO == CExtRichContentLayout::__ELOT_NORMAL ) ? (*pBmpExtracted) : bmpRotatedCache;
					__EXT_DEBUG_RICH_CONTENT_ASSERT( ! bmp.IsEmpty() );
					if( ! bmp.IsEmpty() )
					{
						CSize sizeMarker = bmp.GetSize();
						//sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
						//sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
						CRect rcListImage =
							CalcListItemMarkerLocation(
								INT(m_layout.m_eLO),
								styleNext.m_eLSP,
								rcLayout,
								rcDrawListSign,
								sizeMarker,
								nFontAscent,
								nFreeSpaceOverAscent,
								nFreeSpaceBeforeText
								);
						int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
						::SetStretchBltMode( dc.m_hDC, ( m_layout.m_bDrawImagesSmootherAsPossible && g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
						bmp.AlphaBlend( dc.m_hDC, rcListImage );
						::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
					}
				} // if( pBmpExtracted != NULL )
				break;
			}
			else if( styleNext.m_eLST == CExtRichStyleDescription::elst_circle )
			{
				CSize sizeMarker = CExtRichContentLayout::stat_GetListMarkerSizeDiskAt96DPI();
				sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
				sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
				CRect rcCircle =
					CalcListItemMarkerLocation(
						INT(m_layout.m_eLO),
						styleNext.m_eLSP,
						rcLayout,
						rcDrawListSign,
						sizeMarker,
						nFontAscent,
						nFreeSpaceOverAscent,
						nFreeSpaceBeforeText
						);
				HGDIOBJ hOldBrush = ::SelectObject( dc.m_hDC, ::GetStockObject( NULL_BRUSH ) );
				CPen _pen( PS_SOLID, 1, styleNext.m_clrText );
				CPen * pOldPen = dc.SelectObject( &_pen );
				dc.Ellipse( rcCircle );
				dc.SelectObject( pOldPen );
				::SelectObject( dc.m_hDC, hOldBrush );
				break;
			}
			else if( styleNext.m_eLST == CExtRichStyleDescription::elst_disc )
			{
				CSize sizeMarker = CExtRichContentLayout::stat_GetListMarkerSizeDiskAt96DPI();
				sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
				sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
				CRect rcCircle =
					CalcListItemMarkerLocation(
						INT(m_layout.m_eLO),
						styleNext.m_eLSP,
						rcLayout,
						rcDrawListSign,
						sizeMarker,
						nFontAscent,
						nFreeSpaceOverAscent,
						nFreeSpaceBeforeText
						);
				HGDIOBJ hOldPen = ::SelectObject( dc.m_hDC, ::GetStockObject( NULL_PEN ) );
				CBrush _brush( styleNext.m_clrText );
				CBrush * pOldBrush = dc.SelectObject( &_brush );
				dc.Ellipse( rcCircle );
				dc.SelectObject( pOldBrush );
				::SelectObject( dc.m_hDC, hOldPen );
				break;
			}
			else if( styleNext.m_eLST == CExtRichStyleDescription::elst_square )
			{
				CSize sizeMarker = CExtRichContentLayout::stat_GetListMarkerSizeSquareAt96DPI();
				sizeMarker.cx = ::MulDiv( sizeMarker.cx, g_PaintManager.m_nLPX, 96 );
				sizeMarker.cy = ::MulDiv( sizeMarker.cy, g_PaintManager.m_nLPY, 96 );
				CRect rcSquare =
					CalcListItemMarkerLocation(
						INT(m_layout.m_eLO),
						styleNext.m_eLSP,
						rcLayout,
						rcDrawListSign,
						sizeMarker,
						nFontAscent,
						nFreeSpaceOverAscent,
						nFreeSpaceBeforeText
						);
				CExtRichContentItem::stat_FillSolidRect( dc, rcSquare, styleNext.m_clrText );
				break;
			}
			__EXT_DEBUG_RICH_CONTENT_ASSERT( styleNext.m_eLST != CExtRichStyleDescription::elst_inherit );
			CExtSafeString strNumber = CExtRichContentLayout::stat_GenListItemText( styleNext.m_eLST, m_nAppliedListIndex );
			CExtSafeString strListSign;
			strListSign.Format( _T("%s. "), LPCTSTR(strNumber) );
			UINT nDT = DT_SINGLELINE|DT_NOPREFIX|DT_TOP|DT_NOCLIP;
			if( styleNext.m_eLSP == CExtRichStyleDescription::elsp_outside )
				nDT |= DT_RIGHT;
			else
				nDT |= DT_LEFT;
			if( styleNext.m_eLSP == CExtRichStyleDescription::elsp_inside )
				rcDrawListSign.CopyRect( rcLayout );
			else
				rcDrawListSign.right -= ( nFreeSpaceBeforeText / 2 );
			//////////////////////////////////////////////////////////////////////////
			//CSize sizeListSign = m_layout.GetTextExtent( dc.m_hDC, LPCTSTR(strListSign) );
			if( (rcDrawListSign.Width() < m_nListNumberWidth) && (m_nListNumberWidth >= 0) )
				rcDrawListSign.left -= m_nListNumberWidth - rcDrawListSign.Width();
			//////////////////////////////////////////////////////////////////////////
			CExtRichContentLayout::stat_DrawPlainText( m_layout.m_eLO, dc.m_hDC, LPCTSTR(strListSign), strListSign.GetLength(), &rcDrawListSign, nDT, 0 );
			break;
		}
		break; // case CExtRichStyleDescription::ed_list_item:
		} // switch( eD )

		CExtSafeString strGenericTagName = QueryGenericTagName();
		if( strGenericTagName == _T("img") )
		{
			CExtBitmap * pBMP = ImageBySrc();
			if( pBMP != NULL )
			{
				CRect rcLayout( m_rcLayout );
				rcLayout.DeflateRect( &styleNext.m_rcCellPadding );
				if( ! ( eP == CExtRichStyleDescription::ep_absolute || eP == CExtRichStyleDescription::ep_fixed ) )
					rcLayout.DeflateRect( &styleNext.m_rcMargin );
				rcLayout.DeflateRect( &styleNext.m_rcBorder );
				rcLayout.DeflateRect( &styleNext.m_rcPadding );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( ! pBMP->IsEmpty() );
				int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
				::SetStretchBltMode( dc.m_hDC, ( m_layout.m_bDrawImagesSmootherAsPossible && g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
				CExtBitmap::e_DrawMethod_t eDM = CExtBitmap::__EDM_DEFAULT;
				if(		styleNext.m_eUiDrawMethod != CExtRichStyleDescription::e_ui_dm_stretch
					&&	styleNext.m_eUiDrawMethod != CExtRichStyleDescription::e_ui_dm_unspecified
					)
					eDM = (CExtBitmap::e_DrawMethod_t)(styleNext.m_eUiDrawMethod);
				switch( m_layout.m_eLO )
				{
				case CExtRichContentLayout::__ELOT_NORMAL:
					pBMP->AlphaBlendSkinParts( dc.m_hDC, rcLayout, styleNext.m_rcUiSlice, eDM, true, false, (BYTE)styleNext.m_nUi_transparency );
				break;
				case CExtRichContentLayout::__ELOT_90_CW:
				case CExtRichContentLayout::__ELOT_180_CW:
				case CExtRichContentLayout::__ELOT_270_CW:
				{
					CSize sizeBmp = pBMP->GetSize();
					CExtBitmap bmp2;
					if( bmp2.CreateRotated9xStack( *pBMP, INT(m_layout.m_eLO), 1, sizeBmp.cx, sizeBmp.cy, true, true ) )
					{
						if(		( m_layout.m_eLO == CExtRichContentLayout::__ELOT_90_CW || m_layout.m_eLO == CExtRichContentLayout::__ELOT_270_CW )
							&&	( eDM == CExtBitmap::__EDM_TILE_H || eDM == CExtBitmap::__EDM_TILE_V )
							)
							eDM = ( eDM == CExtBitmap::__EDM_TILE_H ) ? CExtBitmap::__EDM_TILE_V : CExtBitmap::__EDM_TILE_H;
						CRect rcSlicePadding( styleNext.m_rcUiSlice );
						CExtRichStyleDescription::stat_RotateRect( m_layout.m_eLO, rcSlicePadding );
						bmp2.AlphaBlendSkinParts( dc.m_hDC, rcLayout, rcSlicePadding, eDM, true, false, (BYTE)styleNext.m_nUi_transparency );
					}
				}
				break;
				} // switch( m_layout.m_eLO )
				::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
			} // if( pBMP != NULL )
			break;
		}
	}
	break;
	case __EHIT_TITLE:
	case __EHIT_STYLE:
	case __EHIT_SCRIPT:
	case __EHIT_META:
	case __EHIT_LINK:
	break;
#ifdef _DEBUG
	default:
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
	break;
#endif // _DEBUG
	} // switch( m_eType )

	if( bDtPrefixOnlyMode && ( (styleNext.m_fd.m_lf.lfUnderline != 0) || m_thUnderline ) )
	{
		_StyleRestore_t _restore( dc, styleNext, INT(m_layout.m_eLO), m_thUnderline );
		m_nHelperTmAscent = _restore.m_TextMetric.tmAscent;
		//m_nHelperTmInternalLeading = _restore.m_TextMetric.tmInternalLeading;
		m_nHelperTmInternalLeading = _restore.m_TextMetric.tmExternalLeading;
		
		COLORREF clrLine = dc.GetTextColor();
		INT nPenWidth = 1; // + _restore.m_TextMetric.tmHeight / 30;
		CPen _pen( PS_SOLID, nPenWidth, clrLine );
		CPen * pOldPen = dc.SelectObject( &_pen );

	//	INT nLineLocation = m_rcLayout.top + m_nHelperTmAscent + 1;
		switch( m_layout.m_eLO )
		{
		case CExtRichContentLayout::__ELOT_NORMAL:
		{
			INT nLineLocation = m_rcLayout.bottom - m_nHelperTmInternalLeading - 1;
			dc.MoveTo( m_rcLayout.left, nLineLocation );
			dc.LineTo( m_rcLayout.right, nLineLocation );
		}
		break;
		case CExtRichContentLayout::__ELOT_90_CW:
		{
			INT nLineLocation = m_rcLayout.left + m_nHelperTmInternalLeading + 1;
			dc.MoveTo( nLineLocation, m_rcLayout.top );
			dc.LineTo( nLineLocation, m_rcLayout.bottom );
		}
		break;
		case CExtRichContentLayout::__ELOT_180_CW:
		{
			INT nLineLocation = m_rcLayout.top + m_nHelperTmInternalLeading;
			dc.MoveTo( m_rcLayout.left, nLineLocation );
			dc.LineTo( m_rcLayout.right, nLineLocation );
		}
		break;
		case CExtRichContentLayout::__ELOT_270_CW:
		{
			INT nLineLocation = m_rcLayout.right - m_nHelperTmInternalLeading - 2;
			dc.MoveTo( nLineLocation, m_rcLayout.top );
			dc.LineTo( nLineLocation, m_rcLayout.bottom );
		}
		break;
		} // switch( m_layout.m_eLO )
		dc.SelectObject( pOldPen );
	} // if( bDtPrefixOnlyMode && ( (styleNext.m_fd.m_lf.lfUnderline != 0) || m_thUnderline ) )

	_rps; // relative position shift
}

void CExtRichContentItem::DoPaintChildren( CDC & dc, const CRect & rcDocRenderTarget, const CPoint & ptScrollPosTarget, CExtRichContentItem * pRCIFA, bool bScrollingAdjusted )
{
CList < CExtRichContentItem *, CExtRichContentItem * > listDelayedDrawSiblings;
POSITION pos;
	// draw ui-dock pre-***fill children
	for( pos = m_listDF.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listDF.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock );
		const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
		if( styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_fill )
		{
			switch( styleRCI.m_eUiDelayedDraw )
			{
			case CExtRichStyleDescription::e_ui_dd_default:
			break;
			case CExtRichStyleDescription::e_ui_dd_post_sibling:
				listDelayedDrawSiblings.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_pre_fixed_absolute:
				m_layout.m_listDelayedDraw_PreFixedAbsolute.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_topmost:
				m_layout.m_listDelayedDraw_TopMost.AddTail( pRCI );
				continue;
			default:
				ASSERT( FALSE );
				continue;
			} // switch( styleRCI.m_eUiDelayedDraw )
			pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA, bScrollingAdjusted );
		}
	} // for( pos = m_listDF.GetHeadPosition(); pos != NULL; )
	// draw ui-dock pre-***side children
	for( pos = m_listDS.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listDS.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock );
		const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
		if(		styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_left
			||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_top
			||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_right
			||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_bottom
			)
		{
			switch( styleRCI.m_eUiDelayedDraw )
			{
			case CExtRichStyleDescription::e_ui_dd_default:
			break;
			case CExtRichStyleDescription::e_ui_dd_post_sibling:
				listDelayedDrawSiblings.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_pre_fixed_absolute:
				m_layout.m_listDelayedDraw_PreFixedAbsolute.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_topmost:
				m_layout.m_listDelayedDraw_TopMost.AddTail( pRCI );
				continue;
			default:
				ASSERT( FALSE );
				continue;
			} // switch( styleRCI.m_eUiDelayedDraw )
			pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA, bScrollingAdjusted );
		}
	} // for( pos = m_listDS.GetHeadPosition(); pos != NULL; )
	// draw ui-dock ***side children
	for( pos = m_listDS.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listDS.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock );
		const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
		if(		styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_left
			||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_top
			||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_right
			||	styleRCI.m_eDock == CExtRichStyleDescription::e_ui_dock_pre_bottom
			)
			continue;
		switch( styleRCI.m_eUiDelayedDraw )
		{
		case CExtRichStyleDescription::e_ui_dd_default:
		break;
		case CExtRichStyleDescription::e_ui_dd_post_sibling:
			listDelayedDrawSiblings.AddTail( pRCI );
			continue;
		case CExtRichStyleDescription::e_ui_dd_pre_fixed_absolute:
			m_layout.m_listDelayedDraw_PreFixedAbsolute.AddTail( pRCI );
			continue;
		case CExtRichStyleDescription::e_ui_dd_topmost:
			m_layout.m_listDelayedDraw_TopMost.AddTail( pRCI );
			continue;
		default:
			ASSERT( FALSE );
			continue;
		} // switch( styleRCI.m_eUiDelayedDraw )
		pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA, bScrollingAdjusted );
	} // for( pos = m_listDS.GetHeadPosition(); pos != NULL; )
	// draw ui-dock ***fill children
	for( pos = m_listDF.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listDF.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI->GetDisplay() == CExtRichStyleDescription::ed_ui_dock );
		const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
		if( styleRCI.m_eDock != CExtRichStyleDescription::e_ui_dock_pre_fill )
		{
			switch( styleRCI.m_eUiDelayedDraw )
			{
			case CExtRichStyleDescription::e_ui_dd_default:
			break;
			case CExtRichStyleDescription::e_ui_dd_post_sibling:
				listDelayedDrawSiblings.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_pre_fixed_absolute:
				m_layout.m_listDelayedDraw_PreFixedAbsolute.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_topmost:
				m_layout.m_listDelayedDraw_TopMost.AddTail( pRCI );
				continue;
			default:
				ASSERT( FALSE );
				continue;
			} // switch( styleRCI.m_eUiDelayedDraw )
			pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA, bScrollingAdjusted );
		}
	} // for( pos = m_listDF.GetHeadPosition(); pos != NULL; )
	// draw other children
	for( pos = m_listItems.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = m_listItems.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		if( pRCI->GetDisplay() != CExtRichStyleDescription::ed_ui_dock )
		{
			const CExtRichStyleDescription & styleRCI = pRCI->GetEffectiveStyle();
			switch( styleRCI.m_eUiDelayedDraw )
			{
			case CExtRichStyleDescription::e_ui_dd_default:
			break;
			case CExtRichStyleDescription::e_ui_dd_post_sibling:
				listDelayedDrawSiblings.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_pre_fixed_absolute:
				m_layout.m_listDelayedDraw_PreFixedAbsolute.AddTail( pRCI );
				continue;
			case CExtRichStyleDescription::e_ui_dd_topmost:
				m_layout.m_listDelayedDraw_TopMost.AddTail( pRCI );
				continue;
			default:
				ASSERT( FALSE );
				continue;
			} // switch( styleRCI.m_eUiDelayedDraw )
			pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA, bScrollingAdjusted );
		}
	} // for( pos = m_listItems.GetHeadPosition(); pos != NULL; )
	// post-draw elements
	for( pos = listDelayedDrawSiblings.GetHeadPosition(); pos != NULL; )
	{
		CExtRichContentItem * pRCI = listDelayedDrawSiblings.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		pRCI->DoPaint( dc, rcDocRenderTarget, ptScrollPosTarget, pRCIFA, bScrollingAdjusted );
	} // for( pos = listDelayedDrawSiblings.GetHeadPosition(); pos != NULL; )
	listDelayedDrawSiblings.RemoveAll();
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichContentEvents

CExtRichContentEvents::CExtRichContentEvents() { }

CExtRichContentEvents::~CExtRichContentEvents() { }

bool CExtRichContentEvents::RciEvent_ResetElementStateInfo(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	const CExtRichStyleDescription::pseudo_class_def_t & statesToReset,
	CExtRichStyleDescription::e_ui_yes_not_option_t eynSetOn,
	bool bDeep // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; hWndContentViewer; statesToReset; eynSetOn; bDeep;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnKey(
	CExtRichContentItem * pRCI,
	bool bSysKey,
	bool bKeyDownEvent, // true - key-down event, false - key-up event
	UINT nChar, // key code
	UINT nRepCnt, // key-down/key-up press count
	UINT nFlags, // key-down/key-up event flags
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; bSysKey; bKeyDownEvent; nChar; nRepCnt; nFlags; hWndContentViewer;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnSelect(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	bool bSelected
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; hWndContentViewer; bSelected;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnDisable(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	bool bDisabled
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; hWndContentViewer; bDisabled;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnFocusEnter(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	CExtRichContentItem * pOldFocusRCI
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; hWndContentViewer; pOldFocusRCI;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnFocusLeave(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	CExtRichContentItem * pNewFocusRCI
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; hWndContentViewer; pNewFocusRCI;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnMouseWheel(
	CExtRichContentItem * pRCI,
	UINT fFlags,
	short zDelta,
	CPoint point,
	const CExtRichContentHitTestInfo & htInfoHover,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; fFlags; zDelta; point; htInfoHover; hWndContentViewer;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnMouseEnter(
	CExtRichContentItem * pRCI,
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; htInfoOld; htInfoNew; hWndContentViewer;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnMouseLeave(
	CExtRichContentItem * pRCI,
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; htInfoOld; htInfoNew; hWndContentViewer;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnPressedEnter(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nRepCnt, // 0 - button up, 1 - single click, 2 - double click, 3 - post single click & begin editing
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; nChar; nRepCnt; nFlags; htInfoOld; htInfoNew; hWndContentViewer;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnPressedLeave(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nRepCnt, // 0 - button up, 1 - single click, 2 - double click, 3 - post single click & begin editing
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; nChar; nRepCnt; nFlags; htInfoOld; htInfoNew; hWndContentViewer;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnClick(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; nChar; nFlags; htInfoOld; htInfoNew; hWndContentViewer;
	return false;
}

bool CExtRichContentEvents::RciEvent_OnDoubleClick(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
	pRCI; nChar; nFlags; htInfoOld; htInfoNew; hWndContentViewer;
	return false;
}

CExtRichStyleDescription::e_ui_sb_type_t CExtRichContentEvents::RciEvent_Scrolling_GetDefaultSBT( const CExtRichContentItem * pRCI ) const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	pRCI;
	return CExtRichStyleDescription::e_ui_sbt_classic;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichContentEventsBroadcast

CExtRichContentEventsBroadcast::CExtRichContentEventsBroadcast() { }

CExtRichContentEventsBroadcast::~CExtRichContentEventsBroadcast() { ListenerRemoveAll(); }

void CExtRichContentEventsBroadcast::ListenerAdd(
	CExtRichContentEvents * pListener,
	bool bAddToTail // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ! ListenerIsPresent( pListener ) );
	if( bAddToTail )
		m_listEventListeners.AddTail( pListener );
	else
		m_listEventListeners.AddHead( pListener );
}

bool CExtRichContentEventsBroadcast::ListenerIsPresent( CExtRichContentEvents * pListener )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
POSITION pos = m_listEventListeners.Find( pListener );
	return ( pos != NULL ) ? true : false;
}

bool CExtRichContentEventsBroadcast::ListenerRemove( CExtRichContentEvents * pListener )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
POSITION pos = m_listEventListeners.Find( pListener );
	if( pos == NULL )
		return false;
	m_listEventListeners.RemoveAt( pos );
	return true;
}

void CExtRichContentEventsBroadcast::ListenerRemoveAll() { m_listEventListeners.RemoveAll(); }
POSITION CExtRichContentEventsBroadcast::ListenerGetHeadPosition() { return m_listEventListeners.GetHeadPosition(); }
POSITION CExtRichContentEventsBroadcast::ListenerGetTailPosition() { return m_listEventListeners.GetTailPosition(); }
CExtRichContentEvents * CExtRichContentEventsBroadcast::ListenerGetNext( POSITION & pos ) { return m_listEventListeners.GetNext( pos ); }
CExtRichContentEvents * CExtRichContentEventsBroadcast::ListenerGetPrev( POSITION & pos ) { return m_listEventListeners.GetPrev( pos ); }

bool CExtRichContentEventsBroadcast::RciEvent_ResetElementStateInfo(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	const CExtRichStyleDescription::pseudo_class_def_t & statesToReset,
	CExtRichStyleDescription::e_ui_yes_not_option_t eynSetOn,
	bool bDeep // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_ResetElementStateInfo( pRCI, hWndContentViewer, statesToReset, eynSetOn, bDeep ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnKey(
	CExtRichContentItem * pRCI,
	bool bSysKey,
	bool bKeyDownEvent, // true - key-down event, false - key-up event
	UINT nChar, // key code
	UINT nRepCnt, // key-down/key-up press count
	UINT nFlags, // key-down/key-up event flags
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnKey( pRCI, bSysKey, bKeyDownEvent, nChar, nRepCnt, nFlags, hWndContentViewer ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnSelect(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	bool bSelected
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnSelect( pRCI, hWndContentViewer, bSelected ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnDisable(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	bool bDisabled
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnDisable( pRCI, hWndContentViewer, bDisabled ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnFocusEnter(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	CExtRichContentItem * pOldFocusRCI
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnFocusEnter( pRCI, hWndContentViewer, pOldFocusRCI ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnFocusLeave(
	CExtRichContentItem * pRCI,
	HWND hWndContentViewer,
	CExtRichContentItem * pNewFocusRCI
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnFocusLeave( pRCI, hWndContentViewer, pNewFocusRCI ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnMouseWheel(
	CExtRichContentItem * pRCI,
	UINT fFlags,
	short zDelta,
	CPoint point,
	const CExtRichContentHitTestInfo & htInfoHover,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnMouseWheel( pRCI, fFlags, zDelta, point, htInfoHover, hWndContentViewer ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnMouseEnter(
	CExtRichContentItem * pRCI,
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnMouseEnter( pRCI, htInfoOld, htInfoNew, hWndContentViewer ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnMouseLeave(
	CExtRichContentItem * pRCI,
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnMouseLeave( pRCI, htInfoOld, htInfoNew, hWndContentViewer ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnPressedEnter(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nRepCnt, // 0 - button up, 1 - single click, 2 - double click, 3 - post single click & begin editing
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnPressedEnter( pRCI, nChar, nRepCnt, nFlags, htInfoOld, htInfoNew, hWndContentViewer ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnPressedLeave(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nRepCnt, // 0 - button up, 1 - single click, 2 - double click, 3 - post single click & begin editing
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnPressedLeave( pRCI, nChar, nRepCnt, nFlags, htInfoOld, htInfoNew, hWndContentViewer ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnClick(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnClick( pRCI, nChar, nFlags, htInfoOld, htInfoNew, hWndContentViewer ) )
			return true;
	}
	return false;
}

bool CExtRichContentEventsBroadcast::RciEvent_OnDoubleClick(
	CExtRichContentItem * pRCI,
	UINT nChar, // VK_LBUTTON, VK_RBUTTON or VK_MBUTTON only
	UINT nFlags, // mouse event flags
	const CExtRichContentHitTestInfo & htInfoOld,
	const CExtRichContentHitTestInfo & htInfoNew,
	HWND hWndContentViewer
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( hWndContentViewer != NULL && ::IsWindow(hWndContentViewer) );
POSITION pos = ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		if( pListener->RciEvent_OnDoubleClick( pRCI, nChar, nFlags, htInfoOld, htInfoNew, hWndContentViewer ) )
			return true;
	}
	return false;
}

CExtRichStyleDescription::e_ui_sb_type_t CExtRichContentEventsBroadcast::RciEvent_Scrolling_GetDefaultSBT( const CExtRichContentItem * pRCI ) const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
POSITION pos = ( const_cast < CExtRichContentEventsBroadcast * > ( this ) ) -> ListenerGetHeadPosition();
	for( ; pos != NULL; )
	{
		CExtRichContentEvents * pListener = ( const_cast < CExtRichContentEventsBroadcast * > ( this ) ) -> ListenerGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pListener != NULL );
		CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = pListener->RciEvent_Scrolling_GetDefaultSBT( pRCI );
		if( _eUiSBT != CExtRichStyleDescription::e_ui_sbt_default && _eUiSBT != CExtRichStyleDescription::e_ui_sbt_inherit )
			return _eUiSBT;
	}
	return CExtRichContentEvents::RciEvent_Scrolling_GetDefaultSBT( pRCI );
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichContentLayout

CExtRichContentLayout::CExtRichContentLayout(
	__EXT_MFC_SAFE_LPCTSTR strSourceText, // = NULL
	CExtRichContentLayout::e_layout_format_t _eLFMT, // = __ELFMT_HTML
	CExtRichContentLayout::e_layout_orientation_t eLO // = __ELOT_NORMAL
	)
	: m_bRemoveSpacecBetweenLinesInParagraphs( false )
	, m_bRemoveSpacecBetweenParagraphs( true )
	, m_strTab( _T("    ") )
	, m_bDrawImagesSmootherAsPossible( true )
	, m_eLFMT( CExtRichContentLayout::__ELFMT_UNKNOWN )
	, m_eLO( eLO )
	, m_pObjectContainerLocal( NULL )
	, m_rcStartLayoutSaved( 0, 0, 0, 0 )
	, m_bDrawTextInvocation( false )
	, m_nDTF( 0 )
	, m_nExtDTF( 0 )
	, m_hWndOpenThemeData( NULL ) // NULL - means use ::GetDesktopWindow()
	, m_wstrOpenThemeDataClassList( NULL )
	, m_dwOpenThemeDataFlags( 0 )
	, m_nDtThemePartID( 0 )
	, m_nDtThemeStateID( 0 )
	, m_pDTO( NULL )
	, m_pDSD( NULL )
	, m_nPlainTextLineHeight( 0 )
{
	if( LPCTSTR(strSourceText) != NULL )
		Parse( LPCTSTR(strSourceText), _eLFMT );
}

CExtRichContentLayout::~CExtRichContentLayout()
{
	Empty( true );
	m_mapId2HWND.RemoveAll();
	m_mapBoundHWNDs.RemoveAll();
}

CSize CExtRichContentLayout::GetTextExtent(
	HDC hDC,
	__EXT_MFC_SAFE_LPCTSTR str,
	INT nCount // = -1
	)
{
CSize _size( 0, 0 );
	if( hDC == NULL || LPCTSTR(str) == NULL || nCount == 0 )
		return _size;
	if( nCount < 0 )
	{
		nCount = int( _tcslen( LPCTSTR(str) ) );
		if( nCount == 0 )
			return _size;
	}
	if( m_eLO == __ELOT_NORMAL && m_wstrOpenThemeDataClassList != NULL && (*(LPCWSTR(m_wstrOpenThemeDataClassList))) != (L'\0') && g_PaintManager.m_bIsWinXPorLater )
	{
		bool bHaveThemeData = false;
		bool bThemeDataIsAreadyOpened = g_PaintManager.m_UxTheme.IsOpened();
		if( bThemeDataIsAreadyOpened )
			bHaveThemeData = true;
		else
		{
			HWND hWnd = ( m_hWndOpenThemeData != NULL ) ? m_hWndOpenThemeData : (::GetDesktopWindow());
			if( (! g_PaintManager.m_bIsWinVistaOrLater ) || g_PaintManager.m_UxTheme.OpenThemeDataEx( hWnd, LPCWSTR(m_wstrOpenThemeDataClassList), m_dwOpenThemeDataFlags ) == NULL )
			{
				if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, LPCWSTR(m_wstrOpenThemeDataClassList) ) != NULL )
					bHaveThemeData = true;
			}
		}
		if( bHaveThemeData )
		{
			CExtSafeString strBuffer;
			LPTSTR pBuffer = strBuffer.GetBuffer( nCount + 2 );
			if( pBuffer == NULL )
				return _size;
			::memset( pBuffer, 0, ( nCount + 2 ) * sizeof(TCHAR) );
			__EXT_MFC_STRNCPY( pBuffer, nCount + 1, LPCTSTR(str), nCount );
			strBuffer.ReleaseBuffer();
			CRect rcTextMeasure( 0, 0, 0, 0 );
			HRESULT hr = g_PaintManager.m_UxTheme.GetThemeTextExtent( hDC, m_nDtThemePartID, m_nDtThemeStateID, strBuffer, nCount, DT_SINGLELINE|DT_LEFT|DT_TOP|DT_NOPREFIX|DT_CALCRECT, NULL, &rcTextMeasure );
			if( ! bThemeDataIsAreadyOpened )
				g_PaintManager.m_UxTheme.CloseThemeData();
			if( hr == S_OK )
			{
				_size = rcTextMeasure.Size();
				return _size;
			} // if( hr == S_OK )
		} // if( bHaveThemeData )
	} // if( m_eLO == __ELOT_NORMAL && m_wstrOpenThemeDataClassList != NULL && (*(LPCWSTR(m_wstrOpenThemeDataClassList))) != (L'\0') && g_PaintManager.m_bIsWinXPorLater )

	__EXT_DEBUG_RICH_CONTENT_VERIFY( ::GetTextExtentPoint32( hDC, LPCTSTR(str), nCount, &_size ) );
	return _size;
}

bool CExtRichContentLayout::TextOut(
	HDC hDC,
	int x,
	int y,
	__EXT_MFC_SAFE_LPCTSTR str,
	int nCount // = -1
	)
{
	if( hDC == NULL || LPCTSTR(str) == NULL || nCount == 0 )
		return false;
	if( nCount < 0 )
	{
		nCount = int( _tcslen( LPCTSTR(str) ) );
		if( nCount == 0 )
			return false;
	}
BkMode_t _BkMode( hDC, TRANSPARENT );
	if( m_eLO == __ELOT_NORMAL && m_wstrOpenThemeDataClassList != NULL && (*(LPCWSTR(m_wstrOpenThemeDataClassList))) != (L'\0') && g_PaintManager.m_bIsWinXPorLater )
	{
		CSize _size = GetTextExtent( hDC, LPCTSTR(str), nCount );
		bool bHaveThemeData = false;
		bool bThemeDataIsAreadyOpened = g_PaintManager.m_UxTheme.IsOpened();
		if( bThemeDataIsAreadyOpened )
			bHaveThemeData = true;
		else
		{
			HWND hWnd = ( m_hWndOpenThemeData != NULL ) ? m_hWndOpenThemeData : (::GetDesktopWindow());
			if( (! g_PaintManager.m_bIsWinVistaOrLater ) || g_PaintManager.m_UxTheme.OpenThemeDataEx( hWnd, LPCWSTR(m_wstrOpenThemeDataClassList), m_dwOpenThemeDataFlags ) == NULL )
			{
				if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, LPCWSTR(m_wstrOpenThemeDataClassList) ) != NULL )
					bHaveThemeData = true;
			}
		}
		if( bHaveThemeData )
		{
			CExtSafeString strBuffer;
			LPTSTR pBuffer = strBuffer.GetBuffer( nCount + 2 );
			if( pBuffer == NULL )
				return false;
			::memset( pBuffer, 0, ( nCount + 2 ) * sizeof(TCHAR) );
			__EXT_MFC_STRNCPY( pBuffer, nCount + 1, LPCTSTR(str), nCount );
			strBuffer.ReleaseBuffer();
			CRect rcText( x, y, x + _size.cx, y + _size.cy );
			HRESULT hr = S_OK;
			if( m_pDTO != NULL && g_PaintManager.m_bIsWinVistaOrLater )
			{
				CExtUxTheme::__EXT_UX_DTTOPTS _DTO;
				::memcpy( &_DTO, m_pDTO, sizeof(CExtUxTheme::__EXT_UX_DTTOPTS) );
				_DTO.dwSize = sizeof(CExtUxTheme::__EXT_UX_DTTOPTS);
				if( (_DTO.dwFlags & __EXT_UX_DTT_TEXTCOLOR ) == 0 )
				{
					_DTO.dwFlags |= __EXT_UX_DTT_TEXTCOLOR;
					_DTO.crText = ::GetTextColor( hDC );
				}
				CDC & dc = * CDC::FromHandle( hDC );
				CExtMemoryDC dcMem(
					&dc, &rcText,
					CExtMemoryDC::MDCOPT_TO_MEMORY | CExtMemoryDC::MDCOPT_FILL_BITS | CExtMemoryDC::MDCOPT_DIB_NEGATIVE_HEIGHT
						| CExtMemoryDC::MDCOPT_FORCE_DIB
					);
				__EXT_DEBUG_RICH_CONTENT_ASSERT( dcMem.GetSafeHdc() != NULL );
				INT nOldBkMode = dcMem.SetBkMode( dc.GetBkMode() );
				COLORREF clrOldBkColor = dcMem.SetBkColor( dc.GetBkColor() );
				COLORREF clrOldTextColor = dcMem.SetTextColor( dc.GetTextColor() );
				CFont * pOldFont = dcMem.SelectObject( CExtRichFontDescription::stat_dc_get_current_font( dc ) );
				hr = g_PaintManager.m_UxTheme.DrawThemeTextEx( dcMem.m_hDC, m_nDtThemePartID, m_nDtThemeStateID, strBuffer, nCount, DT_SINGLELINE|DT_LEFT|DT_TOP|DT_NOPREFIX, &rcText, &_DTO );
				dcMem.SelectObject( pOldFont );
				dcMem.SetTextColor( clrOldTextColor );
				dcMem.SetBkColor( clrOldBkColor );
				dcMem.SetBkMode( nOldBkMode );
			}
			else
				hr = g_PaintManager.m_UxTheme.DrawThemeText( hDC, m_nDtThemePartID, m_nDtThemeStateID, LPCTSTR(strBuffer), nCount, DT_SINGLELINE|DT_LEFT|DT_TOP|DT_NOPREFIX, 0, &rcText );
			if( ! bThemeDataIsAreadyOpened )
				g_PaintManager.m_UxTheme.CloseThemeData();
			bool bRetVal = ( hr == S_OK ) ? true : false;
			if( bRetVal )
				return true;
		} // if( bHaveThemeData )
	} // if( m_eLO == __ELOT_NORMAL && m_wstrOpenThemeDataClassList != NULL && (*(LPCWSTR(m_wstrOpenThemeDataClassList))) != (L'\0') && g_PaintManager.m_bIsWinXPorLater )
	if( m_pDSD != NULL )
	{
		if( m_eLO == __ELOT_NORMAL )
		{
			CSize _size = GetTextExtent( hDC, LPCTSTR(str), nCount );
			bool bRetVal = ::DrawState( hDC, m_pDSD->m_hBrush, m_pDSD->m_pOutputFunc, (LPARAM)LPCTSTR(str), (WPARAM)nCount, x, y, _size.cx, _size.cy, DST_TEXT|m_pDSD->m_fuFlags ) ? true : false;
			return bRetVal;
		} // if( m_eLO == __ELOT_NORMAL )
		else
		{
			COLORREF clrText    = ( m_pDSD->m_clrText   != COLORREF(-1L) ) ? m_pDSD->m_clrText   : ( ::GetSysColor( COLOR_3DSHADOW    ) );
			COLORREF clrShadow  = ( m_pDSD->m_clrShadow != COLORREF(-1L) ) ? m_pDSD->m_clrShadow : ( ::GetSysColor( COLOR_3DHIGHLIGHT ) );
			COLORREF clrOldText = ::SetTextColor( hDC, clrShadow );
			bool bRetVal = ::TextOut( hDC, x + m_pDSD->m_sizeOffsetText.cx, y + m_pDSD->m_sizeOffsetText.cy, LPCTSTR(str), nCount ) ? true : false;
			::SetTextColor( hDC, clrText );
			if( ::TextOut( hDC, m_pDSD->m_sizeOffsetShadow.cx, y + m_pDSD->m_sizeOffsetShadow.cy, LPCTSTR(str), nCount ) )
				bRetVal = true;
			::SetTextColor( hDC, clrOldText );
			return bRetVal;
		} // if( m_eLO == __ELOT_NORMAL )
	} // if( m_pDSD != NULL )
bool bRetVal = ::TextOut( hDC, x, y, LPCTSTR(str), nCount ) ? true : false;
	_BkMode;
	return bRetVal;
}

void CExtRichContentLayout::Empty(
	bool bEmptyLocalObjectContainer // = true
	)
{
	_DoLayout_ListOfCSS_Empty();
	_EmptyPositionedElementReferences();
	_EmptySpecialElementReferences();
	_EmptyList();
	_EmptyClasses();
	if( bEmptyLocalObjectContainer )
		_EmptyObjectContainerLocal();
	_EmptyElementMaps();
}

bool CExtRichContentLayout::IsEmpty() const
{
LONG nCount = LONG( m_listHeap.GetCount() );
bool bEmpty = ( nCount == 0 ) ? true : false;
	if( bEmpty )
	{
		nCount = LONG( m_mapClasses.GetCount() );
		bEmpty = ( nCount == 0 ) ? true : false;
	}
	return bEmpty;
}

void CExtRichContentLayout::_EmptyPositionedElementReferences()
{
	m_listER.RemoveAll();
	m_listEFA.RemoveAll();
	m_listDelayedDraw_PreFixedAbsolute.RemoveAll();
	m_listDelayedDraw_TopMost.RemoveAll();
}

void CExtRichContentLayout::_EmptySpecialElementReferences()
{
	m_listSpecial.RemoveAll();
}

void CExtRichContentLayout::_EmptyList()
{
CExtRichContentItem * pRCI = ( m_listHeap.GetCount() > 0 ) ? m_listHeap.GetHead() : NULL;
	for( ; pRCI != NULL; pRCI = m_listHeap.GetHead() )
	{
		delete pRCI;
		m_listHeap.RemoveHead();
		if( m_listHeap.GetCount() == 0 )
			break;
	}
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_listHeap.GetCount() == 0 );
}

void CExtRichContentLayout::_EmptyClasses()
{
POSITION pos = m_mapClasses.GetStartPosition();
	for( ; pos != NULL; )
	{
		CExtSafeString strCalssName;
		LPVOID ptr = NULL;
		m_mapClasses.GetNextAssoc( pos, strCalssName, ptr );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ! strCalssName.IsEmpty() );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ptr != NULL );
		CExtRichContentItem * pRCI = (CExtRichContentItem *) ptr;
		delete pRCI;
	}
	m_mapClasses.RemoveAll();
}

void CExtRichContentLayout::_EmptyObjectContainerLocal()
{
	if( m_pObjectContainerLocal == NULL )
		return;
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( m_pObjectContainerLocal );
	delete m_pObjectContainerLocal;
	m_pObjectContainerLocal = NULL;
}

void CExtRichContentLayout::_EmptyElementMaps()
{
	m_mapEmelentsByUiBindingSrcID.RemoveAll();
	m_mapEmelentsByUiBindingDstID.RemoveAll();
	m_mapEmelentsByID.RemoveAll();
	m_mapEmelentsByName.RemoveAll();
}

CExtRichDocObjectBase & CExtRichContentLayout::GetObjectCountainerLocal()
{
	if( m_pObjectContainerLocal == NULL )
		m_pObjectContainerLocal = new CExtRichDocObjectContainer( __EXT_RICH_CONTENT_DEFAULT_LOCAL_OBJECT_CONTAINER_NAME );
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( m_pObjectContainerLocal );
	return (*m_pObjectContainerLocal);
}

CExtRichDocObjectBase & CExtRichContentLayout::GetObjectCountainerGlobal()
{
	return stat_GetObjectCountainerGlobal();
}

CExtRichDocObjectBase & CExtRichContentLayout::stat_GetObjectCountainerGlobal()
{
static CExtRichDocObjectContainerGlobal g_GlobalContainerRCO( __EXT_RICH_CONTENT_DEFAULT_GLOBAL_OBJECT_CONTAINER_NAME );
	return g_GlobalContainerRCO;
}

CExtRichDocObjectBase * CExtRichContentLayout::ObjectByName( __EXT_MFC_SAFE_LPCTSTR strName )
{
CExtRichDocObjectBase * pDO = GetObjectCountainerLocal().ObjectByName( LPCTSTR(strName) );
	if( pDO != NULL )
		return pDO;
	pDO = GetObjectCountainerGlobal().ObjectByName( LPCTSTR(strName) );
	return pDO;
}

CExtBitmap * CExtRichContentLayout::ImageByName( __EXT_MFC_SAFE_LPCTSTR strName )
{
CExtRichDocObjectBase * pDO = ObjectByName( LPCTSTR(strName) );
	if( pDO == NULL || ( ! pDO->IsImage() ) )
		return NULL;
CExtRichDocObjectImage * pImageDO = DYNAMIC_DOWNCAST( CExtRichDocObjectImage, pDO );
	if( pImageDO == NULL )
		return NULL;
CExtBitmap & _bmp = pImageDO->ImageGet();
	if( _bmp.IsEmpty() )
		return NULL;
	return (&_bmp);
}

void CExtRichContentLayout::_ElementByUiBindingSrcID_UnRegister( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingSrcID )
{
LPCTSTR _strElementUiBindingSrcID = LPCTSTR(strElementUiBindingSrcID);
	if( _strElementUiBindingSrcID == NULL || (*_strElementUiBindingSrcID) == _T('\0') )
		return;
	m_mapEmelentsByUiBindingSrcID.RemoveKey( _strElementUiBindingSrcID );
}

void CExtRichContentLayout::_ElementByUiBindingSrcID_Register( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingSrcID, CExtRichContentItem * pRCI )
{
LPCTSTR _strElementUiBindingSrcID = LPCTSTR(strElementUiBindingSrcID);
	if( _strElementUiBindingSrcID == NULL || (*_strElementUiBindingSrcID) == _T('\0') || pRCI == NULL )
		return;
CString _strElementUiBindingSrcID_lwr( _strElementUiBindingSrcID );
	_strElementUiBindingSrcID_lwr.MakeLower();
	m_mapEmelentsByUiBindingSrcID.SetAt( LPCTSTR(_strElementUiBindingSrcID_lwr), pRCI );
}

CExtRichContentItem * CExtRichContentLayout::ElementByUiBindingSrcID( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingSrcID )
{
LPCTSTR _strElementUiBindingSrcID = LPCTSTR(strElementUiBindingSrcID);
	if( _strElementUiBindingSrcID == NULL || (*_strElementUiBindingSrcID) == _T('\0') )
		return NULL;
CString _strElementUiBindingSrcID_lwr( _strElementUiBindingSrcID );
	_strElementUiBindingSrcID_lwr.MakeLower();
LPVOID ptr = NULL;
	if( ! m_mapEmelentsByUiBindingSrcID.Lookup( LPCTSTR(_strElementUiBindingSrcID_lwr), ptr ) )
		return NULL;
CExtRichContentItem * pRCI = (CExtRichContentItem *)ptr;
	return pRCI;
}

void CExtRichContentLayout::_ElementByUiBindingDstID_UnRegister( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingDstID )
{
LPCTSTR _strElementUiBindingDstID = LPCTSTR(strElementUiBindingDstID);
	if( _strElementUiBindingDstID == NULL || (*_strElementUiBindingDstID) == _T('\0') )
		return;
	m_mapEmelentsByUiBindingDstID.RemoveKey( _strElementUiBindingDstID );
}

void CExtRichContentLayout::_ElementByUiBindingDstID_Register( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingDstID, CExtRichContentItem * pRCI )
{
LPCTSTR _strElementUiBindingDstID = LPCTSTR(strElementUiBindingDstID);
	if( _strElementUiBindingDstID == NULL || (*_strElementUiBindingDstID) == _T('\0') || pRCI == NULL )
		return;
CString _strElementUiBindingDstID_lwr( _strElementUiBindingDstID );
	_strElementUiBindingDstID_lwr.MakeLower();
	m_mapEmelentsByUiBindingDstID.SetAt( LPCTSTR(_strElementUiBindingDstID_lwr), pRCI );
}

CExtRichContentItem * CExtRichContentLayout::ElementByUiBindingDstID( __EXT_MFC_SAFE_LPCTSTR strElementUiBindingDstID )
{
LPCTSTR _strElementUiBindingDstID = LPCTSTR(strElementUiBindingDstID);
	if( _strElementUiBindingDstID == NULL || (*_strElementUiBindingDstID) == _T('\0') )
		return NULL;
CString _strElementUiBindingDstID_lwr( _strElementUiBindingDstID );
	_strElementUiBindingDstID_lwr.MakeLower();
LPVOID ptr = NULL;
	if( ! m_mapEmelentsByUiBindingDstID.Lookup( LPCTSTR(_strElementUiBindingDstID_lwr), ptr ) )
		return NULL;
CExtRichContentItem * pRCI = (CExtRichContentItem *)ptr;
	return pRCI;
}

void CExtRichContentLayout::LayoutAttachedControls( const CPoint & ptControlScrollPos )
{
	if( m_mapId2HWND.GetCount() == 0 )
		return;
HDWP hDWP = ::BeginDeferWindowPos( 8 );
	if( hDWP == NULL )
		return;
POSITION pos = m_mapId2HWND.GetStartPosition();
	for( ; pos != NULL; )
	{ 
		CExtSafeString strElementID;
		LPVOID ptr = NULL;
		m_mapId2HWND.GetNextAssoc( pos, strElementID, ptr );
		HWND hWndAttached = (HWND)ptr;
		if( hWndAttached == NULL || (! ::IsWindow(hWndAttached) ) )
			continue;
		CExtRichContentItem * pRCI = ElementByID( LPCTSTR(strElementID) );
		if( pRCI == NULL )
			continue;
		if( pRCI->m_hWndAttached != hWndAttached )
			continue;
		hDWP = pRCI->LayoutAttachedControl( hDWP, ptControlScrollPos );
		if( hDWP == NULL )
			return;
	}
	::EndDeferWindowPos( hDWP );
}

void CExtRichContentLayout::AttachHwndToElementID( __EXT_MFC_SAFE_LPCTSTR strElementID, HWND hWnd )
{
LPCTSTR _strElementID = LPCTSTR(strElementID);
	if( _strElementID == NULL || (*_strElementID) == _T('\0') )
		return;
CString _strElementID_lwr( _strElementID );
	_strElementID_lwr.MakeLower();
HWND hWndAttempt = hWnd;
	if( hWnd != NULL && (! ::IsWindow(hWnd) ) )
		hWnd = NULL;
const CExtRichContentItem * pRCI = ElementByID( LPCTSTR(_strElementID_lwr) );
	if( hWnd == NULL )
	{
		m_mapBoundHWNDs.RemoveKey( hWndAttempt );
		m_mapId2HWND.RemoveKey( LPCTSTR(_strElementID_lwr) );
		if( pRCI != NULL )
			pRCI->m_hWndAttached = NULL;
		return;
	}
	if( pRCI != NULL )
		pRCI->m_hWndAttached = hWnd;
	m_mapId2HWND.SetAt( LPCTSTR(_strElementID_lwr), hWnd );
	m_mapBoundHWNDs.SetAt( hWnd, _strElementID_lwr );
}

CExtSafeString CExtRichContentLayout::GetElementIdByHWND( HWND hWnd ) const
{
CExtSafeString strID;
	if( ! m_mapBoundHWNDs.Lookup( hWnd, strID ) )
		strID.Empty();
	return strID;
}

HWND CExtRichContentLayout::GetHwndByElementID( __EXT_MFC_SAFE_LPCTSTR strElementID ) const
{
LPCTSTR _strElementID = LPCTSTR(strElementID);
	if( _strElementID == NULL || (*_strElementID) == _T('\0') )
		return NULL;
CString _strElementID_lwr( _strElementID );
	_strElementID_lwr.MakeLower();
LPVOID ptr = NULL;
	if( ! m_mapId2HWND.Lookup( LPCTSTR(_strElementID_lwr), ptr ) )
		return NULL;
HWND hWnd = (HWND)ptr;
	if( hWnd == NULL || (! ::IsWindow(hWnd) ) )
		return NULL;
	return hWnd;
}

CWnd * CExtRichContentLayout::GetWndByElementID( __EXT_MFC_SAFE_LPCTSTR strElementID ) const
{
HWND hWnd = GetHwndByElementID( strElementID );
	if( hWnd == NULL )
		return NULL;
CWnd * pWnd = CWnd::FromHandle( hWnd );
	return pWnd;
}

CWnd * CExtRichContentLayout::GetWndPermanentByElementID( __EXT_MFC_SAFE_LPCTSTR strElementID ) const
{
HWND hWnd = GetHwndByElementID( strElementID );
	if( hWnd == NULL )
		return NULL;
CWnd * pWnd = CWnd::FromHandlePermanent( hWnd );
	return pWnd;
}

void CExtRichContentLayout::_ElementByID_UnRegister( __EXT_MFC_SAFE_LPCTSTR strElementID )
{
LPCTSTR _strElementID = LPCTSTR(strElementID);
	if( _strElementID == NULL || (*_strElementID) == _T('\0') )
		return;
	m_mapEmelentsByID.RemoveKey( _strElementID );
}

void CExtRichContentLayout::_ElementByID_Register( __EXT_MFC_SAFE_LPCTSTR strElementID, CExtRichContentItem * pRCI )
{
LPCTSTR _strElementID = LPCTSTR(strElementID);
	if( _strElementID == NULL || (*_strElementID) == _T('\0') || pRCI == NULL )
		return;
CString _strElementID_lwr( _strElementID );
	_strElementID_lwr.MakeLower();
	m_mapEmelentsByID.SetAt( LPCTSTR(_strElementID_lwr), pRCI );
HWND hWnd = GetHwndByElementID( LPCTSTR(_strElementID_lwr) );
	if( hWnd != NULL )
		pRCI->m_hWndAttached = hWnd;
}

CExtRichContentItem * CExtRichContentLayout::ElementByID( __EXT_MFC_SAFE_LPCTSTR strElementID )
{
LPCTSTR _strElementID = LPCTSTR(strElementID);
	if( _strElementID == NULL || (*_strElementID) == _T('\0') )
		return NULL;
CString _strElementID_lwr( _strElementID );
	_strElementID_lwr.MakeLower();
LPVOID ptr = NULL;
	if( ! m_mapEmelentsByID.Lookup( LPCTSTR(_strElementID_lwr), ptr ) )
		return NULL;
CExtRichContentItem * pRCI = (CExtRichContentItem *)ptr;
	return pRCI;
}

void CExtRichContentLayout::_ElementByName_UnRegister( __EXT_MFC_SAFE_LPCTSTR strElementName )
{
LPCTSTR _strElementName = LPCTSTR(strElementName);
	if( _strElementName == NULL || (*_strElementName) == _T('\0') )
		return;
	m_mapEmelentsByName.RemoveKey( _strElementName );
}

void CExtRichContentLayout::_ElementByName_Register( __EXT_MFC_SAFE_LPCTSTR strElementName, CExtRichContentItem * pRCI )
{
LPCTSTR _strElementName = LPCTSTR(strElementName);
	if( _strElementName == NULL || (*_strElementName) == _T('\0') || pRCI == NULL )
		return;
	m_mapEmelentsByName.SetAt( _strElementName, pRCI );
}

CExtRichContentItem * CExtRichContentLayout::ElementByName( __EXT_MFC_SAFE_LPCTSTR strElementName )
{
LPCTSTR _strElementName = LPCTSTR(strElementName);
	if( _strElementName == NULL || (*_strElementName) == _T('\0') )
		return NULL;
LPVOID ptr = NULL;
	if( ! m_mapEmelentsByName.Lookup( _strElementName, ptr ) )
		return NULL;
CExtRichContentItem * pRCI = (CExtRichContentItem *)ptr;
	return pRCI;
}

CExtRichContentItem * CExtRichContentLayout::CssClassNew( __EXT_MFC_SAFE_LPCTSTR strClassName )
{
	if( LPCTSTR(strClassName) == NULL || LPCTSTR(strClassName)[0] == _T('\0') )
		return NULL;
CExtSafeString _strClassNameFullSpec( strClassName );
	_strClassNameFullSpec.TrimLeft( __EXT_RICH_CONTENT_TRIM_CLASS_NAME );
	_strClassNameFullSpec.TrimRight( __EXT_RICH_CONTENT_TRIM_CLASS_NAME );
	if( _strClassNameFullSpec.IsEmpty() )
		return NULL;
	_strClassNameFullSpec.MakeLower();
INT nPosColumn = _strClassNameFullSpec.Find( _T(':') );
	if( nPosColumn == 0 )
		return NULL;  // incorrect pseudo-class name
CExtSafeString _strClassNameMainPart = ( nPosColumn > 0 ) ? _strClassNameFullSpec.Left( nPosColumn ) : _strClassNameFullSpec;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ! _strClassNameMainPart.IsEmpty() );
CExtRichContentItem * pMainPartRCI = CssClassGet( LPCTSTR(_strClassNameMainPart) );
	if( pMainPartRCI == NULL )
	{
		try
		{
			pMainPartRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_CLASS_NODE );
			m_mapClasses.SetAt( LPCTSTR(_strClassNameMainPart), pMainPartRCI );
		}
		catch( CException * pException )
		{
			pException->Delete();
			if( pMainPartRCI != NULL )
				delete pMainPartRCI;
			return NULL;
		}
	} // if( pMainPartRCI == NULL )
CExtRichContentItem * pTargetClassRCI = NULL;
	if( nPosColumn > 0 )
	{
		LPCTSTR strRest = LPCTSTR(_strClassNameFullSpec) + nPosColumn;
		INT nPosColumn2 = _strClassNameFullSpec.Find( _T(':'), nPosColumn + 1 );
		if( nPosColumn2 < 0 )
		{ // handle ":after", ":before", ":first-child", ":first-letter" and ":first-line" explicitly 
			CExtRichStyleDescription::pseudo_class_def_t _PCD;
			if( _tcscmp( strRest, _T(":after") ) == 0 )
				_PCD.m_eynAfter = CExtRichStyleDescription::e_ui_yn_yes;
			else if( _tcscmp( strRest, _T(":before") ) == 0 )
				_PCD.m_eynBefore = CExtRichStyleDescription::e_ui_yn_yes;
			else if( _tcscmp( strRest, _T(":first-child") ) == 0 )
				_PCD.m_eynFirstChild = CExtRichStyleDescription::e_ui_yn_yes;
			else if( _tcscmp( strRest, _T(":first-letter") ) == 0 )
				_PCD.m_eynFirstLetter = CExtRichStyleDescription::e_ui_yn_yes;
			else if( _tcscmp( strRest, _T(":first-line") ) == 0 )
				_PCD.m_eynFirstLine = CExtRichStyleDescription::e_ui_yn_yes;
			if( ! _PCD.IsEmpty() )
			{
				CExtRichContentItem * pPseudoClassRCI = NULL;
				try
				{
					pPseudoClassRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_CLASS_NODE );
					pPseudoClassRCI->m_PCD.Merge( _PCD );
					//m_mapClasses.SetAt( LPCTSTR(_strClassNameMainPart), pMainPartRCI );
					pMainPartRCI->m_listPCD.AddTail( pPseudoClassRCI );
					m_listHeap.AddTail( pPseudoClassRCI );
					pTargetClassRCI = pPseudoClassRCI;
				}
				catch( CException * pException )
				{
					pException->Delete();
					if( pPseudoClassRCI != NULL )
						delete pPseudoClassRCI;
					return NULL;
				}
				return pTargetClassRCI;
			} // if( ! _PCD.IsEmpty() )
		} // handle ":after", ":before", ":first-child", ":first-letter" and ":first-line" explicitly 
		// do default multi pseudo-class parsing
		CExtRichStyleDescription::pseudo_class_def_t _PCD;
		LPCTSTR strStart = strRest;
		bool bLast = false;
		for( nPosColumn2 = 0; true; )
		{
			LPCTSTR strTmp = _tcschr( strRest + 1, _T(':') );
			nPosColumn = ( strTmp == NULL ) ? (-1) : INT( strTmp - strStart );
			if( nPosColumn == 0 )
			{
				strRest ++;
				if( (*strRest) == _T('\0') )
					break;
				continue;
			}
			CExtSafeString strPart;
			if( nPosColumn > 0 )
			{
				INT nCharCountPart = nPosColumn - nPosColumn2;
				LPTSTR strBuff = LPTSTR( strPart.GetBuffer( nCharCountPart + 2 ) );
				if( strBuff == NULL )
				{
					__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
					return NULL;
				}
				::memset( strBuff, 0, ( nCharCountPart + 2 ) * sizeof(TCHAR) );
				__EXT_MFC_STRNCPY( strBuff, nCharCountPart + 1, strRest, nCharCountPart );
				strPart.ReleaseBuffer();
				strRest += nCharCountPart;
				nPosColumn2 = nPosColumn;
			//	LPTSTR strTmp = _tcschr( strRest + 1, _T(':') );
			//	nPosColumn = ( strTmp == NULL ) ? (-1) : INT( strTmp - strStart );
			}
			else
			{
				strPart = strRest;
				bLast = true;
			}
			if( strPart == _T(":active") )
				_PCD.m_eynActive = CExtRichStyleDescription::e_ui_yn_yes;
			else if( strPart == _T(":focus") )
				_PCD.m_eynFocus = CExtRichStyleDescription::e_ui_yn_yes;
			else if( strPart == _T(":selection") || strPart == _T(":selected") )
				_PCD.m_eynSelection = CExtRichStyleDescription::e_ui_yn_yes;
			else if( strPart == _T(":hover") )
				_PCD.m_eynHover = CExtRichStyleDescription::e_ui_yn_yes;
			else if( strPart == _T(":pressed") )
				_PCD.m_eynPressed = CExtRichStyleDescription::e_ui_yn_yes;
			else if( strPart == _T(":link") )
				_PCD.m_eynLink = CExtRichStyleDescription::e_ui_yn_yes;
			else if( strPart == _T(":visited") )
				_PCD.m_eynVisited = CExtRichStyleDescription::e_ui_yn_yes;
			else if( strPart == _T(":disabled") )
				_PCD.m_eynDisabled = CExtRichStyleDescription::e_ui_yn_yes;
			if( ! ( (*strRest) != _T('\0') && (!bLast) ) )
				break;
		} // for( ...
		if( ! _PCD.IsEmpty() )
		{
			CExtRichContentItem * pPseudoClassRCI = NULL;
			try
			{
				pPseudoClassRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_CLASS_NODE );
				pPseudoClassRCI->m_PCD.Merge( _PCD );
				//m_mapClasses.SetAt( LPCTSTR(_strClassNameMainPart), pMainPartRCI );
				pMainPartRCI->m_listPCD.AddTail( pPseudoClassRCI );
				m_listHeap.AddTail( pPseudoClassRCI );
				pTargetClassRCI = pPseudoClassRCI;
			}
			catch( CException * pException )
			{
				pException->Delete();
				if( pPseudoClassRCI != NULL )
					delete pPseudoClassRCI;
				return NULL;
			}
			return pTargetClassRCI;
		} // if( ! _PCD.IsEmpty() )
	} // if( nPosColumn > 0 )
	else
		pTargetClassRCI = pMainPartRCI;
	return pTargetClassRCI;
}

CExtRichContentItem * CExtRichContentLayout::CssClassGet( __EXT_MFC_SAFE_LPCTSTR strClassName )
{
	if( LPCTSTR(strClassName) == NULL || LPCTSTR(strClassName)[0] == _T('\0') )
		return NULL;
CExtSafeString _strClassName = LPCTSTR(strClassName);
	_strClassName.TrimLeft( __EXT_RICH_CONTENT_TRIM_CLASS_NAME );
	_strClassName.TrimRight( __EXT_RICH_CONTENT_TRIM_CLASS_NAME );
	_strClassName.MakeLower();
LPVOID ptr = NULL;
	if( ! m_mapClasses.Lookup( LPCTSTR(_strClassName), ptr ) )
		return NULL;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ptr != NULL );
CExtRichContentItem * pRCI = (CExtRichContentItem *) ptr;
	return pRCI;
}

void CExtRichContentLayout::CssClassMerge( CExtRichContentItem * pRCI, __EXT_MFC_SAFE_LPCTSTR strExplicitClassName, CExtRichStyleRule & styleChanging, const CExtRichStyleDescription & styleCurrent )
{
	if( pRCI == NULL )
		return;
CExtRichContentItem * pClassRCI = NULL;
	if( LPCTSTR(strExplicitClassName) == NULL )
	{
		CExtSafeString strGenericTagName = pRCI->QueryGenericTagName();
		pClassRCI = CssClassGet( LPCTSTR(strGenericTagName) );
	}
	else
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( _tcslen( LPCTSTR(strExplicitClassName) ) > 0 );
		pClassRCI = CssClassGet( LPCTSTR(strExplicitClassName) );
	}
	if( pClassRCI == NULL )
		return;
CExtRichStyleRule styleChangingClass;
	pClassRCI->QueryStyleChanging( styleChangingClass, styleCurrent );
	styleChanging.Merge( styleChangingClass );
POSITION posPCD = pClassRCI->m_listPCD.GetHeadPosition();
	for( ; posPCD != NULL; )
	{
		CExtRichContentItem * pPseudoClassRCI = pClassRCI->m_listPCD.GetNext( posPCD );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pPseudoClassRCI != NULL );
		if( pPseudoClassRCI->m_eType != CExtRichContentItem::__EHIT_CLASS_NODE )
			continue;
		if( pPseudoClassRCI->m_PCD.IncElement( pRCI->m_PCD ) )
		{
			CExtRichStyleRule styleChangingPseudoClass;
			pPseudoClassRCI->QueryStyleChanging( styleChangingPseudoClass, styleCurrent );
			styleChanging.Merge( styleChangingPseudoClass );
		}
	}
}

bool CExtRichContentLayout::HaveAffectedCssPseudoClasses( const CExtRichContentItem * pRCI, const CExtRichStyleDescription::pseudo_class_def_t & statesToCheck ) const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL && ( ! statesToCheck.IsEmpty() ) );
CExtSafeString strGenericTagName = pRCI->QueryGenericTagName();
const CExtRichContentItem * pClassRCI = CssClassGet( LPCTSTR(strGenericTagName) );
	if( pClassRCI != NULL )
	{
		POSITION posPCD = pClassRCI->m_listPCD.GetHeadPosition();
		for( ; posPCD != NULL; )
		{
			const CExtRichContentItem * pPseudoClassRCI = pClassRCI->m_listPCD.GetNext( posPCD );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pPseudoClassRCI != NULL );
			if( pPseudoClassRCI->m_eType != CExtRichContentItem::__EHIT_CLASS_NODE )
				continue;
			if( pPseudoClassRCI->m_PCD.IncElement( statesToCheck ) )
				return true;
		}
	}
	if( pRCI->m_pListClassNames != NULL )
	{
		POSITION posClassName = pRCI->m_pListClassNames->GetHeadPosition();
		for( ; posClassName != NULL; )
		{
			CExtSafeString & _strClass = pRCI->m_pListClassNames->GetNext( posClassName );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( ! _strClass.IsEmpty() );
			const CExtRichContentItem * pClassRCI = CssClassGet( LPCTSTR(_strClass) );
			if( pClassRCI != NULL )
			{
				POSITION posPCD = pClassRCI->m_listPCD.GetHeadPosition();
				for( ; posPCD != NULL; )
				{
					const CExtRichContentItem * pPseudoClassRCI = pClassRCI->m_listPCD.GetNext( posPCD );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( pPseudoClassRCI != NULL );
					if( pPseudoClassRCI->m_eType != CExtRichContentItem::__EHIT_CLASS_NODE )
						continue;
					if( pPseudoClassRCI->m_PCD.IncElement( statesToCheck ) )
						return true;
				}
			}
		}		
	}
	return false;
}

void CExtRichContentLayout::_DoLayout_ListOfCSS_Empty()
	{ m_listLayoutCSS.RemoveAll(); }

void CExtRichContentLayout::_DoLayout_ListOfCSS_Rebuild()
{
	/// _DoLayout_ListOfCSS_LoadAllAvailable( true, true, true ); /// <-- debug
	_DoLayout_ListOfCSS_Empty();
	_DoLayout_ListOfCSS_LoadGlobalDefaults();
	_DoLayout_ListOfCSS_LoadLinked( true, true );
	_DoLayout_ListOfCSS_LoadThis();
}

INT CExtRichContentLayout::_DoLayout_ListOfCSS_LoadLinked( bool bLookupGlobal, bool bLookupLocal )
{
	if( ! ( bLookupGlobal || bLookupLocal ) )
		return 0;
INT nCountOfErrors = 0;
	// process external CSS
POSITION posSpecial = m_listSpecial.GetHeadPosition();
	for( ; posSpecial != NULL; )
	{
		CExtRichContentItem * pSpecialRCI = m_listSpecial.GetNext( posSpecial );
		if( pSpecialRCI->m_eType == CExtRichContentItem::__EHIT_LINK )
		{
			CExtRichContentItem * pParmType = pSpecialRCI->FindParmByName( _T("type") );
			if( pParmType != NULL )
			{
				CExtSafeString strTypeValue = LPCTSTR(pParmType->m_strTagPV);
				strTypeValue.MakeLower();
				strTypeValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
				strTypeValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
				if( strTypeValue == _T("text/css") )
				{
					CExtRichContentItem * pParmRel = pSpecialRCI->FindParmByName( _T("rel") );
					if( pParmRel != NULL )
					{
						CExtSafeString strRelValue = LPCTSTR(pParmRel->m_strTagPV);
						strRelValue.MakeLower();
						strRelValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
						strRelValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
						if( strRelValue == _T("stylesheet") )
						{
							CExtRichContentItem * pParmHREF = pSpecialRCI->FindParmByName( _T("href") );
							if( pParmHREF != NULL )
							{
								CExtSafeString strHREFValue = LPCTSTR(pParmHREF->m_strTagPV);
								strHREFValue.MakeLower();
								strHREFValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
								strHREFValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
								if( ! strHREFValue.IsEmpty() )
								{
									if( ! _DoLayout_ListOfCSS_LoadLinkedItem( LPCTSTR(strHREFValue), bLookupGlobal, bLookupLocal  ) )
									{
										nCountOfErrors ++;
										pSpecialRCI->m_eError = CExtRichContentItem::__EHIE_FAILED_TO_LOAD_LINKED_CSS;
									}
								} // if( ! strHREFValue.IsEmpty() )
							} // if( pParmHREF != NULL && pParmHREF->m_strTextParsed == _T("text/css") )
						} // if( strRelValue == _T("stylesheet") )
					} // if( pParmRel != NULL && pParmRel->m_strTextParsed == _T("text/css") )
				} // if( strTypeValue == _T("text/css") )
			} // if( pParmType != NULL && pParmType->m_strTextParsed == _T("text/css") )
		} // if( pSpecialRCI->m_eType == CExtRichContentItem::__EHIT_LINK )
	} // for( ; posSpecial != NULL; )
	return nCountOfErrors;
}

bool CExtRichContentLayout::_DoLayout_ListOfCSS_LoadLinkedItem( __EXT_MFC_SAFE_LPCTSTR strHREF, bool bLookupGlobal, bool bLookupLocal )
{
	if( ! ( bLookupGlobal || bLookupLocal ) )
		return false;
	if( LPCTSTR(strHREF) == NULL )
		return false;
INT nContaierType;
	for( nContaierType = 0; nContaierType < 2; nContaierType ++ )
	{
		bool bLoadThisStep = ( nContaierType == 0 ) ? bLookupGlobal : bLookupLocal;
		if( ! bLoadThisStep )
			continue;
		CExtRichDocObjectBase & _OC = ( nContaierType == 0 ) ? GetObjectCountainerGlobal() : GetObjectCountainerLocal();
		CExtRichDocObjectBase * pDO = _OC.ObjectByName( LPCTSTR(strHREF) );
		if( pDO == NULL )
			continue;
		CExtRichDocObjectLayoutKeeper * pObjCSS = DYNAMIC_DOWNCAST( CExtRichDocObjectLayoutKeeper, pDO );
		if( pObjCSS == NULL )
			continue;
		CExtRichContentLayout & aLayout = pObjCSS->LayoutGet();
		if( aLayout.m_eLFMT != __ELFMT_CSS )
			continue;
		if( ! aLayout.IsEmpty() )
			m_listLayoutCSS.AddTail( &aLayout );
		return true;
	} // for( nContaierType = 0; nContaierType < 2; nContaierType ++ )
	return false;
}

void CExtRichContentLayout::_DoLayout_ListOfCSS_LoadThis()
{
	if( ! IsEmpty() )
		m_listLayoutCSS.AddTail( this );
}

bool CExtRichContentLayout::_DoLayout_ListOfCSS_LoadGlobalDefaults()
	{ return _DoLayout_ListOfCSS_LoadLinkedItem( __EXT_RICH_CONTENT_DEFAULT_CSS_DOC_OBJECT_NAME, true, false ); }

void CExtRichContentLayout::_DoLayout_ListOfCSS_LoadAllAvailable( bool bLoadLocal, bool bLoadGlobal, bool bLoadThis )
{
	if( ! ( bLoadLocal || bLoadGlobal || bLoadThis ) )
		return;
INT nContaierType;
	for( nContaierType = 0; nContaierType < 2; nContaierType ++ )
	{
		bool bLoadThisStep = ( nContaierType == 0 ) ? bLoadGlobal : bLoadLocal;
		if( ! bLoadThisStep )
			continue;
		CExtRichDocObjectBase & _OC = ( nContaierType == 0 ) ? GetObjectCountainerGlobal() : GetObjectCountainerLocal();
		POSITION pos = _OC.ObjectGetStartPosition();
		for( ; pos != NULL; )
		{
			CExtRichDocObjectBase * pDO = _OC.ObjectGetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pDO != NULL );
			CExtRichDocObjectLayoutKeeper * pObjCSS = DYNAMIC_DOWNCAST( CExtRichDocObjectLayoutKeeper, pDO );
			if( pObjCSS == NULL )
				continue;
			CExtRichContentLayout & aLayout = pObjCSS->LayoutGet();
			if( aLayout.m_eLFMT != __ELFMT_CSS )
				continue;
			if( aLayout.IsEmpty() )
				continue;
			m_listLayoutCSS.AddTail( &aLayout );
		} // for( ; pos != NULL; )
	} // for( nContaierType = 0; nContaierType < 2; nContaierType ++ )
	if( bLoadThis )
		_DoLayout_ListOfCSS_LoadThis();
}

CExtRichStyleDescription::e_ui_sb_type_t CExtRichContentLayout::Scrolling_GetEffectiveSBT( const CExtRichContentItem * pRCI ) const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( this != NULL && pRCI != NULL );
	if( m_eLO != __ELOT_NORMAL )
		return CExtRichStyleDescription::e_ui_sbt_none;
const CExtRichStyleDescription & styleEffective = pRCI->GetEffectiveStyle();
CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = styleEffective.m_eUiSBT;
	if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_inherit )
	{
		if( pRCI->m_pParent != NULL )
			return pRCI->m_pParent->Scrolling_GetEffectiveSBT();
		_eUiSBT = CExtRichStyleDescription::e_ui_sbt_default;
	}
	if( _eUiSBT == CExtRichStyleDescription::e_ui_sbt_default )
		_eUiSBT = pRCI->RciEvent_Scrolling_GetDefaultSBT();
	return _eUiSBT;
}

LONG CExtRichContentLayout::Scrolling_GetHorizontalScrollBarHeight( const CExtRichContentItem * pRCI )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( this != NULL && pRCI != NULL );
CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = pRCI->Scrolling_GetEffectiveSBT();
	if( _eUiSBT != CExtRichStyleDescription::e_ui_sbt_classic )
		return 0L;
	if( m_eLO == CExtRichContentLayout::__ELOT_NORMAL )
		return ::GetSystemMetrics( SM_CYHSCROLL );
	return 0L;
}

LONG CExtRichContentLayout::Scrolling_GetVerticalScrollBarWidth( const CExtRichContentItem * pRCI )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( this != NULL && pRCI != NULL );
CExtRichStyleDescription::e_ui_sb_type_t _eUiSBT = pRCI->Scrolling_GetEffectiveSBT();
	if( _eUiSBT != CExtRichStyleDescription::e_ui_sbt_classic )
		return 0L;
	if( m_eLO == CExtRichContentLayout::__ELOT_NORMAL )
		return ::GetSystemMetrics( SM_CXVSCROLL );
	return 0L;
}

void CExtRichContentLayout::ReStyle(
	CDC & dc,
	bool bForceRestyle, // = false
	bool bDeep // = true
	)
{
	if( LONG( m_listHeap.GetCount() ) == 0 )
		return;
CExtRichContentItem * pRootRCI = m_listHeap.GetHead();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRootRCI->m_eType == CExtRichContentItem::__EHIT_ROOT );
CExtRichStyleDescription styleWalk;
	styleWalk.m_fd.FromSurfaceCurrentFont( dc );
	pRootRCI->ReStyle( dc, styleWalk, bForceRestyle, bDeep );
}

void CExtRichContentLayout::DoLayout( CDC & dc, const CRect & rcStartLayout )
{
	if( LONG( m_listHeap.GetCount() ) == 0 )
		return;
	m_rcStartLayoutSaved = rcStartLayout;
CExtRichContentItem * pRootRCI = m_listHeap.GetHead();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRootRCI->m_eType == CExtRichContentItem::__EHIT_ROOT );
	_EmptyPositionedElementReferences();
	_DoLayout_ListOfCSS_Rebuild();
	pRootRCI->DoLayoutRoot( dc, rcStartLayout );
	pRootRCI->UnionSubTree();
}

void CExtRichContentLayout::DoPaint( CDC & dc, const CRect & rcDocRenderTarget, const CPoint & ptScrollPos )
{
	if( LONG( m_listHeap.GetCount() ) == 0 )
		return;
CExtRichContentItem * pRootRCI = m_listHeap.GetHead();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRootRCI->m_eType == CExtRichContentItem::__EHIT_ROOT );
	pRootRCI->DoPaintRoot( dc, rcDocRenderTarget, ptScrollPos );
}

bool CExtRichContentLayout::Parse(
	__EXT_MFC_SAFE_LPCTSTR strSourceText,
	CExtRichContentLayout::e_layout_format_t _eLFMT,
	UINT nDTF, // = 0 // DT_*** flags from Win32's DrawText() API (used mainly by plain text format)
	UINT nExtDTF, // = 0 // __EXT_DT_*** flags (Prof-UIS)
	bool bEmptyLocalObjectContainer // = true
	)
{
	if( _eLFMT == __ELFMT_AUTO_DETECT )
	{
		if( g_pfnDetectFormatForDrawText == NULL )
			return 0;
		_eLFMT = g_pfnDetectFormatForDrawText( LPCTSTR(strSourceText), ( LPCTSTR(strSourceText) != NULL ) ? int( _tcslen( LPCTSTR(strSourceText) ) ) : 0 );
	}
	switch( _eLFMT )
	{
	case __ELFMT_HTML:			return ParseHTML( LPCTSTR(strSourceText), bEmptyLocalObjectContainer );
	case __ELFMT_CSS:			return ParseCSS(  LPCTSTR(strSourceText), bEmptyLocalObjectContainer );
	case __ELFMT_PLAIN_TEXT:	return ParsePlainText(  LPCTSTR(strSourceText), nDTF, nExtDTF, bEmptyLocalObjectContainer );
	}
	return false;
}

bool CExtRichContentLayout::ParseCSS(
	__EXT_MFC_SAFE_LPCTSTR strCSS,
	bool bEmptyLocalObjectContainer // = true
	)
{
	Empty( bEmptyLocalObjectContainer );
	m_eLFMT = __ELFMT_CSS;
	if( LPCTSTR(strCSS) == NULL || _tcslen( LPCTSTR(strCSS) ) == 0 )
		return true;
	ParseClasses( strCSS );
	return true;
}

bool CExtRichContentLayout::ParseHTML(
	__EXT_MFC_SAFE_LPCTSTR strHTML,
	bool bEmptyLocalObjectContainer // = true
	)
{
	Empty( bEmptyLocalObjectContainer );
	m_eLFMT = __ELFMT_HTML;
	if( LPCTSTR(strHTML) == NULL || _tcslen( LPCTSTR(strHTML) ) == 0 )
		return true;
	// step 1: linear parsing
bool bInsideTag = false;
CExtSafeString strGatheredText, strGatheredTextWithSpace;
LPCTSTR p = LPCTSTR(strHTML);
bool bPreTag = false;
bool bStyleTag = false;
CExtSafeString strPreTag = _T("pre");
CExtSafeString strStyleTag = _T("style");
//	CExtRichContentItem * pRCIStringParent = NULL;
	for( ; (*p) != _T('\0'); p++ )
	{
		if(		(!bInsideTag)
			&&	(*p) == _T('<')
			&&	(*(p+1)) == _T('!')
			&&	(*(p+2)) == _T('-')
			&&	(*(p+3)) == _T('-')
			)
		{
			bool bCommentStartInsideStyle = false;
			if( m_listHeap.GetCount() > 0 )
			{
				CExtRichContentItem * pRCI = m_listHeap.GetTail();
				if(		(! pRCI->m_bClosingTag )
					&&	pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG
					&&	pRCI->m_strTextParsed.CompareNoCase( _T("style") ) == 0
					)
					pRCI->m_bMsWordCssWA = bCommentStartInsideStyle = true;
			}
			p += 4;
			if( ! bCommentStartInsideStyle )
			{
				for( ; (*p) != _T('\0'); p++ )
				{
					if(		(*p) == _T('-')
						&&	(*(p+1)) == _T('-')
						&&	(*(p+2)) == _T('>')
						)
					{
						p += 3;
						break;
					}
				}
				if( (*p) == _T('\0') )
					break;
			}
			p--;
			continue;
		}
		if(		(*p) == _T('/')
			&&	(*(p+1)) == _T('*')
			)
		{
			p += 2;
			for( ; (*p) != _T('\0'); p++ )
			{
				if(		(*p) == _T('*')
					&&	(*(p+1)) == _T('/')
					)
				{
					p += 2;
					break;
				}
			}
			if( (*p) == _T('\0') )
				break;
			p--;
			continue;
		}
		if(		(	(!bInsideTag)
				&&	( (*p) == _T('<') )
				&&	(	( (_T('A')<=(*(p+1))) && ((*(p+1))<=_T('Z')) )
					||	( (_T('a')<=(*(p+1))) && ((*(p+1))<=_T('z')) )
					||	( (*(p+1)) == _T('/') )
 					||	( (*(p+1)) == _T('!') )
					)
				)
			||	(	bInsideTag
				&&	(	(	(*p) == _T('>')
						&&	(	(*(p+1)) != _T('\"')
							&&	(*(p+1)) != _T('\'')
								)
							)
					||	(	(*p) == _T('/') 
						&&	(	(*(p+1)) == _T('>') 
							&&	(	(*(p+2)) != _T('\"')
								&&	(*(p+2)) != _T('\'')
									)
								)
						)
					)
				)
			)
		{
			bool bSingleTagMode = ( bInsideTag && ( (*p) == _T('/') ) && ( (*(p+1)) == _T('>') ) ) ? true : false;
			if( bSingleTagMode )
				p++;
			strGatheredTextWithSpace = strGatheredText;
			if( bInsideTag )
			{
				strGatheredText.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
				strGatheredText.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
			}
			if( ! strGatheredText.IsEmpty() )
			{
				bool bClosingTag = false;
				if( bInsideTag )
				{
					if( strGatheredText[0] == _T('/') )
					{
						bClosingTag = true;
						LONG nGatheredLength = LONG( strGatheredText.GetLength() );
						if( nGatheredLength > 1 )
						{
							CExtSafeString strTmp = strGatheredText.Right( nGatheredLength - 1 );
							strGatheredText = strTmp;
						}
						else
							strGatheredText.Empty();
					}
					strGatheredText.MakeLower(); // make inner tag text lower

// 						if( strGatheredText == strPreTag )
// 							bPreTag = ( ! bClosingTag );
				}
				bool bTextValid = true;
				if( ! bInsideTag )
				{
					CExtSafeString _strTemp = strGatheredText;
// 						if( _strTemp != _T(" ") )
// 						{
						_strTemp.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_WITHOUT_SPACES );
						_strTemp.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_WITHOUT_SPACES );
						bTextValid = ! ( _strTemp.IsEmpty() );
// 						}
				}
				if( ! strGatheredText.IsEmpty() && bTextValid )
				{
					CExtRichContentItem * pRCI = new CExtRichContentItem( *this, bInsideTag ? CExtRichContentItem::__EHIT_GENERIC_TAG : CExtRichContentItem::__EHIT_TEXT_RANGE );
					pRCI->m_bClosingTag = bClosingTag;
					pRCI->m_bSingleTagMode = bSingleTagMode;
					pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
// 						if( pRCI->IsSingleTag() && bClosingTag )
// 						{
// 							delete pRCI;
// 							bInsideTag = ! bInsideTag;
// 							strGatheredText.Empty();
// 							continue;
// 						}
					if( ! pRCI->ParseParameters() )
					{
						pRCI->m_eError = CExtRichContentItem::__EHIE_INVALID_TAG_PARAMETERS;
						m_listHeap.AddTail( pRCI );
						return false;
					}
					if( pRCI->IsSingleTag() && bClosingTag )
					{
						delete pRCI;
						bInsideTag = ! bInsideTag;
						strGatheredText.Empty();
						continue;
					}
					
					if( pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG )
					{
						if(	pRCI->IsSingleTag() )
							pRCI->m_bSingleTagMode = true;
						if( pRCI->m_strTextParsed == strPreTag )
							bPreTag = ( ! bClosingTag );
						if( pRCI->m_strTextParsed == strStyleTag )
							bStyleTag = ( ! bClosingTag );
					}

					if( pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE )
					{
						if( bStyleTag )
						{
							ParseClasses( LPCTSTR(strGatheredTextWithSpace) );
							m_listHeap.AddTail( pRCI );
						}
						else
						{
							pRCI->m_strTextParsed = LPCTSTR(strGatheredTextWithSpace);
							bool bParsed = pRCI->ParseTextRange( bPreTag );
							if( ! bParsed )
							{
								pRCI->m_eError = CExtRichContentItem::__EHIE_INVALID_TEXT;
								m_listHeap.AddTail( pRCI );
								return false;
							}
							else
								delete pRCI;
						}
					}
					else
					{
						m_listHeap.AddTail( pRCI );
//							pRCIStringParent = pRCI;
					}

					strGatheredText.Empty();

				}
			}
			bInsideTag = ! bInsideTag;
		}
		else
		{
			strGatheredText += (*p);
		}
	}
//////////////////////////////////////////////////////////////////////////
				bool bTextValid = true;
				if( ! bInsideTag )
				{
					CExtSafeString _strTemp = strGatheredText;
					_strTemp.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_WITHOUT_SPACES );
					_strTemp.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_WITHOUT_SPACES );
					bTextValid = ! ( _strTemp.IsEmpty() );

					if( ! strGatheredText.IsEmpty() && bTextValid )
					{
						CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_TEXT_RANGE );
						pRCI->m_strTextParsed = LPCTSTR(strGatheredText);

						if( pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE )
						{
							if( bStyleTag )
							{
								ParseClasses( LPCTSTR(strGatheredText) );
								m_listHeap.AddTail( pRCI );
							}
							else
							{
								pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
								bool bParsed = pRCI->ParseTextRange( bPreTag );
								if( ! bParsed )
								{
									pRCI->m_eError = CExtRichContentItem::__EHIE_INVALID_TEXT;
									m_listHeap.AddTail( pRCI );
									return false;
								}
								else
									delete pRCI;
							}
						}
						else
							m_listHeap.AddTail( pRCI );

						strGatheredText.Empty();
					}
				}
//////////////////////////////////////////////////////////////////////////
	if( LONG( m_listHeap.GetCount() ) == 0 )
		return true;

	// delete unnecessary spaces
//bool bSpace = false;

	// step 2: tree building
LONG nCountOfErrors = 0;
CExtRichContentItem * pRootRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_ROOT );
	m_listHeap.AddHead( pRootRCI );
CExtRichContentItem * pCurrentParentTag = pRootRCI;
//CExtRichContentItem * _pCurrentParentTag = pCurrentParentTag;
CTypedPtrList < CPtrList, CExtRichContentItem * > listTagStack;
//POSITION pos = m_listItems.GetHeadPosition();
POSITION pos = m_listHeap.GetHeadPosition();
POSITION posTemp = NULL;
bool bOL = false;
// LONG nIndex = 0;
static CExtSafeMapStringToPtr g_mapEndOptTagBlock;
	if( g_mapEndOptTagBlock.GetCount() == 0 )
	{
		g_mapEndOptTagBlock.SetAt( _T("p"), NULL );
		g_mapEndOptTagBlock.SetAt( _T("colgroup"), NULL );
	}
static CExtSafeMapStringToPtr g_mapEndOptTagList;
	if( g_mapEndOptTagList.GetCount() == 0 )
	{
		g_mapEndOptTagList.SetAt( _T("dd"), NULL );
		g_mapEndOptTagList.SetAt( _T("dt"), NULL );
		g_mapEndOptTagList.SetAt( _T("li"), NULL );
		g_mapEndOptTagList.SetAt( _T("option"), NULL );
 		g_mapEndOptTagList.SetAt( _T("td"), NULL );
		g_mapEndOptTagList.SetAt( _T("th"), NULL );
 		g_mapEndOptTagList.SetAt( _T("tr"), NULL );
	}
static CExtSafeMapStringToPtr g_mapBlockLikeTags;
	if( g_mapBlockLikeTags.GetCount() == 0 )
	{
		g_mapBlockLikeTags.SetAt( _T("html"), NULL );
		g_mapBlockLikeTags.SetAt( _T("body"), NULL );
		g_mapBlockLikeTags.SetAt( _T("p"), NULL );
		g_mapBlockLikeTags.SetAt( _T("div"), NULL );
		g_mapBlockLikeTags.SetAt( _T("layer"), NULL );
		g_mapBlockLikeTags.SetAt( _T("nav"), NULL );
		g_mapBlockLikeTags.SetAt( _T("marquee"), NULL );
		g_mapBlockLikeTags.SetAt( _T("address"), NULL );
		g_mapBlockLikeTags.SetAt( _T("blockquote"), NULL );
		g_mapBlockLikeTags.SetAt( _T("center"), NULL );
		g_mapBlockLikeTags.SetAt( _T("h1"), NULL );
		g_mapBlockLikeTags.SetAt( _T("h2"), NULL );
		g_mapBlockLikeTags.SetAt( _T("h3"), NULL );
		g_mapBlockLikeTags.SetAt( _T("h4"), NULL );
		g_mapBlockLikeTags.SetAt( _T("h5"), NULL );
		g_mapBlockLikeTags.SetAt( _T("h6"), NULL );
		g_mapBlockLikeTags.SetAt( _T("table"), NULL );
		g_mapBlockLikeTags.SetAt( _T("thead"), NULL );
		g_mapBlockLikeTags.SetAt( _T("tbody"), NULL );
		g_mapBlockLikeTags.SetAt( _T("tfoot"), NULL );
		g_mapBlockLikeTags.SetAt( _T("col"), NULL );
		g_mapBlockLikeTags.SetAt( _T("colgroup"), NULL );
		g_mapBlockLikeTags.SetAt( _T("tr"), NULL );
		g_mapBlockLikeTags.SetAt( _T("td"), NULL );
		g_mapBlockLikeTags.SetAt( _T("th"), NULL );
		g_mapBlockLikeTags.SetAt( _T("caption"), NULL );
		g_mapBlockLikeTags.SetAt( _T("ul"), NULL );
		g_mapBlockLikeTags.SetAt( _T("menu"), NULL );
		g_mapBlockLikeTags.SetAt( _T("dir"), NULL );
		g_mapBlockLikeTags.SetAt( _T("ol"), NULL );
		g_mapBlockLikeTags.SetAt( _T("dd"), NULL );
		g_mapBlockLikeTags.SetAt( _T("dl"), NULL );
		g_mapBlockLikeTags.SetAt( _T("dt"), NULL );
		g_mapBlockLikeTags.SetAt( _T("pre"), NULL );
		g_mapBlockLikeTags.SetAt( _T("xmp"), NULL );
		g_mapBlockLikeTags.SetAt( _T("plaintext"), NULL );
		g_mapBlockLikeTags.SetAt( _T("listing"), NULL );
		g_mapBlockLikeTags.SetAt( _T("frameset"), NULL );
		g_mapBlockLikeTags.SetAt( _T("frame"), NULL );
	}
static CExtSafeMapStringToPtr g_mapTableGroupItems;
	if( g_mapTableGroupItems.GetCount() == 0 )
	{
		g_mapTableGroupItems.SetAt( _T("thead"), NULL );
		g_mapTableGroupItems.SetAt( _T("tbody"), NULL );
		g_mapTableGroupItems.SetAt( _T("tfoot"), NULL );
	}
static CExtSafeMapStringToPtr g_mapTableListItems;
	if( g_mapTableListItems.GetCount() == 0 )
	{
		g_mapTableListItems.SetAt( _T("th"), NULL );
		g_mapTableListItems.SetAt( _T("td"), NULL );
	}
static CExtSafeMapStringToPtr g_mapListHeaders;
	if( g_mapListHeaders.GetCount() == 0 )
	{
		g_mapListHeaders.SetAt( _T("ol"), NULL );
		g_mapListHeaders.SetAt( _T("ul"), NULL );
	}
static CExtSafeMapStringToPtr g_mapDefinitionListItems;
	if( g_mapDefinitionListItems.GetCount() == 0 )
	{
		g_mapDefinitionListItems.SetAt( _T("dd"), NULL );
		g_mapDefinitionListItems.SetAt( _T("dt"), NULL );
	}
LPVOID pTmpPtrForLookup = NULL;
	pTmpPtrForLookup;

	for( ; pos != NULL; )
	{
		posTemp = pos;
		CExtRichContentItem * pRCI = m_listHeap.GetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
		if( ( pRCI->m_eType == CExtRichContentItem::__EHIT_ROOT ) )
			continue;
		if( pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG )
		{
			if( pRCI->m_strTextParsed.CompareNoCase( _T("title") ) == 0 )
				pRCI->m_eType = CExtRichContentItem::__EHIT_TITLE;
			else if( pRCI->m_strTextParsed.CompareNoCase( _T("style") ) == 0 )
				pRCI->m_eType = CExtRichContentItem::__EHIT_STYLE;
			else if( pRCI->m_strTextParsed.CompareNoCase( _T("script") ) == 0 )
				pRCI->m_eType = CExtRichContentItem::__EHIT_SCRIPT;
			else if( pRCI->m_strTextParsed.CompareNoCase( _T("meta") ) == 0 )
				pRCI->m_eType = CExtRichContentItem::__EHIT_META;
			else if( pRCI->m_strTextParsed.CompareNoCase( _T("link") ) == 0 )
				pRCI->m_eType = CExtRichContentItem::__EHIT_LINK;
			if( INT(CExtRichContentItem::__EHIT_SPECIAL_FIRST) <= INT(pRCI->m_eType) && INT(pRCI->m_eType) <= INT(CExtRichContentItem::__EHIT_SPECIAL_LAST) )
				m_listSpecial.AddTail( pRCI );

			if( pRCI->m_bClosingTag )
			{
				if(	pRCI->m_strTextParsed == pCurrentParentTag->m_strTextParsed )
				{
					if( LONG( listTagStack.GetCount() ) > 0 )
						pCurrentParentTag = listTagStack.RemoveTail();
					else
						pCurrentParentTag = pRootRCI;
				}
				else
				{
 					CString str = pRCI->m_strTextParsed;
					if(		(	g_mapListHeaders.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							&&	pCurrentParentTag->m_strTextParsed == _T("li")
							)
						||	(	pRCI->m_strTextParsed == _T("select")
							&&	pCurrentParentTag->m_strTextParsed == _T("option")
							)
						||	(	(	pRCI->m_strTextParsed == _T("tr")
//								||	pRCI->m_strTextParsed == _T("table")
//								||	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
								)
							&&	g_mapTableListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
// 						||	(	(	pRCI->m_strTextParsed == _T("table")
// 								||	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
// 								)
// 							&&	pCurrentParentTag->m_strTextParsed == _T("tr")
// 							)
						||	(	pRCI->m_strTextParsed == _T("table")
							&&	g_mapTableGroupItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
						||	(	pRCI->m_strTextParsed == _T("dl")
							&&	g_mapDefinitionListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
						)
					{
						if( LONG( listTagStack.GetCount() ) > 0 )
							listTagStack.RemoveTail();
						if( pCurrentParentTag != NULL )
						{
							if( pCurrentParentTag->m_pParent != NULL )
							{
								if( LONG( listTagStack.GetCount() ) > 0 )
									listTagStack.RemoveTail();
								pCurrentParentTag = pCurrentParentTag->m_pParent->m_pParent;
							}
							else
								pCurrentParentTag = NULL;
							//if( LONG( listTagStack.GetCount() ) > 0 )
							//	pCurrentParentTag = listTagStack.GetTail();
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}
					else
						if(		(	(	pRCI->m_strTextParsed == _T("table")
									||	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
									)
								&&	g_mapTableListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
								)
							||	(	(	pRCI->m_strTextParsed == _T("table")
								||	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
									)
								&&	pCurrentParentTag->m_strTextParsed == _T("tr")
								)
							)
					{
						for(;;)
						{
							bool bLast = false;
							if( pCurrentParentTag->m_strTextParsed == pRCI->m_strTextParsed )
								bLast = true;
							if( LONG( listTagStack.GetCount() ) > 0 )
								listTagStack.RemoveTail();
							if( pCurrentParentTag->m_pParent != NULL )
							{
								pCurrentParentTag = pCurrentParentTag->m_pParent;
							}
							else
							{
								pCurrentParentTag = NULL;
								break;
							}
							if( bLast )
								break;
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}
					else
						if(	(	g_mapEndOptTagList.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							||	g_mapEndOptTagBlock.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							||	g_mapBlockLikeTags.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							)
							//&&	pCurrentParentTag->m_strTextParsed == _T("p")
							&&	g_mapEndOptTagBlock.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
					{
						if( LONG( listTagStack.GetCount() ) > 0 )
							listTagStack.RemoveTail();
						if( pCurrentParentTag != NULL )
						{
							if( pCurrentParentTag->m_pParent != NULL )
							{
								if( g_mapEndOptTagList.Lookup( pCurrentParentTag->m_pParent->m_strTextParsed, pTmpPtrForLookup ) )
								{
									if( LONG( listTagStack.GetCount() ) > 0 )
										listTagStack.RemoveTail();
									pCurrentParentTag = pCurrentParentTag->m_pParent->m_pParent;
								}
								else
									pCurrentParentTag = pCurrentParentTag->m_pParent;
							}
							else
								pCurrentParentTag = NULL;
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}
					else
					{
						nCountOfErrors ++;
						// skip incorrect not-matching close tag
						pRCI->m_eError = CExtRichContentItem::__EHIE_NOT_MATCHING_CLOSE_TAG;
// TO-DO: it's possible to assume that just last tag is not closed
//        and find appropriate parent/open tag in earlier stack entries
					}
				}
				if( pRCI->m_strTextParsed.CompareNoCase( _T("ol") ) == 0 )
					bOL = false;
			}
			else
			{
				if( pCurrentParentTag != NULL )
				{
					if(		(	pRCI->m_strTextParsed == pCurrentParentTag->m_strTextParsed
							&&	g_mapEndOptTagList.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
						||	(	g_mapDefinitionListItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							&&	g_mapDefinitionListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
						||	(	g_mapTableListItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							&&	g_mapTableListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
						||	(	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							&&	g_mapTableGroupItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
// 						||	(	(	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
// 								||	pRCI->m_strTextParsed == _T("tr")
// 								)
// 							&&	g_mapTableListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
// 							)
// 						||	(	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
// 							&&	pCurrentParentTag->m_strTextParsed == _T("tr")
// 							)
						||	(	pRCI->m_strTextParsed == _T("body")
							&&	pCurrentParentTag->m_strTextParsed == _T("head")
							)
						||	(	pRCI->m_strTextParsed == _T("head")
							&&	pCurrentParentTag->m_strTextParsed == _T("body")
							)
						)
					{
						if( LONG( listTagStack.GetCount() ) > 0 )
							listTagStack.RemoveTail();
						if( pCurrentParentTag != NULL )
						{
							pCurrentParentTag = pCurrentParentTag->m_pParent;
							//if( LONG( listTagStack.GetCount() ) > 0 )
							//	pCurrentParentTag = listTagStack.GetTail();
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}
					else
					if(		(	(	//g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
								/*||*/	pRCI->m_strTextParsed == _T("tr")
								)
							&&	g_mapTableListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
							)
// 						||	(	g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
// 							&&	pCurrentParentTag->m_strTextParsed == _T("tr")
// 							)
						)
					{
						if( LONG( listTagStack.GetCount() ) > 0 )
							listTagStack.RemoveTail();
						if( pCurrentParentTag != NULL )
						{
							if( pCurrentParentTag->m_pParent != NULL )
							{
								if( LONG( listTagStack.GetCount() ) > 0 )
									listTagStack.RemoveTail();
								pCurrentParentTag = pCurrentParentTag->m_pParent->m_pParent;
							}
							else
								pCurrentParentTag = NULL;
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}
					else
					if(		g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
						&&	pCurrentParentTag->m_strTextParsed == _T("tr")
						)
					{
						if( LONG( listTagStack.GetCount() ) > 0 )
							listTagStack.RemoveTail();
						if( g_mapTableGroupItems.Lookup( pCurrentParentTag->m_pParent->m_strTextParsed, pTmpPtrForLookup ) )
						//if( pCurrentParentTag != NULL )
						{
							if( pCurrentParentTag->m_pParent != NULL )
							{
								if( LONG( listTagStack.GetCount() ) > 0 )
									listTagStack.RemoveTail();
								pCurrentParentTag = pCurrentParentTag->m_pParent->m_pParent;
							}
							else
								pCurrentParentTag = NULL;
						}
						else
						{
							if( pCurrentParentTag->m_pParent != NULL )
							{
								if( LONG( listTagStack.GetCount() ) > 0 )
									listTagStack.RemoveTail();
								pCurrentParentTag = pCurrentParentTag->m_pParent;
							}
							else
								pCurrentParentTag = NULL;
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}
					else
					if(		g_mapTableGroupItems.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
						&&	g_mapTableListItems.Lookup( pCurrentParentTag->m_strTextParsed, pTmpPtrForLookup )
						)
					{
						for(;;)
						{
							if( LONG( listTagStack.GetCount() ) > 0 )
								listTagStack.RemoveTail();
							bool bPar = false;
							if(		pCurrentParentTag->m_pParent->m_strTextParsed != _T("tr")
								&&	(!g_mapTableGroupItems.Lookup( pCurrentParentTag->m_pParent->m_strTextParsed, pTmpPtrForLookup))
								)
								bPar = true;
							if( pCurrentParentTag->m_pParent != NULL )
								pCurrentParentTag = pCurrentParentTag->m_pParent;
							else
							{
								pCurrentParentTag = NULL;
								break;
							}

							if( bPar )
								break;
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}
					else
/*****************************************************/

					if(		(	g_mapEndOptTagList.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							||	g_mapEndOptTagBlock.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							||	g_mapBlockLikeTags.Lookup( pRCI->m_strTextParsed, pTmpPtrForLookup )
							)
						//&&	pCurrentParentTag->m_strTextParsed == _T("p")
						&&	g_mapEndOptTagBlock.Lookup( pCurrentParentTag->m_strTextParsed,pTmpPtrForLookup )
						)
					{
						if( LONG( listTagStack.GetCount() ) > 0 )
							listTagStack.RemoveTail();
						if( pCurrentParentTag != NULL )
						{
							if( pCurrentParentTag->m_pParent != NULL )
							{
								if( g_mapEndOptTagList.Lookup( pCurrentParentTag->m_pParent->m_strTextParsed, pTmpPtrForLookup ) )
								{
									if( LONG( listTagStack.GetCount() ) > 0 )
										listTagStack.RemoveTail();
									pCurrentParentTag = pCurrentParentTag->m_pParent->m_pParent;
								}
								else
									pCurrentParentTag = pCurrentParentTag->m_pParent;
							}
							else
								pCurrentParentTag = NULL;
						}
						if( pCurrentParentTag == NULL )
							pCurrentParentTag = pRootRCI;
					}

/*****************************************************/
				}
				pRCI->m_pParent = pCurrentParentTag;
				pCurrentParentTag->m_listItems.AddTail( pRCI );
				if( pRCI->m_strTextParsed.CompareNoCase( _T("img") ) == 0 )
					pRCI->m_bSingleTagMode = true;
				if( ! pRCI->m_bSingleTagMode )
				{
					if( pCurrentParentTag->m_eType != CExtRichContentItem::__EHIT_ROOT )
						listTagStack.AddTail( pCurrentParentTag );
					pCurrentParentTag = pRCI;
				}
			}
		}
		else
		{
			if( pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE )
			{
				pCurrentParentTag->m_listItems.AddTail( pRCI );
//					bSpace = false;
			}
			if( pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_SPACE )
			{
				pCurrentParentTag->m_listItems.AddTail( pRCI );
			}
		}
	} // for( ; pos != NULL; )

LONG nRestOfTagStack = LONG( listTagStack.GetCount() );
	if( nRestOfTagStack > 0 )
	{
		nCountOfErrors += nRestOfTagStack;
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pCurrentParentTag->m_eType != CExtRichContentItem::__EHIT_ROOT );
		// add non-closed tags can be added here
		// but they are not needed for tree structure
		for( ; true; )
		{
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pCurrentParentTag != NULL );
			pCurrentParentTag->m_eError = CExtRichContentItem::__EHIE_NOT_CLOSED_FINALLY;
			if( nRestOfTagStack == 0 )
				break;
			pCurrentParentTag = listTagStack.RemoveTail();
			nRestOfTagStack --;
		}
	}

	//////////////////////////////////////////////////////////////////////////

// 		pos = _pCurrentParentTag->m_listItems.GetTailPosition();
// 		for( ; pos != NULL; )
// 		{
// 			posTemp = pos;
// 			pCurrentParentTag = _pCurrentParentTag->m_listItems.GetPrev( pos );
// 			__EXT_DEBUG_RICH_CONTENT_ASSERT( pCurrentParentTag != NULL );
// 			switch( pCurrentParentTag->m_eType )
// 			{
// 			case CExtRichContentItem::__EHIT_TEXT_RANGE:
// 			case CExtRichContentItem::__EHIT_TEXT_SPACE:
// 				{
// 					if( pCurrentParentTag->m_strTextParsed == _T(" ") && posTemp != NULL )
// 					{
// 						CExtRichContentItem * _pRCI= _pCurrentParentTag->m_listItems.GetAt( posTemp );
// //						POSITION posPareser = m_listItems.Find( _pRCI );
// //						if( posPareser != NULL )
// //							m_listItems.RemoveAt( posPareser );
// 						_pCurrentParentTag->m_listItems.RemoveAt( posTemp );
// 						delete _pRCI;
// 					}
// 				}
// 			break;
// 			}
// 		}

//#if (defined _DEBUG)
//		else
//		{
//			__EXT_DEBUG_RICH_CONTENT_ASSERT( pCurrentParentTag->m_eType == CExtRichContentItem::__EHIT_ROOT );
//		}
//#endif // (defined _DEBUG)

	// process external CSS
POSITION posSpecial = m_listSpecial.GetHeadPosition();
	for( ; posSpecial != NULL; )
	{
		CExtRichContentItem * pSpecialRCI = m_listSpecial.GetNext( posSpecial );
		if( pSpecialRCI->m_eType == CExtRichContentItem::__EHIT_LINK )
		{
			CExtRichContentItem * pParmType = pSpecialRCI->FindParmByName( _T("type") );
			if( pParmType != NULL )
			{
				CExtSafeString strTypeValue = LPCTSTR(pParmType->m_strTagPV);
				strTypeValue.MakeLower();
				strTypeValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
				strTypeValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
				if( strTypeValue == _T("text/css") )
				{
					CExtRichContentItem * pParmRel = pSpecialRCI->FindParmByName( _T("rel") );
					if( pParmRel != NULL )
					{
						CExtSafeString strRelValue = LPCTSTR(pParmRel->m_strTagPV);
						strRelValue.MakeLower();
						strRelValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
						strRelValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
						if( strRelValue == _T("stylesheet") )
						{
							CExtRichContentItem * pParmHREF = pSpecialRCI->FindParmByName( _T("href") );
							if( pParmHREF != NULL )
							{
								CExtSafeString strHREFValue = LPCTSTR(pParmHREF->m_strTagPV);
								strHREFValue.MakeLower();
								strHREFValue.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
								strHREFValue.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS_AND_QUOTES );
								if( ! strHREFValue.IsEmpty() )
								{
									if( ! ParseHTML_LoadLinkedCSS( LPCTSTR(strHREFValue) ) )
									{
										nCountOfErrors ++;
										pSpecialRCI->m_eError = CExtRichContentItem::__EHIE_FAILED_TO_LOAD_LINKED_CSS;
									}
								} // if( ! strHREFValue.IsEmpty() )
							} // if( pParmHREF != NULL && pParmHREF->m_strTextParsed == _T("text/css") )
						} // if( strRelValue == _T("stylesheet") )
					} // if( pParmRel != NULL && pParmRel->m_strTextParsed == _T("text/css") )
				} // if( strTypeValue == _T("text/css") )
			} // if( pParmType != NULL && pParmType->m_strTextParsed == _T("text/css") )
		} // if( pSpecialRCI->m_eType == CExtRichContentItem::__EHIT_LINK )
	} // for( ; posSpecial != NULL; )

	// finish:
	return ( nCountOfErrors == 0 ) ? true : false;
}

bool CExtRichContentLayout::ParseHTML_LoadLinkedCSS( __EXT_MFC_SAFE_LPCTSTR strHREF )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strHREF) != NULL && _tcslen( LPCTSTR(strHREF) ) > 0 );
CExtRichDocObjectBase * pDO = ObjectByName( LPCTSTR(strHREF) );
	if( pDO != NULL )
	{
		CExtRichDocObjectLayoutKeeper * pDOLC = STATIC_DOWNCAST( CExtRichDocObjectLayoutKeeper, pDO );
		if( pDOLC != NULL )
		{
			if( pDOLC->LayoutGet().m_eLFMT == __ELFMT_CSS )
				return true;
			return false;
		}
	}
	// there is no automatic CSS loading from anywhere by default
	return false;
}

bool CExtRichContentLayout::ParsePlainText(
	__EXT_MFC_SAFE_LPCTSTR strPlainText,
	UINT nDTF, // = 0 // DT_*** flags from Win32's DrawText() API (used mainly by plain text format)
	UINT nExtDTF, // = 0 // __EXT_DT_*** flags (Prof-UIS)
	bool bEmptyLocalObjectContainer // = true
	)
{
	nDTF; nExtDTF;
	Empty( bEmptyLocalObjectContainer );
	m_eLFMT = __ELFMT_PLAIN_TEXT;
	if( LPCTSTR(strPlainText) == NULL || _tcslen( LPCTSTR(strPlainText) ) == 0 )
		return true;
CExtRichContentItem * pRootRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_ROOT );
	pRootRCI->m_bHaveStyleChangingCache = true;
	m_listHeap.AddHead( pRootRCI );
CExtRichStyleRule & styleRuleRefFor_RootRCI = pRootRCI->_GetStyleChangingCache();
CExtRichContentItem * pRCI_Paragraph = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_GENERIC_TAG );
	m_listHeap.AddTail( pRCI_Paragraph );
CExtRichStyleRule & styleRuleRefFor_RCI_Paragraph = pRCI_Paragraph->_GetStyleChangingCache();
	pRCI_Paragraph->m_bHaveStyleChangingCache = true;
	styleRuleRefFor_RCI_Paragraph.m_eD = CExtRichStyleDescription::ed_block;
	styleRuleRefFor_RCI_Paragraph.m_eWST = CExtRichStyleDescription::ewstPre;
	pRCI_Paragraph->m_strTextParsed = _T("p");
	pRCI_Paragraph->m_bClosingTag = false;
	pRootRCI->m_listItems.AddTail( pRCI_Paragraph );
CExtRichContentItem * pRCI_Previous_Prefix = NULL;
LPCTSTR p = LPCTSTR(strPlainText);
CExtSafeString strGatheredText;
bool bPreviousSpace = false;
bool bSpace = false;
bool bPrefix = false;
	for( ; (*p) != _T('\0'); p++ )
	{
		if(		( ( (*p) == _T(' ') || ( (*p) == _T('\t') ) || ( (*p) == _T('\n') ) ) && ! bSpace )
			||	strGatheredText == _T("\n")
			||	strGatheredText == _T("\t")
			||	( strGatheredText == _T(" ") && (*p) != _T(' ') )
			)
		{
			bool bNewLine = ( strGatheredText == _T("\n") ) ? true : false;
			bool bTextIsSpace = ( strGatheredText == _T(" ") || strGatheredText == _T("\t") ) ? true : false;
			if( strGatheredText == _T('\n') && ( ( nDTF&DT_SINGLELINE ) == 0 ) )
			{
				if( (*p) == _T('\0') )
					break;
				CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_GENERIC_TAG );
				m_listHeap.AddTail( pRCI );
				pRCI->m_bHaveStyleChangingCache = true;
				pRCI->m_bHaveEffectiveStyleCache = true;
// TO-CHECK-STYLE
//					pRCI->m_styleChangingCache.m_sizeWH.cy = 0;
					pRCI->m_thSizeWH.cy = 0;
				if( m_listHeap.GetCount() > 0 )
				{
					POSITION posHeap = m_listHeap.GetTailPosition();
					__EXT_DEBUG_RICH_CONTENT_ASSERT( posHeap != NULL );
					CExtRichContentItem * pHeapRCI = m_listHeap.GetPrev( posHeap );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( pHeapRCI == pRCI );
					pHeapRCI;
					for( ; posHeap != NULL; )
					{
						pHeapRCI = m_listHeap.GetPrev( posHeap );
						if( pHeapRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_SPACE  )
							continue;
						if(		pHeapRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG
							&&	pHeapRCI->_GetStyleChangingCache().m_eD == CExtRichStyleDescription::ed_block
							&&	(	pHeapRCI->m_strTextParsed == LPCTSTR( _T("p") )
								||	pHeapRCI->m_strTextParsed == LPCTSTR( _T("br") )
								)
							)
							pRCI->_GetStyleChangingCache().m_sizeWH.cy = m_nPlainTextLineHeight;
						break;
					}
					if( posHeap == NULL )
// TO-CHECK-STYLE
//							pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
							pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
				}

				if( bPrefix )
				{
					if( pRCI_Previous_Prefix != NULL )
// TO-CHECK-STYLE
//						pRCI_Previous_Prefix->m_styleChangingCache.m_nUnderline = 0;
						pRCI_Previous_Prefix->m_thUnderline = false;
					//pRCI_Previous_Prefix = pRCI;
// TO-CHECK-STYLE
//					pRCI->m_styleChangingCache.m_nUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? 0 : 1;
					pRCI->m_thUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? false : true;
					bPrefix = false;
//					if( ( nDTF&DT_SINGLELINE ) == 0 )
//					{
//						pRCI->m_eType = CExtRichContentItem::__EHIT_TEXT_RANGE;
//						pRCI->m_strTextParsed = pRCI->m_strTextEffective = _T(" ");
//						if( ( nDTF&DT_PREFIXONLY ) != 0 )
//							pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
//						pRCI_Paragraph->m_listItems.AddTail( pRCI );
//						pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_GENERIC_TAG );
//						m_listHeap.AddTail( pRCI );
//						pRCI->m_bHaveStyleChangingCache = true;
//						pRCI->m_bHaveEffectiveStyleCache = true;
//					}
				}

				if( ( nDTF&DT_SINGLELINE ) == 0 )
					pRCI_Previous_Prefix = NULL;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI->_IsStyleOwner() );
				pRCI->_GetStyleChangingCache().m_eD = CExtRichStyleDescription::ed_block;
				pRCI->m_strTextParsed = LPCTSTR( _T("br") );

				if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//					pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
					pRCI->m_thDtPrefixOnlyMode = true;
				pRCI_Paragraph->m_listItems.AddTail( pRCI );
				strGatheredText.Empty();
				bPreviousSpace = false;
			}
			else if(	strGatheredText == _T('\t') 
					||	( strGatheredText == _T('\n') && ( ( nDTF&DT_SINGLELINE ) != 0 ) )
					)
			{
				CExtRichContentItem::e_html_item_type_t eType =
					( (strGatheredText == _T('\t')) && ((nDTF&DT_EXPANDTABS) != 0) )
						? CExtRichContentItem::__EHIT_TEXT_SPACE
						: CExtRichContentItem::__EHIT_TEXT_RANGE;
				CExtRichContentItem * pRCI = new CExtRichContentItem( *this, eType );
				m_listHeap.AddTail( pRCI );
				pRCI->m_bHaveStyleChangingCache = true;
				pRCI->m_bHaveEffectiveStyleCache = true;
// TO-CHECK-STYLE
//				pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
				pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
				pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
				if( bPrefix )
				{
					if( pRCI_Previous_Prefix != NULL )
// TO-CHECK-STYLE
//						pRCI_Previous_Prefix->m_styleChangingCache.m_nUnderline = 0;
						pRCI_Previous_Prefix->m_thUnderline = false;
					pRCI_Previous_Prefix = pRCI;
// TO-CHECK-STYLE
//					pRCI->m_styleChangingCache.m_nUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? 0 : 1;
					pRCI->m_thUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? false : true;
					bPrefix = false;
				}
				if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//					pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
					pRCI->m_thDtPrefixOnlyMode = true;
				pRCI_Paragraph->m_listItems.AddTail( pRCI );
				strGatheredText.Empty();
				bPreviousSpace = false;
			}
			else if( ! strGatheredText.IsEmpty() && strGatheredText != _T(" ") )
			{
				CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_TEXT_RANGE );
				m_listHeap.AddTail( pRCI );
				pRCI->m_bHaveStyleChangingCache = true;
				pRCI->m_bHaveEffectiveStyleCache = true;
// TO-CHECK-STYLE
//				pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
				pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
				pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
// 				if( bPrefix )
// 				{
// 					pRCI->m_styleChangingCache.m_nUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 ) ? 0 : 1;
// 					bPrefix = false;
// 				}
				if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//					pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
					pRCI->m_thDtPrefixOnlyMode = true;
				pRCI_Paragraph->m_listItems.AddTail( pRCI );
				strGatheredText.Empty();
				bPreviousSpace = false;
			}
			else if( strGatheredText == _T(" ") )
			{
				CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_TEXT_SPACE );
				m_listHeap.AddTail( pRCI );
				pRCI->m_bHaveStyleChangingCache = true;
				pRCI->m_bHaveEffectiveStyleCache = true;
// TO-CHECK-STYLE
//				pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
				pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
				pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
				if( bPrefix )
				{
					if( pRCI_Previous_Prefix != NULL )
// TO-CHECK-STYLE
//						pRCI_Previous_Prefix->m_styleChangingCache.m_nUnderline = 0;
						pRCI_Previous_Prefix->m_thUnderline = false;
					pRCI_Previous_Prefix = pRCI;
// TO-CHECK-STYLE
//					pRCI->m_styleChangingCache.m_nUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? 0 : 1;
					pRCI->m_thUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? false : true;
					bPrefix = false;
				}
				if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//					pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
					pRCI->m_thDtPrefixOnlyMode = true;
				pRCI_Paragraph->m_listItems.AddTail( pRCI );
				strGatheredText.Empty();
				bPreviousSpace = false;
			}

			bSpace = false;
			if( (*p	) != _T(' ') && ( (*p) != _T('\t') ) && ( (*p) != _T('\n') ) && ! bNewLine && ! bTextIsSpace )
				continue;

			if( ! bNewLine && (*p) != _T('\n') && (*p) == _T(' ') )
			{
				bSpace = true;
				bPreviousSpace = true;
			}
		}
		if( bPreviousSpace && ( (*p) != _T(' ') /*&& ( (*p) != _T('\t') )*/ /*&& ( (*p) != _T('\n') )*/ ) )
		{
			CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_TEXT_SPACE );
			m_listHeap.AddTail( pRCI );
			pRCI->m_bHaveStyleChangingCache = true;
			pRCI->m_bHaveEffectiveStyleCache = true;
// TO-CHECK-STYLE
//			pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
			pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
			if( strGatheredText.IsEmpty() && ( ( nDTF&DT_SINGLELINE ) == 0 ) )
				strGatheredText = _T(" ");
			pRCI->m_strTextParsed = LPCTSTR( strGatheredText );
			if( bPrefix && !strGatheredText.IsEmpty() )
			{
				if( pRCI_Previous_Prefix != NULL )
// TO-CHECK-STYLE
//					pRCI_Previous_Prefix->m_styleChangingCache.m_nUnderline = 0;
					pRCI_Previous_Prefix->m_thUnderline = false;
				pRCI_Previous_Prefix = pRCI;
// TO-CHECK-STYLE
//				pRCI->m_styleChangingCache.m_nUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? 0 : 1;
				pRCI->m_thUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? false : true;
				bPrefix = false;
			}
			if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//				pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
				pRCI->m_thDtPrefixOnlyMode = true;
			pRCI_Paragraph->m_listItems.AddTail( pRCI );
			bPreviousSpace = false;

			strGatheredText.Empty();
			bSpace = false;
		}
// 		if( (*p) == _T("\n") )
		if( ( (*p) != _T('\r') ) )
		{
			if(		( (*p) == _T('&') && bPrefix )
				||	( ( nDTF&DT_NOPREFIX ) != 0 )
 				||	( (*p) != _T('&') && (! bPrefix) )
				||	( (*p) == _T('\n') && bPrefix )
				)
			{
				strGatheredText += (*p);
				if( ! ( (*p) == _T('\n') && bPrefix ) )
					bPrefix = false;
			}
			else if( (*p) != _T('&') && bPrefix )
			{
				if( ! strGatheredText.IsEmpty() )
				{
					CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_TEXT_RANGE );
					m_listHeap.AddTail( pRCI );
// TO-CHECK-STYLE
//					pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
					pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
					pRCI->m_bHaveStyleChangingCache = true;
					pRCI->m_bHaveEffectiveStyleCache = true;
					pRCI->m_strTextParsed = LPCTSTR( strGatheredText );
					if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//						pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
						pRCI->m_thDtPrefixOnlyMode = true;
					pRCI_Paragraph->m_listItems.AddTail( pRCI );
				}

				CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_TEXT_RANGE );
				m_listHeap.AddTail( pRCI );
				pRCI->m_bHaveStyleChangingCache = true;
				pRCI->m_bHaveEffectiveStyleCache = true;
// TO-CHECK-STYLE
//				pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
				pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
				if( pRCI_Previous_Prefix != NULL )
// TO-CHECK-STYLE
//					pRCI_Previous_Prefix->m_styleChangingCache.m_nUnderline = 0;
					pRCI_Previous_Prefix->m_thUnderline = false;
				pRCI_Previous_Prefix = pRCI;
// TO-CHECK-STYLE
//				pRCI->m_styleChangingCache.m_nUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? 0 : 1;
				pRCI->m_thUnderline = ( ( nDTF&DT_NOPREFIX ) != 0 || ( nDTF&DT_HIDEPREFIX ) != 0 ) ? false : true;
				pRCI->m_strTextEffective = pRCI->m_strTextParsed = (*p);
				if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//					pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
					pRCI->m_thDtPrefixOnlyMode = true;
				pRCI_Paragraph->m_listItems.AddTail( pRCI );

				bPreviousSpace = false;
				strGatheredText.Empty();
				bSpace = false;
				bPrefix = false;
			}
			else if( (*p) == _T('&') )
				bPrefix = true;
		}
	} // for( ; (*p) != _T('\0'); p++ )
	if(		! strGatheredText.IsEmpty()
		&&	(	( strGatheredText == _T("\n") && (nDTF&DT_SINGLELINE) != 0 )
			||	strGatheredText != _T("\n")	
			)	
		)
	{
		CExtRichContentItem::e_html_item_type_t e_hit = bSpace ? CExtRichContentItem::__EHIT_TEXT_SPACE : CExtRichContentItem::__EHIT_TEXT_RANGE;
		CExtRichContentItem * pRCI = new CExtRichContentItem( *this, e_hit );
		m_listHeap.AddTail( pRCI );
		pRCI->m_bHaveStyleChangingCache = true;
		pRCI->m_bHaveEffectiveStyleCache = true;
// TO-CHECK-STYLE
//		pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
		pRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
		pRCI->m_strTextParsed = LPCTSTR(strGatheredText);
		if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//			pRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
			pRCI->m_thDtPrefixOnlyMode = true;
		pRCI_Paragraph->m_listItems.AddTail( pRCI );
	}
	if( ! strGatheredText.IsEmpty() &&	strGatheredText == _T("\n") && (nDTF&DT_SINGLELINE) == 0 )
	{
		CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_GENERIC_TAG );
		m_listHeap.AddTail( pRCI );
		pRCI->_GetStyleChangingCache().m_eD = CExtRichStyleDescription::ed_block;
		//pRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
		pRCI->m_strTextParsed = LPCTSTR( _T("br") );
		pRCI->m_bHaveStyleChangingCache = true;
		pRCI->m_bHaveEffectiveStyleCache = true;
		pRCI_Paragraph->m_listItems.AddTail( pRCI );
	}
	if( ( nDTF&DT_SINGLELINE ) == 0 && pRCI_Paragraph->m_listItems.GetCount() > 0 )
	{ // temporarily fix for last <br> item in the miltiline paragraph
		CExtRichContentItem * pTailRCI = ( pRCI_Paragraph->m_listItems.GetCount() > 0 ) ? pRCI_Paragraph->m_listItems.GetTail() : NULL;
		if( pTailRCI->m_strTextParsed == LPCTSTR( _T("br") ) )
		{
			CExtRichContentItem * pRCI = new CExtRichContentItem( *this, CExtRichContentItem::__EHIT_TEXT_SPACE );
			m_listHeap.AddTail( pRCI );
			pRCI->m_bHaveStyleChangingCache = true;
			pRCI->m_bHaveEffectiveStyleCache = true;
			pRCI_Paragraph->m_listItems.AddTail( pRCI );
		}
	} // temporarily fix for last <br> item in the multiline paragraph

bool bModifyStringMode = ( ( nDTF & (DT_MODIFYSTRING|DT_CALCRECT|DT_NOCLIP) ) == DT_MODIFYSTRING ) ? true : false;
bool bEllipsis = ( ( nDTF & ( DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS ) ) != 0 ) ? true : false;
	if( bModifyStringMode || bEllipsis )
	{
		CList < CExtRichContentItem *, CExtRichContentItem * > listComposed;
		for( ; pRCI_Paragraph->m_listItems.GetCount() > 0; )
		{
			bool bDeleteItem = false;
			CExtRichContentItem * pRCI = pRCI_Paragraph->m_listItems.GetHead();
			CExtRichContentItem::e_html_item_type_t _eType = pRCI->m_eType;
			switch( _eType )
			{
			case CExtRichContentItem::__EHIT_TEXT_SPACE:
			case CExtRichContentItem::__EHIT_TEXT_RANGE:
			{
				INT nTextLen = INT(pRCI->m_strTextParsed.GetLength());
				if( nTextLen > 1 )
				{
					bDeleteItem = true;
					INT nTextPos;
					for( nTextPos = 0; nTextPos < nTextLen; nTextPos ++ )
					{
						TCHAR tchr = pRCI->m_strTextParsed.GetAt( nTextPos );
						CExtRichContentItem * pCharRCI = new CExtRichContentItem( *this, _eType );
						pCharRCI->m_bHaveStyleChangingCache = true;
// TO-CHECK-STYLE
//						pCharRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
						pCharRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
						pCharRCI->m_strTextParsed += tchr;
						if( ( nDTF&DT_PREFIXONLY ) != 0 )
// TO-CHECK-STYLE
//							pCharRCI->m_styleEffective.m_bDtPrefixOnlyMode = true;
							pCharRCI->m_thDtPrefixOnlyMode = true;
						listComposed.AddTail( pCharRCI );
					}
				}
				else
				{
					if( pRCI->m_strTextParsed == _T("&") )
					{
						bDeleteItem = true;
						CExtRichContentItem * pCharRCI = new CExtRichContentItem( *this, _eType );
						pCharRCI->m_bHaveStyleChangingCache = true;
// TO-CHECK-STYLE
//						pCharRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
						pCharRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
						pCharRCI->m_strTextParsed = _T("&");
						listComposed.AddTail( pCharRCI );
// 						pCharRCI = new CExtRichContentItem( *this, _eType );
// 						pCharRCI->m_bHaveStyleChangingCache = true;
// 						pCharRCI->m_strTextParsed = _T("&");
// 						listComposed.AddTail( pCharRCI );
					}
// TO-CHECK-STYLE
//					else if( pRCI->m_styleChangingCache.m_nUnderline && (! bEllipsis) )
					else if( pRCI->m_thUnderline && (! bEllipsis) )
					{
						bDeleteItem = true;
						CExtRichContentItem * pCharRCI = new CExtRichContentItem( *this, _eType );
						pCharRCI->m_bHaveStyleChangingCache = true;
// TO-CHECK-STYLE
//						pCharRCI->m_styleChangingCache.m_sizeWH.cy = m_nPlainTextLineHeight;
						pCharRCI->m_thSizeWH.cy = m_nPlainTextLineHeight;
						pCharRCI->m_strTextParsed = _T("&");
						listComposed.AddTail( pCharRCI );
						pCharRCI = new CExtRichContentItem( *this, _eType );
						pCharRCI->m_bHaveStyleChangingCache = true;
						pCharRCI->m_strTextParsed = pRCI->m_strTextParsed;
						listComposed.AddTail( pCharRCI );
					}
					else
						listComposed.AddTail( pRCI );
				}
			}
			break;
			default:
				listComposed.AddTail( pRCI );
			break;
			}
			pRCI_Paragraph->m_listItems.RemoveHead();
			POSITION pos = m_listHeap.Find( pRCI );
			if( pos != NULL )
				m_listHeap.RemoveAt( pos );
			if( bDeleteItem )
				delete pRCI;
		} // for( ; pRCI_Paragraph->m_listItems.GetCount() > 0; )
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI_Paragraph->m_listItems.GetCount() == 0 );
		POSITION pos = listComposed.GetHeadPosition();
		for( ; pos != NULL ; )
		{
			CExtRichContentItem * pRCI = listComposed.GetNext( pos );
			pRCI_Paragraph->m_listItems.AddTail( pRCI );
			m_listHeap.AddTail( pRCI );
		} // for( ; pos != NULL ; )
	} // if( bModifyStringMode || bEllipsis )

	if( ( nDTF&DT_LEFT ) != 0 )
		styleRuleRefFor_RCI_Paragraph.m_eaH = CExtRichStyleDescription::eahLeft;
	if( ( nDTF&DT_CENTER ) != 0 )
		styleRuleRefFor_RCI_Paragraph.m_eaH = CExtRichStyleDescription::eahCenter;
	if( ( nDTF&DT_RIGHT ) != 0 )
		styleRuleRefFor_RCI_Paragraph.m_eaH = CExtRichStyleDescription::eahRight;
	if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
	{
		if( ( nDTF&DT_TOP ) != 0 )
		{
			styleRuleRefFor_RootRCI.m_eaV = CExtRichStyleDescription::eavTop;
			styleRuleRefFor_RootRCI.m_sizeWHP.cy = 100;
			styleRuleRefFor_RCI_Paragraph.m_sizeWHP.cy = 100;
		}
		if( ( nDTF&DT_VCENTER ) != 0 )
		{
			styleRuleRefFor_RootRCI.m_eaV = CExtRichStyleDescription::eavMiddle;
			styleRuleRefFor_RootRCI.m_sizeWHP.cy = 100;
			styleRuleRefFor_RCI_Paragraph.m_sizeWHP.cy = 100;
		}
		if( ( nDTF&DT_BOTTOM ) != 0 )
		{
			styleRuleRefFor_RootRCI.m_eaV = CExtRichStyleDescription::eavBottom;
			styleRuleRefFor_RootRCI.m_sizeWHP.cy = 100;
			styleRuleRefFor_RCI_Paragraph.m_sizeWHP.cy = 100;
		}
	} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
	if( ( nDTF&DT_WORDBREAK ) != 0 && ( nDTF&DT_SINGLELINE ) == 0 )
		styleRuleRefFor_RCI_Paragraph.m_eWST = CExtRichStyleDescription::ewstPreWrap;
	strGatheredText.Empty();
	return true;
}

void CExtRichContentLayout::ParseClasses( __EXT_MFC_SAFE_LPCTSTR strClasses )
{
	if( LPCTSTR(strClasses) == NULL || _tcslen( LPCTSTR(strClasses) ) == 0 )
		return;
CExtSafeString _strClasses = LPCTSTR(strClasses);
	_strClasses.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
	_strClasses.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
LPCTSTR pStyle = LPCTSTR(_strClasses);
CExtSafeString strClassName, strClassParameters;
bool bClassParameters = false;
	for( ; (*pStyle) != _T('\0'); pStyle++ )
	{
		if(		(*pStyle) == _T('-')
			&&	(*(pStyle+1)) == _T('-')
			&&	(*(pStyle+2)) == _T('>')
			)
		{
			pStyle += 2;
			continue;
		}

		if( (*pStyle) == _T('/') )
		{
			pStyle++;
			if( (*pStyle) == _T('*') )
			{
				pStyle++;
				// find next * than /
				for( ; (*pStyle) != _T('\0'); pStyle++ )
				{
					if( (*pStyle) == _T('*') )
					{
						pStyle ++;
						if( (*pStyle) == _T('/') )
							break;
					}
				}
				continue;
			}
			else
				pStyle --;
		}

		if( (*pStyle) == _T('{') )
		{
			bClassParameters = true;
			continue;
		}

		if( (*pStyle) == _T('}') )
		{
			bClassParameters = false;


			if( ( ! strClassName.IsEmpty() ) && (! strClassParameters.IsEmpty() ) )
			{
				strClassParameters.Replace( _T("\""), _T("\\\"") );
				//strClassParameters.Replace( _T("\'"), _T("\\\'") );
				int nPosComma = strClassName.Find( _T(',') );
				CExtSafeString _strClassName;
				int nPrevPosComma = 0;
				for( ; nPosComma >= 0; )
				{
					_strClassName = strClassName.Mid( nPrevPosComma, ( nPosComma - nPrevPosComma ) );
					_strClassName.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
					_strClassName.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
					_strClassName.MakeLower();

					nPrevPosComma = nPosComma + 1;
					nPosComma = strClassName.Find( _T(','), ( nPosComma + 1 ) );

					CExtRichContentItem * pRCI = CssClassNew( LPCTSTR(_strClassName) );
					if( pRCI != NULL )
					{
						pRCI->m_strTextParsed.Format( _T("%s style=\"%s\""), LPCTSTR(_strClassName), LPCTSTR(strClassParameters) );
						pRCI->ParseParameters();
					}
					else
					{
						//__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
						// TO-DO: indicate a memory allocation error or invalid CSS class/pseudo-class here
					}
				}

				int nClassLen = strClassName.GetLength();
				if( nPrevPosComma < nClassLen )
				{
					_strClassName = strClassName.Mid( nPrevPosComma, nClassLen );
					_strClassName.TrimLeft( __EXT_RICH_CONTENT_TRIM_CHARS );
					_strClassName.TrimRight( __EXT_RICH_CONTENT_TRIM_CHARS );
					_strClassName.MakeLower();

					CExtRichContentItem * pRCI = CssClassNew( LPCTSTR(_strClassName) );
					if( pRCI != NULL )
					{
						pRCI->m_strTextParsed.Format( _T("%s style=\"%s\""), LPCTSTR(_strClassName), LPCTSTR(strClassParameters) );
						pRCI->ParseParameters();
					}
					else
					{
						//__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
						// TO-DO: indicate a memory allocation error or invalid CSS class/pseudo-class here
					}
				}
			}
			strClassName.Empty();
			strClassParameters.Empty();
			continue;
		}
		if( ! bClassParameters )
			strClassName += (*pStyle);
		else
			strClassParameters += (*pStyle);
	}
}

LONG CExtRichContentLayout::ConvDefault2Px( DOUBLE lfSrc, bool bHorz ) const { bHorz; return LONG(lfSrc); }

LONG CExtRichContentLayout::ConvPt2Px( DOUBLE lfSrc, bool bHorz ) const
{
DOUBLE lfRes = lfSrc * 0.35146 / 25.4 * ( bHorz ? DOUBLE(g_PaintManager.m_nLPX) : DOUBLE(g_PaintManager.m_nLPY) );
DOUBLE lfResCeil = ::ceil( lfRes );
DOUBLE lfFraction = 1.0 - ( lfResCeil - lfRes );
	if( lfFraction >= 0.5 )
		lfRes = lfResCeil;
	else
		lfRes = ::floor( lfRes );
	return LONG(lfRes);
}

LONG CExtRichContentLayout::ConvCm2Px( DOUBLE lfCm, bool bHorz ) const
{
DOUBLE lfRes = lfCm * ( bHorz ? DOUBLE(g_PaintManager.m_nLPX) : DOUBLE(g_PaintManager.m_nLPY) ) / 2.54;
DOUBLE lfResCeil = ::ceil( lfRes );
DOUBLE lfFraction = 1.0 - ( lfResCeil - lfRes );
	if( lfFraction >= 0.5 )
		lfRes = lfResCeil;
	else
		lfRes = ::floor( lfRes );
	return LONG(lfRes);
}

LONG CExtRichContentLayout::ConvEm2Px( DOUBLE lgEm, const CExtRichStyleDescription & styleCurrent ) const
{
LONG nFontHeight = styleCurrent.m_fd.m_lf.lfHeight;
	if( nFontHeight < 0 )
		nFontHeight = -nFontHeight;
DOUBLE lfRes = lgEm * DOUBLE(nFontHeight);
DOUBLE lfResCeil = ::ceil( lfRes );
DOUBLE lfFraction = 1.0 - ( lfResCeil - lfRes );
	if( lfFraction >= 0.5 )
		lfRes = lfResCeil;
	else
		lfRes = ::floor( lfRes );
	return LONG( lfRes );
}

LONG CExtRichContentLayout::ConvQEm2Px( DOUBLE lgQEm, const CExtRichStyleDescription & styleCurrent ) const { return ConvEm2Px( lgQEm, styleCurrent ); }

LONG CExtRichContentLayout::ConvPercent2Px( DOUBLE lfPercent100, const CExtRichStyleDescription & styleCurrent ) const // 0.0 <= lfPercent100 && lfPercent100 <= 100.0
{
LONG nFontHeight = styleCurrent.m_fd.m_lf.lfHeight;
	if( nFontHeight < 0 )
		nFontHeight = -nFontHeight;
DOUBLE lfRes = lfPercent100 * nFontHeight / 100.0;
DOUBLE lfResCeil = ::ceil( lfRes );
DOUBLE lfFraction = 1.0 - ( lfResCeil - lfRes );
	if( lfFraction >= 0.5 )
		lfRes = lfResCeil;
	else
		lfRes = ::floor( lfRes );
	return LONG(lfRes);
}

LONG CExtRichContentLayout::ConvIn2Px( DOUBLE lgIn, bool bHorz ) const
{
DOUBLE lfRes = lgIn * ( bHorz ? DOUBLE(g_PaintManager.m_nLPX) : DOUBLE(g_PaintManager.m_nLPY) );
DOUBLE lfResCeil = ::ceil( lfRes );
DOUBLE lfFraction = 1.0 - ( lfResCeil - lfRes );
	if( lfFraction >= 0.5 )
		lfRes = lfResCeil;
	else
		lfRes = ::floor( lfRes );
	return LONG(lfRes);
}

LONG CExtRichContentLayout::ConvMm2Px( DOUBLE lgMm, bool bHorz ) const
{
DOUBLE lfRes = lgMm * ( bHorz ? DOUBLE(g_PaintManager.m_nLPX) : DOUBLE(g_PaintManager.m_nLPY) ) / 2.54 / 10.0;
DOUBLE lfResCeil = ::ceil( lfRes );
DOUBLE lfFraction = 1.0 - ( lfResCeil - lfRes );
	if( lfFraction >= 0.5 )
		lfRes = lfResCeil;
	else
		lfRes = ::floor( lfRes );
	return LONG(lfRes);
}

LONG CExtRichContentLayout::ConvEx2Px( DOUBLE lgEx ) const { return LONG(lgEx); /* not implemented yet */ }
LONG CExtRichContentLayout::ConvPc2Px( DOUBLE lgPc, bool bHorz ) const { return ConvPt2Px( lgPc * 12.0, bHorz ); }

LONG CExtRichContentLayout::ParseMeasurementString(
	__EXT_MFC_SAFE_LPCTSTR strMeasurementSpec,
	bool bHorz,
	const CExtRichStyleDescription & styleCurrent,
	LONG nNotParsedRetVal, // = -1L
	DOUBLE * p_lfPercent, // = NULL
	bool * p_bIsPercent, // = NULL
	bool * p_bIsNoMeasurementUnit, // = NULL
	bool bAllowAnyPercent // = false
	) const
{
	if( p_bIsPercent != NULL )
		(*p_bIsPercent) = false;
	if( p_bIsNoMeasurementUnit != NULL )
		(*p_bIsNoMeasurementUnit) = false;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strMeasurementSpec) != NULL && LPCTSTR(strMeasurementSpec)[0] != _T('\0') );
	if( strMeasurementSpec == NULL || strMeasurementSpec[0] == _T('\0') )
		return nNotParsedRetVal; // not parsed
	if( _tcsicmp( LPCTSTR(strMeasurementSpec), _T("thin") ) == 0 )
	{
		// TO-DO: get appropriate values
		return nNotParsedRetVal; // not parsed
	}
	else if( _tcsicmp( LPCTSTR(strMeasurementSpec), _T("medium") ) == 0 )
	{
		// TO-DO: get appropriate values
		return nNotParsedRetVal; // not parsed
	}
	else if( _tcsicmp( LPCTSTR(strMeasurementSpec), _T("thick") ) == 0 )
	{
		// TO-DO: get appropriate values
		return nNotParsedRetVal; // not parsed
	}
static const TCHAR g_strPx[] = _T("px");
static const TCHAR g_strPt[] = _T("pt");
static const TCHAR g_strCm[] = _T("cm");
static const TCHAR g_strEm[] = _T("em");
static const TCHAR g_strQEm[] = _T("__qem");
static const TCHAR g_strPercent[] = _T("%");
static const TCHAR g_strIn[] = _T("in");
static const TCHAR g_strMm[] = _T("mm");
static const TCHAR g_strEx[] = _T("ex");
static const TCHAR g_strPc[] = _T("pc");
static const TCHAR g_strUnNeededChars[] = __EXT_RICH_CONTENT_TRIM_CHARS;
CExtSafeString str = LPCTSTR(strMeasurementSpec);
LONG nPos = str.Find( g_strPx );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfPx = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfPx < 0L )
//			return nNotParsedRetVal; // not parsed
		return LONG(lfPx);
	}
	nPos = str.Find( g_strPt );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfPt = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfPt < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvPt2Px( lfPt, bHorz );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strCm );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfCm = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfCm < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvCm2Px( lfCm, bHorz );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strEm );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfEm = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfEm < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvEm2Px( lfEm, styleCurrent );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strQEm );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfQEm = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfQEm < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvQEm2Px( lfQEm, styleCurrent );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strPercent );
	if( nPos >= 0 )
	{
		if( p_bIsPercent != NULL )
			(*p_bIsPercent) = true;
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfPercent100 = _tcstod( LPCTSTR(str), &pEndPtr );
		bool bNotParsedCase = ( (!bAllowAnyPercent) && lfPercent100 < 0.0 ) ? true : false;
		if( bNotParsedCase )
			lfPercent100 = DOUBLE(nNotParsedRetVal);
		if( p_lfPercent != NULL )
			(*p_lfPercent) = lfPercent100 / 100.0;
		if( bNotParsedCase )
			return nNotParsedRetVal; // not parsed
		LONG nRetVal = 0L;
		if( bAllowAnyPercent && lfPercent100 < 0.0 )
			nRetVal = -ConvPercent2Px( -lfPercent100, styleCurrent );
		else
			nRetVal = ConvPercent2Px( lfPercent100, styleCurrent );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strIn );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfIn = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfIn < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvIn2Px( lfIn, bHorz );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strMm );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfMm = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfMm < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvMm2Px( lfMm, bHorz );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strEx );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfEx = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfEx < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvEx2Px( lfEx );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	nPos = str.Find( g_strPc );
	if( nPos >= 0 )
	{
		str = str.Left( nPos );
		str.TrimLeft( g_strUnNeededChars );
		str.TrimRight( g_strUnNeededChars );
		TCHAR * pEndPtr = NULL;
		DOUBLE lfPc = _tcstod( LPCTSTR(str), &pEndPtr );
//		if( lfPc < 0L )
//			return nNotParsedRetVal; // not parsed
		LONG nRetVal = ConvPc2Px( lfPc, bHorz );
		if( nRetVal < 0L )
			return nNotParsedRetVal; // not parsed
		return nRetVal;
	}
	// no unit sub-string
	if( p_bIsNoMeasurementUnit != NULL )
		(*p_bIsNoMeasurementUnit) = true;
TCHAR * pEndPtr = NULL;
DOUBLE lfDefault = _tcstod( LPCTSTR(str), &pEndPtr );
//	if( nDefault < 0L )
//		return nNotParsedRetVal; // not parsed
LONG nRetVal = ConvDefault2Px( lfDefault, bHorz );
	if( nRetVal < 0L )
		return nNotParsedRetVal; // not parsed
	return nRetVal;
}

COLORREF CExtRichContentLayout::ParseColorString(
	__EXT_MFC_SAFE_LPCTSTR strColorSpec,
	COLORREF clrNotParsedRetVal // = COLORREF(-1L)
	) const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strColorSpec) != NULL && LPCTSTR(strColorSpec)[0] != _T('\0') );
	if( LPCTSTR(strColorSpec) == NULL || LPCTSTR(strColorSpec)[0] == _T('\0') )
		return clrNotParsedRetVal; // not parsed
COLORREF clr = RGB(0,0,0);
CExtSafeString _strColorSpec = LPCTSTR(strColorSpec);
static const TCHAR g_strUnNeededChars[] = __EXT_RICH_CONTENT_TRIM_CHARS;
static const LONG g_nUnNeededCharsCount = LONG( _tcslen( g_strUnNeededChars ) );
	_strColorSpec.TrimLeft( g_strUnNeededChars );
	_strColorSpec.TrimRight( g_strUnNeededChars );
LONG nIndex;
	for( nIndex = 0; nIndex < g_nUnNeededCharsCount; nIndex ++ )
	{
		TCHAR strReplace[2] = { g_strUnNeededChars[nIndex], _T('\0') };
		_strColorSpec.Replace( strReplace, _T("") );
	}
LONG nLen = LONG( _strColorSpec.GetLength() );
	if( nLen == 0 )
		return clrNotParsedRetVal; // not parsed
	_strColorSpec.MakeLower();
	if( _strColorSpec[0] == _T('#') )
	{ // #rrggbb
		INT nRed   = INT( GetRValue(clr) );
		INT nGreen = INT( GetGValue(clr) );
		INT nBlue  = INT( GetBValue(clr) );
		if( nLen >= 3 )
		{
			// first, parse red
			TCHAR _tchr = _strColorSpec[1];
			if( _T('0') <= _tchr && _tchr <= _T('9') )
				nRed += _tchr - INT(_T('0'));
			else
			if( _T('a') <= _tchr && _tchr <= _T('f') )
				nRed += _tchr - INT(_T('a')) + 10;
			nRed <<= 4;
			_tchr = _strColorSpec[2];
			if( _T('0') <= _tchr && _tchr <= _T('9') )
				nRed += _tchr - INT(_T('0'));
			else
			if( _T('a') <= _tchr && _tchr <= _T('f') )
				nRed += _tchr - INT(_T('a')) + 10;
			__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= nRed && nRed <= 255 );
			if( nLen >= 5 )
			{
				// then, parse green
				_tchr = _strColorSpec[3];
				if( _T('0') <= _tchr && _tchr <= _T('9') )
					nGreen += _tchr - INT(_T('0'));
				else
				if( _T('a') <= _tchr && _tchr <= _T('f') )
					nGreen += _tchr - INT(_T('a')) + 10;
				nGreen <<= 4;
				_tchr = _strColorSpec[4];
				if( _T('0') <= _tchr && _tchr <= _T('9') )
					nGreen += _tchr - INT(_T('0'));
				else
				if( _T('a') <= _tchr && _tchr <= _T('f') )
					nGreen += _tchr - INT(_T('a')) + 10;
				__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= nGreen && nGreen <= 255 );
				if( nLen >= 7 )
				{
					// finally, parse blue
					_tchr = _strColorSpec[5];
					if( _T('0') <= _tchr && _tchr <= _T('9') )
						nBlue += _tchr - INT(_T('0'));
					else
					if( _T('a') <= _tchr && _tchr <= _T('f') )
						nBlue += _tchr - INT(_T('a')) + 10;
					nBlue <<= 4;
					_tchr = _strColorSpec[6];
					if( _T('0') <= _tchr && _tchr <= _T('9') )
						nBlue += _tchr - INT(_T('0'));
					else
					if( _T('a') <= _tchr && _tchr <= _T('f') )
						nBlue += _tchr - INT(_T('a')) + 10;
					__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= nBlue && nBlue <= 255 );
				}
			}
		}
		clr = RGB(nRed,nGreen,nBlue);
		return clr;
	} // #rrggbb
	if(		nLen >= 10
		&&	_strColorSpec[0] == _T('r')
		&&	_strColorSpec[1] == _T('g')
		&&	_strColorSpec[2] == _T('b')
		&&	_strColorSpec[3] == _T('(')
		&&	_strColorSpec[int(nLen-1)] == _T(')')
		)
	{ // rgb(0,0,0)
		CExtSafeString strAllParts = _strColorSpec.Mid( 4, nLen-5 ); // _strColorSpec = 0,0,0
		INT nRed   = INT( GetRValue(clr) );
		INT nGreen = INT( GetGValue(clr) );
		INT nBlue  = INT( GetBValue(clr) );

		LONG nPosRedEnd = strAllParts.Find( _T(',') );
		if( nPosRedEnd < 0 )
		{
			nPosRedEnd = strAllParts.Find( _T(';') );
			if( nPosRedEnd < 0 )
				return clrNotParsedRetVal; // not parsed
		}
		CExtSafeString strColorPart = strAllParts.Left( nPosRedEnd );
		if( strColorPart.IsEmpty() )
			nRed = 0;
		else
		{
			LONG nPercentPos = strColorPart.Find( _T('%') );
			if( nPercentPos >= 0 )
			{
				strColorPart = strColorPart.Left( nPercentPos );
				LONG nPercent = _ttol( LPCTSTR(strColorPart) );
				DOUBLE _nRed = DOUBLE( nPercent ) * 255.0 / 100.0;
				DOUBLE lfResRed = ::ceil( _nRed );
				DOUBLE  lfFraction = 1.0 - ( lfResRed - _nRed );
				if( lfFraction >= 0.5 )
					_nRed = lfResRed;
				else
					_nRed = ::floor( _nRed );
				nRed = INT( _nRed );
			}
			else
				nRed = _ttol( LPCTSTR(strColorPart) );
			nRed = max( 0, nRed );
			nRed = min( 255, nRed );
		}

		LONG nPosGreenStart = nPosRedEnd + 1;
		LONG nPosGreenEnd = strAllParts.Find( _T(','), nPosGreenStart );
		if( nPosGreenEnd < 0 )
		{
			nPosGreenEnd = strAllParts.Find( _T(';'), nPosGreenStart );
			if( nPosGreenEnd < 0 )
				return clrNotParsedRetVal; // not parsed
		}
		strColorPart = strAllParts.Mid( nPosGreenStart, nPosGreenEnd - nPosGreenStart );
		if( strColorPart.IsEmpty() )
			nGreen = 0;
		else
		{
			LONG nPercentPos = strColorPart.Find( _T('%') );
			if( nPercentPos >= 0 )
			{
				strColorPart = strColorPart.Left( nPercentPos );
				LONG nPercent = _ttol( LPCTSTR(strColorPart) );
				DOUBLE _nGreen = DOUBLE( nPercent ) * 255.0 / 100.0;
				DOUBLE lfResRed = ::ceil( _nGreen );
				DOUBLE lfFraction = 1.0 - ( lfResRed - _nGreen );
				if( lfFraction >= 0.5 )
					_nGreen = lfResRed;
				else
					_nGreen = ::floor( _nGreen );
				nGreen = INT( _nGreen );
			}
			else
				nGreen = _ttol( LPCTSTR(strColorPart) );
			nGreen = max( 0, nGreen );
			nGreen = min( 255, nGreen );
		}
		
		LONG nPosBlueStart = nPosGreenEnd + 1;
		LONG nPosBlueEnd = strAllParts.GetLength();
// 		LONG nPosBlueEnd = strAllParts.Find( _T(','), nPosBlueStart );
// 		if( nPosBlueEnd < 0 )
// 		{
// 			nPosBlueEnd = strAllParts.Find( _T(';'), nPosBlueStart );
// 			if( nPosBlueEnd < 0 )
// 				return clrNotParsedRetVal; // not parsed
// 		}
		strColorPart = strAllParts.Mid( nPosBlueStart, nPosBlueEnd - nPosBlueStart );
		if( strColorPart.IsEmpty() )
			nBlue = 0;
		else
		{
			LONG nPercentPos = strColorPart.Find( _T('%') );
			if( nPercentPos >= 0 )
			{
				strColorPart = strColorPart.Left( nPercentPos );
				LONG nPercent = _ttol( LPCTSTR(strColorPart) );
				DOUBLE _nBlue = DOUBLE( nPercent ) * 255.0 / 100.0;
				DOUBLE  lfResBlue = ::ceil( _nBlue );
				DOUBLE lfFraction = 1.0 - ( lfResBlue - _nBlue );
				if( lfFraction >= 0.5 )
					_nBlue = lfResBlue;
				else
					_nBlue = ::floor( _nBlue );
				nBlue = INT( _nBlue );
			}
			else
				nBlue = _ttol( LPCTSTR(strColorPart) );
			nBlue = max( 0, nBlue );
			nBlue = min( 255, nBlue );
		}
		
		clr = RGB(nRed,nGreen,nBlue);
		return clr;
	} // rgb(0,0,0)
	if(		nLen >= 12
		&&	_strColorSpec[0] == _T('h')
		&&	_strColorSpec[1] == _T('s')
		&&	_strColorSpec[2] == _T('l')
		&&	_strColorSpec[3] == _T('(')
		&&	_strColorSpec[int(nLen-1)] == _T(')')
		)
	{ // hsl(0,0%,0%)
		CExtSafeString strAllParts = _strColorSpec.Mid( 4, nLen-5 ); // _strColorSpec = 0,0%,0%
		int nPercentPos, nPercentCount;
		nPercentCount = nPercentPos = 0;
		for(;;)
		{
			nPercentPos = strAllParts.Find( _T("%"), nPercentPos );
			if( nPercentPos >= 0 )
			{
				nPercentCount++;
				nPercentPos++;
			}
			else
				break;
		}
		if( nPercentCount != 2 )
			return clrNotParsedRetVal;  // not parsed
		LONG nPosRedEnd = strAllParts.Find( _T(',') );
		if( nPosRedEnd < 0 )
			return clrNotParsedRetVal; // not parsed

		double h, s, l;
		h = s = l = 0.0;

		CExtSafeString strColorPart = strAllParts.Left( nPosRedEnd );
		if( strColorPart.IsEmpty() )
			h = 0;
		else
		{
			LONG nPercentPos = strColorPart.Find( _T('%') );
			if( nPercentPos >= 0 )
				return clrNotParsedRetVal; // not parsed
			else
				h = _ttol( LPCTSTR(strColorPart) );
			h = max( 0, h );
			h = min( 360, h );
		}

		LONG nPosGreenStart = nPosRedEnd + 1;
		LONG nPosGreenEnd = strAllParts.Find( _T(','), nPosGreenStart );
		if( nPosGreenEnd < 0 )
			return clrNotParsedRetVal; // not parsed
		strColorPart = strAllParts.Mid( nPosGreenStart, nPosGreenEnd - nPosGreenStart );
		if( strColorPart.IsEmpty() )
			return clrNotParsedRetVal; // not parsed
		else
		{
			LONG nPercentPos = strColorPart.Find( _T('%') );
			if( nPercentPos >= 0 )
			{
				strColorPart = strColorPart.Left( nPercentPos );
				s = INT( _ttol( LPCTSTR(strColorPart) ) );
			}
			else
				return clrNotParsedRetVal; // not parsed
			s = max( 0, s );
			s = min( 100, s );
		}

		LONG nPosBlueStart = nPosGreenEnd + 1;
		LONG nPosBlueEnd = strAllParts.GetLength();
		strColorPart = strAllParts.Mid( nPosBlueStart, nPosBlueEnd - nPosBlueStart );
		if( strColorPart.IsEmpty() )
			return clrNotParsedRetVal; // not parsed
		else
		{
			LONG nPercentPos = strColorPart.Find( _T('%') );
			if( nPercentPos >= 0 )
			{
				strColorPart = strColorPart.Left( nPercentPos );
				l = INT( _ttol( LPCTSTR(strColorPart) ) );
			}
			else
				return clrNotParsedRetVal; // not parsed
			l = max( 0, l );
			l = min( 100, l );
		}

		clr = CExtPaintManager::stat_HLStoRGB( (h/360), (l/100), (s/100) );
		return clr;
	} // hsl(0,0%,0%)
static struct { LPCTSTR m_strName; COLORREF m_clr; } g_arrWebColors[] =
{
	{ _T("aliceblue"), 				RGB(0xF0,0xF8,0xFF) },
	{ _T("antiquewhite"), 			RGB(0xFA,0xEB,0xD7) },
	{ _T("aqua"), 					RGB(0x00,0xFF,0xFF) },
	{ _T("aquamarine"), 			RGB(0x7F,0xFF,0xD4) },
	{ _T("azure"), 					RGB(0xF0,0xFF,0xFF) },
	{ _T("beige"),					RGB(0xF5,0xF5,0xDC) },
	{ _T("bisque"), 				RGB(0xFF,0xE4,0xC4) },
	{ _T("black"), 					RGB(0x00,0x00,0x00) },
	{ _T("blanchedalmond"),			RGB(0xFF,0xEB,0xCD) },
	{ _T("blue"), 					RGB(0x00,0x00,0xFF) },
	{ _T("blueviolet"), 			RGB(0x8A,0x2B,0xE2) },
	{ _T("brown"), 					RGB(0xA5,0x2A,0x2A) },
	{ _T("burlywood"), 				RGB(0xDE,0xB8,0x87) },
	{ _T("cadetblue"), 				RGB(0x5F,0x9E,0xA0) },
	{ _T("chartreuse"), 			RGB(0x7F,0xFF,0x00) },
	{ _T("chocolate"), 				RGB(0xD2,0x69,0x1E) },
	{ _T("coral"), 					RGB(0xFF,0x7F,0x50) },
	{ _T("cornflowerblue"), 		RGB(0x64,0x95,0xED) },
	{ _T("cornsilk"), 				RGB(0xFF,0xF8,0xDC) },
	{ _T("crimson"), 				RGB(0xDC,0x14,0x3C) },
	{ _T("cyan"), 					RGB(0x00,0xFF,0xFF) },
	{ _T("darkblue"), 				RGB(0x00,0x00,0x8B) },
	{ _T("darkcyan"), 				RGB(0x00,0x8B,0x8B) },
	{ _T("darkgoldenrod"), 			RGB(0xB8,0x86,0x0B) },
	{ _T("darkgray"), 				RGB(0xA9,0xA9,0xA9) },
	{ _T("darkgreen"), 				RGB(0x00,0x64,0x00) },
	{ _T("darkgrey"), 				RGB(0xA9,0xA9,0xA9) },
	{ _T("darkkhaki"), 				RGB(0xBD,0xB7,0x6B) },
	{ _T("darkmagenta"), 			RGB(0x8B,0x00,0x8B) },
	{ _T("darkolivegreen"), 		RGB(0x55,0x6B,0x2F) },
	{ _T("darkorange"), 			RGB(0xFF,0x8C,0x00) },
	{ _T("darkorchid"), 			RGB(0x99,0x32,0xCC) },
	{ _T("darkred"), 				RGB(0x8B,0x00,0x00) },
	{ _T("darksalmon"), 			RGB(0xE9,0x96,0x7A) },
	{ _T("darkseagreen"), 			RGB(0x8F,0xBC,0x8F) },
	{ _T("darkslateblue"), 			RGB(0x48,0x3D,0x8B) },
	{ _T("darkslategray"), 			RGB(0x2F,0x4F,0x4F) },
	{ _T("darkslategrey"), 			RGB(0x2F,0x4F,0x4F) },
	{ _T("darkturquoise"), 			RGB(0x00,0xCE,0xD1) },
	{ _T("darkviolet"), 			RGB(0x94,0x00,0xD3) },
	{ _T("deeppink"), 				RGB(0xFF,0x14,0x93) },
	{ _T("deepskyblue"), 			RGB(0x00,0xBF,0xFF) },
	{ _T("dimgray"), 				RGB(0x69,0x69,0x69) },
	{ _T("dimgrey"), 				RGB(0x69,0x69,0x69) },
	{ _T("dodgerblue"), 			RGB(0x1E,0x90,0xFF) },
	{ _T("firebrick"), 				RGB(0xB2,0x22,0x22) },
	{ _T("floralwhite"), 			RGB(0xFF,0xFA,0xF0) },
	{ _T("forestgreen"), 			RGB(0x22,0x8B,0x22) },
	{ _T("fuchsia"), 				RGB(0xFF,0x00,0xFF) },
	{ _T("gainsboro"), 				RGB(0xDC,0xDC,0xDC) },
	{ _T("ghostwhite"), 			RGB(0xF8,0xF8,0xFF) },
	{ _T("gold"), 					RGB(0xFF,0xD7,0x00) },
	{ _T("goldenrod"), 				RGB(0xDA,0xA5,0x20) },
	{ _T("gray"), 					RGB(0x80,0x80,0x80) },
	{ _T("green"), 					RGB(0x00,0x80,0x00) },
	{ _T("greenyellow"), 			RGB(0xAD,0xFF,0x2F) },
	{ _T("grey"), 					RGB(0x80,0x80,0x80) },
	{ _T("honeydew"), 				RGB(0xF0,0xFF,0xF0) },
	{ _T("hotpink"), 				RGB(0xFF,0x69,0xB4) },
	{ _T("indianred"), 				RGB(0xCD,0x5C,0x5C) },
	{ _T("indigo"), 				RGB(0x4B,0x00,0x82) },
	{ _T("ivory"), 					RGB(0xFF,0xFF,0xF0) },
	{ _T("khaki"), 					RGB(0xF0,0xE6,0x8C) },
	{ _T("lavender"), 				RGB(0xE6,0xE6,0xFA) },
	{ _T("lavenderblush"), 			RGB(0xFF,0xF0,0xF5) },
	{ _T("lawngreen"), 				RGB(0x7C,0xFC,0x00) },
	{ _T("lemonchiffon"), 			RGB(0xFF,0xFA,0xCD) },
	{ _T("lightblue"), 				RGB(0xAD,0xD8,0xE6) },
	{ _T("lightcoral"), 			RGB(0xF0,0x80,0x80) },
	{ _T("lightcyan"), 				RGB(0xE0,0xFF,0xFF) },
	{ _T("lightgoldenrodyellow"),	RGB(0xFA,0xFA,0xD2) },
	{ _T("lightgray"), 				RGB(0xD3,0xD3,0xD3) },
	{ _T("lightgreen"), 			RGB(0x90,0xEE,0x90) },
	{ _T("lightgrey"), 				RGB(0xD3,0xD3,0xD3) },
	{ _T("lightpink"), 				RGB(0xFF,0xB6,0xC1) },
	{ _T("lightsalmon"), 			RGB(0xFF,0xA0,0x7A) },
	{ _T("lightseagreen"), 			RGB(0x20,0xB2,0xAA) },
	{ _T("lightskyblue"), 			RGB(0x87,0xCE,0xFA) },
	{ _T("lightslategray"), 		RGB(0x77,0x88,0x99) },
	{ _T("lightslategrey"), 		RGB(0x77,0x88,0x99) },
	{ _T("lightsteelblue"), 		RGB(0xB0,0xC4,0xDE) },
	{ _T("lightyellow"), 			RGB(0xFF,0xFF,0xE0) },
	{ _T("lime"), 					RGB(0x00,0xFF,0x00) },
	{ _T("limegreen"), 				RGB(0x32,0xCD,0x32) },
	{ _T("linen"), 					RGB(0xFA,0xF0,0xE6) },
	{ _T("magenta"), 				RGB(0xFF,0x00,0xFF) },
	{ _T("maroon"), 				RGB(0x80,0x00,0x00) },
	{ _T("mediumaquamarine"),	 	RGB(0x66,0xCD,0xAA) },
	{ _T("mediumblue"), 			RGB(0x00,0x00,0xCD) },
	{ _T("mediumorchid"),			RGB(0xBA,0x55,0xD3) },
	{ _T("mediumpurple"), 			RGB(0x93,0x70,0xDB) },
	{ _T("mediumseagreen"), 		RGB(0x3C,0xB3,0x71) },
	{ _T("mediumslateblue"), 		RGB(0x7B,0x68,0xEE) },
	{ _T("mediumspringgreen"),	 	RGB(0x00,0xFA,0x9A) },
	{ _T("mediumturquoise"), 		RGB(0x48,0xD1,0xCC) },
	{ _T("mediumvioletred"), 		RGB(0xC7,0x15,0x85) },
	{ _T("midnightblue"), 			RGB(0x19,0x19,0x70) },
	{ _T("mintcream"), 				RGB(0xF5,0xFF,0xFA) },
	{ _T("mistyrose"), 				RGB(0xFF,0xE4,0xE1) },
	{ _T("moccasin"), 				RGB(0xFF,0xE4,0xB5) },
	{ _T("navajowhite"), 			RGB(0xFF,0xDE,0xAD) },
	{ _T("navy"), 					RGB(0x00,0x00,0x80) },
	{ _T("navyblue"),				RGB(0x00,0x00,0x80) },
	{ _T("oldlace"), 				RGB(0xFD,0xF5,0xE6) },
	{ _T("olive"), 					RGB(0x80,0x80,0x00) },
	{ _T("olivedrab"), 				RGB(0x6B,0x8E,0x23) },
	{ _T("orange"), 				RGB(0xFF,0xA5,0x00) },
	{ _T("orangered"), 				RGB(0xFF,0x45,0x00) },
	{ _T("orchid"), 				RGB(0xDA,0x70,0xD6) },
	{ _T("palegoldenrod"), 			RGB(0xEE,0xE8,0xAA) },
	{ _T("palegreen"), 				RGB(0x98,0xFB,0x98) },
	{ _T("paleturquoise"), 			RGB(0xAF,0xEE,0xEE) },
	{ _T("palevioletred"), 			RGB(0xDB,0x70,0x93) },
	{ _T("papayawhip"), 			RGB(0xFF,0xEF,0xD5) },
	{ _T("peachpuff"), 				RGB(0xFF,0xDA,0xB9) },
	{ _T("peru"), 					RGB(0xCD,0x85,0x3F) },
	{ _T("pink"), 					RGB(0xFF,0xC0,0xCB) },
	{ _T("plum"), 					RGB(0xDD,0xA0,0xDD) },
	{ _T("powderblue"), 			RGB(0xB0,0xE0,0xE6) },
	{ _T("purple"), 				RGB(0x80,0x00,0x80) },
	{ _T("red"), 					RGB(0xFF,0x00,0x00) },
	{ _T("rosybrown"), 				RGB(0xBC,0x8F,0x8F) },
	{ _T("royalblue"), 				RGB(0x41,0x69,0xE1) },
	{ _T("saddlebrown"), 			RGB(0x8B,0x45,0x13) },
	{ _T("salmon"), 				RGB(0xFA,0x80,0x72) },
	{ _T("sandybrown"), 			RGB(0xF4,0xA4,0x60) },
	{ _T("seagreen"), 				RGB(0x2E,0x8B,0x57) },
	{ _T("seashell"), 				RGB(0xFF,0xF5,0xEE) },
	{ _T("sienna"), 				RGB(0xA0,0x52,0x2D) },
	{ _T("silver"), 				RGB(0xC0,0xC0,0xC0) },
	{ _T("skyblue"), 				RGB(0x87,0xCE,0xEB) },
	{ _T("slateblue"), 				RGB(0x6A,0x5A,0xCD) },
	{ _T("slategray"), 				RGB(0x70,0x80,0x90) },
	{ _T("slategrey"), 				RGB(0x70,0x80,0x90) },
	{ _T("snow"), 					RGB(0xFF,0xFA,0xFA) },
	{ _T("springgreen"), 			RGB(0x00,0xFF,0x7F) },
	{ _T("steelblue"), 				RGB(0x46,0x82,0xB4) },
	{ _T("tan"), 					RGB(0xD2,0xB4,0x8C) },
	{ _T("teal"), 					RGB(0x00,0x80,0x80) },
	{ _T("thistle"), 				RGB(0xD8,0xBF,0xD8) },
	{ _T("tomato"), 				RGB(0xFF,0x63,0x47) },
	{ _T("turquoise"), 				RGB(0x40,0xE0,0xD0) },
	{ _T("violet"), 				RGB(0xEE,0x82,0xEE) },
	{ _T("wheat"), 					RGB(0xF5,0xDE,0xB3) },
	{ _T("white"), 					RGB(0xFF,0xFF,0xFF) },
	{ _T("whitesmoke"),				RGB(0xF5,0xF5,0xF5) },
	{ _T("yellow"), 				RGB(0xFF,0xFF,0x00) },
	{ _T("yellowgreen"), 			RGB(0x9A,0xCD,0x32) },
};
static CMapStringToPtr g_mapColorNames;
	if( g_mapColorNames.GetCount() == 0 )
	{
		LONG nIndex, nCount = sizeof(g_arrWebColors) / sizeof(g_arrWebColors[0]);
		for( nIndex = 0; nIndex < nCount; nIndex ++ )
			g_mapColorNames.SetAt( g_arrWebColors[ nIndex ].m_strName, LPVOID( g_arrWebColors[ nIndex ].m_clr ) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( g_mapColorNames.GetCount() == nCount );
	}
LPVOID pVal = NULL;
	if( g_mapColorNames.Lookup( LPCTSTR(_strColorSpec), pVal ) )
	{
		clr = COLORREF(pVal);
		return clr;
	}
	if( _strColorSpec == _T("ActiveBorder") )
		clr = ::GetSysColor( COLOR_ACTIVEBORDER );
	else if( _strColorSpec == _T("ActiveCaption") )
		clr = ::GetSysColor( COLOR_ACTIVECAPTION );
	else if( _strColorSpec == _T("AppWorkspace") )
		clr = ::GetSysColor( COLOR_APPWORKSPACE );
	else if( _strColorSpec == _T("Background") )
		clr = ::GetSysColor( COLOR_BACKGROUND );
	else if( _strColorSpec == _T("ButtonFace") )
		clr = ::GetSysColor( COLOR_BTNFACE );
	else if( _strColorSpec == _T("ButtonHighlight") )
		clr = ::GetSysColor( COLOR_BTNHIGHLIGHT );
	else if( _strColorSpec == _T("ButtonShadow") )
		clr = ::GetSysColor( COLOR_BTNSHADOW );
	else if( _strColorSpec == _T("ButtonText") )
		clr = ::GetSysColor( COLOR_BTNTEXT );
	else if( _strColorSpec == _T("CaptionText") )
		clr = ::GetSysColor( COLOR_CAPTIONTEXT );
	else if( _strColorSpec == _T("GrayText") )
		clr = ::GetSysColor( COLOR_GRAYTEXT );
	else if( _strColorSpec == _T("Highlight") )
		clr = ::GetSysColor( COLOR_HIGHLIGHT );
	else if( _strColorSpec == _T("HighlightText") )
		clr = ::GetSysColor( COLOR_HIGHLIGHTTEXT );
	else if( _strColorSpec == _T("InactiveBorder") )
		clr = ::GetSysColor( COLOR_INACTIVEBORDER );
	else if( _strColorSpec == _T("InactiveCaption") )
		clr = ::GetSysColor( COLOR_INACTIVECAPTION );
	else if( _strColorSpec == _T("InactiveCaptionText") )
		clr = ::GetSysColor( COLOR_INACTIVECAPTIONTEXT );
	else if( _strColorSpec == _T("InfoBackground") )
		clr = ::GetSysColor( COLOR_INFOBK );
	else if( _strColorSpec == _T("InfoText") )
		clr = ::GetSysColor( COLOR_INFOTEXT );
	else if( _strColorSpec == _T("Menu") )
		clr = ::GetSysColor( COLOR_MENU );
	else if( _strColorSpec == _T("MenuText") )
		clr = ::GetSysColor( COLOR_MENUTEXT );
	else if( _strColorSpec == _T("Scrollbar") )
		clr = ::GetSysColor( COLOR_SCROLLBAR );
	else if( _strColorSpec == _T("ThreeDDarkShadow") )
		clr = ::GetSysColor( COLOR_3DDKSHADOW );
	else if( _strColorSpec == _T("ThreeDFace") )
		clr = ::GetSysColor( COLOR_3DFACE );
	else if( _strColorSpec == _T("ThreeDHighlight") )
		clr = ::GetSysColor( COLOR_3DHIGHLIGHT );
	else if( _strColorSpec == _T("ThreeDLightShadow") )
		clr = ::GetSysColor( COLOR_3DHILIGHT );
	else if( _strColorSpec == _T("ThreeDShadow") )
		clr = ::GetSysColor( COLOR_3DSHADOW );
	else if( _strColorSpec == _T("Window") )
		clr = ::GetSysColor( COLOR_WINDOW );
	else if( _strColorSpec == _T("WindowFrame") )
		clr = ::GetSysColor( COLOR_WINDOWFRAME );
	else if( _strColorSpec == _T("WindowText") )
		clr = ::GetSysColor( COLOR_WINDOWTEXT );
	else
		clr = clrNotParsedRetVal; // not parsed
	return clr;
}

__EXT_MFC_SAFE_TCHAR CExtRichContentLayout::stat_SpecToChar( __EXT_MFC_SAFE_LPCTSTR strValue )
{
	if( LPCTSTR(strValue) == NULL || LPCTSTR(strValue)[0] == _T('\0') )
		return 0;
static struct { LPCTSTR m_strName; INT m_nCharCode; } g_arrSpecs[] =
{
	{ _T("quot"),	34 },
	{ _T("apos"),	39 },
	{ _T("amp"),	38 },
	{ _T("lt"),		60 },
	{ _T("gt"),		62 },

	{ _T("nbsp"),	160 },	
	{ _T("iexcl"),	161 },
	{ _T("cent"),	162 },
	{ _T("pound"),	163 },
	{ _T("curren"), 164 },
	{ _T("yen"),	165 },
	{ _T("brvbar"), 166 },
	{ _T("sect"),	167 },
	{ _T("uml"),	168 },
	{ _T("copy"),	169 },
	{ _T("ordf"),	170 },
	{ _T("laquo"),	171 },
	{ _T("not"),	172 },
	{ _T("shy"),	173 },
	{ _T("reg"),	174 },
	{ _T("macr"),	175 },
	{ _T("deg"),	176 },
	{ _T("plusmn"), 177 },
	{ _T("sup2"),	178 },
	{ _T("sup3"),	179 },
	{ _T("acute"),	180 },
	{ _T("micro"),	181 },
	{ _T("para"),	182 },
	{ _T("middot"), 183 },
	{ _T("cedil"),	184 },
	{ _T("sup1"),	185 },
	{ _T("ordm"),	186 },
	{ _T("raquo"),	187 },
	{ _T("frac14"), 188 },
	{ _T("frac12"), 189 },
	{ _T("frac34"), 190 },
	{ _T("iquest"), 191 },
	{ _T("times"),	215 },
	{ _T("divide"), 247 },

	{ _T("agrave"), 192 },
	{ _T("aacute"), 193 },
	{ _T("acirc"),	194 },
	{ _T("atilde"), 195 },
	{ _T("auml"),	196 },
	{ _T("aring"),	197 },
	{ _T("aelig"),	198 },
	{ _T("ccedil"), 199 },
	{ _T("egrave"), 200 },
	{ _T("eacute"), 201 },
	{ _T("ecirc"),	202 },
	{ _T("euml"),	203 },
	{ _T("igrave"), 204 },
	{ _T("iacute"), 205 },
	{ _T("icirc"),	206 },
	{ _T("iuml"),	207 },
	{ _T("eth"),	208 },
	{ _T("ntilde"), 209 },
	{ _T("ograve"), 210 },
	{ _T("oacute"), 211 },
	{ _T("ocirc"),	212 },
	{ _T("otilde"), 213 },
	{ _T("ouml"),	214 },
	{ _T("oslash"), 216 },
	{ _T("ugrave"), 217 },
	{ _T("uacute"), 218 },
	{ _T("ucirc"),	219 },
	{ _T("uuml"),	220 },
	{ _T("yacute"),	221 },
	{ _T("thorn"),	222 },
	{ _T("szlig"),	223 },
	{ _T("agrave"), 224 },
	{ _T("aacute"), 225 },
	{ _T("acirc"),	226 },
	{ _T("atilde"), 227 },
	{ _T("auml"),	228 },
	{ _T("aring"),	229 },
	{ _T("aelig"),	230 },
	{ _T("ccedil"), 231 },
	{ _T("egrave"), 232 },
	{ _T("eacute"), 233 },
	{ _T("ecirc"),	234 },
	{ _T("euml"),	235 },
	{ _T("igrave"), 236 },
	{ _T("iacute"), 237 },
	{ _T("icirc"),	238 },
	{ _T("iuml"),	239 },
	{ _T("eth"),	240 },
	{ _T("ntilde"), 241 },
	{ _T("ograve"), 242 },
	{ _T("oacute"), 243 },
	{ _T("ocirc"),	244 },
	{ _T("otilde"), 245 },
	{ _T("ouml"),	246 },
	{ _T("oslash"), 248 },
	{ _T("ugrave"), 249 },
	{ _T("uacute"), 250 },
	{ _T("ucirc"),	251 },
	{ _T("uuml"),	252 },
	{ _T("yacute"), 253 },
	{ _T("thorn"),	254 },
	{ _T("yuml"),	255 },

	{ _T("forall"),	8704 },
	{ _T("part"),	8706 },
	{ _T("exists"),	8707 },
	{ _T("empty"),	8709 },
	{ _T("nabla"),	8711 },
	{ _T("isin"),	8712 },
	{ _T("notin"),	8713 },
	{ _T("ni"),		8715 },
	{ _T("prod"),	8719 },
	{ _T("sum"),	8721 },
	{ _T("minus"),	8722 },
	{ _T("lowast"),	8727 },
	{ _T("radic"),	8730 },
	{ _T("prop"),	8733 },
	{ _T("infin"),	8734 },
	{ _T("ang"),	8736 },
	{ _T("and"),	8743 },
	{ _T("or"),		8744 },
	{ _T("cap"),	8745 },
	{ _T("cup"),	8746 },
	{ _T("int"),	8747 },
	{ _T("there4"),	8756 },
	{ _T("sim"),	8764 },
	{ _T("cong"),	8773 },
	{ _T("asymp"),	8776 },
	{ _T("ne"),		8800 },
	{ _T("equiv"),	8801 },
	{ _T("le"),		8804 },
	{ _T("ge"),		8805 },
	{ _T("sub"),	8834 },
	{ _T("sup"),	8835 },
	{ _T("nsub"),	8836 },
	{ _T("sube"),	8838 },
	{ _T("supe"),	8839 },
	{ _T("oplus"),	8853 },
	{ _T("otimes"),	8855 },
	{ _T("perp"),	8869 },
	{ _T("sdot"),	8901 },

	{ _T("Alpha"),		913 },
	{ _T("Beta"),		914 },
	{ _T("Gamma"),		915 },
	{ _T("Delta"),		916 },
	{ _T("Epsilon"),	917 },
	{ _T("Zeta"),		918 },
	{ _T("Eta"),		919 },
	{ _T("Theta"),		920 },
	{ _T("Iota"),		921 },
	{ _T("Kappa"),		922 },
	{ _T("Lambda"),		923 },
	{ _T("Mu"),			924 },
	{ _T("Nu"),			925 },
	{ _T("Xi"),			926 },
	{ _T("Omicron"),	927 },
	{ _T("Pi"),			928 },
	{ _T("Rho"),		929 },
	{ _T("Sigma"),		931 },
	{ _T("Tau"),		932 },
	{ _T("Upsilon"),	933 },
	{ _T("Phi"),		934 },
	{ _T("Chi"),		935 },
	{ _T("Psi"),		936 },
	{ _T("Omega"),		937 },
	{ _T("alpha"),		945 },
	{ _T("beta"),		946 },
	{ _T("gamma"),		947 },
	{ _T("delta"),		948 },
	{ _T("epsilon"),	949 },
	{ _T("zeta"),		950 },
	{ _T("eta"),		951 },
	{ _T("theta"),		952 },
	{ _T("iota"),		953 },
	{ _T("kappa"),		954 },
	{ _T("lambda"),		955 },
	{ _T("mu"),			956 },
	{ _T("nu"),			957 },
	{ _T("xi"),			958 },
	{ _T("omicron"),	959 },
	{ _T("pi"),			960 },
	{ _T("rho"),		961 },
	{ _T("sigmaf"),		962 },
	{ _T("sigma"),		963 },
	{ _T("tau"),		964 },
	{ _T("upsilon"),	965 },
	{ _T("phi"),		966 },
	{ _T("chi"),		967 },
	{ _T("psi"),		968 },
	{ _T("omega"),		969 },
	{ _T("thetasym"),	977 },
	{ _T("upsih"),		978 },
	{ _T("piv"),		982 },

	{ _T("OElig"),		338 },
	{ _T("oelig"),		339 },
	{ _T("Scaron"),		352 },
	{ _T("scaron"),		353 },
	{ _T("Yuml"),		376 },
	{ _T("fnof"),		402 },
	{ _T("circ"),		710 },
	{ _T("tilde"),		732 },
	{ _T("ensp"),		8194 },
	{ _T("emsp"),		8195 },
	{ _T("thinsp"),		8201 },
	{ _T("zwnj"),		8204 },
	{ _T("zwj"),		8205 },
	{ _T("lrm"),		8206 },
	{ _T("rlm"),		8207 },
	{ _T("ndash"),		8211 },
	{ _T("mdash"),		8212 },
	{ _T("lsquo"),		8216 },
	{ _T("rsquo"),		8217 },
	{ _T("sbquo"),		8218 },
	{ _T("ldquo"),		8220 },
	{ _T("rdquo"),		8221 },
	{ _T("bdquo"),		8222 },
	{ _T("dagger"),		8224 },
	{ _T("Dagger"),		8225 },
	{ _T("bull"),		8226 },
	{ _T("hellip"),		8230 },
	{ _T("permil"),		8240 },
	{ _T("prime"),		8242 },
	{ _T("Prime"),		8243 },
	{ _T("lsaquo"),		8249 },
	{ _T("rsaquo"),		8250 },
	{ _T("oline"),		8254 },
	{ _T("euro"),		8364 },
	{ _T("trade"),		8482 },
	{ _T("larr"),		8592 },
	{ _T("uarr"),		8593 },
	{ _T("rarr"),		8594 },
	{ _T("darr"),		8595 },
	{ _T("harr"),		8596 },
	{ _T("crarr"),		8629 },
	{ _T("lceil"),		8968 },
	{ _T("rceil"),		8969 },
	{ _T("lfloor"),		8970 },
	{ _T("rfloor"),		8971 },
	{ _T("loz"),		9674 },
	{ _T("spades"),		9824 },
	{ _T("clubs"),		9827 },
	{ _T("hearts"),		9829 },
	{ _T("diams"),		9830 },
};
static CMapStringToPtr g_mapSpecs;
	if( g_mapSpecs.GetCount() == 0 )
	{
		LONG nIndex, nCount = sizeof(g_arrSpecs) / sizeof(g_arrSpecs[0]);
		for( nIndex = 0; nIndex < nCount; nIndex ++ )
			g_mapSpecs.SetAt( g_arrSpecs[ nIndex ].m_strName, LPVOID( g_arrSpecs[ nIndex ].m_nCharCode ) );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( g_mapSpecs.GetCount() != nCount );
	}
LPVOID ptr = NULL;
	if( strValue[0] == _T('#') )
	{
		CExtSafeString _strValue = LPCTSTR(strValue);
		_strValue = _strValue.Mid(1);
		INT nPtr = _ttoi( LPCTSTR( _strValue ) );
		if( nPtr != 0 )
		{
			TCHAR _tchr = TCHAR( nPtr );
			return _tchr;
		}
	}
	if( ! g_mapSpecs.Lookup( strValue, ptr ) )
		return 0;
TCHAR _tchr = TCHAR( INT( ptr ) );
	return _tchr;
}

__EXT_MFC_SAFE_TCHAR CExtRichContentLayout::SpecToChar( __EXT_MFC_SAFE_LPCTSTR strValue )
{
	return stat_SpecToChar( LPCTSTR(strValue) );
}

CExtSafeString CExtRichContentLayout::stat_GenNumberRoman(
	INT nVal,
	bool bUpper, // = true
	bool bFormatAsArabicOnError // = true
	)
{
CExtSafeString strRetVal;
	if( nVal <= 0 || nVal > 4000 )
	{
		if( bFormatAsArabicOnError )
			strRetVal.Format( _T("%d"), nVal );
		return strRetVal;
	}
INT nCount = 0, nPos = 0, nPow = nVal;
TCHAR strRoman[20];
	::memset( strRoman, 0, sizeof(strRoman) );
static const TCHAR * g_strThousand[] = { _T("M"), _T("MM"), _T("MMM"), _T("MMMM") };
static const TCHAR * g_strHundred[]  = { _T("C"), _T("CC"), _T("CCC"), _T("CD"), _T("D"), _T("DC"), _T("DCC"), _T("DCCC"), _T("CM") };
static const TCHAR * g_strTen[]      = { _T("X"), _T("XX"), _T("XXX"), _T("XL"), _T("L"), _T("LX"), _T("LXX"), _T("LXXX"), _T("XC") };
static const TCHAR * g_strOne[]      = { _T("I"), _T("II"), _T("III"), _T("IV"), _T("V"), _T("VI"), _T("VII"), _T("VIII"), _T("IX") };
	for( nCount = 0; nCount < 4; nCount ++ )
	{
		if( nPow >= 1000 && nPow <= 4000 )
		{ // thousands
			nPos = nVal / 1000;
			nPow = nVal % 1000;
			__EXT_MFC_STRCAT( strRoman, 20, g_strThousand[ nPos - 1 ] );
		}
		if( nPow < 1000 && nPow >= 100 )
		{ // hundreds
			nPos = ( nVal % 1000 ) / 100;
			nPow = nVal % 100;
			__EXT_MFC_STRCAT( strRoman, 20, g_strHundred[ nPos - 1 ] );
		}
		if( nPow < 100 && nPow >= 10 )
		{  // tens
			nPos = ( ( nVal % 1000 ) % 100 ) / 10;
			nPow = nVal % 10;
			__EXT_MFC_STRCAT( strRoman, 20, g_strTen[ nPos - 1 ] );
		}
		if( nPow < 10 && nPow >= 1)
		{ // ones
			nPos = ( ( ( nVal % 1000 ) % 100 ) % 10 );
			nPow = 0;
			__EXT_MFC_STRCAT( strRoman, 20, g_strOne[ nPos - 1 ] );
		}
	} // for( nCount = 0; nCount < 4; nCount ++ )
	strRetVal = strRoman;
	if( ! bUpper )
		strRetVal.MakeLower();
	return strRetVal;
}

CExtSafeString CExtRichContentLayout::stat_GenNumberAlphaImpl(
	INT nVal,
	__EXT_MFC_SAFE_LPCTSTR strAlphabet,
	bool bFormatAsArabicOnError // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( LPCTSTR(strAlphabet) != NULL );
INT nAlphabetSize = INT( _tcslen( LPCTSTR(strAlphabet) ) );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nAlphabetSize >= 10 );
CExtSafeString strRetVal;
	if( nVal <= 0 )
	{
		if( bFormatAsArabicOnError )
			strRetVal.Format( _T("%d"), nVal );
		return strRetVal;
	}
	for( nVal --; true; )
	{
		INT nPart = nVal % nAlphabetSize;
		TCHAR _tchr = strAlphabet[ nPart ];
		if( strRetVal.IsEmpty() )
			strRetVal += _tchr;
		else
			strRetVal.Insert( 0, _tchr );
		nVal /= nAlphabetSize; 
		if( nVal == 0 )
			break;
		nVal--;
	}
	return strRetVal;
}

CExtSafeString CExtRichContentLayout::stat_GenNumberAlpha(
	INT nVal,
	bool bUpper, // = true
	bool bFormatAsArabicOnError // = true
	)
{
static const TCHAR g_strAlphabet[] = _T("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
CExtSafeString strRetVal = stat_GenNumberAlphaImpl( nVal, g_strAlphabet, bFormatAsArabicOnError );
	if( ! bUpper )
		strRetVal.MakeLower();
	return strRetVal;
}

CExtSafeString CExtRichContentLayout::stat_GenListItemText(
	CExtRichStyleDescription::e_list_style_type_t eLST,
	INT nVal,
	bool bFormatAsArabicOnError // = true
	)
{
CExtSafeString strRetVal;
	switch( eLST )
	{
	case CExtRichStyleDescription::elst_unspecified:
	case CExtRichStyleDescription::elst_none:
	case CExtRichStyleDescription::elst_circle:
	case CExtRichStyleDescription::elst_disc:
	case CExtRichStyleDescription::elst_square:
		return strRetVal; // force empty text
	case CExtRichStyleDescription::elst_decimal:
		strRetVal.Format( _T("%d"), nVal );
	break;
	case CExtRichStyleDescription::elst_decimal_leading_zero:
		strRetVal.Format( _T("%02d"), nVal );
	break;
	case CExtRichStyleDescription::elst_lower_alpha:
	case CExtRichStyleDescription::elst_lower_latin:
		strRetVal = stat_GenNumberAlpha( nVal, false, bFormatAsArabicOnError );
	break;
	case CExtRichStyleDescription::elst_upper_alpha:
	case CExtRichStyleDescription::elst_upper_latin:
		strRetVal = stat_GenNumberAlpha( nVal, true, bFormatAsArabicOnError );
	break;
	case CExtRichStyleDescription::elst_lower_roman:
		strRetVal = stat_GenNumberRoman( nVal, false, bFormatAsArabicOnError );
	break;
	case CExtRichStyleDescription::elst_upper_roman:
		strRetVal = stat_GenNumberRoman( nVal, true, bFormatAsArabicOnError );
	break;
#if (defined _DEBUG)
	case CExtRichStyleDescription::elst_inherit:
	default:
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
	break;
#endif // if (defined _DEBUG)
	} // switch( eLST )
	if( bFormatAsArabicOnError && strRetVal.IsEmpty() )
		strRetVal.Format( _T("%d"), nVal );
	return strRetVal;
}

CSize CExtRichContentLayout::stat_GetListMarkerSizeDiskAt96DPI()
{
	return CSize( 8, 8 );
}

CSize CExtRichContentLayout::stat_GetListMarkerSizeSquareAt96DPI()
{
	return CSize( 5, 5 );
}


CExtRichContentLayout::validate_orientation_func_t CExtRichContentLayout::g_pfnVaidateOrientation = CExtRichContentLayout::stat_VaidateOrientation;

CExtRichContentLayout::e_layout_orientation_t CExtRichContentLayout::stat_VaidateOrientation( CExtRichContentLayout::e_layout_orientation_t eLO )
{
INT nOrient = INT(eLO) % 360;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( -359 <= nOrient && nOrient <= 359 );
	if( nOrient < 0 )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( -359 <= nOrient && nOrient < 0 );
		nOrient = 360 + nOrient;
	}
	__EXT_DEBUG_RICH_CONTENT_ASSERT( 0 <= nOrient && nOrient < 359 );
int nRest = nOrient % 90;
	if( nRest < 45 )
		nOrient -= nRest;
	else
		nOrient += 90 - nRest;
e_layout_orientation_t eRetValLO = (e_layout_orientation_t)nOrient;
	__EXT_DEBUG_RICH_CONTENT_ASSERT(
			eRetValLO == __ELOT_NORMAL
		||	eRetValLO == __ELOT_90_CW
		||	eRetValLO == __ELOT_180_CW
		||	eRetValLO == __ELOT_270_CW
		);
	return eRetValLO;
}

CExtRichContentLayout::format_auto_detect_func_t CExtRichContentLayout::g_pfnDetectFormatForDrawText = CExtRichContentLayout::stat_DetectFormatForDrawText;

CExtRichContentLayout::e_layout_format_t CExtRichContentLayout::stat_DetectFormatForDrawText( __EXT_MFC_SAFE_LPCTSTR str, int nCount )
{
	if( LPCTSTR(str) == NULL || LPCTSTR(str)[0] == _T('\0') )
		return __ELFMT_PLAIN_TEXT;
	if( nCount < 0 )
	{
		nCount = int( _tcslen( LPCTSTR(str) ) );
		if( nCount == 0 )
			return __ELFMT_PLAIN_TEXT;
	}
	if( nCount < 5 ) // detect <html without closing >
		return __ELFMT_PLAIN_TEXT;
TCHAR strCollectFirstTag[ 7 ];
	::memset( strCollectFirstTag, 0, sizeof(strCollectFirstTag) );
int nPosStream = 0, nPosCollect = 0;
bool bAlphaPassed = false;
	for( ; nPosStream < nCount && nPosCollect < 5; nPosStream ++ )
	{
		TBYTE tchr = LPCTSTR(str)[nPosStream];
		if( ::_istspace(tchr) )
			continue;
		bool bAlpha = ::_istalpha( tchr ) ? true : false;
		if( (! bAlphaPassed ) && bAlpha )
			bAlphaPassed = true;
		bool bStream = false;
		if( nPosCollect == 0 && tchr == _T('<') )
		{
			if( bAlpha )
				break;
			bStream = true;
		}
		if( (! bStream ) && nPosCollect > 0 && bAlpha )
			bStream = true;
		if( ! bStream )
			continue;
		strCollectFirstTag[ nPosCollect ] = tchr;
		nPosCollect ++;
	}
	__EXT_MFC_STRLWR( strCollectFirstTag, sizeof(strCollectFirstTag) / sizeof(TCHAR) );
	if( ::_tcscmp( strCollectFirstTag, _T("<html") ) == 0 )
		return __ELFMT_HTML;
	return __ELFMT_PLAIN_TEXT;
}

int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPTSTR  str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
{
	if( hDC == NULL || str == NULL || str[0] == _T('\0') )
		return 0;
	if( nCount < 0 )
	{
		nCount = int( _tcslen(str) );
		if( nCount == 0 )
			return 0;
	}
	if( eLFMT == __ELFMT_AUTO_DETECT )
	{
		if( g_pfnDetectFormatForDrawText == NULL )
			return 0;
		eLFMT = g_pfnDetectFormatForDrawText( LPCTSTR(str), nCount );
	}
	switch( eLFMT )
	{
	case __ELFMT_HTML:			return stat_DrawHtmlText(  eLO, hDC, str, nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD );
	case __ELFMT_PLAIN_TEXT:	return stat_DrawPlainText( eLO, hDC, str, nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD );
	}
	return 0;
}

int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( eLFMT, eLO, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( eLFMT, eLO, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPTSTR  str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( eLFMT, eLO, hDC, str, ( str != NULL ) ? int( _tcslen(str) ) : 0, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }

int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, HDC hDC, __EXT_MFC_SAFE_LPTSTR  str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( eLFMT, __ELOT_NORMAL, hDC, str, nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( eLFMT, __ELOT_NORMAL, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( eLFMT, __ELOT_NORMAL, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( CExtRichContentLayout::e_layout_format_t eLFMT, HDC hDC, __EXT_MFC_SAFE_LPTSTR  str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( eLFMT, __ELOT_NORMAL, hDC, str, ( str != NULL ) ? int( _tcslen(str) ) : 0, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }

int CExtRichContentLayout::stat_DrawText( HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( __ELFMT_AUTO_DETECT, hDC, str, nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( HDC hDC, __EXT_MFC_SAFE_LPTSTR  str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( __ELFMT_AUTO_DETECT, hDC, str, nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( __ELFMT_AUTO_DETECT, hDC, str, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawText( HDC hDC, __EXT_MFC_SAFE_LPTSTR  str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawText( __ELFMT_AUTO_DETECT, hDC, str, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }

bool CExtRichContentLayout::g_bUseWin32ForPlainText = false;

int CExtRichContentLayout::stat_DrawPlainText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPTSTR str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
{
	if( hDC == NULL || str == NULL || str[0] == _T('\0') )
		return 0;
	if(		g_bUseWin32ForPlainText
		&&	eLO == CExtRichContentLayout::__ELOT_NORMAL
		&&	( nExtDTF & (~(__EXT_DT_CALC_EFFECTIVE_RECT)) ) == 0 // __EXT_DT_CALC_EFFECTIVE_RECT is not important
		&&	wstrOpenThemeDataClassList == NULL
		&&	pDTO == NULL
		&&	pDSD == NULL
		)
		return ::DrawText( hDC, LPCTSTR(str), nCount, lpRect, nDTF );
	if( nCount < 0 )
	{
		nCount = int( _tcslen(str) );
		if( nCount == 0 )
			return 0;
	}

	if( ( nDTF & DT_RTLREADING ) != 0 )
	{
		CExtSafeString strBiDirectional;
		LPTSTR pBuffer = strBiDirectional.GetBuffer( nCount + 2 );
		if( pBuffer == NULL )
			return 0;
		::memset( pBuffer, 0, sizeof(TCHAR) * ( nCount + 2 ) );
		__EXT_MFC_STRNCPY( pBuffer, nCount + 1, str, nCount );
		strBiDirectional.ReleaseBuffer();
		bool bSingleLine = ( ( nDTF & DT_SINGLELINE ) != 0 ) ? true : false;
		CExtRichBidiAlgorithm::BidiString( strBiDirectional, bSingleLine );
		return stat_DrawPlainText( eLO, hDC, LPCTSTR(strBiDirectional), lpRect, nDTF&(~(DT_RTLREADING)), nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD );
	}

	__EXT_DEBUG_RICH_CONTENT_ASSERT( g_pfnVaidateOrientation != NULL );
	eLO = g_pfnVaidateOrientation( eLO );

CDC & dc = *(CDC::FromHandle(hDC));
CRect rcDocRenderTarget, rcTmpSrc;
	if( lpRect == NULL )
	{
		dc.GetClipBox( &rcDocRenderTarget );
		rcTmpSrc = rcDocRenderTarget;
		lpRect = &rcTmpSrc;
	}
	else
	{
		rcDocRenderTarget = (*lpRect);
		if( rcDocRenderTarget.Width() <= 0 )
			rcDocRenderTarget.right = rcDocRenderTarget.left + 32767;
		if( rcDocRenderTarget.Height() <= 0 )
			rcDocRenderTarget.bottom = rcDocRenderTarget.top + 32767;
	}

	if( ( nDTF & (DT_NOCLIP|DT_CALCRECT) ) == 0 )
	{
		CExtMemoryDC dcMem(
			&dc, &rcDocRenderTarget,
			CExtMemoryDC::MDCOPT_TO_MEMORY | CExtMemoryDC::MDCOPT_FILL_BITS | CExtMemoryDC::MDCOPT_RTL_COMPATIBILITY
			);
		INT nOldBkMode = dcMem.SetBkMode( dc.GetBkMode() );
		COLORREF clrOldBkColor = dcMem.SetBkColor( dc.GetBkColor() );
		COLORREF clrOldTextColor = dcMem.SetTextColor( dc.GetTextColor() );
		CFont * pOldFont = dcMem.SelectObject( CExtRichFontDescription::stat_dc_get_current_font( dc ) );
		int nRetVal = stat_DrawPlainText( eLO, dcMem.m_hDC, str, nCount, &rcDocRenderTarget, nDTF|DT_NOCLIP, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD );
		dcMem.SelectObject( pOldFont );
		dcMem.SetTextColor( clrOldTextColor );
		dcMem.SetBkColor( clrOldBkColor );
		dcMem.SetBkMode( nOldBkMode );
		return nRetVal;
	}

int nRetVal = 0;
CExtSafeString s;
LPTSTR ptrBuffer = s.GetBuffer( nCount + 2 );
	if( ptrBuffer == NULL )
		return 0;
	::memset( ptrBuffer, 0, sizeof(TCHAR) * ( nCount + 2 ) );
	__EXT_MFC_STRNCPY( ptrBuffer, nCount + 1, str, nCount );
	s.ReleaseBuffer();
CExtRichContentLayout _layout( NULL, CExtRichContentLayout::__ELFMT_PLAIN_TEXT, eLO );
	_layout.m_bDrawTextInvocation = true;
	_layout.m_nDTF = nDTF;
	_layout.m_nExtDTF = nExtDTF;
	_layout.m_hWndOpenThemeData = hWndOpenThemeData;
	if( LPCTSTR(wstrOpenThemeDataClassList) != NULL && (*(LPCWSTR(wstrOpenThemeDataClassList))) != (L'\0') )
		_layout.m_wstrOpenThemeDataClassList = wstrOpenThemeDataClassList;
	_layout.m_nDtThemePartID = nDtThemePartID;
	_layout.m_nDtThemeStateID = nDtThemeStateID;
	_layout.m_dwOpenThemeDataFlags = dwOpenThemeDataFlags;
	_layout.m_pDTO = pDTO;
	_layout.m_pDSD = pDSD;
	{ // block for _restore
		CExtRichContentItem::_StyleRestore_t _restore( dc, CExtRichContentItem::g_styleEmpty, INT(eLO), false );
		_layout.m_nPlainTextLineHeight = _restore.m_TextMetric.tmHeight;
	} // block for _restore
	_layout.Parse( LPCTSTR(s), CExtRichContentLayout::__ELFMT_PLAIN_TEXT, nDTF, nExtDTF );

CExtRichContentItem * pRootRCI = ( _layout.m_listHeap.GetCount() > 0 ) ? _layout.m_listHeap.GetHead() : NULL;
	if( pRootRCI == NULL )
	{
		if( ( nDTF & DT_CALCRECT ) != 0 )
		{
			lpRect->right = lpRect->left;
			lpRect->bottom = lpRect->top;
		}
		return 0;
	}
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRootRCI->m_eType == CExtRichContentItem::__EHIT_ROOT );
CExtRichStyleDescription styleWalk;
	styleWalk.m_fd.FromSurfaceCurrentFont( dc );
	pRootRCI->PreLayout( dc, styleWalk, rcDocRenderTarget );

CExtRichContentItem * pRCI_PreviousNewLine = NULL;
CExtRichContentItem * pRCI_Paragraph = ( pRootRCI->m_listItems.GetCount() > 0 ) ? pRootRCI->m_listItems.GetHead() : NULL;
CExtRichStyleRule & styleRuleRefFor_RCI_Paragraph = pRCI_Paragraph->_GetStyleChangingCache();

int nHeightOrientedExtent = ( eLO == __ELOT_90_CW || eLO == __ELOT_270_CW ) ? rcDocRenderTarget.Width() : rcDocRenderTarget.Height();
	if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
			styleRuleRefFor_RCI_Paragraph.m_sizeWH.cy = nHeightOrientedExtent; // for vertical alignment

	if( (nDTF&DT_SINGLELINE) == 0 && (nDTF&(DT_WORD_ELLIPSIS|DT_END_ELLIPSIS|DT_PATH_ELLIPSIS)) != 0 && (nDTF&DT_WORDBREAK) != 0 /*&& (nDTF&(DT_WORDBREAK|DT_WORD_ELLIPSIS)) != (DT_WORDBREAK|DT_WORD_ELLIPSIS)*/ )
	{
		POSITION posChild = pRCI_Paragraph->m_listItems.GetTailPosition();
		CExtRichContentItem * pRCI_LastItem = ( pRCI_Paragraph->m_listItems.GetCount() > 0 ) ? pRCI_Paragraph->m_listItems.GetTail() : NULL;
		for( ; posChild != NULL; )
		{
			CExtRichContentItem * pRCI_Child = pRCI_Paragraph->m_listItems.GetPrev( posChild );
			bool bChildIsNewLine = ( pRCI_Child->m_strTextParsed == _T("br") && pRCI_Child->GetDisplay() == CExtRichStyleDescription::ed_block ) ? true : false;
			if( ! bChildIsNewLine )
			{
				if( pRCI_PreviousNewLine != NULL )
				{
					pRCI_Child->DoSizePreCalc( dc, rcDocRenderTarget );

					if(		( pRCI_Paragraph->m_listItems.Find( pRCI_PreviousNewLine ) != pRCI_Paragraph->m_listItems.GetHeadPosition() )
						&&	(	pRCI_Child->m_sizePreCalc.cx < rcDocRenderTarget.Width()
	//						||	(nDTF&DT_WORDBREAK) == 0 
	//						||	(nDTF&(DT_WORDBREAK|DT_WORD_ELLIPSIS)) == (DT_WORDBREAK)
							)
						&&	(	pRCI_Child->m_eType != CExtRichContentItem::__EHIT_TEXT_SPACE 
							||	(	(nDTF&DT_WORDBREAK) != 0 
								&&	pRCI_Child->m_eType == CExtRichContentItem::__EHIT_TEXT_SPACE
								)
							)
						&&	pRCI_PreviousNewLine != pRCI_LastItem
						)
// TO-CHECK-STYLE
//						pRCI_PreviousNewLine->m_styleChangingCache.m_nMinHeight = 0;
						pRCI_PreviousNewLine->m_thSizeWH.cy = 0;

					if(	(nDTF&DT_WORDBREAK) != 0 &&	pRCI_Child->m_eType != CExtRichContentItem::__EHIT_TEXT_SPACE )
						pRCI_PreviousNewLine = NULL;
				}
				continue;
			}
// TO-CHECK-STYLE
			else
			{
				ASSERT( pRCI_Child->_IsStyleOwner() );
				pRCI_Child->m_strTextParsed = _T("\n");
				CExtRichContentItem::_StyleRestore_t _restore( dc, pRCI_Child->GetEffectiveStyle(), INT(eLO), pRCI_Child->m_thUnderline );
				pRCI_Child->_GetStyleChangingCache().m_nMinHeight = _restore.m_TextMetric.tmHeight;
				pRCI_Child->m_strTextParsed = _T("br");
			}
			pRCI_PreviousNewLine = pRCI_Child;
		}
	}

	_layout.DoLayout( dc, rcDocRenderTarget );

bool bModifyStringMode = ( ( nDTF & (DT_MODIFYSTRING|DT_CALCRECT|DT_NOCLIP) ) == DT_MODIFYSTRING ) ? true : false;
bool bPainted = false;
	if( ( nDTF & DT_CALCRECT ) == 0 )
	{
		if( (! bModifyStringMode ) && ( (nDTF&(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)) == 0 ) )
		{
			CRect rcDefault = pRootRCI->m_rcLayout, rcAligned = pRootRCI->m_rcLayout;
			CSize sizeOffset( 0, 0 );
			switch( eLO )
			{
			case __ELOT_NORMAL:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( 0, ( rcDocRenderTarget.Height() - rcAligned.Height() ) / 2 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( 0, rcDocRenderTarget.bottom - rcAligned.bottom );
					else
						rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
// 				if( (nDTF&DT_CENTER) != 0 )
// 					rcAligned.OffsetRect( ( rcDocRenderTarget.Width() - rcAligned.Width() ) / 2, 0 );
// 				else if( (nDTF&DT_RIGHT) != 0 )
// 					rcAligned.OffsetRect( rcDocRenderTarget.right - rcAligned.right, 0 );
// 				else
// 					rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
				if( rcAligned.left < rcDefault.left )
					rcAligned.OffsetRect( rcDefault.left - rcAligned.left, 0 );
				if( rcAligned.top < rcDefault.top )
					rcAligned.OffsetRect( 0, rcDefault.top - rcAligned.top );
				if( rcAligned != rcDefault )
					sizeOffset = rcAligned.TopLeft() - rcDefault.TopLeft();
			break;
			case __ELOT_90_CW:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( - ( rcDocRenderTarget.Width() - rcAligned.Width() ) / 2, 0 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
					else
						rcAligned.OffsetRect( rcDocRenderTarget.right - rcAligned.right, 0 );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
// 				if( (nDTF&DT_CENTER) != 0 )
// 					rcAligned.OffsetRect( 0, ( rcDocRenderTarget.Height() - rcAligned.Height() ) / 2 );
// 				else if( (nDTF&DT_RIGHT) != 0 )
// 					rcAligned.OffsetRect( 0, rcDocRenderTarget.bottom - rcAligned.bottom );
// 				else
// 					rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
				if( rcAligned.right > rcDefault.right )
					rcAligned.OffsetRect( rcDefault.right - rcAligned.right, 0 );
				if( rcAligned.top < rcDefault.top )
					rcAligned.OffsetRect( 0, rcDefault.top - rcAligned.top );
				if( rcAligned != rcDefault )
				{
					sizeOffset.cx = rcAligned.right - rcDefault.right;
					sizeOffset.cy = rcAligned.top - rcDefault.top;
				}
			break;
			case __ELOT_180_CW:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( 0, ( rcAligned.Height() - rcDocRenderTarget.Height() ) / 2 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
					else
						rcAligned.OffsetRect( 0, rcAligned.bottom - rcDocRenderTarget.bottom );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
// 				if( (nDTF&DT_CENTER) != 0 )
// 					rcAligned.OffsetRect( ( rcAligned.Width() - rcDocRenderTarget.Width() ) / 2, 0 );
// 				else if( (nDTF&DT_RIGHT) != 0 )
// 					rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
// 				else
// 					rcAligned.OffsetRect( rcAligned.right - rcDocRenderTarget.right, 0 );
				if( rcAligned.right > rcDefault.right )
					rcAligned.OffsetRect( rcDefault.right - rcAligned.right, 0 );
				if( rcAligned.bottom > rcDefault.bottom )
					rcAligned.OffsetRect( 0, rcDefault.bottom - rcAligned.bottom );
				if( rcAligned != rcDefault )
				{
					sizeOffset.cx = rcAligned.right - rcDefault.right;
					sizeOffset.cy = rcAligned.bottom - rcDefault.bottom;
				}
			break;
			case __ELOT_270_CW:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( ( rcDocRenderTarget.Width() - rcAligned.Width() ) / 2, 0 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( rcDocRenderTarget.right - rcAligned.right, 0 );
					else
						rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
// 				if( (nDTF&DT_CENTER) != 0 )
// 					rcAligned.OffsetRect( 0, - ( rcDocRenderTarget.Height() - rcAligned.Height() ) / 2 );
// 				else if( (nDTF&DT_RIGHT) != 0 )
// 					rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
// 				else
// 					rcAligned.OffsetRect( 0, rcDocRenderTarget.bottom - rcAligned.bottom );
				if( rcAligned.left < rcDefault.left )
					rcAligned.OffsetRect( rcDefault.left - rcAligned.left, 0 );
				if( rcAligned.bottom > rcDefault.bottom )
					rcAligned.OffsetRect( 0, rcDefault.bottom - rcAligned.bottom );
				if( rcAligned != rcDefault )
				{
					sizeOffset.cx = rcAligned.left - rcDefault.left;
					sizeOffset.cy = rcAligned.bottom - rcDefault.bottom;
				}
			break;
			} // switch( eLO )
			pRootRCI->OffsetSubTree( sizeOffset );

			bPainted = true;
			_layout.DoPaint( dc, rcDocRenderTarget, CPoint(0,0) );
		} // if( (! bModifyStringMode ) && ( (nDTF&(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)) == 0 ) )
	} // if( ( nDTF & DT_CALCRECT ) == 0 )
CRect rcUnionLayout(0,0,0,0);
int m_nNewLineHeight = 0;

	{
		bool bHaveInitialUnionLayout = false;

		CExtRichContentItem * pRCI_Paragraph = ( pRootRCI->m_listItems.GetCount() > 0 ) ? pRootRCI->m_listItems.GetHead() : NULL;

 		POSITION pos = pRCI_Paragraph->m_listItems.GetHeadPosition();
		const CExtRichStyleDescription & styleNext = pRCI_Paragraph->GetEffectiveStyle();

		for( ; pos != NULL; )
		{
			CExtRichContentItem * pRCI = pRCI_Paragraph->m_listItems.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
			if( INT(pRCI->m_eType) >= INT(CExtRichContentItem::__EHIT_SPEC_START) )
				continue;
			if(		pRCI->IsUnknownItem() 
				&&	pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG 
				&&	pRCI->GetDisplay() != CExtRichStyleDescription::ed_table
				&&	pRCI->GetDisplay() != CExtRichStyleDescription::ed_inline_table
				&&	pRCI->GetDisplay() != CExtRichStyleDescription::ed_inline_block
				)
				continue;

			CExtRichStyleDescription::e_position_t eP_RCI = pRCI->GetPosition();
			if( eP_RCI == CExtRichStyleDescription::ep_absolute || eP_RCI == CExtRichStyleDescription::ep_fixed )
				continue;

/*
			if(		pRCI->GetDisplay() == CExtRichStyleDescription::ed_inline
				&&	pRCI->m_listItems.GetCount() == 0
				)
				continue;
*/
			bool bNoLayoutRectItem = 
				(	pRCI->IsNoLayoutRectItem() 
				&&	pRCI->QueryGenericTagName() != _T("img")
				&&	(! pRCI->IsNoWrapSequence() )
				&&	pRCI->m_listItems.GetCount() > 0 
				) 
				? true : false;
			if( bNoLayoutRectItem )
				pRCI->CalcualateNoLayoutRectItemsSize();
			if(		(	pRCI->m_rcLayout.left < pRCI->m_rcLayout.right && pRCI->m_rcLayout.top < pRCI->m_rcLayout.bottom )
				||	( pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block )
				)
			{
				if( bHaveInitialUnionLayout )
				{
					rcUnionLayout.left = min( rcUnionLayout.left, pRCI->m_rcLayout.left );
					rcUnionLayout.right = max( rcUnionLayout.right, pRCI->m_rcLayout.right );
					rcUnionLayout.top = min( rcUnionLayout.top, pRCI->m_rcLayout.top );
					rcUnionLayout.bottom = max( rcUnionLayout.bottom, pRCI->m_rcLayout.bottom );
				}
				else
				{
					POINT ptTopLeft = pRCI->m_rcLayout.TopLeft();
					if( styleNext.m_eWST == CExtRichStyleDescription::ewstNoWrap )
					{
						ptTopLeft.x	-= styleNext.m_nParaIndent;
						if( ptTopLeft.x < 0 )
							ptTopLeft.x = 0;
					}
					rcUnionLayout.SetRect( ptTopLeft, pRCI->m_rcLayout.BottomRight() );
					bHaveInitialUnionLayout = true;
				}
			}

			if( bNoLayoutRectItem )
				pRCI->EmptyNoLayoutRectItemsSize();
		} // for( ; pos != NULL; )
	}

	if( ( nDTF & DT_CALCRECT ) != 0 )
	{
		lpRect->left = rcUnionLayout.left;
		lpRect->top = rcUnionLayout.top;
		lpRect->right = rcUnionLayout.right;
		lpRect->bottom = rcUnionLayout.bottom; // + m_nNewLineHeight;
		if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
		{
			if( ( nDTF & ( DT_VCENTER|DT_BOTTOM ) ) != 0 )
				lpRect->top = rcDocRenderTarget.top;
		} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
		if( ( nDTF & ( DT_CENTER|DT_RIGHT ) ) != 0 )
		{
			LONG nShift = lpRect->left - rcDocRenderTarget.left;
			lpRect->left -= nShift;
			lpRect->right -= nShift;
		}
	} // if( ( nDTF & DT_CALCRECT ) != 0 )

	nRetVal = rcUnionLayout.Height(); // + m_nNewLineHeight;

	if( ( nDTF & DT_VCENTER ) != 0 || ( nDTF & DT_BOTTOM ) != 0 )
		nRetVal = rcUnionLayout.bottom + m_nNewLineHeight - rcDocRenderTarget.top;

	if( bPainted )
	{
		if( ( ( nDTF & DT_CALCRECT ) != 0 ) && ( nExtDTF & __EXT_DT_CALC_EFFECTIVE_RECT ) != 0 )
		{
//			CExtRichStyleDescription::stat_RotateRect( INT(eLO), rcUnionLayout );
//			rcUnionLayout.OffsetRect( rcUnionLayout.TopLeft() );
			(*lpRect) = rcUnionLayout;
		}
		return nRetVal;
	}

int nBackSlashCount = 0;

	if( (nDTF&(DT_PATH_ELLIPSIS|DT_WORDBREAK)) == DT_PATH_ELLIPSIS && (! bModifyStringMode) )
	{
		CExtRichContentItem * pParagraphRCI = ( pRootRCI->m_listItems.GetCount() > 0 ) ? pRootRCI->m_listItems.GetHead() : NULL;
  		bool bAddEllipsis = false;
 		CExtRichContentItem * pRCI_LastBackSlash = NULL;
		CExtRichContentItem * pRCI_StartOfTheLastLine = NULL;
		CExtRichContentItem * pRCI_EndOfTheLastLine = NULL;
		CExtSafeString strElipsis = _T("...");
		CExtSafeString strBackSlash = _T("\\");
 		LONG nEllipsisLength = 0;
		LONG nTextAfterLastSlashLength = 0;
 		bool bLastSlash = false;
		bool bLastLine = false;
		bool bEllipsis = false;
		bool bChangeEndOfTheLastLine = false;
// 		bool bLastWordVisible = true;
 		POSITION posLastBackSlash = NULL;
//		POSITION posStartOfTheLastLine = NULL;
 		CList < CExtSafeString, CExtSafeString & > listEllipsis;
		int nBrCount = 0;

		CExtRichContentItem * pRCI_Prev = NULL;

		POSITION pos = pParagraphRCI->m_listItems.GetTailPosition();
		for( ; pos != NULL; )
		{
			POSITION posPrev = pos;
			CExtRichContentItem * pRCI = pParagraphRCI->m_listItems.GetPrev( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );

			if( pRCI_EndOfTheLastLine == NULL )
				pRCI_EndOfTheLastLine = pRCI;
			if( pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG && pRCI->m_strTextParsed == _T("br") && pRCI_LastBackSlash == NULL )
				bChangeEndOfTheLastLine = true;

			if( pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG && pRCI->m_strTextParsed == _T("br") )
				nBrCount++;

			if(		pRCI_Prev != NULL
				&&	( pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG && pRCI->m_strTextParsed == _T("br") )
				&&	(nDTF&DT_SINGLELINE) == 0
				)
				break;

			if( bChangeEndOfTheLastLine )
			{
				bChangeEndOfTheLastLine = false;
				pRCI_EndOfTheLastLine = pRCI;
			}

			if( pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE && pRCI->m_strTextParsed == strBackSlash )
			{
				if( pRCI_LastBackSlash == NULL )
				{
					posLastBackSlash = posPrev;
					pRCI_LastBackSlash = pRCI;
				}
				nBackSlashCount ++;
			}

			bool bLeftEqual = false;
			switch( eLO )
			{
			case __ELOT_NORMAL:
				if( pRCI->m_rcLayout.left == rcDocRenderTarget.left )
					bLeftEqual = true;
			break;
			case __ELOT_90_CW:
				if( pRCI->m_rcLayout.top == rcDocRenderTarget.top )
					bLeftEqual = true;
			break;
			case __ELOT_180_CW:
				if( pRCI->m_rcLayout.right == rcDocRenderTarget.right )
					bLeftEqual = true;
			break;
			case __ELOT_270_CW:
				if( pRCI->m_rcLayout.bottom == rcDocRenderTarget.bottom )
					bLeftEqual = true;
			break;
			} // switch( eLO )

			if(	(	(	pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE 
						&&	bLeftEqual 
						) 
					||	(	pRCI->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG 
						&&	pRCI->m_strTextParsed == _T("br")
						&&	pRCI_LastBackSlash != NULL
						)
					)
				&&	pRCI_StartOfTheLastLine == NULL 
				)
				pRCI_StartOfTheLastLine = pRCI;

			if( nBackSlashCount >= 2 && pRCI_StartOfTheLastLine != NULL )
				break;

			pRCI_Prev = pRCI;
		}

		INT nCountOfItemsInParagraphRCI = INT( pParagraphRCI->m_listItems.GetCount() );
		if( pRCI_StartOfTheLastLine == NULL )
			pRCI_StartOfTheLastLine = ( nCountOfItemsInParagraphRCI > 0 ) ? pParagraphRCI->m_listItems.GetHead() : NULL;

		if( (nDTF&DT_SINGLELINE) != 0 /*|| nBrCount > 0*/ )
		{
			pRCI_StartOfTheLastLine = ( nCountOfItemsInParagraphRCI > 0 ) ? pParagraphRCI->m_listItems.GetHead() : NULL;
			pRCI_EndOfTheLastLine   = ( nCountOfItemsInParagraphRCI > 0 ) ? pParagraphRCI->m_listItems.GetTail() : NULL;
		}

		if( nBackSlashCount >= 2 )
		{
			CExtSafeString strModified;
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI_StartOfTheLastLine != NULL );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI_LastBackSlash != NULL );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI_EndOfTheLastLine != NULL );
			bool bShift = false;
			pos = pParagraphRCI->m_listItems.GetTailPosition();
			for( ; pos != NULL; )
			{
				CExtRichContentItem * pRCI = pParagraphRCI->m_listItems.GetPrev( pos );
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
				if( pRCI == pRCI_EndOfTheLastLine )
				{
					if( ! strModified.IsEmpty() )
					{
						listEllipsis.AddTail( strModified );
						strModified.Empty();
					}
					bLastLine = true;
				}

				bool bOut = false;
				switch( eLO )
				{
				case __ELOT_NORMAL:
					{
						LONG nRight = ( rcDocRenderTarget.right - ( ( bLastSlash && bAddEllipsis ) ? ( nEllipsisLength + nTextAfterLastSlashLength ) : 0 ) );
						if(		pRCI->m_rcLayout.left > nRight
							||	pRCI->m_rcLayout.top > rcDocRenderTarget.bottom
							||	pRCI->m_rcLayout.right > nRight
							)
							bOut = true;
					}
				break;
				case __ELOT_90_CW:
					{
						LONG nRight = ( rcDocRenderTarget.bottom - ( ( bLastSlash && bAddEllipsis ) ? ( nEllipsisLength + nTextAfterLastSlashLength ) : 0 ) );
						if(		pRCI->m_rcLayout.top > nRight
							||	pRCI->m_rcLayout.right < rcDocRenderTarget.left
							||	pRCI->m_rcLayout.bottom > nRight
							)
							bOut = true;
					}
				break;
				case __ELOT_180_CW:
					{
						LONG nRight = ( rcDocRenderTarget.left + ( ( bLastSlash && bAddEllipsis ) ? ( nEllipsisLength + nTextAfterLastSlashLength ) : 0 ) );
						if(		pRCI->m_rcLayout.left < nRight
							||	pRCI->m_rcLayout.bottom < rcDocRenderTarget.top
							||	pRCI->m_rcLayout.right < nRight
							)
							bOut = true;
					}
				break;
				case __ELOT_270_CW:
					{
						LONG nRight = ( rcDocRenderTarget.top + ( ( bLastSlash && bAddEllipsis ) ? ( nEllipsisLength + nTextAfterLastSlashLength ) : 0 ) );
						if(		pRCI->m_rcLayout.top < nRight
							||	pRCI->m_rcLayout.left > rcDocRenderTarget.right
							||	pRCI->m_rcLayout.bottom < nRight
							)
							bOut = true;
					}
				break;
				} // switch( eLO )

				if( bOut )
				{
					if( bLastLine && ! bLastSlash )
					{
						nTextAfterLastSlashLength += _layout.GetTextExtent( dc.m_hDC, LPCTSTR(pRCI->m_strTextParsed) ).cx;
						bShift = true;
						strModified = 
// TO-CHECK-STYLE
//							CExtSafeString( pRCI->m_styleChangingCache.m_nUnderline ? _T("&") : _T("") )
							CExtSafeString( pRCI->m_thUnderline ? _T("&") : _T("") )
							+ ( ( (nDTF&DT_SINGLELINE)==0 && pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block ) ? _T("\n") : pRCI->m_strTextParsed )
							+ strModified;
					}
					else if(	false //( bLastLine && bLastSlash && pRCI == pRCI_StartOfTheLastLine ) 
							||	( pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block )
							)
					{
						strModified = 
// TO-CHECK-STYLE
//							CExtSafeString( pRCI->m_styleChangingCache.m_nUnderline ? _T("&") : _T("") )
							CExtSafeString( pRCI->m_thUnderline ? _T("&") : _T("") )
							+ ( ( (nDTF&DT_SINGLELINE)==0 && pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block ) ? _T("\n") : pRCI->m_strTextParsed )
							+ strModified;
					}
					bEllipsis = bLastLine;
					bAddEllipsis = bLastLine;
				}
				else
				{
					bEllipsis =  false;
					if( bLastLine && (! bLastSlash) && bShift )
						nTextAfterLastSlashLength += _layout.GetTextExtent( dc.m_hDC, LPCTSTR(pRCI->m_strTextParsed) ).cx;
					strModified = 
// TO-CHECK-STYLE
//						CExtSafeString( pRCI->m_styleChangingCache.m_nUnderline ? _T("&") : _T("") )
						CExtSafeString( pRCI->m_thUnderline ? _T("&") : _T("") )
						+ ( ( (nDTF&DT_SINGLELINE)==0 && pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block ) ? _T("\n") : pRCI->m_strTextParsed )
						+ strModified;
				}
				bLastSlash = ( pRCI == pRCI_LastBackSlash /*&& ! bLastSlash*/ ) ? true : bLastSlash;
				if( ( pRCI == pRCI_LastBackSlash ) && ! strModified.IsEmpty() )
				{
					if( bLastLine && bAddEllipsis  )
					{
						strModified = strElipsis + strModified;
						nEllipsisLength = _layout.GetTextExtent( dc.m_hDC, LPCTSTR(strElipsis) ).cx;
					}
					listEllipsis.AddTail( strModified );
					strModified.Empty();
				}
				if( bLastSlash && pRCI == pRCI_StartOfTheLastLine )
				{
					if( ! strModified.IsEmpty() )
					{
						CExtSafeString strFirstLetter = strModified.GetAt(0);
						strModified.Delete(0);
						listEllipsis.AddTail( strModified );
						listEllipsis.AddTail( strFirstLetter );
						strModified.Empty();
					}
					bLastLine = false;
					nEllipsisLength = 0;
					bAddEllipsis = false;
				}
			} // for( ; pos != NULL; )
			if( ! strModified.IsEmpty() )
			{
				listEllipsis.AddTail( strModified );
				strModified.Empty();
			}
			if( listEllipsis.GetCount() > 0 )
			{
				POSITION pos = listEllipsis.GetTailPosition();
				for( ; pos != NULL; )
					strModified += listEllipsis.GetPrev( pos );
			}
			if( strModified.IsEmpty() )
			{
				if( ( nDTF & DT_MODIFYSTRING ) != 0 )
					(*((LPTSTR)(str))) = _T('\0');
				s.Empty();
			}
			else
			{
				if( ( nDTF & DT_MODIFYSTRING ) != 0 )
				{
					int _nCountFillZeros = max( nCount, strModified.GetLength() );
					::memset( LPVOID(LPTSTR(str)), 0, sizeof(TCHAR)*_nCountFillZeros );
//					__EXT_MFC_STRNCPY( str, _nCount, LPCTSTR(strModified), strModified.GetLength() );
					::__EXT_MFC_MEMCPY( LPTSTR(str), sizeof(TCHAR)*_nCountFillZeros, LPCVOID(LPCTSTR(strModified)), sizeof(TCHAR)*strModified.GetLength() );
				}
				s = strModified;
			}
		} // if( nBackSlashCount >= 2 )
	} // if( (nDTF&(DT_PATH_ELLIPSIS|DT_WORDBREAK)) == DT_PATH_ELLIPSIS && (! bModifyStringMode) )

bool bEllipsis = ( (nDTF&(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)) != 0 ) ? true : false;
	if(	(	(nDTF&(DT_WORD_ELLIPSIS)) != 0 
		||	(nDTF&(DT_END_ELLIPSIS|DT_WORDBREAK)) == (DT_END_ELLIPSIS|DT_WORDBREAK) // DT_END_ELLIPSIS
		||	(nDTF&(DT_END_ELLIPSIS/*|DT_SINGLELINE*/)) != 0 //== DT_END_ELLIPSIS
		)
		&&	(! bModifyStringMode) 
		)
	{
		CExtSafeString strModified;
		CExtRichContentItem * pParagraphRCI = ( pRootRCI->m_listItems.GetCount() > 0 ) ? pRootRCI->m_listItems.GetHead() : NULL;
		POSITION pos; // = pParagraphRCI->m_listItems.GetTailPosition();
		bool bAddEllipsis = false;
		CExtRichContentItem * pRCI_Last = NULL;
		LONG nEllipsisLength = 0;
		CExtSafeString strElipsis = _T("...");
		bool bLastWord = true;
		bool bLastWordVisible = true;
		POSITION posLast = NULL;
		CList < CExtSafeString, CExtSafeString & > listEllipsis;
		pos = pParagraphRCI->m_listItems.GetTailPosition();
		for( ; pos != NULL; )
		{
			bool bNewWord = false;
			if(		(	( pos == posLast && (nDTF&DT_WORD_ELLIPSIS) != 0 ) 
					||	posLast == NULL 
					) 
				&&	(nDTF&DT_WORDBREAK) != 0
				)
			{
				if( posLast != NULL && (nDTF&DT_WORD_ELLIPSIS) != 0 )
					bNewWord = true;

				POSITION posCur = ( posLast != NULL ) ? posLast : pos;
				pParagraphRCI->m_listItems.GetPrev( posCur ); // it's first letter in previous word, don't need
				for( ; posCur != NULL && posLast != NULL; ) // look for first text range before previous word
				{
					POSITION posPrev = posCur;
					CExtRichContentItem * pRCI = pParagraphRCI->m_listItems.GetPrev( posCur );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );
					if( pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE )
					{
						posCur = posPrev;
						break;
					}
				} // for( ; posCur != NULL; )

				for( ; posCur != NULL; )
				{
					CExtRichContentItem * pRCI = pParagraphRCI->m_listItems.GetPrev( posCur );
					__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );

					bool bLeftInequal = false;
					switch( eLO )
					{
					case __ELOT_NORMAL:
						if( pRCI->m_rcLayout.left != rcDocRenderTarget.left )
							bLeftInequal = true;
					break;
					case __ELOT_90_CW:
						if( pRCI->m_rcLayout.top != rcDocRenderTarget.top )
							bLeftInequal = true;
					break;
					case __ELOT_180_CW:
						if( pRCI->m_rcLayout.right != rcDocRenderTarget.right )
							bLeftInequal = true;
					break;
					case __ELOT_270_CW:
						if( pRCI->m_rcLayout.bottom != rcDocRenderTarget.bottom )
							bLeftInequal = true;
					break;
					} // switch( eLO )
					if(		(	pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE 
							||	(	(nDTF&DT_END_ELLIPSIS) != 0
								&&	bLeftInequal
								)
							)
						&&	pRCI->m_strTextParsed != _T("\n") 
						)
						posLast = pParagraphRCI->m_listItems.Find( pRCI );
					else
						break;

					if( (nDTF&DT_END_ELLIPSIS) != 0 &&	pRCI->m_rcLayout.left == rcDocRenderTarget.left )
						break;
				} // for( ; posCur != NULL; )
			}

			CExtRichContentItem * pRCI = pParagraphRCI->m_listItems.GetPrev( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );

			if( pRCI->m_eType != CExtRichContentItem::__EHIT_TEXT_RANGE && (nDTF&DT_WORDBREAK) != 0 && (nDTF&(DT_WORD_ELLIPSIS|DT_END_ELLIPSIS)) == 0 )
				bLastWord = false;

			LONG nRight = 0L;
			bool bLastWordOverEllipsisCheck = false;
			switch( eLO )
			{
			case __ELOT_NORMAL:
				{
					nRight = ( rcDocRenderTarget.right - ( bLastWord ? nEllipsisLength : 0 ) );
					if( ( bLastWord ) && ( ( ( rcDocRenderTarget.Width() >= nEllipsisLength ) &&  nEllipsisLength > 0 ) || nRight < 0 ) && ( posLast == pParagraphRCI->m_listItems.Find( pRCI ) ) )
						bLastWordOverEllipsisCheck = true;
				}
			break;
			case __ELOT_90_CW:
				{
					nRight = ( rcDocRenderTarget.bottom - ( bLastWord ? nEllipsisLength : 0 ) );
					if( ( bLastWord ) && ( ( ( rcDocRenderTarget.Height() >= nEllipsisLength ) &&  nEllipsisLength > 0 ) || nRight < 0 ) && ( posLast == pParagraphRCI->m_listItems.Find( pRCI ) ) )
						bLastWordOverEllipsisCheck = true;
				}
			break;
			case __ELOT_180_CW:
				{
					nRight = ( rcDocRenderTarget.left + ( bLastWord ? nEllipsisLength : 0 ) );
					if( ( bLastWord ) && ( ( ( rcDocRenderTarget.Width() >= nEllipsisLength ) &&  nEllipsisLength > 0 ) || nRight < 0 ) && ( posLast == pParagraphRCI->m_listItems.Find( pRCI ) ) )
						bLastWordOverEllipsisCheck = true;
				}
			break;
			case __ELOT_270_CW:
				{
					nRight = ( rcDocRenderTarget.top + ( bLastWord ? nEllipsisLength : 0 ) );
					if( ( bLastWord ) && ( ( ( rcDocRenderTarget.Height() >= nEllipsisLength ) &&  nEllipsisLength > 0 ) || nRight < 0 ) && ( posLast == pParagraphRCI->m_listItems.Find( pRCI ) ) )
						bLastWordOverEllipsisCheck = true;
				}
			break;
			} // switch( eLO )
			if( bLastWordOverEllipsisCheck )
			{
				CExtSafeString _strEl = strElipsis;
				for( ; ; )
				{
					bool bInsideFreeSpace = false;
					switch( eLO )
					{
					case __ELOT_NORMAL:
					case __ELOT_180_CW:
						{
							LONG nFreeSpace = rcDocRenderTarget.Width() - nEllipsisLength;
							if( ( pRCI->m_rcLayout.right - pRCI->m_rcLayout.left ) > nFreeSpace )
								bInsideFreeSpace = true;
						}
					break;
					case __ELOT_90_CW:
					case __ELOT_270_CW:
						{
							LONG nFreeSpace = rcDocRenderTarget.Height() - nEllipsisLength;
							if( ( pRCI->m_rcLayout.bottom - pRCI->m_rcLayout.top ) > nFreeSpace )
								bInsideFreeSpace = true;
						}
					break;
					} // switch( eLO )
					if( bInsideFreeSpace )
					{
						if( _strEl.IsEmpty() )
						{
							switch( eLO )
							{
							case __ELOT_NORMAL:
								nRight = rcDocRenderTarget.right;
							break;
							case __ELOT_90_CW:
								nRight = rcDocRenderTarget.bottom;
							break;
							case __ELOT_180_CW:
								nRight = rcDocRenderTarget.left;
							break;
							case __ELOT_270_CW:
								nRight = rcDocRenderTarget.top;
							break;
							} // switch( eLO )
							break;
						}
						_strEl.Delete( _strEl.GetLength() - 1 );
						nEllipsisLength = _layout.GetTextExtent( dc.m_hDC, LPCTSTR(_strEl) ).cx;
						switch( eLO )
						{
						case __ELOT_NORMAL:
							nRight = ( rcDocRenderTarget.right - ( bLastWord ? nEllipsisLength : 0 ) );
						break;
						case __ELOT_90_CW:
							nRight = ( rcDocRenderTarget.bottom - ( bLastWord ? nEllipsisLength : 0 ) );
						break;
						case __ELOT_180_CW:
							nRight = ( rcDocRenderTarget.left + ( bLastWord ? nEllipsisLength : 0 ) );
						break;
						case __ELOT_270_CW:
							nRight = ( rcDocRenderTarget.left + ( bLastWord ? nEllipsisLength : 0 ) );
						break;
						} // switch( eLO )
					}
					else
					{
						if( _strEl.IsEmpty() )
						{
							switch( eLO )
							{
							case __ELOT_NORMAL:
								nRight = rcDocRenderTarget.right;
							break;
							case __ELOT_90_CW:
								nRight = rcDocRenderTarget.bottom;
							break;
							case __ELOT_180_CW:
								nRight = rcDocRenderTarget.left;
							break;
							case __ELOT_270_CW:
								nRight = rcDocRenderTarget.top;
							break;
							} // switch( eLO )
							nEllipsisLength = 0;
						}
						break;
					}
				}
			}

			bool bOut = false;
			switch( eLO )
			{
			case __ELOT_NORMAL:
				if(		pRCI->m_rcLayout.left > nRight
					||	pRCI->m_rcLayout.top > rcDocRenderTarget.bottom
					||	pRCI->m_rcLayout.right > nRight
					)
					bOut = true;
			break;
			case __ELOT_90_CW:
				if(		pRCI->m_rcLayout.top > nRight
					||	pRCI->m_rcLayout.right < rcDocRenderTarget.left
					||	pRCI->m_rcLayout.bottom > nRight
					)
					bOut = true;
			break;
			case __ELOT_180_CW:
				if(		pRCI->m_rcLayout.left < nRight
					||	pRCI->m_rcLayout.bottom < rcDocRenderTarget.top
					||	pRCI->m_rcLayout.right < nRight
					)
					bOut = true;
			break;
			case __ELOT_270_CW:
				if(		pRCI->m_rcLayout.top < nRight
					||	pRCI->m_rcLayout.left > rcDocRenderTarget.right
					||	pRCI->m_rcLayout.bottom < nRight
					)
					bOut = true;
			break;
			} // switch( eLO )
			if( bOut )
			{
				if( bLastWord )
				{
					bAddEllipsis = true;
					bLastWordVisible = false;
				}
			}
			else
			{
				bool bPositiveWidth = false;
				switch( eLO )
				{
				case __ELOT_NORMAL:
				case __ELOT_180_CW:
					if( pRCI->m_rcLayout.Width() > 0 )
						bPositiveWidth = true;
				break;
				case __ELOT_90_CW:
				case __ELOT_270_CW:
					if( pRCI->m_rcLayout.Height() > 0 )
						bPositiveWidth = true;
				break;
				} // switch( eLO )
				if( pRCI_Last == NULL && bAddEllipsis && posLast != pParagraphRCI->m_listItems.Find( pRCI ) && bPositiveWidth && bLastWord )
				{
					pRCI_Last = pRCI;
					nEllipsisLength = _layout.GetTextExtent( dc.m_hDC, LPCTSTR(strElipsis) ).cx;
					bLastWordVisible = false;
				}
				else
				{
					BOOL bModifyStrIsEmpty = strModified.IsEmpty();
					if( pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block )
					{
						CExtSafeString strBackSlash = _T("\n");
						if( ! strModified.IsEmpty() )
						{
							if( bAddEllipsis & ! strModified.IsEmpty() & bLastWordVisible )
								strModified += strElipsis;
							listEllipsis.AddTail( strModified );
							strModified.Empty();
							bLastWord = ( (nDTF&DT_END_ELLIPSIS) == 0 ) ? true : false;
						}
						listEllipsis.AddTail( strBackSlash );
						nEllipsisLength = 0;
						bAddEllipsis = false;
						if( (nDTF&DT_END_ELLIPSIS) == 0 )
							pRCI_Last = NULL;
						bModifyStrIsEmpty = false;
					}
					else
					{
						strModified = 
// TO-CHECK-STYLE
//							CExtSafeString( pRCI->m_styleChangingCache.m_nUnderline ? _T("&") : _T("") )
							//CExtSafeString( pRCI->m_thUnderline ? _T("&") : _T("") )
							CExtSafeString( ( (pRCI->m_strTextParsed == _T("&")) && ((nDTF&DT_NOPREFIX) == 0) ) 
							?	_T("&&") 
							:	(	CExtSafeString( pRCI->m_thUnderline ? _T("&") : _T("") ) )
								+	(	( (nDTF&DT_SINGLELINE) == 0 && pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block ) 
									?	 _T("\n") : pRCI->m_strTextParsed 
									)
								)
							+	strModified;

						if( (nDTF&DT_END_ELLIPSIS) != 0 && posLast == pParagraphRCI->m_listItems.Find( pRCI ) )
						{
							if( ! strModified.IsEmpty() )
							{
								if( bAddEllipsis & ! strModified.IsEmpty() & bLastWordVisible )
									strModified += strElipsis;
								listEllipsis.AddTail( strModified );
								strModified.Empty();
								bLastWord = false;
							}
							nEllipsisLength = 0;
							bAddEllipsis = false;
							bModifyStrIsEmpty = false;
						}
					}

					if( bModifyStrIsEmpty && pRCI->m_eType != CExtRichContentItem::__EHIT_TEXT_RANGE && (nDTF&DT_WORDBREAK) != 0 )
					{
						listEllipsis.AddTail( pRCI->m_strTextParsed );
						strModified.Empty();
					}
					if( bLastWord )
						bLastWordVisible = true;
				}
			}

			if( bNewWord )
			{
				if( bAddEllipsis & ! strModified.IsEmpty() & bLastWordVisible )
					strModified += strElipsis;
				listEllipsis.AddTail( strModified );
				nEllipsisLength = 0;
				strModified.Empty();
				bLastWord = ( (nDTF&DT_END_ELLIPSIS) == 0 ) ? true : false;
				bAddEllipsis = false;
				pRCI_Last = NULL;
				bNewWord = false;
			}
		} // for( ; pos != NULL; )

		if( ! strModified.IsEmpty() )
		{
			if( bAddEllipsis & ! strModified.IsEmpty() & bLastWordVisible )
				strModified += strElipsis;
			listEllipsis.AddTail( strModified );
			strModified.Empty();
		}

		if( ! listEllipsis.IsEmpty() )
		{
			strModified.Empty();
			POSITION posModifiedString = listEllipsis.GetTailPosition();
			for( ; posModifiedString != NULL; )
				strModified += listEllipsis.GetPrev( posModifiedString );
		}
		else if( bAddEllipsis & ! strModified.IsEmpty() & bLastWordVisible )
			strModified += strElipsis;

		if( strModified.IsEmpty() )
		{
			if( ( nDTF & DT_MODIFYSTRING ) != 0 )
				(*((LPTSTR)(str))) = _T('\0');
			s.Empty();
		}
		else
		{
			if( ( nDTF & DT_MODIFYSTRING ) != 0 )
			{
				int _nCountFillZeros = max( nCount, strModified.GetLength() );
				::memset( LPVOID(LPTSTR(str)), 0, sizeof(TCHAR)*_nCountFillZeros );
//				__EXT_MFC_STRNCPY( str, _nCountFillZeros, LPCTSTR(strModified), strModified.GetLength() );
				::__EXT_MFC_MEMCPY( LPTSTR(str), sizeof(TCHAR)*_nCountFillZeros, LPCVOID(LPCTSTR(strModified)), sizeof(TCHAR)*strModified.GetLength() );
			}
			s = strModified;
		}
	}

	if( bModifyStringMode && (! bEllipsis) )
	{
		CExtSafeString strModified;
		CExtRichContentItem * pParagraphRCI = ( pRootRCI->m_listItems.GetCount() > 0 ) ? pRootRCI->m_listItems.GetHead() : NULL;
		POSITION pos = pParagraphRCI->m_listItems.GetHeadPosition();

		for( ; pos != NULL; ) 
		{
			CExtRichContentItem * pRCI = pParagraphRCI->m_listItems.GetNext( pos );
			__EXT_DEBUG_RICH_CONTENT_ASSERT( pRCI != NULL );

			if(		(	pRCI->m_rcLayout.left < rcDocRenderTarget.right 
					||	(	pRCI->m_rcLayout.right > rcDocRenderTarget.left
						&&	pRCI->m_rcLayout.left < rcDocRenderTarget.left 
						)
					 )
				&&	pRCI->m_rcLayout.top < rcDocRenderTarget.bottom
// 				&&	(	pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_RANGE
// 					||	pRCI->m_eType == CExtRichContentItem::__EHIT_TEXT_SPACE
// 					)
				)
				strModified +=
					( (nDTF&DT_SINGLELINE)==0 && pRCI->m_strTextParsed == _T("br") && pRCI->GetDisplay() == CExtRichStyleDescription::ed_block )
					? _T("\n") : pRCI->m_strTextParsed;
		} // for( ; pos != NULL; )

		if( strModified.IsEmpty() )
		{
			if( ( nDTF & DT_MODIFYSTRING ) != 0 )
				(*((LPTSTR)(str))) = _T('\0');
			s.Empty();
		}
		else
		{
			if( ( nDTF & DT_MODIFYSTRING ) != 0 )
			{
				int _nCountFillZeros = max( nCount, strModified.GetLength() );
				::memset( LPVOID(LPTSTR(str)), 0, sizeof(TCHAR)*_nCountFillZeros );
//				__EXT_MFC_STRNCPY( str, _nCountFillZeros, LPCTSTR(strModified), strModified.GetLength() );
				::__EXT_MFC_MEMCPY( LPTSTR(str), sizeof(TCHAR)*_nCountFillZeros, LPCVOID(LPCTSTR(strModified)), sizeof(TCHAR)*strModified.GetLength() );
			}
			s = strModified;
		}
	} // if( bModifyStringMode && (! bEllipsis) )
	if( (! bPainted ) && ( nDTF & DT_CALCRECT ) == 0 && (! bModifyStringMode ) && ( (nDTF&(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)) != 0 ) )
		return    // final stage after processing ellipsises
			stat_DrawPlainText( 
				eLO, hDC, LPCTSTR(s), s.GetLength(), lpRect, nDTF & (~(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)), nExtDTF,
				hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD
				);

	if( ( ( nDTF & DT_CALCRECT ) != 0 ) && ( nExtDTF & __EXT_DT_CALC_EFFECTIVE_RECT ) != 0 )
	{
//		CExtRichStyleDescription::stat_RotateRect( INT(eLO), rcUnionLayout );
//		rcUnionLayout.OffsetRect( rcUnionLayout.TopLeft() );
		(*lpRect) = rcUnionLayout;
	}

	return nRetVal;
}

int CExtRichContentLayout::stat_DrawPlainText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPCTSTR  str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawPlainText( eLO, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawPlainText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawPlainText( eLO, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawPlainText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawPlainText( eLO, hDC, str, ( str != NULL ) ? int( _tcslen(str) ) : 0, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }

int CExtRichContentLayout::stat_DrawPlainText( HDC hDC, __EXT_MFC_SAFE_LPTSTR str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawPlainText( __ELOT_NORMAL, hDC, str, nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawPlainText( HDC hDC, __EXT_MFC_SAFE_LPCTSTR  str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawPlainText( __ELOT_NORMAL, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawPlainText( HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawPlainText( __ELOT_NORMAL, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawPlainText( HDC hDC, __EXT_MFC_SAFE_LPTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawPlainText( __ELOT_NORMAL, hDC, str, ( str != NULL ) ? int( _tcslen(str) ) : 0, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }

int CExtRichContentLayout::stat_DrawHtmlText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPTSTR str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
{
	if( hDC == NULL || str == NULL || str[0] == _T('\0') )
		return 0;
	if( nCount < 0 )
	{
		nCount = int( _tcslen(str) );
		if( nCount == 0 )
			return 0;
	}

CDC & dc = *(CDC::FromHandle(hDC));
CRect rcDocRenderTarget, rcTmpSrc;
	if( lpRect == NULL )
	{
		dc.GetClipBox( &rcDocRenderTarget );
		rcTmpSrc = rcDocRenderTarget;
		lpRect = &rcTmpSrc;
	}
	else
	{
		rcDocRenderTarget = (*lpRect);
		if( rcDocRenderTarget.Width() <= 0 )
			rcDocRenderTarget.right = rcDocRenderTarget.left + 32767;
		if( rcDocRenderTarget.Height() <= 0 )
			rcDocRenderTarget.bottom = rcDocRenderTarget.top + 32767;
	}

	if( ( nDTF & (DT_NOCLIP|DT_CALCRECT) ) == 0 )
	{
		CExtMemoryDC dcMem(
			&dc, &rcDocRenderTarget,
			CExtMemoryDC::MDCOPT_TO_MEMORY | CExtMemoryDC::MDCOPT_FILL_BITS | CExtMemoryDC::MDCOPT_RTL_COMPATIBILITY
			);
		INT nOldBkMode = dcMem.SetBkMode( dc.GetBkMode() );
		COLORREF clrOldBkColor = dcMem.SetBkColor( dc.GetBkColor() );
		COLORREF clrOldTextColor = dcMem.SetTextColor( dc.GetTextColor() );
		CFont * pOldFont = dcMem.SelectObject( CExtRichFontDescription::stat_dc_get_current_font( dc ) );
		int nRetVal = stat_DrawHtmlText( eLO, dcMem.m_hDC, str, nCount, &rcDocRenderTarget, nDTF|DT_NOCLIP, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD );
		dcMem.SelectObject( pOldFont );
		dcMem.SetTextColor( clrOldTextColor );
		dcMem.SetBkColor( clrOldBkColor );
		dcMem.SetBkMode( nOldBkMode );
		return nRetVal;
	}

	__EXT_DEBUG_RICH_CONTENT_ASSERT( g_pfnVaidateOrientation != NULL );
	eLO = g_pfnVaidateOrientation( eLO );

int nRetVal = 0;
CExtSafeString s;
LPTSTR ptrBuffer = s.GetBuffer( nCount + 2 );
	if( ptrBuffer == NULL )
		return 0;
	::memset( ptrBuffer, 0, sizeof(TCHAR) * ( nCount + 2 ) );
	__EXT_MFC_STRNCPY( ptrBuffer, nCount + 1, str, nCount );
	s.ReleaseBuffer();
CExtRichContentLayout _layout( NULL, CExtRichContentLayout::__ELFMT_HTML, eLO );
	_layout.m_bDrawTextInvocation = true;
	_layout.m_nDTF = nDTF;
	_layout.m_nExtDTF = nExtDTF;
	_layout.m_hWndOpenThemeData = hWndOpenThemeData;
	if( LPCTSTR(wstrOpenThemeDataClassList) != NULL && (*(LPCWSTR(wstrOpenThemeDataClassList))) != (L'\0') )
		_layout.m_wstrOpenThemeDataClassList = wstrOpenThemeDataClassList;
	_layout.m_nDtThemePartID = nDtThemePartID;
	_layout.m_nDtThemeStateID = nDtThemeStateID;
	_layout.m_dwOpenThemeDataFlags = dwOpenThemeDataFlags;
	_layout.m_pDTO = pDTO;
	_layout.m_pDSD = pDSD;
	_layout.Parse( LPCTSTR(s), CExtRichContentLayout::__ELFMT_HTML, nDTF, nExtDTF );

CExtRichContentItem * pRootRCI = ( _layout.m_listHeap.GetCount() > 0 ) ? _layout.m_listHeap.GetHead() : NULL;
	if( pRootRCI == NULL )
	{
		if( ( nDTF & DT_CALCRECT ) != 0 )
		{
			lpRect->right = lpRect->left;
			lpRect->bottom = lpRect->top;
		}
		return 0;
	}
	__EXT_DEBUG_RICH_CONTENT_ASSERT( pRootRCI != NULL && pRootRCI->m_eType == CExtRichContentItem::__EHIT_ROOT );
CExtRichStyleDescription styleWalk;
	styleWalk.m_fd.FromSurfaceCurrentFont( dc );
	pRootRCI->PreLayout( dc, styleWalk, rcDocRenderTarget );

CExtRichContentItem * pRCI_PreviousNewLine = NULL;
CExtRichContentItem * pRCI_Paragraph = ( pRootRCI->m_listItems.GetCount() > 0 ) ? pRootRCI->m_listItems.GetHead() : NULL;
CExtRichStyleRule & styleRuleRefFor_RCI_Paragraph = ( pRCI_Paragraph->m_eType == CExtRichContentItem::__EHIT_GENERIC_TAG ) ? pRCI_Paragraph->_GetStyleChangingCache() : pRootRCI->_GetStyleChangingCache();

	if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
		styleRuleRefFor_RCI_Paragraph.m_sizeWH.cy = rcDocRenderTarget.Height(); // for vertical alignment

	if( pRCI_Paragraph->m_listItems.GetCount() > 0 )
	{
		CExtRichContentItem * pRCI_LastItem = ( pRCI_Paragraph->m_listItems.GetCount() > 0 ) ? pRCI_Paragraph->m_listItems.GetTail() : NULL;
		POSITION posChild = pRCI_Paragraph->m_listItems.GetTailPosition();
		for( ; posChild != NULL; )
		{
			CExtRichContentItem * pRCI_Child = pRCI_Paragraph->m_listItems.GetPrev( posChild );
			bool bChildIsNewLine = ( pRCI_Child->m_strTextParsed == _T("br") && pRCI_Child->GetDisplay() == CExtRichStyleDescription::ed_block ) ? true : false;
			if( ! bChildIsNewLine )
			{
				if( pRCI_PreviousNewLine != NULL )
				{
					pRCI_Child->DoSizePreCalc( dc, rcDocRenderTarget );

					if(		( pRCI_Paragraph->m_listItems.Find( pRCI_PreviousNewLine ) != pRCI_Paragraph->m_listItems.GetHeadPosition() )
						&&	(	pRCI_Child->m_sizePreCalc.cx < rcDocRenderTarget.Width()
							||	(nDTF&DT_WORDBREAK) == 0 
	//						||	(nDTF&(DT_WORDBREAK|DT_WORD_ELLIPSIS)) == (DT_WORDBREAK)
							)
						&&	(	pRCI_Child->m_eType != CExtRichContentItem::__EHIT_TEXT_SPACE 
							||	(	(nDTF&DT_WORDBREAK) != 0 
								&&	pRCI_Child->m_eType == CExtRichContentItem::__EHIT_TEXT_SPACE
								)
							)
						&&	pRCI_PreviousNewLine != pRCI_LastItem
						)
// TO-CHECK-STYLE
//						pRCI_PreviousNewLine->m_styleChangingCache.m_nMinHeight = 0;
						pRCI_PreviousNewLine->m_thSizeWH.cy = 0;

					if(	(nDTF&DT_WORDBREAK) != 0 &&	pRCI_Child->m_eType != CExtRichContentItem::__EHIT_TEXT_SPACE )
						pRCI_PreviousNewLine = NULL;
				}
				continue;
			}
			{
				pRCI_Child->m_strTextParsed = _T("\n");
				CExtRichContentItem::_StyleRestore_t _restore( dc, pRCI_Child->GetEffectiveStyle(), INT(eLO), pRCI_Child->m_thUnderline );
// TO-CHECK-STYLE
//				pRCI_Child->m_styleChangingCache.m_nMinHeight = _restore.m_TextMetric.tmHeight;
				pRCI_Child->m_thSizeWH = _restore.m_TextMetric.tmHeight;
				pRCI_Child->m_strTextParsed = _T("br");
			}
			pRCI_PreviousNewLine = pRCI_Child;
		}
	}

	pRootRCI->ResetStyleInfo();
	_layout.DoLayout( dc, rcDocRenderTarget );

CRect rcUnionLayout = pRootRCI->m_rcLayout;
int m_nNewLineHeight = 0;

bool bModifyStringMode = ( ( nDTF & (DT_MODIFYSTRING|DT_CALCRECT|DT_NOCLIP) ) == DT_MODIFYSTRING ) ? true : false;

bool bPainted = false;
	if( ( nDTF & DT_CALCRECT ) == 0 )
	{
		if( (! bModifyStringMode) && ( (nDTF&(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)) == 0 ) )
		{
			CRect rcDefault = pRootRCI->m_rcLayout, rcAligned = pRootRCI->m_rcLayout;
			CSize sizeOffset( 0, 0 );
			switch( eLO )
			{
			case __ELOT_NORMAL:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( 0, ( rcDocRenderTarget.Height() - rcAligned.Height() ) / 2 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( 0, rcDocRenderTarget.bottom - rcAligned.bottom );
					else
						rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				if( (nDTF&DT_CENTER) != 0 )
					rcAligned.OffsetRect( ( rcDocRenderTarget.Width() - rcAligned.Width() ) / 2, 0 );
				else if( (nDTF&DT_RIGHT) != 0 )
					rcAligned.OffsetRect( rcDocRenderTarget.right - rcAligned.right, 0 );
				else
					rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
				if( rcAligned.left < rcDefault.left )
					rcAligned.OffsetRect( rcDefault.left - rcAligned.left, 0 );
				if( rcAligned.top < rcDefault.top )
					rcAligned.OffsetRect( 0, rcDefault.top - rcAligned.top );
				if( rcAligned != rcDefault )
					sizeOffset = rcAligned.TopLeft() - rcDefault.TopLeft();
			break;
			case __ELOT_90_CW:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( - ( rcDocRenderTarget.Width() - rcAligned.Width() ) / 2, 0 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
					else
						rcAligned.OffsetRect( rcDocRenderTarget.right - rcAligned.right, 0 );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				if( (nDTF&DT_CENTER) != 0 )
					rcAligned.OffsetRect( 0, ( rcDocRenderTarget.Height() - rcAligned.Height() ) / 2 );
				else if( (nDTF&DT_RIGHT) != 0 )
					rcAligned.OffsetRect( 0, rcDocRenderTarget.bottom - rcAligned.bottom );
				else
					rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
				if( rcAligned.right > rcDefault.right )
					rcAligned.OffsetRect( rcDefault.right - rcAligned.right, 0 );
				if( rcAligned.top < rcDefault.top )
					rcAligned.OffsetRect( 0, rcDefault.top - rcAligned.top );
				if( rcAligned != rcDefault )
				{
					sizeOffset.cx = rcAligned.right - rcDefault.right;
					sizeOffset.cy = rcAligned.top - rcDefault.top;
				}
			break;
			case __ELOT_180_CW:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( 0, ( rcAligned.Height() - rcDocRenderTarget.Height() ) / 2 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
					else
						rcAligned.OffsetRect( 0, rcAligned.bottom - rcDocRenderTarget.bottom );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				if( (nDTF&DT_CENTER) != 0 )
					rcAligned.OffsetRect( ( rcAligned.Width() - rcDocRenderTarget.Width() ) / 2, 0 );
				else if( (nDTF&DT_RIGHT) != 0 )
					rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
				else
					rcAligned.OffsetRect( rcAligned.right - rcDocRenderTarget.right, 0 );
				if( rcAligned.right > rcDefault.right )
					rcAligned.OffsetRect( rcDefault.right - rcAligned.right, 0 );
				if( rcAligned.bottom > rcDefault.bottom )
					rcAligned.OffsetRect( 0, rcDefault.bottom - rcAligned.bottom );
				if( rcAligned != rcDefault )
				{
					sizeOffset.cx = rcAligned.right - rcDefault.right;
					sizeOffset.cy = rcAligned.bottom - rcDefault.bottom;
				}
			break;
			case __ELOT_270_CW:
				if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				{
					if( (nDTF&DT_VCENTER) != 0 )
						rcAligned.OffsetRect( ( rcDocRenderTarget.Width() - rcAligned.Width() ) / 2, 0 );
					else if( (nDTF&DT_BOTTOM) != 0 )
						rcAligned.OffsetRect( rcDocRenderTarget.right - rcAligned.right, 0 );
					else
						rcAligned.OffsetRect( rcDocRenderTarget.left - rcAligned.left, 0 );
				} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
				if( (nDTF&DT_CENTER) != 0 )
					rcAligned.OffsetRect( 0, - ( rcDocRenderTarget.Height() - rcAligned.Height() ) / 2 );
				else if( (nDTF&DT_RIGHT) != 0 )
					rcAligned.OffsetRect( 0, rcDocRenderTarget.top - rcAligned.top );
				else
					rcAligned.OffsetRect( 0, rcDocRenderTarget.bottom - rcAligned.bottom );
				if( rcAligned.left < rcDefault.left )
					rcAligned.OffsetRect( rcDefault.left - rcAligned.left, 0 );
				if( rcAligned.bottom > rcDefault.bottom )
					rcAligned.OffsetRect( 0, rcDefault.bottom - rcAligned.bottom );
				if( rcAligned != rcDefault )
				{
					sizeOffset.cx = rcAligned.left - rcDefault.left;
					sizeOffset.cy = rcAligned.bottom - rcDefault.bottom;
				}
			break;
			} // switch( eLO )
			pRootRCI->OffsetSubTree( sizeOffset );
			bPainted = true;
			_layout.DoPaint( dc, rcDocRenderTarget, CPoint(0,0) );
		}
	} // if( ( nDTF & DT_CALCRECT ) == 0 )

	if( ( nDTF & DT_CALCRECT ) != 0 )
	{
		lpRect->left = rcUnionLayout.left;
		lpRect->top = rcUnionLayout.top;
		lpRect->right = rcUnionLayout.right;
		lpRect->bottom = rcUnionLayout.bottom; // + m_nNewLineHeight;
		if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
		{
			if( ( nDTF & ( DT_VCENTER|DT_BOTTOM ) ) != 0 )
				lpRect->top = rcDocRenderTarget.top;
		} // if( ( nDTF&DT_SINGLELINE ) != 0 || (nExtDTF&__EXT_DT_MULTI_LINE_VERT_ALIGNMENT ) != 0 )
		if( ( nDTF & ( DT_CENTER|DT_RIGHT ) ) != 0 )
		{
			LONG nShift = lpRect->left - rcDocRenderTarget.left;
			lpRect->left -= nShift;
			lpRect->right -= nShift;
		}
	} // if( ( nDTF & DT_CALCRECT ) != 0 )

	nRetVal = rcUnionLayout.Height(); // + m_nNewLineHeight;
	if( ( nDTF & DT_VCENTER ) != 0 || ( nDTF & DT_BOTTOM ) != 0 )
		nRetVal = rcUnionLayout.bottom + m_nNewLineHeight - rcDocRenderTarget.top;


	if( ( ( nDTF & DT_CALCRECT ) != 0 ) && ( nExtDTF & __EXT_DT_CALC_EFFECTIVE_RECT ) != 0 )
	{
//		CExtRichStyleDescription::stat_RotateRect( INT(eLO), rcUnionLayout );
//		rcUnionLayout.OffsetRect( rcUnionLayout.TopLeft() );
		(*lpRect) = rcUnionLayout;
	}

	if( (! bPainted ) && ( nDTF & DT_CALCRECT ) == 0 && (! bModifyStringMode ) /*&& ( (nDTF&(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)) != 0 )*/ )
		return    // final stage after processing ellipsises
			stat_DrawHtmlText( 
				eLO, hDC, LPCTSTR(s), s.GetLength(), lpRect, nDTF & (~(DT_END_ELLIPSIS|DT_WORD_ELLIPSIS|DT_PATH_ELLIPSIS)), nExtDTF,
				hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD
				);

	return nRetVal;
}

int CExtRichContentLayout::stat_DrawHtmlText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPCTSTR  str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawHtmlText( eLO, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawHtmlText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawHtmlText( eLO, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawHtmlText( CExtRichContentLayout::e_layout_orientation_t eLO, HDC hDC, __EXT_MFC_SAFE_LPTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawHtmlText( eLO, hDC, str, ( str != NULL ) ? int( _tcslen(str) ) : 0, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }

int CExtRichContentLayout::stat_DrawHtmlText( HDC hDC, __EXT_MFC_SAFE_LPTSTR str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawHtmlText( __ELOT_NORMAL, hDC, str, nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawHtmlText( HDC hDC, __EXT_MFC_SAFE_LPCTSTR  str, int nCount, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawHtmlText( __ELOT_NORMAL, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), nCount, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawHtmlText( HDC hDC, __EXT_MFC_SAFE_LPCTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawHtmlText( __ELOT_NORMAL, hDC, __EXT_MFC_SAFE_LPTSTR(LPTSTR(LPCTSTR(str))), lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }
int CExtRichContentLayout::stat_DrawHtmlText( HDC hDC, __EXT_MFC_SAFE_LPTSTR str, LPRECT lpRect, UINT nDTF /*= 0*/, UINT nExtDTF /*= 0*/, HWND hWndOpenThemeData /*= NULL*/, LPCVOID wstrOpenThemeDataClassList /*= NULL*/, DWORD dwOpenThemeDataFlags /*= 0*/, int nDtThemePartID /*= 0*/, int nDtThemeStateID /*= 0*/, CExtUxTheme::__EXT_UX_DTTOPTS * pDTO /*= NULL*/, CExtRichContentLayout::DRAWSTATE_data_t * pDSD /*= NULL*/ )
	{ return stat_DrawHtmlText( __ELOT_NORMAL, hDC, str, ( str != NULL ) ? int( _tcslen(str) ) : 0, lpRect, nDTF, nExtDTF, hWndOpenThemeData, wstrOpenThemeDataClassList, dwOpenThemeDataFlags, nDtThemePartID, nDtThemeStateID, pDTO, pDSD ); }

/////////////////////////////////////////////////////////////////////////////
/// CExtRichDocObjectBase

IMPLEMENT_SERIAL( CExtRichDocObjectBase, CObject, VERSIONABLE_SCHEMA|1 );

CExtRichDocObjectBase::CExtRichDocObjectBase(
	__EXT_MFC_SAFE_LPCTSTR strName // = NULL
	)
	: m_strName( ( LPCTSTR(strName) != NULL ) ? LPCTSTR(strName) : _T("") )
{
	m_strName.MakeLower();
	m_strName.TrimLeft( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
	m_strName.TrimRight( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
}

CExtRichDocObjectBase::~CExtRichDocObjectBase()
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ObjectGetCount() == 0 );
}

#ifdef _DEBUG
void CExtRichDocObjectBase::AssertValid() const
{
	CObject::AssertValid();
}
void CExtRichDocObjectBase::Dump( CDumpContext & dc ) const
{
	CObject::Dump( dc );
}
#endif // _DEBUG

void CExtRichDocObjectBase::stat_SerializeOb( CArchive & ar, CExtRichDocObjectBase ** ppRCO )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ppRCO != NULL );
	if( ar.IsStoring() )
	{
		CExtRichDocObjectBase * pRCO = (*ppRCO);
		__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
		CRuntimeClass * pRTC = pRCO->GetRuntimeClass();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRTC != NULL );
		ar.WriteClass( pRTC );
		pRCO->Serialize( ar );
	} // if( ar.IsStoring() )
	else
	{
		(*ppRCO) = NULL;
		CRuntimeClass * pRTC = ar.ReadClass();
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pRTC != NULL );
		CObject * pObj = pRTC->CreateObject();
		__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pObj );
		CExtRichDocObjectBase * pRCO = DYNAMIC_DOWNCAST( CExtRichDocObjectBase, pObj );
		if( pRCO == NULL )
		{
			__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
			delete pObj;
			::AfxThrowUserException();
		}
		(*ppRCO) = pRCO;
		pRCO->Serialize( ar );
		__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
	} // else from if( ar.IsStoring() )
}

void CExtRichDocObjectBase::Serialize( CArchive & ar )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
DWORD dwFlags = 0, dwObjIndex = 0, dwObjCount = 0;
bool bContainerMode = IsObjectContainer();
	if( ar.IsStoring() )
	{
		dwObjCount = DWORD( ObjectGetCount() );
		ar << m_strName;
		if( bContainerMode && dwObjCount > 0 )
			dwFlags |= 0x00000001;
		ar << dwFlags;
		if( bContainerMode && dwObjCount > 0 )
		{
			ar << dwObjCount;
			POSITION pos = ObjectGetStartPosition();
			for( dwObjIndex = 0; dwObjIndex < dwObjCount; dwObjIndex ++ )
			{
				__EXT_DEBUG_RICH_CONTENT_ASSERT( pos != NULL );
				CExtRichDocObjectBase * pRCO = ObjectGetNext( pos );
				__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
				stat_SerializeOb( ar, &pRCO );
			}
		}
	} // if( ar.IsStoring() )
	else
	{
		ObjectRemoveAll();
		ar >> m_strName;
		ar >> dwFlags;
		if( ( dwFlags & 0x00000001 ) != 0 )
		{
			__EXT_DEBUG_RICH_CONTENT_ASSERT( bContainerMode );
			ar >> dwObjCount;
			for( dwObjIndex = 0; dwObjIndex < dwObjCount; dwObjIndex ++ )
			{
				CExtRichDocObjectBase * pRCO = NULL;
				stat_SerializeOb( ar, &pRCO );
				__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
				__EXT_DEBUG_RICH_CONTENT_VERIFY( ObjectAdd( pRCO, false ) );
			}
			__EXT_DEBUG_RICH_CONTENT_ASSERT( dwObjCount == DWORD( ObjectGetCount() ) );
		}
		__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	} // else from if( ar.IsStoring() )
}

__EXT_MFC_SAFE_LPCTSTR CExtRichDocObjectBase::GetName() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return ( ! m_strName.IsEmpty() ) ? LPCTSTR( m_strName ) : _T("");
}

bool CExtRichDocObjectBase::IsObjectContainer() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return false;
}

bool CExtRichDocObjectBase::IsImage() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return false;
}

bool CExtRichDocObjectBase::IsLayoutKeeper() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return false;
}

INT CExtRichDocObjectBase::ObjectGetCount() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return 0;
}

CExtRichDocObjectBase * CExtRichDocObjectBase::ObjectByName( __EXT_MFC_SAFE_LPCTSTR strName )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	strName;
	return NULL;
}

bool CExtRichDocObjectBase::ObjectAdd(
	CExtRichDocObjectBase * pRCO,
	bool bReplace // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	pRCO;
	bReplace;
	return false;
}

bool CExtRichDocObjectBase::ObjectRemove( __EXT_MFC_SAFE_LPCTSTR strName )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	strName;
	return false;
}

bool CExtRichDocObjectBase::ObjectRemove( CExtRichDocObjectBase * pRCO )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	if( pRCO == NULL )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return false;
	}
LPCTSTR strName = LPCTSTR( pRCO->GetName() );
	return ObjectRemove( strName );
}

INT CExtRichDocObjectBase::ObjectRemoveAll()
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return 0;
}

POSITION CExtRichDocObjectBase::ObjectGetStartPosition() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return NULL;
}

CExtRichDocObjectBase * CExtRichDocObjectBase::ObjectGetNext( POSITION & pos )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	pos = NULL;
	return NULL;
}

void CExtRichDocObjectBase::FillObjectArray( CArray < CExtRichDocObjectBase *, CExtRichDocObjectBase * > & _arr )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	_arr.RemoveAll();
INT nIndex, nCount = ObjectGetCount();
	if( nCount == 0 )
		return;
	_arr.SetSize( nCount );
POSITION pos = ObjectGetStartPosition();
	for( nIndex = 0; pos != NULL; nIndex ++ )
	{
		CExtRichDocObjectBase * pRCO = ObjectGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
		_arr.SetAt( nIndex, pRCO );
	}
}

void CExtRichDocObjectBase::FillObjectArray( CArray < const CExtRichDocObjectBase *, const CExtRichDocObjectBase * > & _arr ) const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	_arr.RemoveAll();
INT nIndex, nCount = ObjectGetCount();
	if( nCount == 0 )
		return;
	_arr.SetSize( nCount );
POSITION pos = ObjectGetStartPosition();
	for( nIndex = 0; pos != NULL; nIndex ++ )
	{
		const CExtRichDocObjectBase * pRCO = ObjectGetNext( pos );
		__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
		_arr.SetAt( nIndex, pRCO );
	}
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichDocObjectContainer

IMPLEMENT_SERIAL( CExtRichDocObjectContainer, CExtRichDocObjectBase, VERSIONABLE_SCHEMA|1 );

CExtRichDocObjectContainer::CExtRichDocObjectContainer(
	__EXT_MFC_SAFE_LPCTSTR strName // = NULL
	)
	: CExtRichDocObjectBase( LPCTSTR(strName) )
{
}

CExtRichDocObjectContainer::~CExtRichDocObjectContainer()
{
	ObjectRemoveAll();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ObjectGetCount() == 0 );
}

#ifdef _DEBUG
void CExtRichDocObjectContainer::AssertValid() const
{
	CExtRichDocObjectBase::AssertValid();
}
void CExtRichDocObjectContainer::Dump( CDumpContext & dc ) const
{
	CExtRichDocObjectBase::Dump( dc );
}
#endif // _DEBUG

bool CExtRichDocObjectContainer::IsObjectContainer() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return true;
}

POSITION CExtRichDocObjectContainer::ObjectGetStartPosition() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
POSITION pos = m_mapObjects.GetStartPosition();
	return pos;
}

CExtRichDocObjectBase * CExtRichDocObjectContainer::ObjectGetNext( POSITION & pos )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	if( pos == NULL )
		return NULL;
CExtSafeString strName;
LPVOID ptr = NULL;
	m_mapObjects.GetNextAssoc( pos, strName, ptr );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ptr != NULL );
CExtRichDocObjectBase * pRCO = (CExtRichDocObjectBase*)ptr;
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( strName == LPCTSTR( pRCO->GetName() ) );
	return pRCO;
}

INT CExtRichDocObjectContainer::ObjectGetCount() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
INT nCount = INT( m_mapObjects.GetCount() );
	return nCount;
}

CExtRichDocObjectBase * CExtRichDocObjectContainer::ObjectByName( __EXT_MFC_SAFE_LPCTSTR strName )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	if( LPCTSTR(strName) == NULL )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return NULL;
	}
CExtSafeString _strName = LPCTSTR(strName);
	_strName.MakeLower();
	_strName.TrimLeft( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
	_strName.TrimRight( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
	if( _strName.IsEmpty() )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return NULL;
	}
LPVOID ptr = NULL;
	if( ! m_mapObjects.Lookup( LPCTSTR(_strName), ptr ) )
		return NULL;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ptr != NULL );
	return ((CExtRichDocObjectBase*)ptr);
}

bool CExtRichDocObjectContainer::ObjectAdd(
	CExtRichDocObjectBase * pRCO,
	bool bReplace // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	if( pRCO == NULL )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return false;
	}
CExtSafeString _strName = LPCTSTR( pRCO->GetName() );
	_strName.MakeLower();
	_strName.TrimLeft( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
	_strName.TrimRight( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
	if( _strName.IsEmpty() )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return false;
	}
	if( bReplace )
		ObjectRemove( LPCTSTR(_strName) );
	else if( ObjectByName( LPCTSTR(_strName) ) != NULL )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return false;
	}
	m_mapObjects.SetAt( _strName, LPVOID(pRCO) );
	return true;
}

bool CExtRichDocObjectContainer::ObjectRemove( __EXT_MFC_SAFE_LPCTSTR strName )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	if( LPCTSTR(strName) == NULL )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return false;
	}
CExtSafeString _strName = LPCTSTR(strName);
	_strName.MakeLower();
	_strName.TrimLeft( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
	_strName.TrimRight( __EXT_RICH_CONTENT_TRIM_OBJECT_NAME );
	if( _strName.IsEmpty() )
	{
		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return false;
	}
CExtRichDocObjectBase * pRCO = ObjectByName( LPCTSTR(_strName) );
	if( pRCO == NULL )
	{
//		__EXT_DEBUG_RICH_CONTENT_ASSERT( FALSE );
		return false;
	}
	m_mapObjects.RemoveKey( LPCTSTR(_strName) );
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
	delete pRCO;
	return true;
}

INT CExtRichDocObjectContainer::ObjectRemoveAll()
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
INT nRetVal = INT( m_mapObjects.GetCount() );
POSITION pos = m_mapObjects.GetStartPosition();
	for( ; pos != NULL; )
	{
		CExtSafeString strName;
		LPVOID ptr = NULL;
		m_mapObjects.GetNextAssoc( pos, strName, ptr );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( ptr != NULL );
		CExtRichDocObjectBase * pRCO = (CExtRichDocObjectBase*)ptr;
		__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( pRCO );
		__EXT_DEBUG_RICH_CONTENT_ASSERT( strName == LPCTSTR( pRCO->GetName() ) );
		delete pRCO;
	}
	m_mapObjects.RemoveAll();
	return nRetVal;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichDocObjectContainerGlobal

IMPLEMENT_SERIAL( CExtRichDocObjectContainerGlobal, CExtRichDocObjectContainer, VERSIONABLE_SCHEMA|1 );

CExtRichDocObjectContainerGlobal::CExtRichDocObjectContainerGlobal(
	__EXT_MFC_SAFE_LPCTSTR strName // = NULL
	)
	: CExtRichDocObjectContainer( LPCTSTR(strName) )
{
USES_CONVERSION;
CExtResourceManager::CExtResourceMemoryBuffer _mb;
	__EXT_DEBUG_RICH_CONTENT_VERIFY( g_ResourceManager->LoadResourceBuffer( _mb, _T("CSS"), IDR_EXT_DEFAULT_CSS ) );
DWORD dwSize = _mb.GetSize();
CHAR * pChar = new CHAR[ dwSize + 1 ];
	::memset( LPVOID(pChar), 0, dwSize + 1 );
	::memcpy( LPVOID(pChar), LPVOID( _mb.GetBuffer() ), dwSize );
CExtSafeString strDefaultCSS = LPCTSTR( A2CT(pChar) );
	delete [] pChar;
CExtRichDocObjectLayoutKeeper * pObjCSS = new CExtRichDocObjectLayoutKeeper( __EXT_RICH_CONTENT_DEFAULT_CSS_DOC_OBJECT_NAME );
	__EXT_DEBUG_RICH_CONTENT_VERIFY( ObjectAdd( pObjCSS, false ) );
//	__EXT_DEBUG_RICH_CONTENT_VERIFY( pObjCSS->LayoutGet().ParseCSS( strDefaultCSS ) );
	pObjCSS->SourceTextSet( LPCTSTR(strDefaultCSS), CExtRichContentLayout::__ELFMT_CSS );
}

CExtRichDocObjectContainerGlobal::~CExtRichDocObjectContainerGlobal()
{
	ObjectRemoveAll();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ObjectGetCount() == 0 );
}

#ifdef _DEBUG
void CExtRichDocObjectContainerGlobal::AssertValid() const
{
	CExtRichDocObjectContainer::AssertValid();
}
void CExtRichDocObjectContainerGlobal::Dump( CDumpContext & dc ) const
{
	CExtRichDocObjectContainer::Dump( dc );
}
#endif // _DEBUG

/////////////////////////////////////////////////////////////////////////////
/// CExtRichDocObjectImage

IMPLEMENT_SERIAL( CExtRichDocObjectImage, CExtRichDocObjectBase, VERSIONABLE_SCHEMA|1 );

CExtRichDocObjectImage::CExtRichDocObjectImage(
	__EXT_MFC_SAFE_LPCTSTR strName // = NULL
	)
	: CExtRichDocObjectBase( LPCTSTR(strName) )
	, m_nTransparency( BYTE(255) )
	, m_pBMP( NULL )
{
	m_pBMP = new CExtBitmap;
}

CExtRichDocObjectImage::~CExtRichDocObjectImage()
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ObjectGetCount() == 0 );
	if( m_pBMP )
	{
		delete m_pBMP;
		m_pBMP = NULL;
	}
}

#ifdef _DEBUG
void CExtRichDocObjectImage::AssertValid() const
{
	CExtRichDocObjectBase::AssertValid();
}
void CExtRichDocObjectImage::Dump( CDumpContext & dc ) const
{
	CExtRichDocObjectBase::Dump( dc );
}
#endif // _DEBUG

bool CExtRichDocObjectImage::IsImage() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return true;
}

void CExtRichDocObjectImage::Serialize( CArchive & ar )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	CExtRichDocObjectBase::Serialize( ar );
	ImageGet().SerializeUnpacked( ar );
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
}

CExtBitmap & CExtRichDocObjectImage::ImageGet()
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	__EXT_DEBUG_RICH_CONTENT_ASSERT( m_pBMP != NULL );
	return (*m_pBMP);
}

BYTE CExtRichDocObjectImage::TransparencyGet() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return m_nTransparency;
}

void CExtRichDocObjectImage::TransparencySet( BYTE nTransparency )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	m_nTransparency = nTransparency;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichDocObjectLayoutKeeper

IMPLEMENT_SERIAL( CExtRichDocObjectLayoutKeeper, CExtRichDocObjectBase, VERSIONABLE_SCHEMA|1 );

CExtRichDocObjectLayoutKeeper::CExtRichDocObjectLayoutKeeper(
	__EXT_MFC_SAFE_LPCTSTR strName // = NULL
	)
	: CExtRichDocObjectBase( LPCTSTR(strName) )
{
}

CExtRichDocObjectLayoutKeeper::~CExtRichDocObjectLayoutKeeper()
{
	m_layout.Empty( true );
	m_strSourceText.Empty();
	__EXT_DEBUG_RICH_CONTENT_ASSERT( ObjectGetCount() == 0 );
}

#ifdef _DEBUG
void CExtRichDocObjectLayoutKeeper::AssertValid() const
{
	CExtRichDocObjectBase::AssertValid();
}
void CExtRichDocObjectLayoutKeeper::Dump( CDumpContext & dc ) const
{
	CExtRichDocObjectBase::Dump( dc );
}
#endif // _DEBUG

bool CExtRichDocObjectLayoutKeeper::IsLayoutKeeper() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return true;
}

void CExtRichDocObjectLayoutKeeper::Serialize( CArchive & ar )
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	if( ! ar.IsStoring() )
	{
		m_layout.Empty( true );
		m_strSourceText.Empty();
	}
	CExtRichDocObjectBase::Serialize( ar );
DWORD dwLFMT = DWORD( CExtRichContentLayout::__ELFMT_UNKNOWN );
	if( ar.IsStoring() )
	{
		ar << m_strSourceText;
		dwLFMT = DWORD( m_layout.m_eLFMT );
		ar << dwLFMT;
	} // if( ar.IsStoring() )
	else
	{
		ar >> m_strSourceText;
		ar >> dwLFMT;
		CExtRichContentLayout::e_layout_format_t _eLFMT = (CExtRichContentLayout::e_layout_format_t)dwLFMT;
		m_layout.Parse( LPCTSTR(m_strSourceText), _eLFMT );
	} // else from if( ar.IsStoring() )
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
}

__EXT_MFC_SAFE_LPCTSTR CExtRichDocObjectLayoutKeeper::SourceTextGet() const
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return LPCTSTR( m_strSourceText );
}

bool CExtRichDocObjectLayoutKeeper::SourceTextSet(
	__EXT_MFC_SAFE_LPCTSTR strSourceText,
	CExtRichContentLayout::e_layout_format_t _eLFMT,
	UINT nDTF, // = 0 // DT_*** flags from Win32's DrawText() API (used mainly by plain text format)
	UINT nExtDTF, // = 0 // __EXT_DT_*** flags (Prof-UIS)
	bool bEmptyLocalObjectContainer // = true
	)
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	m_layout.Empty( bEmptyLocalObjectContainer );
	m_strSourceText.Empty();
	if( LPCTSTR(strSourceText) != NULL && _tcslen( LPCTSTR(strSourceText) ) > 0 )
	{
		m_strSourceText = LPCTSTR(strSourceText);
		return m_layout.Parse( LPCTSTR(m_strSourceText), _eLFMT, nDTF, nExtDTF, bEmptyLocalObjectContainer );
	}
	m_layout.m_eLFMT = _eLFMT;
	return true;
}

CExtRichContentLayout & CExtRichDocObjectLayoutKeeper::LayoutGet()
{
	__EXT_DEBUG_RICH_CONTENT_ASSERT_VALID( this );
	return m_layout;
}

/////////////////////////////////////////////////////////////////////////////
/// CExtRichBidiAlgorithm
/// Based on the sample project written by Asmus Freytag and distributed under the Terms of Use in http://www.unicode.org/copyright.html.
/// Sample Implementation of the Unicode Bidirectional Algorithm as it was revised by Revision 5 of the Uniode Technical Report # 9 (1999-8-17).

bool CExtRichBidiAlgorithm::BidiString( CExtSafeString & str, bool bSingleLine /*= true*/, int baselevel /*= 1*/, int fMirror /*= 1*/, int nLowerUpperMode /*= -1*/, bool bClean /*= true*/ )
{
INT cch = str.GetLength();
	if( cch == 0 )
		return true;
	if( ! bSingleLine )
	{
		CExtSafeString strLine, strOut;
		bool bRetVal = true;
		LPCTSTR ptr = LPCTSTR(str);
		for( ; (*ptr) != _T('\0'); )
		{
			if( (*ptr) == _T('\n') || ( (*ptr) == _T('\r') && (*(ptr+1)) == _T('\n') ) )
			{
				if( ! BidiString( strLine, true, baselevel, fMirror, nLowerUpperMode, bClean ) )
					bRetVal = false;
				strOut += strLine;
				strOut += (*ptr);
				if(		( (*ptr) == _T('\r') && (*(ptr+1)) == _T('\r') )
					||	( (*ptr) == _T('\n') && (*(ptr+1)) == _T('\n') )
					)
				{
					strOut += (*ptr);
					ptr ++;
				}
				strLine.Empty();
				ptr ++;
				continue;
			}
			strLine += (*ptr);
			ptr ++;
		}
		if( ! strLine.IsEmpty() )
		{
			if( ! BidiString( strLine, true, baselevel, fMirror, nLowerUpperMode, bClean ) )
				bRetVal = false;
			strOut += strLine;
		}
		str = strOut;
		return bRetVal;
	} // if( ! bSingleLine )
	str.Replace( _T("\n"), _T("") );
	str.Replace( _T("\r"), _T("") );
	cch = str.GetLength();
	if( cch == 0 )
		return true;

#if ( defined _DEBUG )
static int check = VerifyTables();
check;
#endif // ( defined _DEBUG )
TCHAR * pszInput = NULL;
int * types = NULL, * levels = NULL;
bool bRetVal = false;
	try
	{
		pszInput = new TCHAR[ cch + 2 ];
		::memset( pszInput, 0, sizeof(TCHAR) * ( cch + 2 ) );
		__EXT_MFC_STRCPY( pszInput, cch + 1, LPCTSTR(str) );
		types = new int[ cch + 2 ];
		::memset( types, 0, sizeof(int) * ( cch + 2 ) );
		levels = new int[ cch + 2 ];
		::memset( levels, 0, sizeof(int) * ( cch + 2 ) );
		classify( nLowerUpperMode, LPCTSTR(pszInput), types, cch );
		cch = resolveParagraphs( types, cch );
		resolveExplicit( baselevel, N, types, levels, cch );
		resolveWeak( baselevel, types, levels, cch );
		resolveNeutrals( baselevel,types, levels, cch );
		resolveImplicit( types, levels, cch );
		classify( nLowerUpperMode, LPCTSTR(pszInput), types, cch, true );
		BidiLines( baselevel, pszInput, types, levels, cch, fMirror );
		if( bClean )
			cch = clean( LPTSTR(pszInput), cch );
		if( cch > 0 )
		{
			str.Empty();
			LPTSTR pBuffer = str.GetBuffer( cch + 2 );
			if( pBuffer != NULL )
			{
				::memset( pBuffer, 0, sizeof(TCHAR) * ( cch + 2 ) );
				__EXT_MFC_STRNCPY( pBuffer, cch + 1, LPTSTR(pszInput), cch );
				str.ReleaseBuffer();
				bRetVal = true;
			}
		}
	}
	catch( CException * pException )
	{
		pException->Delete();
	}
	catch( ... )
	{
	}
	if( pszInput != NULL )
		delete [] pszInput;
	if( types != NULL )
		delete [] types;
	if( levels != NULL )
		delete [] levels;
	return bRetVal;
}

// === BIDI INTERFACE FUNCTIONS ========================================

/*------------------------------------------------------------------------
	Function: BidiLines
	Implements the Line-by-Line phases of the Unicode Bidi Algorithm
	Input:	 Count of characters
			 Flag (Mirror output if true)
			 Optional: Array of flags, true for last character on each line 
	Inp/Out: Input text
			 Array of character directions
			 Array of levels
	Note:	 See resolveLines for information how this function deals with line breaks
------------------------------------------------------------------------*/
void CExtRichBidiAlgorithm::BidiLines( int baselevel, __EXT_MFC_SAFE_LPTSTR pszLine, int * pclsLine, int * plevelLine, int cchPara, int fMirror, bool * pbrk)
{
LPTSTR _pszLine = LPTSTR(pszLine);
int cchLine = 0;
	do
	{
		// break lines at LS
		cchLine = resolveLines( _pszLine, pbrk, cchPara );
		// resolve whitespace
		resolveWhitespace( baselevel, pclsLine, plevelLine, cchLine );
		if( fMirror )
			mirror( _pszLine, plevelLine, cchLine );
		// reorder each line in place
		reorder( baselevel, _pszLine, plevelLine, cchLine );

		_pszLine += cchLine;
		plevelLine += cchLine;
		pbrk += pbrk ? cchLine : 0;
		pclsLine += cchLine;
		cchPara -= cchLine;
	} while (cchPara);
}

/*------------------------------------------------------------------------
	Function: BidiParagraph
	Implements the per paragraph phases of the Unicode Bidi Algorithm
	Input:   Count of characters
	Inp/Out: Input text
			 Base paragraph level (negative value on input means implicit)
			 Array of character directions
			 Array of levels
	Returns: The number of input characters processed for this paragraph
	Note:	 This function is not called by the demo code in this file, but 
			 provided here for completeness. It has been tested by being
			 used in the verification code.
------------------------------------------------------------------------*/
int CExtRichBidiAlgorithm::BidiParagraph( int & baselevel,  int * types, int * levels, int cch )
{
	// set baselevel
	if( baselevel <  0)
		baselevel = baseLevel( types, cch );
	// change B into BN and return length including
int cchPara = resolveParagraphs(types, cch );
	// resolve explicit
	resolveExplicit( baselevel, N, types, levels, cchPara );
	// resolve weak
	resolveWeak( baselevel, types, levels, cchPara );
	// resolve neutrals
	resolveNeutrals( baselevel,types, levels, cchPara );
	// resolveImplicit
	resolveImplicit( types, levels, cchPara );
	// return the part of the input processed so far
	return cchPara;
}

// === HELPER FUNCTIONS AND DECLARATIONS =================================

#define odd(x) ((x) & 1)

const int CExtRichBidiAlgorithm::chLRM  = 4;
const int CExtRichBidiAlgorithm::chRLM  = 5;
const int CExtRichBidiAlgorithm::chLS   = 0x15;
const int CExtRichBidiAlgorithm::chRLO  = '}';
const int CExtRichBidiAlgorithm::chLRO  = '{';
const int CExtRichBidiAlgorithm::chRLE  = ']';
const int CExtRichBidiAlgorithm::chLRE  = '[';
const int CExtRichBidiAlgorithm::chPDF  = '^';
const int CExtRichBidiAlgorithm::chBN	= '~';

int CExtRichBidiAlgorithm::TypesFromChar[]  =
{
//0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
 BN, BN, BN, BN,  L,  R, BN, BN, BN,  S,  B,  S, WS,  B, BN, BN, /*00-0F*/
LRO,LRE,PDF,RLO,RLE, WS,  L,  R, BN, BN, BN, BN,  B,  B,  B,  S, /*10-1F*/
 WS, ON, ON, ET, ET, ET, ON, ON, ON, ON, ON, ES, CS, ES, CS, ES, /*20-2F*/
 EN, EN, EN, EN, EN, EN, AN, AN, AN, AN, CS, ON, ON, ON, ON, ON, /*30-3F*/
 ON, AL, AL, AL, AL, AL, AL,  R,  R,  R,  R,  R,  R,  R,  R,  R, /*40-4F*/
  R,  R,  R,  R,  R,  R,  R,  R,  R,  R,  R,LRE, ON,RLE,PDF,  S, /*50-5F*/
NSM,  L,  L,  L,  L,  L,  L,  L,  L,  L,  L,  L,  L,  L,  L,  L, /*60-6F*/
  L,  L,  L,  L,  L,  L,  L,  L,  L,  L,  L,LRO,  B,RLO, BN, ON, /*70-7F*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*80-8F*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*90-9F*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*A0-AF*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*B0-BF*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*C0-CF*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*D0-DF*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*E0-EF*/
 ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, ET, /*F0-FF*/
};

/***************************************
	Reverse, human readable reference:
	LRM:	0x4
	RLM:	0x5
	  L:	0x16,a-z
	LRE:	0x11,[
	LRO:	0x10,{
	  R:	0x17,G-Z
	 AL:	A-F
	RLE:	0x14,]
	RLO:	0x13,}
	PDF:	0x12,^
	 EN:	0-5
	 ES:	/,+,[hyphen]
	 ET:	#,$,%
	 AN:	6-9
	 CS:	[comma],.,:
	NSM:	`
	 BN:	0x0-0x8,0xe,0xf,0x18-0x1b,~
	  B:	0xa,0xd,0x1c-0x1e,|
	  S:	0x9,0xb,0x1f,_
	 WS:	0xc,0x15,[space]
	 ON:	!,",&,',(,),*,;,<,=,>,?,@,\,0x7f
****************************************/

// WS, LS and S are not explicitly needed except for L1. Therefore this
// table conflates ON, S, WS, and LS to N, all others unchanged
int CExtRichBidiAlgorithm::NTypes[] = {
	N,		// ON,
	L,		// L,
	R,		// R,
	AN, 	// AN,
	EN, 	// EN,
	AL, 	// AL
	NSM,	// NSM
	CS, 	// CS
	ES, 	// ES
	ET, 	// ET
	BN, 	// BN
	N,		// S
	N,		// WS
	B,		// B
	RLO,	// RLO
	RLE,	// RLE
	LRO,	// LRO
	LRE,	// LRE
	PDF,	// PDF
	ON,		// LS
};

int CExtRichBidiAlgorithm::ClassFromChN( __EXT_MFC_SAFE_TCHAR ch, int nLowerUpperMode )
{
TBYTE _ch = TBYTE(ch);
	if( nLowerUpperMode != 0 && _istalpha( _ch ) )
	{
		TCHAR _modified[2] = { _ch, _T('\0') };
		if( nLowerUpperMode < 0 )
			__EXT_MFC_STRLWR( _modified, 2 );
		else
			__EXT_MFC_STRUPR( _modified, 2 );
		_ch = _modified[ 0 ];
	}
//	__EXT_DEBUG_RICH_CONTENT_ASSERT( UINT(_ch) < UINT(0x7f) && UINT(_ch) >= 0 );
//	return NTypes[ TypesFromChar[ _ch & 0x7f ] ];
INT aCh = INT(_ch);
	if( aCh > 256 )
		return BN;
	if( aCh < 0 )
		aCh = 256 + aCh;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( INT(0) <= aCh && aCh <= INT(UCHAR_MAX) );
	return NTypes[ TypesFromChar[ aCh ] ];
}

int CExtRichBidiAlgorithm::ClassFromChWS( __EXT_MFC_SAFE_TCHAR ch, int nLowerUpperMode )
{
TBYTE _ch = TBYTE(ch);
	if( nLowerUpperMode != 0 && _istalpha( _ch ) )
	{
		TCHAR _modified[2] = { _ch, _T('\0') };
		if( nLowerUpperMode < 0 )
			__EXT_MFC_STRLWR( _modified, 2 );
		else
			__EXT_MFC_STRUPR( _modified, 2 );
		_ch = _modified[ 0 ];
	}
//	__EXT_DEBUG_RICH_CONTENT_ASSERT( UINT(_ch) < UINT(0x7f) && UINT(_ch) >= 0 );
//	return NTypes[ TypesFromChar[ _ch & 0x7f ] ];
INT aCh = INT(_ch);
	if( aCh > 256 )
		return BN;
	if( aCh < 0 )
		aCh = 256 + aCh;
	__EXT_DEBUG_RICH_CONTENT_ASSERT( INT(0) <= aCh && aCh <= INT(UCHAR_MAX) );
	return TypesFromChar[ aCh ];
}

// === DISPLAY SUPPORT =================================================

__EXT_MFC_SAFE_TCHAR CExtRichBidiAlgorithm::CharFromTypes[] =
{
	NEUTRAL,	// ON,
	LEFT,		// L,
	RIGHT,		// R,
	'9',		// AN,
	'1',		// EN,
	ALPHA,		// AL
	'@',		// NSM
	'.',		// CS
	',',		// ES
	'$',		// ET
	':',		// BN
	'X',		// S
	'_',		// WS
	'B',		// B
	PUSH,		// RLO
	PUSH,		// RLE
	PUSH,		// LRO
	PUSH,		// LRE
	POP,		// PDF
	LSEP,		// LS
};

// This works only for testing
// a full implementation would need 61 levels....
__EXT_MFC_SAFE_TCHAR CExtRichBidiAlgorithm::CharFromLevel[] =
{
	'0', '1', '2', '3', '4',
	'5', '6', '7', '8', '9',
	'A', 'B', 'C', 'D', 'E',
	'F', 'X', 'Y', 'Z'		// overhang levels
};

// === HELPER FUNCTIONS ================================================

// reverse cch characters
void CExtRichBidiAlgorithm::reverse( __EXT_MFC_SAFE_LPTSTR psz, int cch )
{
LPTSTR _psz = LPTSTR(psz);
TCHAR chTemp;
int ich;
	for( ich = 0; ich < --cch; ich++ )
	{
		chTemp = _psz[ich];
		_psz[ich] = _psz[cch];
		_psz[cch] = chTemp;
	}
}

// Set a run of cval values at locations all prior to, but not including
// iStart, to the new value nval.
void CExtRichBidiAlgorithm::SetDeferredRun( int *pval, int cval, int iStart, int nval )
{
	for( int i = iStart - 1; i >= iStart - cval; i-- )
		pval[i] = nval;
}

// === ASSIGNING BIDI CLASSES ============================================

/*------------------------------------------------------------------------
	Function: classify
	Determines the character classes for all following
	passes of the algorithm
	Input: Text string
		   Character count
		   Whether to report types as WS, ON, S or as N (false)
	Output: Array of directional classes
------------------------------------------------------------------------*/

int CExtRichBidiAlgorithm::classify( int nLowerUpperMode, __EXT_MFC_SAFE_LPCTSTR pszText, int * pcls,	int cch, bool fWS /*= false*/ )
{
int ich;
	if( fWS )
	{
		for( ich = 0; ich < cch; ich++ )
			pcls[ich] = ClassFromChWS( LPCTSTR(pszText)[ich], nLowerUpperMode );
		return ich;
	}
	else
	{
		for( ich = 0; ich < cch; ich++)
			pcls[ich] = ClassFromChN( LPCTSTR(pszText)[ich], nLowerUpperMode );
		return ich;
	}
}

// === THE PARAGRAPH LEVEL ===============================================

/*------------------------------------------------------------------------
	Function: resolveParagraphs
	Resolves the input strings into blocks over which the algorithm
	is then applied.
	Implements Rule P1 of the Unicode Bidi Algorithm
	Input: Text string
		   Character count
	Output: revised character count
	Note:	This is a very simplistic function. In effect it restricts
			the action of the algorithm to the first paragraph in the input
			where a paragraph ends at the end of the first block separator
			or at the end of the input text.
------------------------------------------------------------------------*/

int CExtRichBidiAlgorithm::resolveParagraphs( int * types, int cch )
{
int ich;
	// skip characters not of type B
	for( ich = 0; ich < cch && types[ich] != B; ich++ );
	// stop after first B, make it a BN for use in the next steps
	if( ich < cch && types[ich] == B )
		types[ich++] = BN;
	return ich;
}

/*------------------------------------------------------------------------
	Function: baseLevel
	Determines the base level
	Implements rule P2 of the Unicode Bidi Algorithm.
	Input: Array of directional classes
		   Character count
	Note: Ignores explicit embeddings
------------------------------------------------------------------------*/
int CExtRichBidiAlgorithm::baseLevel( const int * pcls,  int cch )
{
int ich;
	for( ich = 0; ich < cch; ich++ )
	{
		switch( pcls[ich] )
		{
		// strong left
		case L:
			return 0;
			break;
		// strong right
		case R:
		case AL:
			return 1;
			break;
		}
	}
	return 0;
}

//====== RESOLVE EXPLICIT ================================================

int CExtRichBidiAlgorithm::GreaterEven( int i ) { return odd(i) ? i + 1 : i + 2; }
int CExtRichBidiAlgorithm::GreaterOdd( int i ) { return odd(i) ? i + 2 : i + 1; }
int CExtRichBidiAlgorithm::EmbeddingDirection( int level ) { return odd(level) ? R : L; }

/*------------------------------------------------------------------------
	Function: resolveExplicit
	Recursively resolves explicit embedding levels and overrides.
	Implements rules X1-X9, of the Unicode Bidirectional Algorithm.
	Input: Base embedding level and direction
		   Character count
	Output: Array of embedding levels
		  Caller must allocate (one level per input character)
	In/Out: Array of direction classes
	Note: The function uses two simple counters to keep track of
		  matching explicit codes and PDF. Use the default argument for
		  the outermost call. The nesting counter counts the recursion
		  depth and not the embedding level.
------------------------------------------------------------------------*/
const int CExtRichBidiAlgorithm::MAX_LEVEL = 61;

int CExtRichBidiAlgorithm::resolveExplicit( int level, int dir, int * pcls, int * plevel, int cch, int nNest /*= 0*/ )
{
	// always called with a valid nesting level
	// nesting levels are != embedding levels
int nLastValid = nNest;
	// check input values
	__EXT_DEBUG_RICH_CONTENT_ASSERT( nNest >= 0 && level >= 0 && level <= MAX_LEVEL );
	// process the text
int ich;
	for( ich = 0; ich < cch; ich++ )
	{
		int cls = pcls[ich];
		switch (cls)
		{
		case LRO:
		case LRE:
			nNest++;
			if( GreaterEven(level) <= MAX_LEVEL )
			{
				plevel[ich] = GreaterEven( level );
				pcls[ich] = BN;
				ich += resolveExplicit( plevel[ich], (cls == LRE ? N : L), &pcls[ich+1], &plevel[ich+1], cch - (ich+1), nNest );
				nNest--;
				continue;
			}
			cls = pcls[ich] = BN;
		break;
		case RLO:
		case RLE:
			nNest++;
			if( GreaterOdd(level) <= MAX_LEVEL )
			{
				plevel[ich] = GreaterOdd( level );
				pcls[ich] = BN;
				ich += resolveExplicit( plevel[ich], (cls == RLE ? N : R), &pcls[ich+1], &plevel[ich+1], cch - (ich+1), nNest );
				nNest--;
				continue;
			}
			cls = pcls[ich] = BN;
		break;
		case PDF:
			cls = pcls[ich] = BN;
			if( nNest )
			{
				if( nLastValid < nNest )
					nNest--;
				else
					cch = ich; // break the loop, but complete body
			}
			break;
		}
		// Apply the override
		if( dir != N )
			cls = dir;
		plevel[ich] = level;
		if (pcls[ich] != BN)
			pcls[ich] = cls;
	}
	return ich;
}

// === RESOLVE WEAK TYPES ================================================

int CExtRichBidiAlgorithm::stateWeak[][10] =
{
	//	N,  L,  R,  AN, EN, AL,NSM, CS, ES, ET,
/*xa*/	ao, xl, xr, cn, cn, xa, xa, ao, ao, ao, /* arabic letter		  */
/*xr*/	ro, xl, xr, ra, re, xa, xr, ro, ro, rt, /* right letter 		  */
/*xl*/	lo, xl, xr, la, le, xa, xl, lo, lo, lt, /* left letter			  */

/*ao*/	ao, xl, xr, cn, cn, xa, ao, ao, ao, ao, /* arabic lett. foll by ON*/
/*ro*/	ro, xl, xr, ra, re, xa, ro, ro, ro, rt, /* right lett. foll by ON */
/*lo*/	lo, xl, xr, la, le, xa, lo, lo, lo, lt, /* left lett. foll by ON  */

/*rt*/	ro, xl, xr, ra, re, xa, rt, ro, ro, rt, /* ET following R		  */
/*lt*/	lo, xl, xr, la, le, xa, lt, lo, lo, lt, /* ET following L		  */

/*cn*/	ao, xl, xr, cn, cn, xa, cn, ac, ao, ao, /* EN, AN following AL	  */
/*ra*/	ro, xl, xr, ra, re, xa, ra, rc, ro, rt, /* arabic number foll R   */
/*re*/	ro, xl, xr, ra, re, xa, re, rs, rs,ret, /* european number foll R */
/*la*/	lo, xl, xr, la, le, xa, la, lc, lo, lt, /* arabic number foll L   */
/*le*/	lo, xl, xr, la, le, xa, le, ls, ls,let, /* european number foll L */

/*ac*/	ao, xl, xr, cn, cn, xa, ao, ao, ao, ao, /* CS following cn		  */
/*rc*/	ro, xl, xr, ra, re, xa, ro, ro, ro, rt, /* CS following ra		  */
/*rs*/	ro, xl, xr, ra, re, xa, ro, ro, ro, rt, /* CS,ES following re	  */
/*lc*/	lo, xl, xr, la, le, xa, lo, lo, lo, lt, /* CS following la		  */
/*ls*/	lo, xl, xr, la, le, xa, lo, lo, lo, lt, /* CS,ES following le	  */

/*ret*/ ro, xl, xr, ra, re, xa,ret, ro, ro,ret, /* ET following re		  */
/*let*/ lo, xl, xr, la, le, xa,let, lo, lo,let, /* ET following le		  */
};

int CExtRichBidiAlgorithm::actionWeak[][10] =
{
	//   N,.. L,   R,  AN,  EN,  AL, NSM,  CS,..ES,  ET,
/*xa*/ xxx, xxx, xxx, xxx, xxA, xxR, xxR, xxN, xxN, xxN, /* arabic letter			*/
/*xr*/ xxx, xxx, xxx, xxx, xxE, xxR, xxR, xxN, xxN, xIx, /* right leter 			*/
/*xl*/ xxx, xxx, xxx, xxx, xxL, xxR, xxL, xxN, xxN, xIx, /* left letter 			*/

/*ao*/ xxx, xxx, xxx, xxx, xxA, xxR, xxN, xxN, xxN, xxN, /* arabic lett. foll by ON	*/
/*ro*/ xxx, xxx, xxx, xxx, xxE, xxR, xxN, xxN, xxN, xIx, /* right lett. foll by ON	*/
/*lo*/ xxx, xxx, xxx, xxx, xxL, xxR, xxN, xxN, xxN, xIx, /* left lett. foll by ON	*/

/*rt*/ Nxx, Nxx, Nxx, Nxx, ExE, NxR, xIx, NxN, NxN, xIx, /* ET following R			*/
/*lt*/ Nxx, Nxx, Nxx, Nxx, LxL, NxR, xIx, NxN, NxN, xIx, /* ET following L			*/

/*cn*/ xxx, xxx, xxx, xxx, xxA, xxR, xxA, xIx, xxN, xxN, /* EN, AN following  AL	*/
/*ra*/ xxx, xxx, xxx, xxx, xxE, xxR, xxA, xIx, xxN, xIx, /* arabic number foll R	*/
/*re*/ xxx, xxx, xxx, xxx, xxE, xxR, xxE, xIx, xIx, xxE, /* european number foll R	*/
/*la*/ xxx, xxx, xxx, xxx, xxL, xxR, xxA, xIx, xxN, xIx, /* arabic number foll L	*/
/*le*/ xxx, xxx, xxx, xxx, xxL, xxR, xxL, xIx, xIx, xxL, /* european number foll L	*/

/*ac*/ Nxx, Nxx, Nxx, Axx, AxA, NxR, NxN, NxN, NxN, NxN, /* CS following cn 		*/
/*rc*/ Nxx, Nxx, Nxx, Axx, NxE, NxR, NxN, NxN, NxN, NIx, /* CS following ra 		*/
/*rs*/ Nxx, Nxx, Nxx, Nxx, ExE, NxR, NxN, NxN, NxN, NIx, /* CS,ES following re		*/
/*lc*/ Nxx, Nxx, Nxx, Axx, NxL, NxR, NxN, NxN, NxN, NIx, /* CS following la 		*/
/*ls*/ Nxx, Nxx, Nxx, Nxx, LxL, NxR, NxN, NxN, NxN, NIx, /* CS,ES following le		*/

/*ret*/xxx, xxx, xxx, xxx, xxE, xxR, xxE, xxN, xxN, xxE, /* ET following re			*/
/*let*/xxx, xxx, xxx, xxx, xxL, xxR, xxL, xxN, xxN, xxL, /* ET following le			*/
};

int CExtRichBidiAlgorithm::GetDeferredType( int action ) { return (action >> 4) & 0xF; }
int CExtRichBidiAlgorithm::GetResolvedType( int action ) { return action & 0xF; }

/* Note on action table:
	States can be of two kinds:
	 - Immediate Resolution State, where each input token
	   is resolved as soon as it is seen. These states havve
	   only single action codes (xxN) or the no-op (xxx)
	   for static input tokens.
	 - Deferred Resolution State, where input tokens either
	   either extend the run (xIx) or resolve its Type (e.g. Nxx).
	Input classes are of three kinds
	 - Static Input Token, where the class of the token remains
	   unchanged on output (AN, L, N, R)
	 - Replaced Input Token, where the class of the token is
	   always replaced on output (AL, BN, NSM, CS, ES, ET)
	 - Conditional Input Token, where the class of the token is
	   changed on output in some but not all cases (EN)
	 Where tokens are subject to change, a double action
	 (e.g. NxA, or NxN) is _required_ after deferred states,
	 resolving both the deferred state and changing the current token.
	These properties of the table are verified by assertions below.
	This code is needed only during debugging and maintenance
*/
bool CExtRichBidiAlgorithm::IsDeferredState( int state )
{
	switch( state )
	{
	case rt: // this needs to be a deferred
	case lt:
	case ac:
	case rc:
	case rs:
	case lc:
	case ls:
		return true;
	}
	return false;
}

bool CExtRichBidiAlgorithm::IsModifiedClass( int cls )
{
	switch( cls )
	{
	case AL:
	case NSM:
	case ES:
	case CS:
	case ET:
	case EN: // sometimes 'modified' to EN
		return true;
	}
	return false;
}

const int CExtRichBidiAlgorithm::state_first   = xa;
const int CExtRichBidiAlgorithm::state_last    = let;

const int CExtRichBidiAlgorithm::cls_first     = N;
const int CExtRichBidiAlgorithm::cls_last      = ET;

// Verify these properties of the tables
int CExtRichBidiAlgorithm::VerifyTables()
{
int done = 1, cls;	
	for( cls = cls_first; cls <= cls_last; cls++ )
	{
		int state;
		for( state = state_first; state <= state_last; state++ )
		{
			int action    = actionWeak[state][cls];
			int nextstate = stateWeak[state][cls];
			nextstate;
			if( IX & action )
			{
				// make sure when we defer we get to a
				// deferred state
				__EXT_DEBUG_RICH_CONTENT_ASSERT( IsDeferredState( nextstate ) );
				// Make sure permanent classes are not deferred
				__EXT_DEBUG_RICH_CONTENT_ASSERT( IsModifiedClass( cls ) );
			}
			else
			{
				// make sure we are not deferring without
				// incrementing a run
				__EXT_DEBUG_RICH_CONTENT_ASSERT( ! IsDeferredState( nextstate ) );
				// make sure modified classes are modified
				if( IsModifiedClass( cls ) )
				{
					__EXT_DEBUG_RICH_CONTENT_ASSERT( GetResolvedType( action ) != XX );
				}
				else
				{
					__EXT_DEBUG_RICH_CONTENT_ASSERT( GetResolvedType( action ) == XX );
				}
			}

			// if we are deferring, make sure things are resolved
			if( IsDeferredState( state ) )
			{
				// Deferred states must increment or have deferred type
				__EXT_DEBUG_RICH_CONTENT_ASSERT( action == xIx || GetDeferredType( action ) != XX );
			}
			else
			{
				__EXT_DEBUG_RICH_CONTENT_ASSERT( GetDeferredType( action ) == XX );
			}
		}
	}
	return done;
}

/*------------------------------------------------------------------------
	Function: resolveWeak
	Resolves the directionality of numeric and other weak character types
	Implements rules X10 and W1-W6 of the Unicode Bidirectional Algorithm.
	Input: Array of embedding levels
		   Character count
	In/Out: Array of directional classes
	Note: On input only these directional classes are expected
		  AL, HL, R, L,  ON, BN, NSM, AN, EN, ES, ET, CS,
------------------------------------------------------------------------*/
void CExtRichBidiAlgorithm::resolveWeak( int baselevel, int *pcls, int *plevel, int cch )
{
int state = odd(baselevel) ? xr : xl, cls, level = baselevel, cchRun = 0, ich;
	for( ich = 0; ich < cch; ich++) 
	{
#if ( defined _DEBUG )
		if( pcls[ich] > BN )
		{
			TRACE2( "error: pcls[%d] > BN (%d)\n", ich, pcls[ich] );
		}
#endif // ( defined _DEBUG )
		// ignore boundary neutrals
		if( pcls[ich] == BN )
		{
			// must flatten levels unless at a level change;
			plevel[ich] = level;
			// lookahead for level changes
			if( ich + 1 == cch && level != baselevel )
			{
				// have to fixup last BN before end of the loop, since
				// its fix-upped value will be needed below the assert
				pcls[ich] = EmbeddingDirection( level );
			}
			else if( ich + 1 < cch && level != plevel[ich+1] && pcls[ich+1] != BN )
			{
				// fixup LAST BN in front / after a level run to make
				// it act like the SOR/EOR in rule X10
				int newlevel = plevel[ich+1];
				if (level > newlevel)
					newlevel = level;
				plevel[ich] = newlevel;
				// must match assigned level
				pcls[ich] = EmbeddingDirection( newlevel );
				level = plevel[ich+1];
			}
			else
			{
				// don't interrupt runs
				if( cchRun )
					cchRun++;
				continue;
			}
		}
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pcls[ich] <= BN );
		cls = pcls[ich];
		int action = actionWeak[state][cls];
		// resolve the directionality for deferred runs
		int clsRun = GetDeferredType( action );
		if( clsRun != XX )
		{
			SetDeferredRun( pcls, cchRun, ich, clsRun );
			cchRun = 0;
		}
		// resolve the directionality class at the current location
		int clsNew = GetResolvedType( action );
		if( clsNew != XX )
			pcls[ich] = clsNew;
		// increment a deferred run
		if( IX & action )
			cchRun++;
		state = stateWeak[state][cls];
	}
	// resolve any deferred runs
	// use the direction of the current level to emulate PDF
	cls = EmbeddingDirection( level );
	// resolve the directionality for deferred runs
int clsRun = GetDeferredType( actionWeak[state][cls] );
	if( clsRun != XX )
		SetDeferredRun( pcls, cchRun, ich, clsRun );
}

// === RESOLVE NEUTAL TYPES ==============================================

int CExtRichBidiAlgorithm::GetDeferredNeutrals( int action, int level )
{
	action = (action >> 4) & 0xF;
	if( action == ( En >> 4) )
		return EmbeddingDirection( level );
	else
		return action;
}

int CExtRichBidiAlgorithm::GetResolvedNeutrals( int action )
{
	action = action & 0xF;
	if( action == In )
		return 0;
	else
		return action;
}

int CExtRichBidiAlgorithm::actionNeutrals[][5] =
{
//	N,	L,	R, AN, EN, = cls
							// state =
	In,  0,  0,  0,  0, 	// r	right
	In,  0,  0,  0,  L, 	// l	left

	In, En, Rn, Rn, Rn, 	// rn	N preceded by right
	In, Ln, En, En, LnL,	// ln	N preceded by left

	In,  0,  0,  0,  L, 	// a   AN preceded by left
	In, En, Rn, Rn, En, 	// na	N  preceded by a
} ;

int CExtRichBidiAlgorithm::stateNeutrals[][5] =
{
//	 N, L,	R,	AN, EN = cls
							// state =
	rn, l,	r,	r,	r,		// r   right
	ln, l,	r,	a,	l,		// l   left

	rn, l,	r,	r,	r,		// rn  N preceded by right
	ln, l,	r,	a,	l,		// ln  N preceded by left

	na, l,	r,	a,	l,		// a  AN preceded by left
	na, l,	r,	a,	l,		// na  N preceded by la
} ;

/*------------------------------------------------------------------------
	Function: resolveNeutrals
	Resolves the directionality of neutral character types.
	Implements rules W7, N1 and N2 of the Unicode Bidi Algorithm.
	Input: Array of embedding levels
		   Character count
		   Baselevel
	In/Out: Array of directional classes
	Note: On input only these directional classes are expected
		  R,  L,  N, AN, EN and BN
		  W8 resolves a number of ENs to L
------------------------------------------------------------------------*/
void CExtRichBidiAlgorithm::resolveNeutrals( int baselevel, int *pcls, const int *plevel, int cch )
{
	// the state at the start of text depends on the base level
int state = odd(baselevel) ? r : l, cls, cchRun = 0, level = baselevel, ich;
	for( ich = 0; ich < cch; ich++ )
	{
		// ignore boundary neutrals
		if( pcls[ich] == BN )
		{
			// include in the count for a deferred run
			if( cchRun )
				cchRun++;
			// skip any further processing
			continue;
		}
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pcls[ich] < 5 ); // "Only N, L, R,  AN, EN are allowed"
		cls = pcls[ich];
		int action = actionNeutrals[state][cls];
		// resolve the directionality for deferred runs
		int clsRun = GetDeferredNeutrals( action, level );
		if( clsRun != N )
		{
			SetDeferredRun( pcls, cchRun, ich, clsRun );
			cchRun = 0;
		}
		// resolve the directionality class at the current location
		int clsNew = GetResolvedNeutrals( action );
		if( clsNew != N )
			pcls[ich] = clsNew;
		if( In & action )
			cchRun++;
		state = stateNeutrals[state][cls];
		level = plevel[ich];
	}
	// resolve any deferred runs
	cls = EmbeddingDirection( level );	// eor has type of current level
	// resolve the directionality for deferred runs
int clsRun = GetDeferredNeutrals( actionNeutrals[state][cls], level );
	if( clsRun != N )
		SetDeferredRun( pcls, cchRun, ich, clsRun );
}

// === RESOLVE IMPLLICIT =================================================

/*------------------------------------------------------------------------
	Function: resolveImplicit
	Recursively resolves implicit embedding levels.
	Implements rules I1 and I2 of the Unicode Bidirectional Algorithm.
	Input: Array of direction classes
		   Character count
		   Base level
	In/Out: Array of embedding levels
	Note: levels may exceed 15 on output.
		  Accepted subset of direction classes
		  R, L, AN, EN
------------------------------------------------------------------------*/
int CExtRichBidiAlgorithm::addLevel[][4] =
{
		// L,  R,	AN, EN = cls
							// level =
/* even */	0,	1,	2,	2,	// EVEN
/* odd	*/	1,	0,	1,	1,	// ODD

};

void CExtRichBidiAlgorithm::resolveImplicit( const int * pcls, int * plevel, int cch )
{
int ich;
	for( ich = 0; ich < cch; ich++ )
	{
		// cannot resolve bn here, since some bn were resolved to strong
		// types in resolveWeak. To remove these we need the original
		// types, which are available again in resolveWhiteSpace
		if( pcls[ich] == BN )
			continue;
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pcls[ich] > 0 ); // "No Neutrals allowed to survive here."
		__EXT_DEBUG_RICH_CONTENT_ASSERT( pcls[ich] < 5 ); // "Out of range."
		plevel[ich] += addLevel[odd(plevel[ich])][pcls[ich] - 1];
	}
}

// === REORDER ===========================================================

/*------------------------------------------------------------------------
	Function: resolveLines
	Breaks a paragraph into lines
	Input:	Character count
			Array of line break flags
	In/Out:	Array of characters
	Returns the count of characters on the first line
	Note: This function only breaks lines at hard line breaks. Other
	line breaks can be passed in. If pbrk[n] is true, then a break
	occurs after the character in pszInput[n]. Breaks before the first
	character are not allowed.
------------------------------------------------------------------------*/
int CExtRichBidiAlgorithm::resolveLines( __EXT_MFC_SAFE_LPTSTR pszInput, bool * pbrk, int cch )
{
int ich;
	// skip characters not of type LS
	for( ich = 0; ich < cch; ich++ )
	{
		if( LPTSTR(pszInput)[ich] == chLS || (pbrk && pbrk[ich]) )
		{
			ich++;
			break;
		}
	}
	return ich;
}

/*------------------------------------------------------------------------
	Function: resolveWhiteSpace
	Resolves levels for WS and S
	Implements rule L1 of the Unicode bidi Algorithm.
	Input:	Base embedding level
			Character count
			Array of direction classes (for one line of text)
	In/Out: Array of embedding levels (for one line of text)
	Note: this should be applied a line at a time. The default driver
		  code supplied in this file assumes a single line of text; for
		  a real implementation, cch and the initial pointer values
		  would have to be adjusted.
------------------------------------------------------------------------*/
void CExtRichBidiAlgorithm::resolveWhitespace( int baselevel, const int *pcls, int *plevel, int cch )
{
int cchrun = 0, oldlevel = baselevel, ich;
	for(  ich = 0; ich < cch; ich++ )
	{
		switch( pcls[ich] )
		{
		default:
			cchrun = 0; // any other character breaks the run
		break;
		case WS:
			cchrun++;
		break;

		case RLE:
		case LRE:
		case LRO:
		case RLO:
		case PDF:
		case BN:
			plevel[ich] = oldlevel;
			cchrun++;
		break;

		case S:
		case B:
			// reset levels for WS before eot
			SetDeferredRun( plevel, cchrun, ich, baselevel );
			cchrun = 0;
			plevel[ich] = baselevel;
		break;
		}
		oldlevel = plevel[ich];
	}
	// reset level before eot
	SetDeferredRun( plevel, cchrun, ich, baselevel );
}


/*------------------------------------------------------------------------
	Functions: reorder/reorderLevel
	Recursively reorders the display string
	"From the highest level down, reverse all characters at that level and
	higher, down to the lowest odd level"
	Implements rule L2 of the Unicode bidi Algorithm.
	Input: Array of embedding levels
		   Character count
		   Flag enabling reversal (set to false by initial caller)
	In/Out: Text to reorder
	Note: levels may exceed 15 resp. 61 on input.
	Rule L3 - reorder combining marks is not implemented here
	Rule L4 - glyph mirroring is implemented as a display option below
	Note: this should be applied a line at a time
-------------------------------------------------------------------------*/
int CExtRichBidiAlgorithm::reorderLevel( int level, __EXT_MFC_SAFE_LPTSTR pszText, const int * plevel, int cch, bool fReverse /*= false*/ )
{
	// true as soon as first odd level encountered
	fReverse = fReverse || odd(level);
int ich;
	for( ich = 0; ich < cch; ich++ )
	{
		if( plevel[ich] < level )
			break;
		else if( plevel[ich] > level )
			ich += reorderLevel( level + 1, LPTSTR(pszText) + ich, plevel + ich, cch - ich, fReverse ) - 1;
	}
	if( fReverse )
		reverse( LPTSTR(pszText), ich );
	return ich;
}

int CExtRichBidiAlgorithm::reorder( int baselevel, __EXT_MFC_SAFE_LPTSTR pszText, const int * plevel, int cch )
{
int ich = 0;
	while( ich < cch )
		ich += reorderLevel( baselevel, LPTSTR(pszText) + ich, plevel + ich, cch - ich );
	return ich;
}

// === DISPLAY OPTIONS ================================================

/*-----------------------------------------------------------------------
   Function:	mirror
	Crudely implements rule L4 of the Unicode Bidirectional Algorithm
	Demonstrate mirrored brackets, braces and parens
	Input:	Array of levels
			Count of characters
	In/Out:	Array of characters (should be array of glyph ids)
	Note;
	A full implementation would need to substitute mirrored glyphs even
	for characters that are not paired (e.g. integral sign).
-----------------------------------------------------------------------*/
void CExtRichBidiAlgorithm::mirror( __EXT_MFC_SAFE_LPTSTR pszInput, const int * plevel, int cch )
{
LPTSTR _pszInput = LPTSTR(pszInput);
int ich;
	for( ich = 0; ich < cch; ich ++ )
	{
		if( ! odd( plevel[ich] ) )
			continue;
		if( _pszInput[ich] == '<' )
			_pszInput[ich] = '>';
		else if ( _pszInput[ich] == '>' )
			_pszInput[ich] = '<';
		else if ( _pszInput[ich] == ')' )
			_pszInput[ich] = '(';
		else if ( _pszInput[ich] == '(' )
			_pszInput[ich] = ')';
	}
}

/*-----------------------------------------------------------------------
	Function: clean
	remove formatting codes
	In/Out:	Array of characters
			Count of characters
	Note;
	This function can be used to remove formatting codes so the
	ordering of the string can be compared to implementations that
	remove formatting codes. This implementation is limited to the
	pseudo alphabet used for the demo version.
-----------------------------------------------------------------------*/
int CExtRichBidiAlgorithm::clean( __EXT_MFC_SAFE_LPTSTR pszInput, int cch )
{
LPTSTR _pszInput = LPTSTR(pszInput);
int cchMove = 0, ich;
	for( ich = 0; ich < cch; ich ++ )
	{
		int ch = _pszInput[ich];
		switch( ch )
		{
		default:
			if( _pszInput[ich] < 0x20 )
				cchMove++;
			else
				_pszInput[ich - cchMove] = _pszInput[ich];
		break;

		case chRLO:
		case chLRO:
		case chRLE:
		case chLRE:
		case chPDF:
		case chBN:
			cchMove++;
		break;
		}
	}
	_pszInput[ich - cchMove] = 0;
	return ich - cchMove;
}






