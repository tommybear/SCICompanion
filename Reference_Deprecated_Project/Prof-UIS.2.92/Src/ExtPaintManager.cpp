// This is part of the Professional User Interface Suite library.
// Copyright (C) 2001-2011 FOSS Software, Inc.
// All rights reserved.
//
// http://www.prof-uis.com
// mailto:support@prof-uis.com
//
// This source code can be used, modified and redistributed
// under the terms of the license agreement that is included
// in the Professional User Interface Suite package.
//
// Warranties and Disclaimers:
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND
// INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
// IN NO EVENT WILL FOSS SOFTWARE INC. BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES,
// INCLUDING DAMAGES FOR LOSS OF PROFITS, LOSS OR INACCURACY OF DATA,
// INCURRED BY ANY PERSON FROM SUCH PERSON'S USAGE OF THIS SOFTWARE
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

#include "StdAfx.h"

#if _MFC_VER < 0x700
	#include <../src/AfxImpl.h>
#else
	#include <../src/mfc/AfxImpl.h>
#endif

#if (!defined __EXT_PAINT_MANAGER_H)
	#include <ExtPaintManager.h>
#endif

#if (!defined __EXT_RICH_CONTENT_H)
	#include <ExtRichContent.h>
#endif // (!defined __EXT_RICH_CONTENT_H)

#if (!defined __ExtCmdManager_H)
	#include <ExtCmdManager.h>
#endif

#if (!defined __EXT_MEMORY_DC_H)
	#include <../Src/ExtMemoryDC.h>
#endif

#if (!defined __EXT_POPUP_MENU_WND_H)
	#include <ExtPopupMenuWnd.h>
#endif

#if (!defined __EXT_MENUCONTROLBAR_H)
	#include <ExtMenuControlBar.h>
#endif

#if (!defined __EXTDOCKBAR_H)
	#include <../Src/ExtDockBar.h>
#endif

#if (!defined __EXT_STATUSCONTROLBAR_H)
	#include <ExtStatusControlBar.h>
#endif

#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
	#if (!defined __EXT_CONTROLBAR_TABBED_FEATURES_H)
		#include "ExtControlBarTabbedFeatures.h"
	#endif // __EXT_CONTROLBAR_TABBED_FEATURES_H
#endif

#if( !defined __EXTMINIDOCKFRAMEWND_H)
	#include "ExtMiniDockFrameWnd.h"
#endif

#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	#if (!defined __EXTSHORTCUTLISTWND_H)
		#include <ExtShortcutListWnd.h>
	#endif
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)

#if (!defined __EXT_BUTTON_H)
	#include <ExtButton.h>
#endif

#if (!defined __EXT_GROUPBOX_H)
	#include <ExtGroupBox.h>
#endif

#if (!defined __PROF_UIS_RES_2007_H)
	#include <Resources/Res2007/Res2007.h>
#endif

#if (!defined __PROF_UIS_RES_2010_OFFICE_H)
	#include <Resources/Res2010office/Res2010office.h>
#endif

#if (!defined __EXT_SCROLLWND_H)
	#include <ExtScrollWnd.h>
#endif 

#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	#if (!defined __EXT_REPORT_GRID_WND_H)
		#include <ExtReportGridWnd.h>
	#endif
#endif 

#if (!defined __EXT_MFC_NO_DATE_PICKER)
	#if (!defined __EXT_DATE_PICKER_H)
		#include <ExtDatePicker.h>
	#endif
#endif 

#if (!defined __EXT_MFC_NO_TOOLBOX_CTRL)
	#if (!defined __EXTTOOLBOXWND_H)
		#include <ExtToolBoxWnd.h>
	#endif
#endif 

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	#if (!defined __EXT_RIBBON_BAR_H)
		#include <ExtRibbonBar.h>
	#endif // (!defined __EXT_RIBBON_BAR_H)
#endif

#if (!defined __EXT_MFC_NO_BUILTIN_TEXTFIELD)
	#if (!defined __EXT_POPUP_CTRL_MENU_H)
		#include <ExtPopupCtrlMenu.h>
	#endif
#endif

#if (!defined __EXT_MFC_NO_GRIDWND)
	#if (!defined __EXT_GRIDWND_H)
		#include <ExtGridWnd.h>
	#endif 
#endif

#if (!defined __EXT_TEMPL_H)
	#include <ExtTempl.h>
#endif

#if (!defined __EXT_SPIN_H)
	#include <ExtSpinWnd.h>
#endif

#if (!defined __EXT_MFC_NO_CUSTOMIZE)
	#if (!defined __EXTCUSTOMIZE_H)
		#include <ExtCustomize.h>
	#endif
#endif // (!defined __EXT_MFC_NO_CUSTOMIZE)

#if (!defined __EXT_MFC_NO_DURATIONWND)
	#if (!defined __EXT_DURATIONWND_H)
		#include "ExtDurationWnd.h"
	#endif
#endif

#if (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
	#if (!defined __EXT_PAGECONTAINERWND_H)
		#include <ExtPageContainerWnd.h>
	#endif
#endif

#if (!defined __EXT_RESIZABLE_DIALOG_H)
	#include <ExtResizableDialog.h>
#endif

#if (!defined __EXT_EDIT_H)
	#include <ExtEdit.h>
#endif

#if (!defined __EXT_COMBO_BOX_H)
	#include <ExtComboBox.h>
#endif

#if (! defined __VSSYM32_H__)
	#include <vssym32/vssym32.h>
#endif // (! defined __VSSYM32_H__)

#include <math.h>
#include <shlwapi.h>

#include <Resources/Resource.h>

#if (! defined CLEARTYPE_QUALITY )
	#define CLEARTYPE_QUALITY 5
#endif

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

// VC+ 6.0 static builds specific: disable warnings 4305, 4309
// warning C4305: 'initializing' : truncation from 'int' to 'short'
// warning C4309: 'initializing' : truncation of constant value
#if _MFC_VER < 0x700
	#ifdef __EXT_PROFUIS_STATIC_LINK
		#pragma warning( push )
		#pragma warning ( disable : 4305 )
		#pragma warning ( disable : 4309 )
	#endif
#endif

// win9x balloon-rect region fix constants
#define __WIN9X_FIXED_BAR_ROUNDED_AREA_SHIFT_X		2
#define __WIN9X_FIXED_BAR_ROUNDED_AREA_SHIFT_Y		2
#define __WIN9X_FIXED_BAR_ROUNDED_AREA_ADJUST_X		3
#define __WIN9X_FIXED_BAR_ROUNDED_AREA_ADJUST_Y		3

//#define __TRACE_PAINT_SESSIONS

CExtPaintManager::CExtPaintManager()
	: m_bUseTahomaFont( g_PaintManager.m_bIsWin2000orLater )
	, m_eStyle2005( CExtPaintManager::__ES2005_RC )
	, m_bCustomBackgroundInheritanceEnabled( false )
	, m_clrForceSplitterBk( COLORREF(-1L) )
	, m_bScrollBarsHaveHoverEffectIn2kStyle( false )
#if (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
	, m_bPageContainerUseButtonStyle( false )
	, m_bPageContainerUseGroupBoxStyle( false )
	, m_bPageContainerNoEmbossDisabledText( false )
#endif // (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	, m_bShortcutListUseButtonStyleInScrollButtons( false )
	, m_bShortcutListUseDockerBkgnd( false )
	, m_bShortcutListItemUseButtonStyle( false )
	, m_clrShortcutListItemAlternativeText( COLORREF(-1L) )
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
{
	ASSERT( this != NULL );

	m_DSS_DISABLED_style = DSS_DISABLED;

#define __3D_COLOR_DEPTH_R 7
#define __3D_COLOR_DEPTH_G 6
#define __3D_COLOR_DEPTH_B 6

struct
{
    LOGPALETTE    LogPalette;
    PALETTEENTRY  PalEntry[ (__3D_COLOR_DEPTH_R*__3D_COLOR_DEPTH_G*__3D_COLOR_DEPTH_B) ];
} pal;
LOGPALETTE * pLogPalette = (LOGPALETTE*) &pal;
	pLogPalette->palVersion    = 0x300;
	pLogPalette->palNumEntries = (WORD)(__3D_COLOR_DEPTH_R*__3D_COLOR_DEPTH_G*__3D_COLOR_DEPTH_B); 
int i = 0;
    for( int nX = 0; nX < __3D_COLOR_DEPTH_R; nX++ )
    {
		for( int nY = 0; nY < __3D_COLOR_DEPTH_G; nY++ )
		{
			for( int nZ = 0; nZ < __3D_COLOR_DEPTH_B; nZ++ )
			{
				pLogPalette->palPalEntry[i].peRed   =
					BYTE( (nX*255)/(__3D_COLOR_DEPTH_R-1) );
				pLogPalette->palPalEntry[i].peGreen =
					BYTE( (nY*255)/(__3D_COLOR_DEPTH_G-1) );
				pLogPalette->palPalEntry[i].peBlue  =
					BYTE( (nZ*255)/(__3D_COLOR_DEPTH_B-1) );
				pLogPalette->palPalEntry[i].peFlags = 0;
				i++;
			}
		}
    }
    VERIFY( m_PaletteWide.CreatePalette(pLogPalette) );

}

CExtPaintManager::~CExtPaintManager()
{
	ASSERT( this != NULL );

	m_colors.RemoveAll();
	m_brushes.RemoveAll();
}

CExtBitmap & CExtPaintManager::_GetBmpCacheFilter( bool bApplied ) const
{
	if( m_bmpCacheFilterApplied.IsEmpty() )
	{
		VERIFY( m_bmpCacheFilterApplied.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_BITMAP_FILTER_APPLIED ) ) );
		VERIFY( m_bmpCacheFilterApplied.Make32() );
		m_bmpCacheFilterApplied.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	}
	if( m_bmpCacheFilterUnApplied.IsEmpty() )
	{
		VERIFY( m_bmpCacheFilterUnApplied.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_BITMAP_FILTER_UNAPPLIED ) ) );
		VERIFY( m_bmpCacheFilterUnApplied.Make32() );
		m_bmpCacheFilterUnApplied.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	}
	return bApplied ? m_bmpCacheFilterApplied : m_bmpCacheFilterUnApplied;
}

void CExtPaintManager::SerializeSynchronizationData( CArchive & ar )
{
	ASSERT_VALID( this );
	ar;
}

bool CExtPaintManager::UiScalingIsEnabled(
	CExtPaintManager::e_ui_scaling_type_t eUIST
	) const
{
	ASSERT_VALID( this );
	ASSERT( __EUIST_MIN_VALUE <= eUIST && eUIST <= __EUIST_MAX_VALUE );
bool bEnaled = false;
	switch( eUIST )
	{
	case __EUIST_X:
		bEnaled = g_PaintManager.m_bEnableUiScalingX;
	break;
	case __EUIST_Y:
		bEnaled = g_PaintManager.m_bEnableUiScalingY;
	break;
	case __EUIST_Z:
		bEnaled = g_PaintManager.m_bEnableUiScalingZ;
	break;
#ifdef _DEBUG
	default:
		ASSERT( FALSE );
	break;
#endif // _DEBUG
	} // switch( eUIST )
	return bEnaled;
}

INT CExtPaintManager::UiScalingDo(
	INT nValue,
	CExtPaintManager::e_ui_scaling_type_t eUIST
	) const
{
	ASSERT_VALID( this );
	ASSERT( __EUIST_MIN_VALUE <= eUIST && eUIST <= __EUIST_MAX_VALUE );
INT nNewValue = nValue;
	if( UiScalingIsEnabled( eUIST ) )
	{
		switch( eUIST )
		{
		case __EUIST_X:
			nNewValue = ::MulDiv( nNewValue, g_PaintManager.m_nLPX, 96 );
		break;
		case __EUIST_Y:
			nNewValue = ::MulDiv( nNewValue, g_PaintManager.m_nLPY, 96 );
		break;
		case __EUIST_Z:
			nNewValue = ::MulDiv( nNewValue, g_PaintManager.m_nLPZ, 96 );
		break;
#ifdef _DEBUG
		default:
			ASSERT( FALSE );
		break;
#endif // _DEBUG
		} // switch( eUIST )
	} // if( UiScalingIsEnabled( eUIST ) )
	return nNewValue;
}

CExtPaintManagerXP::CExtPaintManagerXP()
	: m_bEnabledHoverIconShadows( true )
	, m_bHelperXpStyle8BitBarRect( true )
	, m_bExpBtnSwapVGlyphs( false )
	, m_pGlyphTbEpBtnH0( &g_glyph_btn_expand_bottom )
	, m_pGlyphTbEpBtnH1( &g_glyph_btn_expand_right2 )
	, m_pGlyphTbEpBtnV0( &g_glyph_btn_expand_left )
	, m_pGlyphTbEpBtnV1( &g_glyph_btn_expand_bottom2 )
	, m_nIdxClrMlaNormLeft( -1 )
	, m_nIdxClrMlaNormMiddle( -1 )
	, m_nIdxClrMlaNormRight( -1 )
	, m_nIdxClrMlaRarelyLeft( -1 )
	, m_nIdxClrMlaRarelyMiddle( -1 )
	, m_nIdxClrMlaRarelyRight( -1 )
	, m_nIdxClrBtnHoverLeft( -1 )
	, m_nIdxClrBtnHoverRight( -1 )
	, m_nIdxClrBtnPressedLeft( -1 )
	, m_nIdxClrBtnPressedRight( -1 )
	, m_nIdxClrBtnHovPresLeft( -1 )
	, m_nIdxClrBtnHovPresRight( -1 )
	, m_clrCustomDropDownGlyphEnabled( COLORREF(-1L) )
	, m_clrCustomDropDownGlyphDisabled( COLORREF(-1L) )
{
#if (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
	m_bPageContainerNoEmbossDisabledText = true;
#endif // (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
}

CExtPaintManagerXP::~CExtPaintManagerXP()
{
}

//////////////////////////////////////////////////////////////////////////
// CExtPaintManagerOffice2003
//////////////////////////////////////////////////////////////////////////

CExtPaintManagerOffice2003::CExtPaintManagerOffice2003()
	: m_nIdxClrTbFillMargin( -1 )
{
	m_bEnabledHoverIconShadows = false;
	m_bHelperXpStyle8BitBarRect = false;
	m_bExpBtnSwapVGlyphs = true;
	m_pGlyphTbEpBtnH0 = &g_glyph_btn_expand_bottom_2003;
	m_pGlyphTbEpBtnH1 = &g_glyph_btn_expand_right2_2003;
	m_pGlyphTbEpBtnV0 = &g_glyph_btn_expand_right_2003;
	m_pGlyphTbEpBtnV1 = &g_glyph_btn_expand_bottom2_2003;
	m_nIdxClrMlaNormLeft = _2003CLR_MLA_NORM_LEFT;
	m_nIdxClrMlaNormMiddle = _2003CLR_MLA_NORM_MIDDLE;
	m_nIdxClrMlaNormRight = _2003CLR_MLA_NORM_RIGHT;
	m_nIdxClrMlaRarelyLeft = _2003CLR_MLA_RARELY_LEFT;
	m_nIdxClrMlaRarelyMiddle = _2003CLR_MLA_RARELY_MIDDLE;
	m_nIdxClrMlaRarelyRight = _2003CLR_MLA_RARELY_RIGHT;
#if (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
	m_bPageContainerUseButtonStyle = true;
	m_bPageContainerUseGroupBoxStyle = true;
	m_bPageContainerNoEmbossDisabledText = true;
#endif // (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	m_bShortcutListUseButtonStyleInScrollButtons = true;
//	m_bShortcutListUseDockerBkgnd = true;
	m_bShortcutListItemUseButtonStyle = true;
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
}

CExtPaintManagerOffice2003::~CExtPaintManagerOffice2003()
{
}

bool CExtPaintManager::ScrollBar_GetMetrics(
	INT * p_nHorzBarHeight, // = NULL
	INT * p_nVertBarWidth, // = NULL
	INT * p_nHorzButtonWidth, // = NULL
	INT * p_nVertButtonHeight, // = NULL
	INT * p_nHorzThumbMinWidth, // = NULL
	INT * p_nVertThumbMinHeight, // = NULL
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	p_nHorzBarHeight; p_nVertBarWidth; p_nHorzButtonWidth; p_nVertButtonHeight; p_nHorzThumbMinWidth; p_nVertThumbMinHeight; pHelperSrc; lParam;
	return false;
}

void CExtPaintManager::ScrollBar_Paint(
	CDC & dc,
	CExtPaintManager::PAINTSCROLLBARDATA & _psbd
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	_psbd.PaintDefault( dc, const_cast < CExtPaintManager * > ( this ) );
}

CExtPaintManager::SCROLLBARSKINDATA * CExtPaintManager::ScrollBar_GetSkinData(
	bool bHorzBar,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bLightAccent // = true
	)
{
	ASSERT_VALID( this );
	bHorzBar; pHelperSrc; lParam; bLightAccent;
	return NULL;
}

#ifndef __EXT_MFC_NO_GRIDWND

bool CExtPaintManager::Grid_PaintButton(
	CDC & dc,
	const RECT & rcButton,
	INT nButtonType,
	bool bPressed,
	bool bHovered,
	bool bFocused,
	bool bEnabled,
	COLORREF clrFace,
	COLORREF clrLight,
	COLORREF clrShadow,
	COLORREF clrWindow,
	COLORREF clrText,
	DWORD dwHelperPaintFlags,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	lParam;
	if( pHelperSrc == NULL )
		return false;
	ASSERT_VALID( pHelperSrc );
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	ASSERT( pWnd != NULL );

bool bPaintPushButton = true;
	if(		(	nButtonType == INT(CExtGridCell::__EBTT_FILTER_APPLIED)
			||	nButtonType == INT(CExtGridCell::__EBTT_FILTER_UNAPPLIED)
			)
		&&	(	(! bEnabled )
			||	(! ( bFocused || bHovered || bPressed ) )
			)
		)
		bPaintPushButton = false;

CRect rc( rcButton );
	if( bPaintPushButton )
		dc.FillSolidRect( &rc, clrWindow );

bool bDefaultDrawing = true;
CExtPaintManager::glyph_t * pGlyph = NULL;
CExtBitmap * pBitmap = NULL;
	if( g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		INT nPartID = -1;
		INT nState = 0;
		__EXT_UX_LPCWSTR pszClassList = NULL;
		switch( nButtonType ) 
		{
		case INT(CExtGridCell::__EBTT_DROPDOWN):
			pszClassList = VSCLASS_COMBOBOX;
			nPartID = CP_DROPDOWNBUTTON;
			nState = 
				(!bEnabled)
					? CBXS_DISABLED
					: bPressed
						? CBXS_PRESSED
						: bHovered
							? CBXS_HOT
							: CBXS_NORMAL;
			break;
		case INT(CExtGridCell::__EBTT_ELLIPSIS):
			pszClassList = VSCLASS_BUTTON;
			nPartID = BP_PUSHBUTTON;
			nState = 
				(!bEnabled)
					? PBS_DISABLED
					: bPressed
						? PBS_PRESSED
						: bHovered
							? PBS_HOT
							: ( bFocused )
								? PBS_DEFAULTED
								: PBS_NORMAL;		
			if( (dwHelperPaintFlags&__EGCPF_NO_BUTTON_ELLIPSIS_DOTS) == 0 )
				pGlyph = 
					CExtPaintManager::g_DockingCaptionGlyphs[
						(INT) CExtPaintManager::__DCBT_ELLIPSIS
						];
			break;
		case INT(CExtGridCell::__EBTT_UPDOWN_UP):
			pszClassList = VSCLASS_SPIN;
			nPartID = SPNP_UP;
			nState = 
				(!bEnabled) 
					? UPS_DISABLED 
					: bPressed 
						? UPS_PRESSED 
						: bHovered
							? UPS_HOT
							: UPS_NORMAL;
			break;
		case INT(CExtGridCell::__EBTT_UPDOWN_DOWN):
			pszClassList = VSCLASS_SPIN;
			nPartID = SPNP_DOWN;
			nState = 
				(!bEnabled) 
					? DNS_DISABLED 
					: bPressed 
						? DNS_PRESSED 
						: bHovered
							? DNS_HOT
							: DNS_NORMAL;
			break;
		case INT(CExtGridCell::__EBTT_FILTER_APPLIED):
			{
				CExtBitmap & aBmp = _GetBmpCacheFilter( true );
				pBitmap = &aBmp;
			}
		break;
		case INT(CExtGridCell::__EBTT_FILTER_UNAPPLIED):
			{
				CExtBitmap & aBmp = _GetBmpCacheFilter( false );
				pBitmap = &aBmp;
			}
		break;
		} // switch( nButtonType ) 

		if(		bPaintPushButton
			&&	nPartID != -1
			&&	pszClassList != NULL
			&&	g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), pszClassList ) != NULL 
			) 
		{
			if( g_PaintManager.m_UxTheme.DrawThemeBackground(
					dc.GetSafeHdc(), 
					nPartID, 
					nState, 
					&rc, 
					&rcButton
					) == S_OK
				)
				bDefaultDrawing = false;
			g_PaintManager.m_UxTheme.CloseThemeData( true );
		}
	}

	if( bDefaultDrawing )
	{
		COLORREF clrOuterLT =
			bPressed ? clrShadow : clrLight;
		COLORREF clrOuterRB =
			bPressed ? clrLight : clrShadow;

		if( bPaintPushButton )
			dc.FillSolidRect( &rc, clrFace );
		rc.DeflateRect( 2, 2 );
		if( bPaintPushButton )
			dc.Draw3dRect( 
				&rcButton, 
				clrOuterLT, 
				clrOuterRB
				);
		if( bPressed )
			rc.OffsetRect( 0, 1 );
		if( nButtonType == INT(CExtGridCell::__EBTT_DROPDOWN) )
		{
			if( (dwHelperPaintFlags&__EGCPF_NO_BUTTON_DROPDOWN_ARROW) == 0 )
				pGlyph = 
					CExtPaintManager::g_DockingCaptionGlyphs[
						(INT) CExtPaintManager::__DCBT_ARROW_DOWN
						];
		}
		else if( nButtonType == INT(CExtGridCell::__EBTT_ELLIPSIS) )
		{
			if( (dwHelperPaintFlags&__EGCPF_NO_BUTTON_ELLIPSIS_DOTS) == 0 )
				pGlyph = 
					CExtPaintManager::g_DockingCaptionGlyphs[
						(INT) CExtPaintManager::__DCBT_ELLIPSIS
						];
		}
		else if( nButtonType == INT(CExtGridCell::__EBTT_UPDOWN_UP) )
		{
			pGlyph = 
				CExtPaintManager::g_DockingCaptionGlyphs[
					(INT) CExtPaintManager::__DCBT_ARROW_SMALL_UP
					];
		}
		else if( nButtonType == INT(CExtGridCell::__EBTT_UPDOWN_DOWN) )
		{
			pGlyph = 
				CExtPaintManager::g_DockingCaptionGlyphs[
					(INT) CExtPaintManager::__DCBT_ARROW_SMALL_DOWN
					];
		}
		else if( nButtonType == INT(CExtGridCell::__EBTT_FILTER_APPLIED) )
		{
			CExtBitmap & aBmp = _GetBmpCacheFilter( true );
			pBitmap = &aBmp;
		}
		else if( nButtonType == INT(CExtGridCell::__EBTT_FILTER_UNAPPLIED) )
		{
			CExtBitmap & aBmp = _GetBmpCacheFilter( false );
			pBitmap = &aBmp;
		}
	} // if( bDefaultDrawing )

	if( pGlyph != NULL )
	{
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			RGB(0,0,0),
		};
		ColorValues[1] = 
			bEnabled ? clrText : clrLight;
		if( ! bEnabled )
			rc.OffsetRect( 1, 1 );
		PaintGlyphCentered(
			dc,
			rc,
			*pGlyph,
			ColorValues
			);
		if( ! bEnabled )
		{
			rc.OffsetRect( -1, -1 );
			ColorValues[1] = clrShadow;
			PaintGlyphCentered(
				dc,
				rc,
				*pGlyph,
				ColorValues
				);
		} // if( ! bEnabled )
	} // if( pGlyph != NULL )	

	if(		pBitmap != NULL
		&&	(! pBitmap->IsEmpty() )
		)
	{
		CRect rcDst( rc.TopLeft(), pBitmap->GetSize() );
		rcDst.OffsetRect(
			( rc.Width() - rcDst.Width() ) / 2,
			( rc.Height() - rcDst.Height() ) / 2
			);
		pBitmap->AlphaBlend( dc.m_hDC, rcDst );
	} // if( pBitmap != NULL ...

	if(		bFocused 
		&&	nButtonType == INT(CExtGridCell::__EBTT_ELLIPSIS)
		)
	{
		CRect rcFocusRect( rcButton );
		if( bPressed )
		{
			CSize sizePushedOffset = GetPushedOffset();
			rcFocusRect.OffsetRect( -sizePushedOffset );
		}
		rcFocusRect.DeflateRect( 3, 3 );
		dc.DrawFocusRect( &rcFocusRect );
	}

	return true;
}

bool CExtPaintManagerOffice2007_Impl::Grid_PaintButton(
	CDC & dc,
	const RECT & rcButton,
	INT nButtonType,
	bool bPressed,
	bool bHovered,
	bool bFocused,
	bool bEnabled,
	COLORREF clrFace,
	COLORREF clrLight,
	COLORREF clrShadow,
	COLORREF clrWindow,
	COLORREF clrText,
	DWORD dwHelperPaintFlags,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( pHelperSrc == NULL )
		return false;
	ASSERT_VALID( pHelperSrc );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Grid_PaintButton(
				dc,
				rcButton,
				nButtonType,
				bPressed,
				bHovered,
				bFocused,
				bEnabled,
				clrFace,
				clrLight,
				clrShadow,
				clrWindow,
				clrText,
				dwHelperPaintFlags,
				pHelperSrc,
				lParam
				);

CWnd * pWnd =
		DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	ASSERT( pWnd != NULL );
	
CRect rc( rcButton );
//	dc.FillSolidRect( &rc, clrWindow );

bool bPaintPushButton = true;
	if(		(	nButtonType == INT(CExtGridCell::__EBTT_FILTER_APPLIED)
			||	nButtonType == INT(CExtGridCell::__EBTT_FILTER_UNAPPLIED)
			)
		&&	(	(! bEnabled )
			||	(! ( bFocused || bHovered || bPressed ) )
			)
		)
		bPaintPushButton = false;
	if( bPaintPushButton )
	{
		CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd;
		_ppbd.m_pHelperSrc = pHelperSrc;
		_ppbd.m_rcClient = rc;
		_ppbd.m_bPushed = bPressed;
		_ppbd.m_bHover = bHovered;
		_ppbd.m_bDrawFocusRect = 
			(nButtonType == INT(CExtGridCell::__EBTT_ELLIPSIS)) ? bFocused : false;
		_ppbd.m_bEnabled = bEnabled;
		_ppbd.m_bTransparentBackground = true;
		PaintPushButton( dc, _ppbd );
	}

CExtPaintManager::glyph_t * pGlyph = NULL;
CExtBitmap * pBitmap = NULL;
	switch( nButtonType ) 
	{
	case INT(CExtGridCell::__EBTT_DROPDOWN):
		if( (dwHelperPaintFlags&__EGCPF_NO_BUTTON_DROPDOWN_ARROW) == 0 )
			pGlyph = 
				CExtPaintManager::g_DockingCaptionGlyphs[
					(INT) CExtPaintManager::__DCBT_ARROW_DOWN
					];
		break;
	case INT(CExtGridCell::__EBTT_ELLIPSIS):
		if( (dwHelperPaintFlags&__EGCPF_NO_BUTTON_ELLIPSIS_DOTS) == 0 )
			pGlyph = 
				CExtPaintManager::g_DockingCaptionGlyphs[
				(INT) CExtPaintManager::__DCBT_ELLIPSIS
				];
		break;
	case INT(CExtGridCell::__EBTT_UPDOWN_UP):
		pGlyph = 
			CExtPaintManager::g_DockingCaptionGlyphs[
				(INT) CExtPaintManager::__DCBT_ARROW_SMALL_UP
				];
		break;
	case INT(CExtGridCell::__EBTT_UPDOWN_DOWN):
		pGlyph = 
			CExtPaintManager::g_DockingCaptionGlyphs[
				(INT) CExtPaintManager::__DCBT_ARROW_SMALL_DOWN
				];
		break;
	case INT(CExtGridCell::__EBTT_FILTER_APPLIED):
		{
			CExtBitmap & aBmp = _GetBmpCacheFilter( true );
			pBitmap = &aBmp;
		}
		break;
	case INT(CExtGridCell::__EBTT_FILTER_UNAPPLIED):
		{
			CExtBitmap & aBmp = _GetBmpCacheFilter( false );
			pBitmap = &aBmp;
		}
		break;
	} // switch( nButtonType ) 

	if( pGlyph != NULL )
	{
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			RGB(0,0,0),
		};
		ColorValues[1] = 
			bEnabled ? clrText : clrLight;
		if( ! bEnabled )
			rc.OffsetRect( 1, 1 );
		PaintGlyphCentered(
			dc,
			rc,
			*pGlyph,
			ColorValues
			);
		if( ! bEnabled )
		{
			rc.OffsetRect( -1, -1 );
			ColorValues[1] = clrShadow;
			PaintGlyphCentered(
				dc,
				rc,
				*pGlyph,
				ColorValues
				);
		} // if( ! bEnabled )
	} // if( pGlyph != NULL )

	if(		pBitmap != NULL
		&&	(! pBitmap->IsEmpty() )
		)
	{
		CRect rcDst( rc.TopLeft(), pBitmap->GetSize() );
		rcDst.OffsetRect(
			( rc.Width() - rcDst.Width() ) / 2,
			( rc.Height() - rcDst.Height() ) / 2
			);
		pBitmap->AlphaBlend( dc.m_hDC, rcDst );
	} // if( pBitmap != NULL ...

	return true;
}

bool CExtPaintManager::Grid_PaintHeaderSortArrow(
	CDC & dc,
	const RECT & rcSortArrow,
	bool bHorz,
	bool bAscending,
	COLORREF * pColorValues,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	pHelperSrc;
	lParam;
	if( pColorValues == NULL )
	{
		ASSERT( FALSE );
		return false;
	}
	PaintGlyphCentered(
		dc,
		rcSortArrow,
		*( g_DockingCaptionGlyphs[
			bHorz
				? ( bAscending
						? __DCBT_ARROW_SORT_LEFT
						: __DCBT_ARROW_SORT_RIGHT )
				: ( bAscending
						? __DCBT_ARROW_SORT_UP
						: __DCBT_ARROW_SORT_DOWN )
			] ),
		pColorValues
		);	
	return true;
}

bool CExtPaintManagerNativeXP::Grid_PaintHeaderSortArrow(
	CDC & dc,
	const RECT & rcSortArrow,
	bool bHorz,
	bool bAscending,
	COLORREF * pColorValues,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	pColorValues;
	pHelperSrc;
	lParam;
COLORREF ColorValues[2] =
{
	RGB(0,0,0),
	::GetSysColor(COLOR_3DSHADOW),
};
	PaintGlyphCentered(
		dc,
		rcSortArrow,
		*( g_DockingCaptionGlyphs[
			bHorz
				? ( bAscending
						? __DCBT_2007_ARROW_SORT_LEFT
						: __DCBT_2007_ARROW_SORT_RIGHT )
				: ( bAscending
						? __DCBT_2007_ARROW_SORT_UP
						: __DCBT_2007_ARROW_SORT_DOWN )
			] ),
		ColorValues
		);
	return true;
}

bool CExtPaintManagerOffice2007_Impl::Grid_PaintHeaderSortArrow(
	CDC & dc,
	const RECT & rcSortArrow,
	bool bHorz,
	bool bAscending,
	COLORREF * pColorValues,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Grid_PaintHeaderSortArrow(
				dc,
				rcSortArrow,
				bHorz,
				bAscending,
				pColorValues,
				pHelperSrc,
				lParam
				);

COLORREF ColorValues[2] =
{
	RGB(0,0,0),
	m_clrGridHeaderSortArrow,
};
	PaintGlyphCentered(
		dc,
		rcSortArrow,
		*( g_DockingCaptionGlyphs[
			bHorz
				? ( bAscending
						? __DCBT_2007_ARROW_SORT_LEFT
						: __DCBT_2007_ARROW_SORT_RIGHT )
				: ( bAscending
						? __DCBT_2007_ARROW_SORT_UP
						: __DCBT_2007_ARROW_SORT_DOWN )
			] ),
		ColorValues
		);
	return true;
}

COLORREF CExtPaintManager::Grid_OnQueryTextColor(
	const CExtGridCell & _cell,
	CDC & dc,
	LONG nVisibleColNo,
	LONG nVisibleRowNo,
	LONG nColNo,
	LONG nRowNo,
	INT nColType,
	INT nRowType,
	DWORD dwAreaFlags,
	DWORD dwHelperPaintFlags
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&_cell) );
//	if( (dwHelperPaintFlags&__EGCPF_PRINTING_TARGET_MASK) != 0 )
//		return COLORREF(-1L);
	_cell;
	dc;
	nVisibleColNo;
	nVisibleRowNo;
	nColNo;
	nRowNo;
	nColType;
	nRowType;
	dwAreaFlags;
	dwHelperPaintFlags;
	// used default cell' text color computed
	// by the CExtGridCell::OnQueryTextColor() virtual method
	return COLORREF(-1L);
}

bool CExtPaintManager::Grid_PaintHeaderBackground(
	CDC & dc,
	const RECT & rcArea,
	LONG nColNo,
	LONG nRowNo,
	INT nColType,
	INT nRowType,
	DWORD dwAreaFlags,
	DWORD dwHelperPaintFlags,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcArea;
	nColNo;
	nRowNo;
	nColType;
	nRowType;
	dwAreaFlags;
	dwHelperPaintFlags;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::Grid_PaintHeaderBackground(
	CDC & dc,
	const RECT & rcArea,
	LONG nColNo,
	LONG nRowNo,
	INT nColType,
	INT nRowType,
	DWORD dwAreaFlags,
	DWORD dwHelperPaintFlags,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcArea;
	nColNo;
	nRowNo;
	nColType;
	nRowType;
	dwAreaFlags;
	dwHelperPaintFlags;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerOffice2007_Impl::Grid_PaintHeaderBackground(
	CDC & dc,
	const RECT & rcArea,
	LONG nColNo,
	LONG nRowNo,
	INT nColType,
	INT nRowType,
	DWORD dwAreaFlags,
	DWORD dwHelperPaintFlags,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Grid_PaintHeaderBackground(
				dc,
				rcArea,
				nColNo,
				nRowNo,
				nColType,
				nRowType,
				dwAreaFlags,
				dwHelperPaintFlags,
				pHelperSrc,
				lParam
				);

CExtGridWnd * pGridWnd = ( pHelperSrc != NULL ) ? ( DYNAMIC_DOWNCAST( CExtGridWnd, pHelperSrc ) ) : NULL;
	if( pGridWnd == NULL )
		return false;

bool bHoverByColumn = ( (dwHelperPaintFlags&__EGCPF_HOVER_BY_COLUMN) != 0 ) ? true : false;
bool bHoverByRow = ( (dwHelperPaintFlags&__EGCPF_HOVER_BY_ROW) != 0 ) ? true : false;
bool bHighlightedBySelectedColumn = ( (dwHelperPaintFlags&__EGCPF_HIGHLIGHTED_BY_SELECTED_COLUMN) != 0 ) ? true : false;
bool bHighlightedBySelectedRow = ( (dwHelperPaintFlags&__EGCPF_HIGHLIGHTED_BY_SELECTED_ROW) != 0 ) ? true : false;
bool bHighlightedByFocusedColumn = ( (dwHelperPaintFlags&__EGCPF_HIGHLIGHTED_BY_FOCUSED_COLUMN) != 0 ) ? true : false;
bool bHighlightedByFocusedRow = ( (dwHelperPaintFlags&__EGCPF_HIGHLIGHTED_BY_FOCUSED_ROW) != 0 ) ? true : false;
// bool bFocusedControl = ( (dwHelperPaintFlags&__EGCPF_FOCUSED_CONTROL) != 0 ) ? true : false;
bool bHighlightPressing = ( (dwHelperPaintFlags&(__EGCPF_HIGHLIGHTED_BY_PRESSED_COLUMN|__EGCPF_HIGHLIGHTED_BY_PRESSED_ROW)) != 0 ) ? true : false;

COLORREF clrBack = COLORREF( -1L );
	if( nColNo >= 0L && nRowNo >= 0L ) 
		clrBack = 
			pGridWnd->OnGbwQueryBackColor(
				dc,
				0L,
				0L,
				nColNo,
				nRowNo,
				nColType,
				nRowType,
				dwAreaFlags,
				dwHelperPaintFlags
			);
	if(		clrBack != COLORREF( -1L ) 
		&&	(! bHighlightPressing )
		)
		dc.FillSolidRect(
			&rcArea,
			clrBack
			);
	else
		stat_PaintGradientRect(
			dc,
			rcArea,
			m_clrGridHeaderBkBottom,
			m_clrGridHeaderBkTop,
			true
			);

	if( clrBack != COLORREF( -1L ) )
	{
		dc.FillSolidRect(
			&rcArea,
			clrBack
			);
	}
	else if( bHighlightPressing )
	{
		CRect rcHighlightPressing( rcArea );
		if( (dwHelperPaintFlags&__EGCPF_HIGHLIGHTED_BY_PRESSED_COLUMN) != 0 )
			rcHighlightPressing.DeflateRect( 0, 0, 1, 0 );
		if( (dwHelperPaintFlags&__EGCPF_HIGHLIGHTED_BY_PRESSED_ROW) != 0 )
			rcHighlightPressing.DeflateRect( 0, 0, 0, 1 );
		dc.FillSolidRect(
			&rcHighlightPressing, // &rcArea
			pGridWnd->OnSiwGetSysColor( COLOR_3DDKSHADOW )
			);
	} // if( bHighlightPressing )
	else if( bHighlightedByFocusedColumn || bHighlightedByFocusedRow )
	{
		dc.FillRect(
			&rcArea,
			&( pGridWnd->OnSiwGetLighterOrDarkerBrush( -3 ) )
			);
	}
	else if( bHighlightedBySelectedColumn || bHighlightedBySelectedRow )
	{
		dc.FillRect(
			&rcArea,
			&( pGridWnd->OnSiwGetLighterOrDarkerBrush( -2 ) )
			);
	}
	else if( bHoverByColumn || bHoverByRow )
	{
		if( nColType == 0 || nRowType == 0 )
			dc.FillRect(
				&rcArea,
				&( pGridWnd->OnSiwGetLighterOrDarkerBrush( -1 ) )
				);
	}

bool bLineTop = false;
bool bLineLeft = false;
bool bLineRight = false;
bool bLineBottom = false;
bool bDrawBorder = false;
bool bDrawSeparator = false;

	if( (dwHelperPaintFlags&__EGCPF_OUTER_DND) != 0 )
	{
		bDrawBorder = true;
	}
	else if( nColNo >= 0L && nRowNo >= 0L )
	{
		LONG nOuterColumnCountLeft = 0L;
		LONG nOuterColumnCountRight = 0L;
		if( pGridWnd != NULL )
		{
			nOuterColumnCountLeft = pGridWnd->OuterColumnCountLeftGet();
			nOuterColumnCountRight = pGridWnd->OuterColumnCountRightGet();
		}

		if(		dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_FROZEN_AREA_LEFT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_FROZEN_AREA_RIGHT)
			)
		{
			if( nRowNo == 0L )
				bLineTop = true;
			bLineBottom = true;
//			LONG nColumnCount = pGridWnd->ColumnCountGet();
//			if( nColumnCount < 0L || nColNo != ( nColumnCount - 1L ) )
				bDrawSeparator = true;
		}
		else if( dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_FROZEN_AREA_TOP)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_FROZEN_AREA_BOTTOM)
			)
		{
			if( nColNo == 0L )
				bLineLeft = true;
			if( nColNo == nOuterColumnCountLeft - 1L )
				bLineRight = true;
			else
				bDrawSeparator = true;
			bLineBottom = true;
		}
		else if( dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_FROZEN_AREA_TOP)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_FROZEN_AREA_BOTTOM)
			)
		{
			if( nColNo == 0L )
				bLineLeft = true;
			if( nColNo == nOuterColumnCountRight - 1L )
				bLineRight = true;
			else
				bDrawSeparator = true;
			bLineBottom = true;
		}
		else if( dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_FROZEN_AREA_LEFT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_FROZEN_AREA_RIGHT)
			)
		{
			if( nRowNo == 0L )
				bLineTop = true;
			bLineBottom = true;
//			LONG nColumnCount = pGridWnd->ColumnCountGet();
//			if( nColumnCount < 0L || nColNo != ( nColumnCount - 1L ) )
				bDrawSeparator = true;
		}
		else if(
				dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_OUTER_LEFT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_OUTER_RIGHT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_OUTER_LEFT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_OUTER_RIGHT)

			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_FROZEN_AREA_LEFT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_FROZEN_AREA_RIGHT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_FROZEN_AREA_LEFT)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_FROZEN_AREA_RIGHT)

			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_FROZEN_AREA_TOP)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_FROZEN_AREA_BOTTOM)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_FROZEN_AREA_TOP)
			||	dwAreaFlags == (__EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_FROZEN_AREA_BOTTOM)
			)
		{
			bLineLeft = bLineTop = bLineRight = bLineBottom = true;
		}
	}
	else if( nColNo < 0L && nRowNo < 0L )
	{
		switch( dwAreaFlags )
		{
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_FROZEN_AREA_LEFT:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_TOP|__EGBWA_FROZEN_AREA_RIGHT:
			bLineTop = true;
			bLineBottom = true;
		break;
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_FROZEN_AREA_LEFT:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_BOTTOM|__EGBWA_FROZEN_AREA_RIGHT:
			bLineTop = true;
			bLineBottom = true;
		break;
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_FROZEN_AREA_TOP:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_FROZEN_AREA_BOTTOM:
			bLineLeft = true;
			bLineRight = true;
		break;
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_FROZEN_AREA_TOP:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_FROZEN_AREA_BOTTOM:
			bLineLeft = true;
			bLineRight = true;
		break;
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_OUTER_TOP:
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_LEFT|__EGBWA_OUTER_BOTTOM:	
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_OUTER_TOP:		
		case __EGBWA_OUTER_CELLS|__EGBWA_OUTER_RIGHT|__EGBWA_OUTER_BOTTOM:	
			bLineLeft = bLineTop = bLineRight = bLineBottom = true;
		break;
		} // switch( dwAreaFlags )
	}

	if( bDrawSeparator )
	{
		CRect rcSeparator(
			rcArea.right - 1,
			rcArea.top + 3,
			rcArea.right,
			rcArea.bottom - 3
			);
		if(		(! rcSeparator.IsRectEmpty() )
			&&	dc.RectVisible( &rcSeparator )
			)
			dc.FillSolidRect( &rcSeparator, m_clrGridHeaderSeparator );
	}

	if( bDrawBorder )
	{
		dc.Draw3dRect( 
			&rcArea, 
			m_clrGridHeaderBorder,
			m_clrGridHeaderBorder
			);
	}

	if( bLineLeft )
	{
		CRect rcLine(
			rcArea.left,
			rcArea.top,
			rcArea.left + 1,
			rcArea.bottom
			);
		if(		(! rcLine.IsRectEmpty() )
			&&	dc.RectVisible( &rcLine )
			)
		dc.FillSolidRect( &rcLine, m_clrGridHeaderBorder );
	}

	if( bLineTop )
	{
		CRect rcLine(
			rcArea.left,
			rcArea.top,
			rcArea.right,
			rcArea.top + 1
			);
		if(		(! rcLine.IsRectEmpty() )
			&&	dc.RectVisible( &rcLine )
			)
		dc.FillSolidRect( &rcLine, m_clrGridHeaderBorder );
	}

	if( bLineRight )
	{
		CRect rcLine(
			rcArea.right - 1,
			rcArea.top,
			rcArea.right,
			rcArea.bottom
			);
		if(		(! rcLine.IsRectEmpty() )
			&&	dc.RectVisible( &rcLine )
			)
		dc.FillSolidRect( &rcLine, m_clrGridHeaderBorder );
	}

	if( bLineBottom )
	{
		CRect rcLine(
			rcArea.left,
			rcArea.bottom - 1,
			rcArea.right,
			rcArea.bottom
			);
		if(		(! rcLine.IsRectEmpty() )
			&&	dc.RectVisible( &rcLine )
			)
		dc.FillSolidRect( &rcLine, m_clrGridHeaderBorder );
	}

	return true;
}

#endif // #ifndef __EXT_MFC_NO_GRIDWND
	
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)

bool CExtPaintManager::ReportGrid_PaintHeaderRowBackground(
	CDC & dc,
	const RECT & rcArea,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcArea;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerOffice2003::ReportGrid_PaintHeaderRowBackground(
	CDC & dc,
	const RECT & rcArea,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::ReportGrid_PaintHeaderRowBackground(
				dc,
				rcArea,
				pHelperSrc,
				lParam
				);
	if( ! CExtReportGridWnd::g_bmpHeaderAreaBk.IsEmpty() )
	{
		CExtReportGridWnd::g_bmpHeaderAreaBk.DrawSkinParts(
			dc,
			rcArea,
			CExtReportGridWnd::g_rcHeaderAreaPadding,
			CExtBitmap::__EDM_STRETCH
			);
		bool bDrawSeparator = false;
		if( pHelperSrc != NULL )
		{
			if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtReportGridColumn)) )
			{
				CExtReportGridWnd * pRGW = ((CExtReportGridColumn*)pHelperSrc)->GetReportGrid();
				ASSERT_VALID( pRGW );
				if(	!(		pRGW->m_bHelperRenderingGroupArea
						||	pRGW->m_bHelperRenderingOuterDND
						)
					)
					bDrawSeparator = true;
			}
		}
		if( bDrawSeparator )
		{
			CRect rcSeparatorRight(
				rcArea.right - 1,
				rcArea.top + 2,
				rcArea.right,
				rcArea.bottom - 4
				);
			CRect rcSeparatorLeft(
				rcArea.left,
				rcArea.top + 2,
				rcArea.left + 1,
				rcArea.bottom - 4
				);
			dc.FillSolidRect(
				&rcSeparatorLeft,
				dc.GetNearestColor( RGB(255,255,255) )
				);
			dc.FillSolidRect(
				&rcSeparatorRight,
				dc.GetNearestColor( RGB(172,168,153) )
				);
		} // if( bDrawSeparator )
		return true;
	}
	return
		CExtPaintManagerXP::ReportGrid_PaintHeaderRowBackground(
			dc,
			rcArea,
			pHelperSrc,
			lParam
			);
}

bool CExtPaintManagerNativeXP::ReportGrid_PaintHeaderRowBackground(
	CDC & dc,
	const RECT & rcArea,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
bool bDefaultDrawing = true, bDrawCell = false;
	if( pHelperSrc != NULL )
	{
		if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtReportGridColumn)) )
			bDrawCell = true;
	}
	if( g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		HWND hWnd = NULL;
		if( pHelperSrc != NULL )
		{
			if( pHelperSrc->IsKindOf( RUNTIME_CLASS(CWnd) ) )
				hWnd = ((CWnd*)pHelperSrc)->GetSafeHwnd();
			if( hWnd == NULL )
			{
				if( pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtReportGridColumn) ) )
					hWnd = ((CExtReportGridColumn*)pHelperSrc)->GetReportGrid()->GetSafeHwnd();
				if( hWnd == NULL )
					hWnd = ::GetDesktopWindow();
			} // if( hWnd == NULL )
		} // if( pHelperSrc != NULL )
		if(		hWnd != NULL
			&&	g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_HEADER ) != NULL
			)
		{
			if( g_PaintManager.m_UxTheme.DrawThemeBackground(
					dc.GetSafeHdc(), 
					HP_HEADERITEMRIGHT, 
					HIRS_NORMAL, 
					&rcArea, 
					&rcArea
					) == S_OK
				)
				bDefaultDrawing = false;
			g_PaintManager.m_UxTheme.CloseThemeData( true );
		}
		if( (! bDefaultDrawing ) && bDrawCell )
		{
			ASSERT( hWnd != NULL );
			if(	g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_HEADER ) != NULL )
			{
				INT nStateID = HIS_NORMAL;
				if(		pHelperSrc != NULL
					&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtReportGridColumn) )
					&&	(	(lParam&(__EGCPF_HOVER_BY_COLUMN|__EGCPF_OUTER_DND)) != 0
						||	((CExtReportGridColumn*)pHelperSrc)->GetReportGrid()->m_bHelperRenderingOuterDND
						)
					)
					nStateID = HIS_HOT;
				if( g_PaintManager.m_UxTheme.DrawThemeBackground(
						dc.GetSafeHdc(), 
						HP_HEADERITEM, 
						nStateID, 
						&rcArea, 
						&rcArea
						) == S_OK
					)
					bDefaultDrawing = false;
				g_PaintManager.m_UxTheme.CloseThemeData( true );
			}
		} // if( (! bDefaultDrawing ) && bDrawCell )
	} // if( g_PaintManager.m_UxTheme.IsControlsThemed() )
	if( ! bDefaultDrawing )
		return true;
	return
		CExtPaintManager::ReportGrid_PaintHeaderRowBackground(
			dc,
			rcArea,
			pHelperSrc,
			lParam
			);
}

bool CExtPaintManagerOffice2007_Impl::ReportGrid_PaintHeaderRowBackground(
	CDC & dc,
	const RECT & rcArea,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::ReportGrid_PaintHeaderRowBackground(
				dc,
				rcArea,
				pHelperSrc,
				lParam
				);

CRect rcAreaBk = rcArea;
	rcAreaBk.DeflateRect( 1, 1 );
	stat_PaintGradientRect(
		dc,
		rcAreaBk,
		m_clrRgHeaderBkBottom,
		m_clrRgHeaderBkTop,
		true
		);
// bool bDrawBorder = false, bDrawSeparator = false;
// 	if( pHelperSrc != NULL )
// 	{
// 		if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtReportGridWnd)) )
// 			bDrawBorder = true;
// 		else if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtReportGridColumn)) )
// 		{
// 			CExtReportGridWnd * pRGW = ((CExtReportGridColumn*)pHelperSrc)->GetReportGrid();
// 			ASSERT_VALID( pRGW );
// 			if(		pRGW->m_bHelperRenderingGroupArea
// 				||	pRGW->m_bHelperRenderingOuterDND
// 				)
// 				bDrawBorder = true;
// 			else
// 				bDrawSeparator = true;
// 		}
// 	}
// 	if( bDrawBorder )
// 		dc.Draw3dRect(
// 			&rcArea,
// 			m_clrRgHeaderBorder,
// 			m_clrRgHeaderBorder
// 			);
// 	if( bDrawSeparator )
// 	{
// 		CRect rcSeparator(
// 			rcArea.right - 1,
// 			rcArea.top + 3,
// 			rcArea.right,
// 			rcArea.bottom - 3
// 			);
// 		if(		(! rcSeparator.IsRectEmpty() )
// 			&&	dc.RectVisible( &rcSeparator )
// 			)
// 			dc.FillSolidRect( &rcSeparator, m_clrRgHeaderSeparator );
// 	} // if( bDrawSeparator )

bool bDrawSeparator = false, bDrawBorder = false;
	if( pHelperSrc != NULL )
	{
		if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtReportGridColumn)) )
		{
			CExtReportGridWnd * pRGW = ((CExtReportGridColumn*)pHelperSrc)->GetReportGrid();
			if(		pRGW->m_bHelperRenderingGroupArea
				||	pRGW->m_bHelperRenderingOuterDND
				)
				bDrawBorder = true;
			if( ( pRGW->BseGetStyleEx() & __EGBS_BSE_EX_PROPORTIONAL_COLUMN_WIDTHS ) == 0 )
				bDrawSeparator = true;
			else
			{
				LONG nColCount = pRGW->ColumnCountGet();
				if( nColCount > 0L )
				{
					CExtGridCell * pCell = pRGW->GridCellGetOuterAtTop( nColCount - 1L, 0L );
					ASSERT_VALID( pCell );
					if( LPVOID(pHelperSrc) != LPVOID(pCell) )
						bDrawSeparator = true;
				}
			}
		}
		else if(	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtReportGridWnd))
			&&	(	((CExtReportGridWnd*)pHelperSrc)->m_bHelperRenderingGroupArea
				||	((CExtReportGridWnd*)pHelperSrc)->m_bHelperRenderingOuterDND
				)
			)
			bDrawBorder = true;
	} // if( pHelperSrc != NULL )
	if( bDrawSeparator )
	{
		CRect rcSeparator(
			rcArea.right - 1,
			rcArea.top + 3,
			rcArea.right,
			rcArea.bottom - 3
			);
		if(		(! rcSeparator.IsRectEmpty() )
			&&	dc.RectVisible( &rcSeparator )
			)
			dc.FillSolidRect( &rcSeparator, m_clrRgHeaderSeparator );
	} // if( bDrawSeparator )

	if( bDrawBorder )
		dc.Draw3dRect(
			&rcArea,
			m_clrRgHeaderBorder,
			m_clrRgHeaderBorder
			);
	return true;
}

bool CExtPaintManager::ReportGrid_PaintHeaderSortArrow(
	CDC & dc,
	const RECT & rcSortArrow,
	bool bAscending,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcSortArrow;
	bAscending;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::ReportGrid_PaintHeaderSortArrow(
	CDC & dc,
	const RECT & rcSortArrow,
	bool bAscending,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
//bool bDefaultDrawing = true;
//	if( g_PaintManager.m_UxTheme.IsControlsThemed() )
//	{
//		HWND hWnd = NULL;
//		if( pHelperSrc != NULL )
//		{
//			if( pHelperSrc->IsKindOf( RUNTIME_CLASS(CWnd) ) )
//				hWnd = ((CWnd*)pHelperSrc)->GetSafeHwnd();
//			if( hWnd == NULL )
//			{
//				if( pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtReportGridColumn) ) )
//					hWnd = ((CExtReportGridColumn*)pHelperSrc)->GetReportGrid()->GetSafeHwnd();
//				if( hWnd == NULL )
//					hWnd = ::GetDesktopWindow();
//			} // if( hWnd == NULL )
//		} // if( pHelperSrc != NULL )
//		if(		hWnd != NULL
//			&&	g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_HEADER ) != NULL
//			)
//		{
//			if( g_PaintManager.m_UxTheme.DrawThemeBackground(
//					dc.GetSafeHdc(), 
//					HP_HEADERSORTARROW, 
//					bAscending ? HSAS_SORTEDUP : HSAS_SORTEDDOWN, 
//					&rcSortArrow, 
//					&rcSortArrow
//					) == S_OK
//				)
//				bDefaultDrawing = false;
//			g_PaintManager.m_UxTheme.CloseThemeData( true );
//		}
//	} // if( g_PaintManager.m_UxTheme.IsControlsThemed() )
//	if( ! bDefaultDrawing )
//		return true;
//	return
//		CExtPaintManager::ReportGrid_PaintHeaderSortArrow(
//			dc,
//			rcSortArrow,
//			bAscending,
//			pHelperSrc,
//			lParam
//			);
	pHelperSrc;
	lParam;
COLORREF ColorValues[2] =
{
	RGB(0,0,0),
	::GetSysColor(COLOR_3DSHADOW),
};
	PaintGlyphCentered(
		dc,
		rcSortArrow,
		*( g_DockingCaptionGlyphs[
			bAscending
				? __DCBT_2007_ARROW_SORT_UP
				: __DCBT_2007_ARROW_SORT_DOWN
			] ),
		ColorValues
		);
	return true;
}

bool CExtPaintManagerOffice2007_Impl::ReportGrid_PaintHeaderSortArrow(
	CDC & dc,
	const RECT & rcSortArrow,
	bool bAscending,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::ReportGrid_PaintHeaderSortArrow(
				dc,
				rcSortArrow,
				bAscending,
				pHelperSrc,
				lParam
				);
	
COLORREF ColorValues[2] =
{
	RGB(0,0,0),
	m_clrRgHeaderSortArrow,
};
	PaintGlyphCentered(
		dc,
		rcSortArrow,
		*( g_DockingCaptionGlyphs[
			bAscending
				? __DCBT_2007_ARROW_SORT_UP
				: __DCBT_2007_ARROW_SORT_DOWN
			] ),
		ColorValues
		);
	return true;
}

bool CExtPaintManager::ReportGrid_PaintGroupAreaBackground(
	CDC & dc,
	const RECT & rcArea,
	__EXT_MFC_SAFE_LPCTSTR strEmptyAreaCaption, // not NULL if area is empty
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcArea;
	strEmptyAreaCaption;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::ReportGrid_PaintGroupAreaBackground(
	CDC & dc,
	const RECT & rcArea,
	__EXT_MFC_SAFE_LPCTSTR strEmptyAreaCaption, // not NULL if area is empty
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcArea;
	strEmptyAreaCaption;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerOffice2007_Impl::ReportGrid_PaintGroupAreaBackground(
	CDC & dc,
	const RECT & rcArea,
	__EXT_MFC_SAFE_LPCTSTR strEmptyAreaCaption, // not NULL if area is empty
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::ReportGrid_PaintGroupAreaBackground(
				dc,
				rcArea,
				strEmptyAreaCaption,
				pHelperSrc,
				lParam
				);

	dc.FillSolidRect( &rcArea, m_clrRgGroupAreaBk );
INT nTextLen = 0;
	if(		strEmptyAreaCaption != NULL
		&&	( nTextLen = INT( _tcslen( strEmptyAreaCaption ) ) ) > 0
		)
	{
		CRect rcCaption = rcArea;
		rcCaption.DeflateRect( 5, 5, 0, 5 );
		int nOldBkMode = dc.SetBkMode( TRANSPARENT );
		COLORREF clrOldTextColor = dc.SetTextColor( m_clrRgGroupAreaText );
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(strEmptyAreaCaption), nTextLen,
			rcCaption,
			DT_SINGLELINE|DT_NOCLIP, 0
			);
		dc.SetTextColor( clrOldTextColor );
		dc.SetBkMode( nOldBkMode );
	}
	return true;
}

bool CExtPaintManager::ReportGrid_PaintGroupAreaItemBackground(
	CDC & dc,
	const RECT & rcItem,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	dc;
	rcItem;
	pHelperSrc;
	lParam;
	return false;
}

COLORREF CExtPaintManager::ReportGrid_GetGroupConnectorColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return COLORREF(-1L);
}

COLORREF CExtPaintManager::ReportGrid_GetHeaderTextColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtReportGridColumn) )
		)
	{
		if( (lParam&__EGCPF_HIGHLIGHTED_BY_PRESSED_COLUMN) != 0 )
			return GetColor( COLOR_HIGHLIGHTTEXT, pHelperSrc, lParam );
		else
			return GetColor( COLOR_BTNTEXT, pHelperSrc, lParam );
	}
	return COLORREF(-1L);
}

COLORREF CExtPaintManagerNativeXP::ReportGrid_GetHeaderTextColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtReportGridColumn) )
		)
	{
		if( (lParam&__EGCPF_HIGHLIGHTED_BY_PRESSED_COLUMN) != 0 )
			return ::GetSysColor( COLOR_HIGHLIGHTTEXT );
		else
			return ::GetSysColor( COLOR_BTNTEXT );
	}
	return COLORREF(-1L);
}

COLORREF CExtPaintManagerOffice2007_Impl::ReportGrid_GetHeaderTextColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::ReportGrid_GetHeaderTextColor(
				pHelperSrc,
				lParam
				);

	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtReportGridColumn) )
		)
	{
		if( (lParam&__EGCPF_HIGHLIGHTED_BY_PRESSED_COLUMN) != 0 )
			return GetColor( COLOR_HIGHLIGHTTEXT, pHelperSrc, lParam );
		else
			return m_clrRgHeaderText;
	}
	return COLORREF(-1L);
}

#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

CSize CExtPaintManager::GetTextSizes(
	bool bBold // = false
	)
{
	ASSERT_VALID( this );
CWindowDC dc( NULL );
CFont * pOldFont =
		dc.SelectObject(
			bBold ? &m_FontBold : &m_FontNormal
			);
	ASSERT( pOldFont != NULL );
TEXTMETRIC tm;
	dc.GetTextMetrics( &tm );
int nTextHeightHorz = tm.tmHeight + 2;
	dc.SelectObject( &m_FontNormal );
	dc.GetTextMetrics( &tm );
int nTextHeightVert = tm.tmHeight + 2;
	dc.SelectObject( pOldFont );
	return CSize(nTextHeightHorz,nTextHeightVert);
}

int CExtPaintManager::GetTextHeight(
	bool bHorz
	)
{
	ASSERT_VALID( this );
CSize _size = GetTextSizes();
	return bHorz ? _size.cx : _size.cy;
}

int CExtPaintManager::GetMenuExpandButtonHeight()
{
	ASSERT_VALID( this );
int nHeight = ::GetSystemMetrics(SM_CYMENUCHECK);
	ASSERT( nHeight > 0 );
	return nHeight;
}

int CExtPaintManagerXP::GetMenuExpandButtonHeight()
{
	ASSERT_VALID( this );
	return CExtPaintManager::GetMenuExpandButtonHeight();
}

int CExtPaintManagerOffice2003::GetMenuExpandButtonHeight()
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetMenuExpandButtonHeight();
int nHeightNormal = CExtPaintManager::GetMenuExpandButtonHeight();
	ASSERT( nHeightNormal > 0 );
	return max( nHeightNormal, 18 );
}

void CExtPaintManager::PaintMenuScrollButton(
	CDC & dc,
	bool bHover,
	bool bPushed,
	bool bTopButton,
	const RECT & rcScrollButton,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	bPushed = bPushed || bHover;
CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		true,
		rcScrollButton,
		bTopButton ? _T("t") : _T("u"), // up arrow / down arrow
		NULL,
		true,
		false, // bHover,
		bPushed,
		false,
		true,true,false,false,
		__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
		(HFONT)m_FontMarlett.GetSafeHandle()
		);
	_ppbd.m_lParam = lParam;
	PaintPushButton( dc, _ppbd );
}

void CExtPaintManagerXP::PaintMenuScrollButton(
	CDC & dc,
	bool bHover,
	bool bPushed,
	bool bTopButton,
	const RECT & rcScrollButton,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
bool bTransparentBk = false;
bool bDrawBorder = true;
	bPushed = bPushed || bHover;
	if( bPushed )
	{
		PAINTMENUITEMDATA _pmid; // fake
		_pmid.m_bSelected = true;
		if(		PaintMenuItemBackgroundXP( dc, _pmid, rcScrollButton )
			||	PaintMenuItemSelectionAreaXP( dc, _pmid, rcScrollButton ) 
			)
		{
			bTransparentBk = true;
			bDrawBorder = false;
			bPushed = bHover = false;
		}
	}
CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		true,	// bHorz
		rcScrollButton,
		bTopButton ? _T("t") : _T("u"), // up arrow / down arrow
		NULL,	// pIcon
		true,	// bFlat
		bHover,
		bPushed,
		false,	// bIndeterminate
		true,	// bEnabled
		bDrawBorder,
		false,	// bDrawFocusRect
		false,	// bDefaultPushButton
		__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
		(HFONT)m_FontMarlett.GetSafeHandle(),
		false,	// bDropDown
		0,		// nHelperSysCmdID
		bTransparentBk
		);
	_ppbd.m_lParam = lParam;
	PaintPushButton( dc, _ppbd );
}

void CExtPaintManager::PaintMenuTearOffButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bPushed;
	bHover;
	pHelperSrc;
	lParam;
CRect rcGlyph( rectButton );
	rcGlyph.DeflateRect( 1, 0, 0, 1 );
	dc.FillSolidRect(
		&rcGlyph,
		GetColor( COLOR_HIGHLIGHT )
		);
}

void CExtPaintManagerXP::PaintMenuTearOffButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	pHelperSrc;
	lParam;
CRect rcGlyph( rectButton );
	rcGlyph.DeflateRect( 0, 0, 0, 1 );
	dc.FillSolidRect( &rcGlyph, GetColor( ( bHover || bPushed ) ? CLR_3DFACE_IN : XPCLR_3DFACE_DARK ) );
static const int g_nXpTearOffBtnLinesWidth = 33;
CRect rcLines = rcGlyph;
	rcLines.OffsetRect( (rcLines.Width() - g_nXpTearOffBtnLinesWidth) / 2, 0 );
	rcLines.right = rcLines.left + g_nXpTearOffBtnLinesWidth;
	if( bHover || bPushed )
	{
		COLORREF clrBorder = GetColor( XPCLR_HILIGHT_BORDER );
		dc.Draw3dRect( &rcGlyph, clrBorder, clrBorder );
		rcLines.DeflateRect( 0, 2 );
		COLORREF clrLine = GetColor( COLOR_BTNTEXT );
		int yStep = rcLines.top;
		for( ; yStep < rcLines.bottom; yStep += 2 )
			dc.FillSolidRect( rcLines.left, yStep, rcLines.Width(), 1, clrLine );
	} // if( bHover || bPushed )
	else
	{
		rcLines.DeflateRect( 0, 1 );
		COLORREF clrLine = GetColor( COLOR_3DSHADOW );
		int yStep = rcLines.top;
		for( ; yStep < rcLines.bottom; yStep += 2 )
			dc.FillSolidRect( rcLines.left, yStep, rcLines.Width(), 1, clrLine );
	} // else from if( bHover || bPushed )
}

void CExtPaintManagerOffice2003::PaintMenuTearOffButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuTearOffButton( dc, rectButton, bPushed, bHover, pHelperSrc, lParam );
		return;
	}
CRect rcGlyph( rectButton );
	rcGlyph.DeflateRect( 0, 0, 0, 1 );
	dc.FillSolidRect( &rcGlyph, GetColor( ( bHover || bPushed ) ? CLR_3DFACE_IN : XPCLR_3DFACE_DARK ) );
static const int g_n2003TearOffBtnSpaceNormal = 36;
static const int g_n2003TearOffBtnSpaceSmall = 10;
CRect rcBoxes = rcGlyph;
	rcBoxes.DeflateRect( g_n2003TearOffBtnSpaceNormal, 0 );
	if( rcBoxes.Width() < g_n2003TearOffBtnSpaceSmall )
	{
		rcBoxes = rcGlyph;
		rcBoxes.DeflateRect( g_n2003TearOffBtnSpaceSmall, 0 );
	}
static const CSize g_sizeGripDot( 2, 2 );
static const CSize g_sizeGripDist( 1, 1 );
static const CSize g_sizeGripShadowOffset( 1, 1 );
	rcBoxes.DeflateRect( 0, ( rcBoxes.Height() - g_sizeGripDot.cy - g_sizeGripShadowOffset.cy ) / 2 );
	if( bHover || bPushed )
	{
		COLORREF clrBorder = GetColor( XPCLR_HILIGHT_BORDER );
		dc.Draw3dRect( &rcGlyph, clrBorder, clrBorder );
	} // if( bHover || bPushed )
	if( rcBoxes.left < rcBoxes.right )
	{
		COLORREF clrDotShadow = GetColor( _2003CLR_GRIPPER_DOT_LIGHT );
		COLORREF clrDotFace = GetColor( _2003CLR_GRIPPER_DOT_DARK );
		CRect rcDotFace( rcBoxes.TopLeft(), g_sizeGripDot );
		CRect rcDotShadow( rcDotFace );
		rcDotShadow.OffsetRect( g_sizeGripShadowOffset );
		int nStepH = g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx;
		for( ; (rcDotShadow.right+g_sizeGripDist.cx) < rcBoxes.right; )
		{
			dc.FillSolidRect( &rcDotShadow, clrDotShadow );
			dc.FillSolidRect( &rcDotFace, clrDotFace );
			rcDotFace.OffsetRect( nStepH, 0 );
			rcDotShadow.OffsetRect( nStepH, 0 );
		}
	} // if( rcBoxes.left < rcBoxes.right )
}

void CExtPaintManager::PaintMenuExpandButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bHover;
	
	CRect rcGlyph(rectButton);
	rcGlyph.DeflateRect(1,0);

	if( bPushed )
	{
		dc.FillRect(
			&rcGlyph,
			&m_brushLightDefault
			);
		dc.Draw3dRect(
			&rcGlyph,
			GetColor( CLR_3DHILIGHT_OUT, pHelperSrc, lParam ),
			GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam )
			);
	}
	else
	{
		CExtPaintManager::PAINTMENUITEMDATA _pmid(
			pHelperSrc,
			rcGlyph, rectButton, 0, _T(""),
			_T(""), NULL,
			false, false, false,
			false, false, true, false, false, false,
			0, NULL
			);
		PaintMenuItem( dc, _pmid );
	}
COLORREF ColorValues[] =
{
	RGB(0,0,0),
	GetColor( CLR_MENUTEXT_OUT, pHelperSrc, lParam )
};
	PaintGlyphCentered(
		dc,
		rcGlyph,
		g_glyph_btn_expand_bottom2,
		ColorValues
		);
}

void CExtPaintManagerXP::PaintMenuExpandButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bHover;
bool bRTL = false;
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		CExtPopupMenuWnd * pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	} // if( pHelperSrc != NULL )
int nIconAreaWidth = 0;
	if(		pHelperSrc != NULL // (+ 2.23)
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
		&&	((CExtPopupMenuWnd*)pHelperSrc) ->
				ItemGetCount() > 0
		)
	{
		CExtPopupMenuWnd::MENUITEMDATA & _mii =
			((CExtPopupMenuWnd*)pHelperSrc) ->
				ItemGetInfo(
					((CExtPopupMenuWnd*)pHelperSrc) ->
						ItemGetCount()
					- 1
					);
		if( ! _mii.IsToolButton() )
			nIconAreaWidth = _mii.GetIconAreaWidth();
	}
CRect rcGlyph(rectButton);
	rcGlyph.DeflateRect( 1, 0 );
	if( bPushed )
	{
		CExtPaintManager::PAINTMENUITEMDATA _pmid; // fake
		_pmid.m_bSelected = true;
		if( ! PaintMenuItemBackgroundXP( dc, _pmid, rcGlyph ) )
		{
			if( ! PaintMenuItemSelectionAreaXP( dc, _pmid, rcGlyph ) )
			{
				PAINTPUSHBUTTONDATA _ppbd(
					pHelperSrc,
					true,rcGlyph,_T(""),NULL,
					true,false,bPushed,false,
					false,true,false,false,
					__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
					NULL,
					false
					);
				PaintPushButton( dc, _ppbd );
				rcGlyph.OffsetRect( GetPushedOffset() );
			}
		}
	}
	else
	{
		CExtPaintManager::PAINTMENUITEMDATA _pmid(
			pHelperSrc,
			rcGlyph, rectButton, nIconAreaWidth, _T(""),
			_T(""), NULL,
			false, false, false,
			false, false, true, false, false, false,
			0, NULL
			);
		PaintMenuItem( dc, _pmid );
	}
COLORREF ColorValues[] =
{
	RGB(0,0,0),
	GetColor( CLR_MENUTEXT_OUT, pHelperSrc, lParam )
};
	PaintGlyphCentered(
		dc,
		rcGlyph,
		g_glyph_btn_expand_bottom2,
		ColorValues
		);
}

void CExtPaintManagerOffice2003::PaintMenuExpandButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuExpandButton(
			dc,
			rectButton,
			bPushed,
			bHover,
			pHelperSrc,
			lParam
			);
		return;
	}

bool bRTL = false;
CExtPopupMenuWnd * pPopup = NULL;
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	} // if( pHelperSrc != NULL )
CRect rcButton( rectButton );
	if( ( rcButton.Width() & 0x01 ) != 0 )
	{
		if( bRTL )
			rcButton.left ++;
		else
			rcButton.right --;
	} // if( ( rcButton.Width() & 0x01 ) != 0 )
int nIconAreaWidth = 0;
	if(		pPopup != NULL
		&&	pPopup->ItemGetCount() > 0
		)
	{
		CExtPopupMenuWnd::MENUITEMDATA & _mii =
			pPopup->ItemGetInfo( pPopup->ItemGetCount() - 1 );
		if( ! _mii.IsToolButton() )
			nIconAreaWidth = _mii.GetIconAreaWidth();
	}
	if(	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8 )
	{
		CExtPaintManagerXP::PaintMenuExpandButton(
			dc,
			rectButton,
			bPushed,
			bHover,
			pHelperSrc,
			lParam
			);
		return;
	}
CRect rcGlyph( rectButton );
	rcGlyph.DeflateRect( 1, 0 );
	if( bPushed )
	{
		CExtPaintManager::PAINTMENUITEMDATA _pmid; // fake
		_pmid.m_bSelected = true;
		if( ! PaintMenuItemBackgroundXP( dc, _pmid, rcGlyph ) )
		{
			if( ! PaintMenuItemSelectionAreaXP( dc, _pmid, rcGlyph ) )
			{
				PAINTPUSHBUTTONDATA _ppbd(
					pHelperSrc,
					true,rcGlyph,_T(""),NULL,
					true,false,bPushed,false,
					false,true,false,false,
					__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
					NULL,
					false
					);
				PaintPushButton( dc, _ppbd );
				rcGlyph.OffsetRect( GetPushedOffset() );
			}
		}
	}
	else
	{
		CExtPaintManager::PAINTMENUITEMDATA _pmid(
			pHelperSrc,
			rcGlyph, rectButton, nIconAreaWidth, _T(""),
			_T(""), NULL,
			false, bHover, false,
			false, false, true, false, false, false,
			0, NULL
			);
		PaintMenuItem( dc, _pmid );
	}

	// paint expand circle with gradient
CRect rcCircle( rcButton );
	rcCircle.NormalizeRect();
CPoint ptDest = rcCircle.TopLeft();
	ptDest.x +=
		(rcCircle.Width() - 16) / 2;
	ptDest.y +=
		(rcCircle.Height() - 16) / 2;

const BYTE _CircleMask[16*16] =
{	
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0xC6, 0xB4, 0xB4, 0xB4, 0xC6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xEA, 0xEA, 0xEA, 0xEA, 0xC6, 0xB4, 0x90, 0x7E, 0x7E, 0xC6, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xEA, 0xFC, 0xFC, 0xEA, 0xEA, 0xC6, 0xB4, 0x90, 0x7E, 0x6C, 0x5A, 0x90, 0xFF, 0xFF,
	0xFF, 0xEA, 0xFC, 0xFC, 0xFC, 0xEA, 0xEA, 0xC6, 0xB4, 0x90, 0x7E, 0x6C, 0x5A, 0x36, 0x7E, 0xFF,
	0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xEA, 0xEA, 0xC6, 0xB4, 0x90, 0x7E, 0x6C, 0x5A, 0x36, 0x24, 0xFF,
	0xEA, 0xFC, 0xFC, 0xFC, 0xFC, 0xEA, 0xEA, 0xC6, 0xB4, 0x90, 0x7E, 0x6C, 0x48, 0x36, 0x24, 0x5A,
	0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xC6, 0xB4, 0x90, 0x90, 0x7E, 0x6C, 0x48, 0x24, 0x12, 0x24,
	0xC6, 0xEA, 0xEA, 0xEA, 0xC6, 0xC6, 0xC6, 0xB4, 0x90, 0x7E, 0x7E, 0x48, 0x36, 0x24, 0x12, 0x12,
	0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xB4, 0xB4, 0x90, 0x7E, 0x7E, 0x6C, 0x48, 0x36, 0x12, 0x12, 0x00,
	0xC6, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0x90, 0x7E, 0x7E, 0x6C, 0x5A, 0x36, 0x24, 0x12, 0x00, 0x00,
	0xC6, 0x90, 0x90, 0x90, 0x90, 0x90, 0x7E, 0x7E, 0x6C, 0x6C, 0x48, 0x36, 0x24, 0x12, 0x00, 0x36,
	0xFF, 0x90, 0x7E, 0x7E, 0x7E, 0x7E, 0x6C, 0x6C, 0x5A, 0x5A, 0x36, 0x24, 0x12, 0x00, 0x00, 0xFF,
	0xFF, 0xC6, 0x6C, 0x6C, 0x6C, 0x6C, 0x5A, 0x5A, 0x5A, 0x48, 0x36, 0x24, 0x12, 0x00, 0x48, 0xFF,
	0xFF, 0xFF, 0xB4, 0x6C, 0x5A, 0x5A, 0x5A, 0x48, 0x48, 0x36, 0x24, 0x12, 0x00, 0x36, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xC6, 0x5A, 0x48, 0x48, 0x48, 0x36, 0x24, 0x24, 0x12, 0x6C, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB4, 0x6C, 0x48, 0x36, 0x5A, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
	
COLORREF clrLight =
		GetColor( CExtPaintManagerOffice2003::_2003CLR_EXPBTN_CIRCLE_LIGHT, pHelperSrc, lParam );
COLORREF clrDark =
		GetColor( CExtPaintManagerOffice2003::_2003CLR_EXPBTN_CIRCLE_DARK, pHelperSrc, lParam );

	for( int i = 0; i < 16 * 16; i++ )
	{
		int nPixel = _CircleMask[i];
		
		int nRed = 
			GetRValue(clrDark) - 
			nPixel*(GetRValue(clrDark) - 
			GetRValue(clrLight)) / 0xFF;
		
		int nGreen = 
			GetGValue(clrDark) - 
			nPixel*( GetGValue(clrDark) - 
			GetGValue(clrLight)) / 0xFF;
		
		int nBlue = 
			GetBValue(clrDark) - 
			nPixel*( GetBValue(clrDark) - 
			GetBValue(clrLight)) / 0xFF;

		if( nPixel != 0xFF )
			dc.SetPixel(
				ptDest.x + i / 16, 
				ptDest.y  + i % 16, 
				RGB(nRed, nGreen, nBlue)
				);
	}
	
	COLORREF ColorValues[] =
	{
		RGB(0,0,0),
		GetColor( CLR_MENUTEXT_OUT, pHelperSrc, lParam )
	};
	PaintGlyphCentered(
		dc,
		rcButton,
		g_glyph_btn_expand_bottom2,
		ColorValues
		);
}

void CExtPaintManagerNativeXP::PaintMenuExpandButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintMenuExpandButton(
			dc,
			rectButton,
			bPushed,
			bHover,
			pHelperSrc,
			lParam
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	ASSERT( pWnd != NULL );
	ASSERT_VALID( pWnd );
	
CRect rcGlyph(rectButton);
	rcGlyph.DeflateRect(1,0);
	
INT nPartID = TP_BUTTON;
INT nStateID = bHover ? TS_HOT : ( bPushed ? TS_PRESSED : TS_NORMAL );

	if( g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_TOOLBAR ) != NULL )
	{
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				pWnd->GetSafeHwnd(),
				dc.GetSafeHdc(), 
				nPartID, 
				nStateID, 
				&rcGlyph, 
				&rcGlyph
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}

	COLORREF ColorValues[] =
	{
		RGB(0,0,0),
		::GetSysColor( COLOR_BTNTEXT )
	};
	PaintGlyphCentered(
		dc,
		rcGlyph,
		g_glyph_btn_expand_bottom2,
		ColorValues
		);
}

CSize CExtPaintManager::FixedBar_GetRoundedAreaMerics() const
{
	ASSERT_VALID( this );
	return CSize( 0, 0 );
}

CSize CExtPaintManagerXP::FixedBar_GetRoundedAreaMerics() const
{
	ASSERT_VALID( this );
	return CExtPaintManager::FixedBar_GetRoundedAreaMerics();
}

CSize CExtPaintManagerOffice2003::FixedBar_GetRoundedAreaMerics() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::FixedBar_GetRoundedAreaMerics();
	return CSize( 4, 4 );
}

void CExtPaintManager::PaintToolbarExpandButton(
	CDC & dc,
	const RECT & rcButtonArea,
	bool bHorz, // if false - down
	bool bBarIsCompletelyVisible,
	bool bEnabled,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bTransparentBackground // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rect( rcButtonArea );
	rect.NormalizeRect();
	if( !dc.RectVisible( &rect ) )
		return;
CRect rectButton(rect);
const glyph_t * pGlyph = NULL, * pGlyph2 = NULL;
	if( bHorz )
	{
		pGlyph = &g_glyph_btn_expand_bottom;
		if( ! bBarIsCompletelyVisible )
			pGlyph2 = &g_glyph_btn_expand_right2;
	}
	else
	{
		pGlyph = &g_glyph_btn_expand_left;
		if( ! bBarIsCompletelyVisible )
			pGlyph2 = &g_glyph_btn_expand_bottom2;
	}
	ASSERT( pGlyph != NULL );
PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		true,rect,_T(""),NULL,true,
		bHover,bPushed,false,bEnabled,
		true,false,false,
		__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
		NULL,false,0,bTransparentBackground
		);
	PaintPushButton( dc, _ppbd );
COLORREF clr = GetColor( bEnabled ? CLR_TEXT_OUT : COLOR_3DHILIGHT, pHelperSrc, lParam );
COLORREF ColorValues[] = { 0, clr };
	if( bPushed )
		rect.OffsetRect( GetPushedOffset() );
CRect rectGlyph(rectButton.TopLeft(),pGlyph->Size());
CRect rectGlyph2(rectGlyph);
CSize sizePushedOffset = GetPushedOffset();
	if( bPushed )
	{
		rectGlyph.OffsetRect( sizePushedOffset );
		rectGlyph2.OffsetRect( sizePushedOffset );
	}
	if( bHorz )
	{
		int nGap = (max(sizePushedOffset.cy,1)) * 3;
		rectGlyph.OffsetRect(
			( rectButton.Size().cx - pGlyph->Size().cx ) / 2,
			rectButton.Size().cy - pGlyph->Size().cy - nGap
			);
		if( !bBarIsCompletelyVisible )
		{
			ASSERT( pGlyph2 != NULL );
			rectGlyph2.OffsetRect(
				( rectButton.Size().cx - pGlyph2->Size().cx ) / 2,
				nGap
				);
		}
	}
	else
	{
		int nGap = (max(sizePushedOffset.cx,1)) * 3;
		rectGlyph.OffsetRect(
			nGap,
			(rectButton.Size().cy - pGlyph->Size().cy)/2
			);
		if( !bBarIsCompletelyVisible )
		{
			ASSERT( pGlyph2 != NULL );
			rectGlyph2.OffsetRect(
				rectButton.Size().cx - pGlyph2->Size().cx - nGap,
				( rectButton.Size().cy - pGlyph2->Size().cy ) / 2
				);
		}
	}
	if( bEnabled )
	{
		PaintGlyph( dc, rectGlyph.TopLeft(), *pGlyph, ColorValues );
		if( ! bBarIsCompletelyVisible )
		{
			ASSERT( pGlyph2 != NULL );
			PaintGlyph( dc, rectGlyph2.TopLeft(), *pGlyph2, ColorValues );
		}
	} // if( bEnabled )
	else
	{
		rectGlyph.OffsetRect( 1, 1 );
		PaintGlyph( dc, rectGlyph.TopLeft(), *pGlyph, ColorValues );
		rectGlyph.OffsetRect( -1, -1 );
		ColorValues[1] = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
		PaintGlyph( dc, rectGlyph.TopLeft(), *pGlyph, ColorValues );
	} // else from if( bEnabled )
}

void CExtPaintManagerXP::PaintToolbarExpandButton(
	CDC & dc,
	const RECT & rcButtonArea,
	bool bHorz, // if false - down
	bool bBarIsCompletelyVisible,
	bool bEnabled,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bTransparentBackground // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rect( rcButtonArea );
	rect.NormalizeRect();
	if( ! dc.RectVisible( &rect ) )
		return;
CRect rectButton( rect );
const glyph_t * pGlyph = NULL, * pGlyph2 = NULL;
	if( bHorz )
	{
		pGlyph = m_pGlyphTbEpBtnH0;
		pGlyph2 = m_pGlyphTbEpBtnH1;
	} // if( bHorz )
	else
	{
		pGlyph = m_pGlyphTbEpBtnV0;
		pGlyph2 = m_pGlyphTbEpBtnV1;
	} // else from if( bHorz )
	ASSERT( pGlyph != NULL );
	ASSERT( pGlyph2 != NULL );
PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		true,rect,_T(""),NULL,true,
		bHover,bPushed,false,bEnabled,
		true,false,false,
		__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
		NULL,false,0,bTransparentBackground
		);
	PaintPushButton( dc, _ppbd );
COLORREF clr = GetColor( bEnabled ? CLR_TEXT_OUT : COLOR_3DHILIGHT, pHelperSrc, lParam );
COLORREF ColorValues[] = { 0, clr };
	if( bPushed )
		rect.OffsetRect( GetPushedOffset() );
CRect rectGlyph( rectButton.TopLeft(), pGlyph->Size() );
CRect rectGlyph2( rectGlyph );
CSize sizePushedOffset = GetPushedOffset();
	if( bPushed )
	{
		rectGlyph.OffsetRect( sizePushedOffset );
		rectGlyph2.OffsetRect( sizePushedOffset );
	} // if( bPushed )
	if( bHorz )
	{
		int nGap = (max(sizePushedOffset.cy,1)) * 3;
		rectGlyph.OffsetRect(
			( rectButton.Size().cx - pGlyph->Size().cx ) / 2, // + 1
			rectButton.Size().cy - pGlyph->Size().cy - nGap
			);
		rectGlyph2.OffsetRect(
			( rectButton.Size().cx - pGlyph2->Size().cx ) / 2 + 1,
			nGap
			);
	} // if( bHorz )
	else
	{
		int nGap = (max(sizePushedOffset.cx,1)) * 3;
		rectGlyph.OffsetRect(
			nGap,
			( rectButton.Size().cy - pGlyph->Size().cy )/2 // + 1
			);
		rectGlyph2.OffsetRect(
			rectButton.Size().cx - pGlyph2->Size().cx - nGap,
			( rectButton.Size().cy - pGlyph2->Size().cy ) / 2 + 1
			);
		if( m_bExpBtnSwapVGlyphs )
		{
			CRect rcTmp( rectGlyph );
			rectGlyph = rectGlyph2;
			rectGlyph2 = rcTmp;
		}
	} // else from if( bHorz )
	if( bEnabled )
	{
		PaintGlyph( dc,rectGlyph.TopLeft(),*pGlyph,ColorValues );
		if( ! bBarIsCompletelyVisible )
			PaintGlyph( dc, rectGlyph2.TopLeft(), *pGlyph2, ColorValues );
	} // if( bEnabled )
	else
	{
		ColorValues[1] = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
		PaintGlyph( dc, rectGlyph.TopLeft(), *pGlyph, ColorValues );
	} // else from if( bEnabled )
}

void CExtPaintManagerOffice2003::PaintToolbarExpandButton(
	CDC & dc,
	const RECT & rcButtonArea,
	bool bHorz, // if false - down
	bool bBarIsCompletelyVisible,
	bool bEnabled,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bTransparentBackground // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintToolbarExpandButton(
			dc, rcButtonArea, bHorz, bBarIsCompletelyVisible,
			bEnabled, bPushed, bHover,
			pHelperSrc, lParam, bTransparentBackground
			);
		return;
	}
CRect rect( rcButtonArea );
	rect.NormalizeRect();
	if( ! dc.RectVisible( &rect ) )
		return;
CExtToolControlBar * pToolBar = NULL;
bool bStyleOffice2003 = true;
	if(		pHelperSrc == NULL
		||	(! bEnabled)
		||	(! pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtBarContentExpandButton)) )
		||	(! GetCb2DbTransparentMode(pHelperSrc) )
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
		bStyleOffice2003 = false;
	else
	{
		pToolBar = ((CExtBarContentExpandButton*)pHelperSrc)->GetBar();
		ASSERT_VALID( pToolBar );
		if(		pToolBar->m_bPaletteMode
			||	pToolBar->IsFloating()
			||	pToolBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar))
			||	pToolBar->IsKindOf(RUNTIME_CLASS(CExtPanelControlBar))
			||	(	
					( pToolBar->m_pDockSite == NULL || pToolBar->m_bPresubclassDialogMode )
				&&	!pToolBar->m_bForceBalloonGradientInDialogs 
				)
			)
			bStyleOffice2003 = false;
	}
	if( ! bStyleOffice2003 )
	{
		CExtPaintManagerXP::PaintToolbarExpandButton(
			dc, rcButtonArea, bHorz, bBarIsCompletelyVisible,
			bEnabled, bPushed, bHover,
			pHelperSrc, lParam, bTransparentBackground
			);
		return;
	}
	ASSERT_VALID( pToolBar );
CRect rcToolbarClientArea;
	pToolBar->GetClientRect( &rcToolbarClientArea );
CRect rectButton( rect );
CRect rcBaloonExclude( rcToolbarClientArea );
CSize _sizeRoundedAreaMerics = FixedBar_GetRoundedAreaMerics();
CSize _sizeRoundedAreaShift( 0, 0 );
	if( g_PaintManager.m_bIsWin9x )
	{ // region fix for Win9x
		if(		_sizeRoundedAreaMerics.cx > 0
			&&	_sizeRoundedAreaMerics.cx <= 5
			)
		{
			if( bHorz )
				_sizeRoundedAreaShift.cx = __WIN9X_FIXED_BAR_ROUNDED_AREA_SHIFT_X;
			_sizeRoundedAreaMerics.cx += __WIN9X_FIXED_BAR_ROUNDED_AREA_ADJUST_X;
		}
		if(		_sizeRoundedAreaMerics.cy > 0
			&&	_sizeRoundedAreaMerics.cy <= 5
			)
		{
			if( ! bHorz )
				_sizeRoundedAreaShift.cy = __WIN9X_FIXED_BAR_ROUNDED_AREA_SHIFT_Y;
			_sizeRoundedAreaMerics.cy += __WIN9X_FIXED_BAR_ROUNDED_AREA_ADJUST_Y;
		}
	} // region fix for Win9x
	if( bHorz )
	{
		rectButton.OffsetRect( rcToolbarClientArea.right - rectButton.right, 0 );
		rectButton.InflateRect( 1, 0, 0, 0 );
		rectButton.top = rcToolbarClientArea.top;
		rectButton.bottom = rcToolbarClientArea.bottom - 1;
		rcBaloonExclude.right = rectButton.left + 1;
		rectButton.left -= _sizeRoundedAreaMerics.cx;
	} // if( bHorz )
	else
	{
		rectButton.OffsetRect( 0, rcToolbarClientArea.bottom - rectButton.bottom );
		rectButton.InflateRect( 0, 1, 0, 0 );
		rectButton.left = rcToolbarClientArea.left;
		rectButton.right = rcToolbarClientArea.right - 1;
		rcBaloonExclude.bottom = rectButton.top + 1;
		rectButton.top -= _sizeRoundedAreaMerics.cy;
	} // else from if( bHorz )

CRgn rgnButton, rgnBE;
	if(		(! rgnButton.CreateRoundRectRgn(
				rcToolbarClientArea.left, rcToolbarClientArea.top, rcToolbarClientArea.right, rcToolbarClientArea.bottom,
				_sizeRoundedAreaMerics.cx, _sizeRoundedAreaMerics.cy
				)
			)
		||	(! rgnBE.CreateRoundRectRgn(
				rcBaloonExclude.left, rcBaloonExclude.top, rcBaloonExclude.right, rcBaloonExclude.bottom,
				_sizeRoundedAreaMerics.cx, _sizeRoundedAreaMerics.cy
				)
			)
		||	rgnButton.CombineRgn( &rgnButton, &rgnBE, RGN_DIFF ) == ERROR
		)
	{
		ASSERT( FALSE );
		CExtPaintManagerXP::PaintToolbarExpandButton(
			dc, rcButtonArea, bHorz, bBarIsCompletelyVisible,
			bEnabled, bPushed, bHover,
			pHelperSrc, lParam, bTransparentBackground
			);
		return;
	}
	dc.SelectClipRgn( &rgnButton );
	if( bHover || bPushed )
	{
		CRect rcSolidFill( rectButton );
		rcSolidFill.InflateRect( 1, 1 );
		stat_PaintGradientRect(
			dc,
			&rcSolidFill,
			GetColor(
				bPushed
					? ( bHorz ? _2003CLR_EXPBTN_PRESSED_LIGHT : _2003CLR_EXPBTN_PRESSED_DARK )
					: ( bHorz ? _2003CLR_EXPBTN_HOVER_DARK : _2003CLR_EXPBTN_HOVER_LIGHT )
					,
				pHelperSrc,
				lParam
				),
			GetColor(
				bPushed
					? ( bHorz ? _2003CLR_EXPBTN_PRESSED_DARK : _2003CLR_EXPBTN_PRESSED_LIGHT )
					: ( bHorz ? _2003CLR_EXPBTN_HOVER_LIGHT : _2003CLR_EXPBTN_HOVER_DARK )
					,
				pHelperSrc,
				lParam
				),
			bHorz
			);
	} // if( bHover || bPushed )
	else
	{
		if(	OnQueryUseThemeColors() )
		{
			stat_PaintGradientRect(
				dc,
				rectButton,
				GetColor( bHorz ? _2003CLR_EXPBTN_DARK : _2003CLR_EXPBTN_LIGHT, pHelperSrc, lParam ),
				GetColor( bHorz ? _2003CLR_EXPBTN_LIGHT : _2003CLR_EXPBTN_DARK, pHelperSrc, lParam ),
				bHorz
				);
		}
		else
		{
			CRect rectButton1(rectButton), rectButton2(rectButton);
			if( bHorz )
			{
				rectButton1.bottom = rectButton1.top + MulDiv( rectButton1.Height(), 3, 5 );
				rectButton2.top = rectButton1.bottom;
			} // if( bHorz )
			else
			{
				rectButton1.right = rectButton1.left + MulDiv( rectButton1.Width(), 3, 5 );
				rectButton2.left = rectButton1.right;
			} // else from if( bHorz )
			dc.FillSolidRect( &rectButton2, GetColor( _2003CLR_EXPBTN_DARK, pHelperSrc, lParam ) );
			stat_PaintGradientRect(
				dc,
				rectButton1,
				GetColor( bHorz ? _2003CLR_EXPBTN_DARK : _2003CLR_EXPBTN_LIGHT, pHelperSrc, lParam ),
				GetColor( bHorz ? _2003CLR_EXPBTN_LIGHT : _2003CLR_EXPBTN_DARK, pHelperSrc, lParam ),
				bHorz
				);
		}
	} // else from if( bHover || bPushed )

const glyph_t * pGlyph = NULL, * pGlyph2 = NULL;
	if( bHorz )
	{
		pGlyph = m_pGlyphTbEpBtnH0;
		pGlyph2 = m_pGlyphTbEpBtnH1;
	} // if( bHorz )
	else
	{
		pGlyph = m_pGlyphTbEpBtnV0;
		pGlyph2 = m_pGlyphTbEpBtnV1;
	} // else from if( bHorz )
	ASSERT( pGlyph != NULL );
	ASSERT( pGlyph2 != NULL );
COLORREF ColorValuesLight[] = { 0, GetColor( _2003CLR_EXPGLYPH_LIGHT, pHelperSrc, lParam ) };
COLORREF ColorValuesDark[] = { 0, GetColor( _2003CLR_EXPGLYPH_DARK, pHelperSrc, lParam ) };
CRect rectGlyph(rectButton.TopLeft(),pGlyph->Size());
CRect rectGlyph2(rectGlyph);
CSize sizePushedOffset = GetPushedOffset();
	if( bHorz )
	{
		int nGap = (max(sizePushedOffset.cy,1)) * 3;
		rectGlyph.OffsetRect(
			( rectButton.Size().cx - pGlyph->Size().cx ) / 2 + 1,
			rectButton.Size().cy - pGlyph->Size().cy - nGap - 1
			);
		rectGlyph2.OffsetRect(
			( rectButton.Size().cx - pGlyph2->Size().cx ) / 2 + 1,
			nGap + 1
			);
	} // if( bHorz )
	else
	{
		int nGap = (max(sizePushedOffset.cx,1)) * 3;
		rectGlyph.OffsetRect(
			nGap + 1,
			( rectButton.Size().cy - pGlyph->Size().cy )/2 + 1
			);
		rectGlyph2.OffsetRect(
			rectButton.Size().cx - pGlyph2->Size().cx - nGap - 1,
			( rectButton.Size().cy - pGlyph2->Size().cy ) / 2 + 1
			);
		ASSERT( m_bExpBtnSwapVGlyphs );
		CRect rcTmp( rectGlyph );
		rectGlyph = rectGlyph2;
		rectGlyph2 = rcTmp;
	} // else from if( bHorz )
	rectGlyph.OffsetRect( _sizeRoundedAreaShift );
	rectGlyph2.OffsetRect( _sizeRoundedAreaShift );
	rectGlyph.OffsetRect( 1, 1 );
	rectGlyph2.OffsetRect( 1, 1 );
	PaintGlyph( dc, rectGlyph.TopLeft(), *pGlyph, ColorValuesLight );
	if( ! bBarIsCompletelyVisible )
		PaintGlyph( dc, rectGlyph2.TopLeft(), *pGlyph2, ColorValuesLight );
	rectGlyph.OffsetRect( -1, -1 );
	rectGlyph2.OffsetRect( -1, -1 );
	PaintGlyph( dc, rectGlyph.TopLeft(), *pGlyph, ColorValuesDark );
	if( ! bBarIsCompletelyVisible )
		PaintGlyph( dc, rectGlyph2.TopLeft(), *pGlyph2, ColorValuesDark );
	dc.SelectClipRgn( NULL );
}

void CExtPaintManagerNativeXP::PaintToolbarExpandButton(
	CDC & dc,
	const RECT & rcButtonArea,
	bool bHorz, // if false - down
	bool bBarIsCompletelyVisible,
	bool bEnabled,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bTransparentBackground // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rect( rcButtonArea );
	rect.NormalizeRect();
	if( ! dc.RectVisible( &rect ) )
		return;
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintToolbarExpandButton(
			dc, rcButtonArea, bHorz, bBarIsCompletelyVisible,
			bEnabled, bPushed, bHover,
			pHelperSrc, lParam, bTransparentBackground
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
	ASSERT( pTBB != NULL );
	ASSERT_VALID( pTBB );
CExtToolControlBar * pBar  = pTBB->GetSafeBar();
	ASSERT( pBar != NULL );
	ASSERT_VALID( pBar );
	if( g_PaintManager.m_UxTheme.OpenThemeData( pBar->GetSafeHwnd(), VSCLASS_TOOLBAR ) != NULL )
	{
		INT nStateID = 
			bHover
				? TS_HOT
				: bPushed
					? TS_PRESSED
					: TS_NORMAL;
		//VERIFY(
			g_PaintManager.m_UxTheme.DrawBackground(
				pBar->GetSafeHwnd(),
				dc.GetSafeHdc(), 
				TP_BUTTON, 
				nStateID, 
				&rcButtonArea, 
				&rcButtonArea
				//) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
CRect rcButton( rect );
const glyph_t * pGlyph1 = NULL;
const glyph_t * pGlyph2 = NULL;
	if( bHorz )
	{
		pGlyph1 = &g_glyph_btn_expand_bottom;
		if( ! bBarIsCompletelyVisible )
			pGlyph2 = &g_glyph_btn_expand_right2;
	}
	else
	{
		pGlyph1 = &g_glyph_btn_expand_left;
		if( ! bBarIsCompletelyVisible )
			pGlyph2 = &g_glyph_btn_expand_bottom2;
	}
	ASSERT( pGlyph1 != NULL );
COLORREF ColorValues[] = { 0, ::GetSysColor( bEnabled ? COLOR_BTNTEXT : COLOR_GRAYTEXT ) };
CRect rectGlyph1( rcButton.TopLeft(), pGlyph1->Size() );
CRect rectGlyph2( rectGlyph1 );
	if( bHorz )
	{
		INT nGap = 3;
		rectGlyph1.OffsetRect(
			( rcButton.Size().cx - pGlyph1->Size().cx ) / 2,
			rcButton.Size().cy - pGlyph1->Size().cy - nGap
			);
		if( pGlyph2 != NULL )
			rectGlyph2.OffsetRect(
				( rcButton.Size().cx - pGlyph2->Size().cx ) / 2,
				nGap
				);
	}
	else
	{
		INT nGap = 3;
		rectGlyph1.OffsetRect(
			nGap,
			(rcButton.Size().cy - pGlyph1->Size().cy)/2
			);
		if( pGlyph2 != NULL )
			rectGlyph2.OffsetRect(
				rcButton.Size().cx - pGlyph2->Size().cx - nGap,
				( rcButton.Size().cy - pGlyph2->Size().cy ) / 2
				);
	}
	PaintGlyph( dc, rectGlyph1.TopLeft(), *pGlyph1, ColorValues );
	if( pGlyph2 != NULL )
		PaintGlyph( dc, rectGlyph2.TopLeft(), *pGlyph2, ColorValues );
}

static int CALLBACK stat_FindFontByNameCallBack(
	ENUMLOGFONT * pEnumLogFont,
	NEWTEXTMETRIC * pNewTextMetric,
	DWORD dwFontType,
	LPARAM lParam // zero terminated string
	)
{
	ASSERT( pEnumLogFont != NULL );
	pNewTextMetric;
	dwFontType;
__EXT_MFC_SAFE_LPCTSTR sFontToFind =
		reinterpret_cast < const TCHAR * > ( lParam );
	ASSERT( sFontToFind != NULL );
	return
		_tcsicoll(
			pEnumLogFont->elfLogFont.lfFaceName,
			sFontToFind
			);
}

static HFONT stat_menu_HFONT_from_current_NONCLIENTMETRICS(
	bool bUseTahomaFont,
	bool bUseCaptionFont
	)
{
NONCLIENTMETRICS _ncNfo;
	memset( &_ncNfo, 0, sizeof(NONCLIENTMETRICS) );
	_ncNfo.cbSize = sizeof(NONCLIENTMETRICS);
	if(	! ::SystemParametersInfo( SPI_GETNONCLIENTMETRICS, sizeof(_ncNfo), &_ncNfo, 0 ) )
	{
		return NULL;
	}
	_ncNfo.lfSmCaptionFont.lfCharSet = _ncNfo.lfMenuFont.lfCharSet = (BYTE)GetTextCharset( NULL );
LPCTSTR strDesiredFontFaceName = (LPCTSTR)g_ResourceManager->DesiredFont_GetFaceName();
	if(		LPCTSTR(strDesiredFontFaceName) != NULL
		&&	INT(_tcslen(LPCTSTR(strDesiredFontFaceName))) > 0
		)
	{
		if(	! ::EnumFontFamilies( NULL, NULL, (FONTENUMPROC)stat_FindFontByNameCallBack, reinterpret_cast < LPARAM > ( strDesiredFontFaceName ) ) )
		{
			__EXT_MFC_STRCPY( _ncNfo.lfMenuFont.lfFaceName, LF_FACESIZE, strDesiredFontFaceName );
			bUseTahomaFont = false;
		}
	}
	if( bUseTahomaFont )
	{
		static __EXT_MFC_SAFE_LPCTSTR g_sTahoma = _T("Tahoma");
		if(	! ::EnumFontFamilies( NULL, NULL, (FONTENUMPROC)stat_FindFontByNameCallBack, reinterpret_cast < LPARAM > ( LPCTSTR( g_sTahoma ) ) ) )
			__EXT_MFC_STRCPY( _ncNfo.lfMenuFont.lfFaceName, LF_FACESIZE, g_sTahoma );
	} // else if( bUseTahomaFont )
	if( bUseCaptionFont )
		return CreateFontIndirect( &_ncNfo.lfSmCaptionFont );
	return CreateFontIndirect( &_ncNfo.lfMenuFont );
}

bool CExtPaintManager::NcFrame_IsSupported(
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pWnd;
	lParam;
	return false;
}

HRGN CExtPaintManager::NcFrame_GenerateSkinFrameRGN(
	const RECT & rcWnd,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pWnd );
	rcWnd;
	pWnd;
	lParam;
	return ( (HRGN)NULL );
}

INT CExtPaintManager::NcFrame_GetCaptionHeight(
	bool bActive,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	bActive;
	pWnd;
	lParam;
	return 0;
}

INT CExtPaintManagerOffice2007_Impl::NcFrame_GetCaptionHeight(
	bool bActive,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::NcFrame_GetCaptionHeight(
				bActive,
				pWnd,
				lParam
				);

INT nCaptionHeight = bActive ? m_nCaptionHeightActive : m_nCaptionHeightInactive;
	nCaptionHeight = UiScalingDo( nCaptionHeight, __EUIST_Y );
	return nCaptionHeight;
}

void CExtPaintManager::NcFrame_GetMetrics(
	RECT & rcNcBorders,
	RECT & rcThemePadding,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pWnd;
	lParam;
	::SetRectEmpty( &rcNcBorders );
	::SetRectEmpty( &rcThemePadding );
}

CRect CExtPaintManager::NcFrame_GetHtRect(
	UINT nHT,
	bool bScreenMapping,
	bool bLayoutBordersH,
	bool bLayoutBordersV,
	const CExtCmdIcon * pIcon,
	const CWnd * pWnd,
	LPMINMAXINFO pMinMaxInfo, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	nHT;
	bScreenMapping;
	bLayoutBordersH,
	bLayoutBordersV,
	pIcon;
	pWnd;
	pMinMaxInfo,
	lParam;
	return CRect( 0, 0, 0, 0 );
}

void CExtPaintManager::NcFrame_Paint(
	CDC & dc,
	const CExtCmdIcon * pIcon,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	UINT nDrawTextAlignFlags,
	const RECT & rcFrame,
	const RECT & rcClient,
	const RECT & rcIcon,
	const RECT & rcText,
	const RECT & rcHelp,
	const RECT & rcMinimize,
	const RECT & rcMaximizeRestore,
	const RECT & rcClose,
	bool bFrameActive,
	bool bFrameEnabled,
	bool bFrameMaximized,
	CExtPaintManager::e_nc_button_state_t eStateButtonHelp,
	CExtPaintManager::e_nc_button_state_t eStateButtonMinimize,
	CExtPaintManager::e_nc_button_state_t eStateButtonMaximizeRestore,
	CExtPaintManager::e_nc_button_state_t eStateButtonClose,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	pIcon;
	strCaption;
	nDrawTextAlignFlags;
	rcFrame;
	rcClient;
	rcIcon;
	rcText;
	rcHelp;
	rcMinimize;
	rcMaximizeRestore;
	rcClose;
	bFrameActive;
	bFrameEnabled;
	bFrameMaximized;
	eStateButtonHelp;
	eStateButtonMinimize;
	eStateButtonMaximizeRestore;
	eStateButtonClose;
	pWnd;
	lParam;
}

void CExtPaintManager::NcFrame_GetRects(
	CExtCmdIcon * pIcon,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	UINT nDrawTextAlignFlags,
	RECT & rcIcon,
	RECT & rcText,
	RECT & rcHelp,
	RECT & rcMinimize,
	RECT & rcMaximizeRestore,
	RECT & rcClose,
	const CWnd * pWnd,
	LPMINMAXINFO pMinMaxInfo, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pIcon;
	strCaption;
	nDrawTextAlignFlags;
	pWnd;
	pMinMaxInfo;
	lParam;
	::SetRectEmpty( &rcIcon );
	::SetRectEmpty( &rcText );
	::SetRectEmpty( &rcHelp );
	::SetRectEmpty( &rcMinimize );
	::SetRectEmpty( &rcMaximizeRestore );
	::SetRectEmpty( &rcClose );
}

bool CExtPaintManager::Bar_MiniDockFrameNcCalcSize(
	RECT & rcAdjust,
	CExtMiniDockFrameWnd * pMiniFrameWnd,
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pMiniFrameWnd );
	rcAdjust;
	pMiniFrameWnd;
	pBar;
	lParam;
	return false;
}

bool CExtPaintManager::Bar_MiniDockFrameGetNcMetrics(
	INT & nResizingFrameDX,
	INT & nResizingFrameDY,
	INT & nCaptionDY,
	CExtMiniDockFrameWnd * pMiniFrameWnd,
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pMiniFrameWnd );
	pMiniFrameWnd;
	pBar;
	lParam;
	nResizingFrameDX = 3;
	nResizingFrameDY = 3;
	nCaptionDY = 17;
	return true;
}

bool CExtPaintManagerNativeXP::Bar_MiniDockFrameGetNcMetrics(
	INT & nResizingFrameDX,
	INT & nResizingFrameDY,
	INT & nCaptionDY,
	CExtMiniDockFrameWnd * pMiniFrameWnd,
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pMiniFrameWnd );
	pMiniFrameWnd;
	pBar;
	lParam;
	nResizingFrameDX = ::GetSystemMetrics( SM_CXSIZEFRAME );
	nResizingFrameDY = ::GetSystemMetrics( SM_CYSIZEFRAME );
	nCaptionDY = ::GetSystemMetrics( SM_CYSMCAPTION );
	return true;
}

bool CExtPaintManager::Bar_MiniDockFrameCaptionCalcRect(
	RECT & rcCaption,
	CExtMiniDockFrameWnd * pMiniFrameWnd,
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pMiniFrameWnd );

	if( pMiniFrameWnd == NULL )
		return false;

INT nResizingFrameDX = 0;
INT nResizingFrameDY = 0;
INT nCaptionDY = 0;
	Bar_MiniDockFrameGetNcMetrics(
		nResizingFrameDX,
		nResizingFrameDY,
		nCaptionDY,
		pMiniFrameWnd,
		pBar,
		lParam
		);
	
	CRect rcFrameCaption;
	::GetWindowRect( pMiniFrameWnd->GetSafeHwnd(), &rcFrameCaption );
	rcFrameCaption -= rcFrameCaption.TopLeft();
	rcFrameCaption.left  += nResizingFrameDX;
	rcFrameCaption.right -= nResizingFrameDX;
	rcFrameCaption.top   += nResizingFrameDY;
//	rcFrameCaption.bottom =
//		rcFrameCaption.top
//		+ nSmallCaptionDY
//		- ::GetSystemMetrics( SM_CYSMSIZE );
	rcFrameCaption.bottom =
		rcFrameCaption.top
		+ nCaptionDY;
	::CopyRect( &rcCaption, &rcFrameCaption );
	
	return true;
}

void CExtPaintManager::PaintResizableBarSeparator(
	CDC & dc,
	const RECT & rc,
	bool bHorz,
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rc;
	bHorz;
	pBar;
	lParam;
}

bool CExtPaintManager::Bar_LayoutNcAreaButton(
	RECT & rcButton,
	const RECT & rcCaption,
	CExtBarNcAreaButton * pLayoutBtn,
	CExtBarNcAreaButton * pPrevBtn,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pLayoutBtn );
	rcButton;
	rcCaption;
	pLayoutBtn;
	pPrevBtn;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::Bar_LayoutNcAreaButton(
	RECT & rcButton,
	const RECT & rcCaption,
	CExtBarNcAreaButton * pLayoutBtn,
	CExtBarNcAreaButton * pPrevBtn,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pLayoutBtn );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return
			CExtPaintManager::Bar_LayoutNcAreaButton(
				rcButton,
				rcCaption,
				pLayoutBtn,
				pPrevBtn,
				pHelperSrc,
				lParam
				);

CSize szPart(0,0);
	if( g_PaintManager.m_UxTheme.OpenThemeData( NULL, VSCLASS_WINDOW ) != NULL )
	{
		CWindowDC dc( NULL );
		VERIFY(
			g_PaintManager.m_UxTheme.GetThemePartSize(
				dc.GetSafeHdc(), 
				WP_SMALLCLOSEBUTTON, 
				CBS_NORMAL, 
				NULL, 
				CExtUxTheme::__EXT_UX_TS_TRUE,
				&szPart
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}

const int _nGapToBordersH = 2;
const int _nGapToBordersV = 3;
const int _nGapBetweenButtons = 3;

INT x = rcCaption.right - szPart.cx;
INT y = rcCaption.top;

CRect rc( x, y, x + szPart.cx, y + szPart.cy );
	rc.OffsetRect( 
		-_nGapToBordersH,
		_nGapToBordersV 
		);
	if( pPrevBtn != NULL )
	{
		const CRect & rcPrev = *pPrevBtn;
		rc.OffsetRect(
			rcPrev.left - rc.right - _nGapBetweenButtons,
			0
			);
	}

	rcButton = rc;

	return true;
}

CRect CExtPaintManager::Bar_GetCaptionBordersForText(
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	pBar;
	lParam;
	return CRect( 0, 0, 0, 0 );
}

INT CExtPaintManager::Bar_SeparatorWidthGet(
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	pBar;
	lParam;
	return -1;
}

INT CExtPaintManager::Bar_SeparatorHeightGet(
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	pBar;
	lParam;
	return -1;
}

INT CExtPaintManager::Bar_GripperWidthAtLeftGet(
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	pBar;
	lParam;
	return -1;
}

INT CExtPaintManager::Bar_GripperHeightAtTopGet(
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	pBar;
	lParam;
	return -1;
}

HFONT CExtPaintManager::Bar_GetCaptionFont(
	bool bHorz,
	CExtToolControlBar * pBar,
	LPARAM lParam // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	bHorz;
	pBar;
	lParam;
	return NULL;
}

CSize CExtPaintManager::Toolbar_GetMinButtonSize(
	CObject * pHelperSrc,
	LPARAM lParam // = 0
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return CSize( 0, 0 );
}

void CExtPaintManager::Toolbar_AdjustButtonSize(
	CExtBarButton * pTBB,
	CSize & sizePreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	pTBB;
	sizePreCalc;
}

HFONT CExtPaintManager::Toolbar_GetFont(
	bool bHorz,
	CExtControlBar * pBar,
	LPARAM lParam // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	bHorz;
	pBar;
	lParam;
	return NULL;
}

bool CExtPaintManager::Toolbar_GetBGInfo(
	RECT & rcBorders,
	INT & nGripWidthAtLeft,
	INT & nGripHeightAtTop,
	CExtToolControlBar * pBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	rcBorders;
	nGripWidthAtLeft;
	nGripHeightAtTop;
	pBar;
	lParam;
	return false;
}

bool CExtPaintManager::Toolbar_GetSizeOfCEB(
	SIZE & sizeReal,
	const SIZE & sizePreCalc,
	CDC & dc,
	BOOL bHorz,
	CExtBarContentExpandButton * pTBB,
	LPARAM lParam // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	sizeReal;
	sizePreCalc;
	dc;
	bHorz;
	pTBB;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::Toolbar_GetSizeOfCEB(
	SIZE & sizeReal,
	const SIZE & sizePreCalc,
	CDC & dc,
	BOOL bHorz,
	CExtBarContentExpandButton * pTBB,
	LPARAM lParam // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return
			CExtPaintManager::Toolbar_GetSizeOfCEB(
				sizeReal,
				sizePreCalc,
				dc,
				bHorz,
				pTBB,
				lParam
				);
	
	if( bHorz )
	{
		sizeReal.cx = 15;
		sizeReal.cy = sizePreCalc.cy;
	}
	else
	{
		sizeReal.cx = sizePreCalc.cx;
		sizeReal.cy = 15;
	}
	
	return true;
}

void CExtPaintManager::AdvTip_CalcRgn(
	HRGN hRgnPrecalc,
	const RECT & rcRectRgn,
	bool bDynamicShadowApplied,
	INT nSizeInnerShadowIncluded,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( hRgnPrecalc != NULL );
	ASSERT( nSizeInnerShadowIncluded >= 0 );
	hRgnPrecalc;
	rcRectRgn;
	bDynamicShadowApplied;
	nSizeInnerShadowIncluded;
	pHelperSrc;
	lParam;
}

void CExtPaintManagerNativeXP::AdvTip_CalcRgn(
	HRGN hRgnPrecalc,
	const RECT & rcRectRgn,
	bool bDynamicShadowApplied,
	INT nSizeInnerShadowIncluded,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( hRgnPrecalc != NULL );
	ASSERT( nSizeInnerShadowIncluded >= 0 );
	CExtPaintManager::AdvTip_CalcRgn(
		hRgnPrecalc,
		rcRectRgn,
		bDynamicShadowApplied,
		nSizeInnerShadowIncluded,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerOffice2007_Impl::AdvTip_CalcRgn(
	HRGN hRgnPrecalc,
	const RECT & rcRectRgn,
	bool bDynamicShadowApplied,
	INT nSizeInnerShadowIncluded,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( hRgnPrecalc != NULL );
	ASSERT( nSizeInnerShadowIncluded >= 0 );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::AdvTip_CalcRgn(
			hRgnPrecalc,
			rcRectRgn,
			bDynamicShadowApplied,
			nSizeInnerShadowIncluded,
			pHelperSrc,
			lParam
			);
		return;
	}
	
	if( ! m_bAdvTipOnePxExcludeMode)
		return;
CRect rc = rcRectRgn;
	rc.DeflateRect( 0, 0, nSizeInnerShadowIncluded, nSizeInnerShadowIncluded );
//CRgn _arrRgnOnePx[12];
//	if(		(! _arrRgnOnePx[0].CreateRectRgn( rc.left, rc.top, rc.left + 1, rc.top + 1 ) )
//		||		(! _arrRgnOnePx[1].CreateRectRgn( rc.left + 1, rc.top, rc.left + 2, rc.top + 1 ) )
//		||		(! _arrRgnOnePx[2].CreateRectRgn( rc.left, rc.top + 1, rc.left + 1, rc.top + 2 ) )
//		||	(! _arrRgnOnePx[3].CreateRectRgn( rc.right - 1, rc.top, rc.right, rc.top + 1 ) )
//		||		(! _arrRgnOnePx[4].CreateRectRgn( rc.right - 2, rc.top, rc.right - 1, rc.top + 1 ) )
//		||		(! _arrRgnOnePx[5].CreateRectRgn( rc.right - 1, rc.top + 1, rc.right, rc.top + 2 ) )
//		||	(! _arrRgnOnePx[6].CreateRectRgn( rc.left, rc.bottom - 1, rc.left + 1, rc.bottom ) )
//		||		(! _arrRgnOnePx[7].CreateRectRgn( rc.left + 1, rc.bottom - 1, rc.left + 2, rc.bottom ) )
//		||		(! _arrRgnOnePx[8].CreateRectRgn( rc.left, rc.bottom - 2, rc.left + 1, rc.bottom - 1 ) )
//		||	(! _arrRgnOnePx[9].CreateRectRgn( rc.right - 1, rc.bottom - 1, rc.right, rc.bottom ) )
//		||		(! _arrRgnOnePx[10].CreateRectRgn( rc.right - 2, rc.bottom - 1, rc.right - 1, rc.bottom ) )
//		||		(! _arrRgnOnePx[11].CreateRectRgn( rc.right - 1, rc.bottom - 2, rc.right, rc.bottom - 1 ) )
//		)
//		return;
CRgn _arrRgnOnePx[4];
	if(		(! _arrRgnOnePx[0].CreateRectRgn( rc.left, rc.top, rc.left + 1, rc.top + 1 ) )
		||	(! _arrRgnOnePx[1].CreateRectRgn( rc.right - 1, rc.top, rc.right, rc.top + 1 ) )
		||	(! _arrRgnOnePx[2].CreateRectRgn( rc.left, rc.bottom - 1, rc.left + 1, rc.bottom ) )
		||	(! _arrRgnOnePx[3].CreateRectRgn( rc.right - 1, rc.bottom - 1, rc.right, rc.bottom ) )
		)
		return;
INT nRgnIndex, nRgnCount = sizeof(_arrRgnOnePx) / sizeof(_arrRgnOnePx[0]);
	if(		nSizeInnerShadowIncluded > 0
		||	bDynamicShadowApplied
		)
		nRgnCount --; // -= 3;
	for( nRgnIndex = 0; nRgnIndex < nRgnCount; nRgnIndex ++ )
		::CombineRgn( hRgnPrecalc, hRgnPrecalc, HRGN(_arrRgnOnePx[nRgnIndex].GetSafeHandle()), RGN_DIFF );
}

bool CExtPaintManager::AdvTip_PaintBackground(
	CDC & dc,
	const RECT & rcClient,
	bool bAdvTipWithShadow,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcClient;
	bAdvTipWithShadow;
	pHelperSrc;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::AdvTip_PaintBackground(
	CDC & dc,
	const RECT & rcClient,
	bool bAdvTipWithShadow,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	return
		CExtPaintManager::AdvTip_PaintBackground(
			dc,
			rcClient,
			bAdvTipWithShadow,
			pHelperSrc,
			lParam
			);
}

bool CExtPaintManagerOffice2007_Impl::AdvTip_PaintBackground(
	CDC & dc,
	const RECT & rcClient,
	bool bAdvTipWithShadow,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::AdvTip_PaintBackground(
				dc,
				rcClient,
				bAdvTipWithShadow,
				pHelperSrc,
				lParam
				);
	
CRect rcGradient = rcClient;
	rcGradient.DeflateRect(
		m_rcAdvTipPaddingGradient.left,
		m_rcAdvTipPaddingGradient.top,
		m_rcAdvTipPaddingGradient.right,
		m_rcAdvTipPaddingGradient.bottom
		);
	stat_PaintGradientRect(
		dc,
		rcGradient,
		m_clrAdvTipGradientBottom,
		m_clrAdvTipGradientTop,
		true,
		255
		);
	m_bmpAdvTipBorder.AlphaBlendSkinParts(
		dc,
		rcClient,
		m_rcAdvTipPaddingBorder,
		CExtBitmap::__EDM_STRETCH,
		true,
		true
		);
	return true;
}

CFont * CExtPaintManager::AdvTip_GetFont(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return NULL;
}

CFont * CExtPaintManagerNativeXP::AdvTip_GetFont(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	return
		CExtPaintManager::AdvTip_GetFont(
			pHelperSrc,
			lParam
			);
}

CFont * CExtPaintManagerOffice2007_Impl::AdvTip_GetFont(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::AdvTip_GetFont(
				pHelperSrc,
				lParam
				);
	return NULL;
}

COLORREF CExtPaintManager::AdvTip_GetTextColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return COLORREF(-1L);
}

COLORREF CExtPaintManagerNativeXP::AdvTip_GetTextColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return
		CExtPaintManager::AdvTip_GetTextColor(
			pHelperSrc,
			lParam
			);
}

COLORREF CExtPaintManagerOffice2007_Impl::AdvTip_GetTextColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::AdvTip_GetTextColor(
				pHelperSrc,
				lParam
				);
	return m_clrAdvTipText;
}

#ifndef __EXT_MFC_NO_STATUSBAR

bool CExtPaintManager::StatusBar_QuerySkinSupport(
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pStatusBar );
	pStatusBar;
	lParam;
	return false;
}

bool CExtPaintManager::StatusBar_EraseBackground(
	CDC & dc,
	const RECT & rcClient,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );
	dc;
	rcClient;
	pStatusBar;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::StatusBar_EraseBackground(
	CDC & dc,
	const RECT & rcClient,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return
			CExtPaintManager::StatusBar_EraseBackground(
				dc,
				rcClient,
				pStatusBar,
				lParam
				);
	
	if( g_PaintManager.m_UxTheme.OpenThemeData( pStatusBar->GetSafeHwnd(), VSCLASS_STATUS ) != NULL )
	{
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				pStatusBar->GetSafeHwnd(), 
				dc.GetSafeHdc(), 
				0, 
				0, 
				&rcClient, 
				&rcClient
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}

	return true;
}

bool CExtPaintManager::StatusBar_ErasePaneBackground(
	CDC & dc,
	int nPaneIdx,
	const RECT & rcPane,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );
	dc;
	nPaneIdx;
	rcPane;
	pStatusBar;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::StatusBar_ErasePaneBackground(
	CDC & dc,
	int nPaneIdx,
	const RECT & rcPane,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return CExtPaintManager::StatusBar_ErasePaneBackground( dc, nPaneIdx, rcPane, pStatusBar, lParam );
	if( g_PaintManager.m_UxTheme.OpenThemeData( pStatusBar->GetSafeHwnd(), VSCLASS_STATUS ) != NULL )
	{
		INT nPaneCount = pStatusBar->GetPaneCount();
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				pStatusBar->GetSafeHwnd(), 
				dc.GetSafeHdc(), 
				( nPaneIdx == nPaneCount - 1 ) 
					? SP_GRIPPERPANE 
					: SP_PANE, 
				0, 
				&rcPane, 
				&rcPane
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
	return true;
}

bool CExtPaintManager::StatusBar_PaintPane(
	CDC & dc,
	int nPaneIdx,
	const RECT & rcPane,
	DWORD dwPaneStyle,
	HICON hIcon,
	__EXT_MFC_SAFE_LPCTSTR sPaneText,
	UINT nDrawTextFlags,
	COLORREF clrText,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );
	dc; nPaneIdx; rcPane; dwPaneStyle; hIcon; sPaneText; nDrawTextFlags; clrText; pStatusBar; lParam;
	return false;
}

bool CExtPaintManager::StatusBar_PaintSeparator(
	CDC & dc,
	int nPaneIdxAfterSep,
	const RECT & rcPaneBefore,
	const RECT & rcPaneAfter,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );
	dc;
	nPaneIdxAfterSep;
	rcPaneBefore;
	rcPaneAfter;
	pStatusBar;
	lParam;
	return false;

}

bool CExtPaintManagerNativeXP::StatusBar_PaintSeparator(
	CDC & dc,
	int nPaneIdxAfterSep,
	const RECT & rcPaneBefore,
	const RECT & rcPaneAfter,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return
			CExtPaintManager::StatusBar_PaintSeparator(
				dc,
				nPaneIdxAfterSep,
				rcPaneBefore,
				rcPaneAfter,
				pStatusBar,
				lParam
				);

	// do not paint pain separators
	return true;
}

#endif // __EXT_MFC_NO_STATUSBAR

bool CExtPaintManager::AdjustControlFont(
	HFONT & hFont,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( hFont != NULL );
	hFont;
	pHelperSrc;
	lParam;
	return false;
}

DLGTEMPLATE * CExtPaintManager::AdjustDialogTemplate(
	const DLGTEMPLATE * lpDialogTemplate,
	CObject * pHelperSrc,
	bool bWizard, // = false
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( lpDialogTemplate != NULL );
	lpDialogTemplate;
	pHelperSrc;
	bWizard;
	lParam;
	return NULL;
}

HFONT CExtPaintManager::CreateDefaultFont()
{
	ASSERT_VALID( this );
HFONT hDefaultGuiFont = stat_menu_HFONT_from_current_NONCLIENTMETRICS( m_bUseTahomaFont, false );
	if( hDefaultGuiFont == NULL )
		hDefaultGuiFont = (HFONT)::GetStockObject( DEFAULT_GUI_FONT );
	if( hDefaultGuiFont == NULL )
		hDefaultGuiFont = (HFONT)::GetStockObject( SYSTEM_FONT );
	ASSERT( hDefaultGuiFont != NULL );
	return hDefaultGuiFont;
}

HFONT CExtPaintManager::CreateCaptionFont()
{
	ASSERT_VALID( this );
HFONT hCaptionFont = stat_menu_HFONT_from_current_NONCLIENTMETRICS( false, /*m_bUseTahomaFont,*/ true );
	if( hCaptionFont != NULL )
	{
		LOGFONT lf;
		::GetObject( hCaptionFont, sizeof(LOGFONT), &lf );
		lf.lfWeight = 400;
		HFONT hCaptionFont2 = ::CreateFontIndirect( &lf );
		if( hCaptionFont2 != NULL )
		{
			::DeleteObject( hCaptionFont );
			return hCaptionFont2;
		}
	}
	hCaptionFont = (HFONT)::GetStockObject( DEFAULT_GUI_FONT );
	if( hCaptionFont == NULL )
		hCaptionFont = (HFONT)::GetStockObject( SYSTEM_FONT );
	ASSERT( hCaptionFont != NULL );
	return hCaptionFont;
}

HFONT CExtPaintManagerOffice2007_Impl::CreateDefaultFont()
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::CreateDefaultFont();
	return CExtPaintManagerOffice2003::CreateDefaultFont();

//	if( ! g_PaintManager.m_bIsWinXPorLater )
// 		return CExtPaintManagerOffice2003::CreateDefaultFont();
//	if( g_ResourceManager->DesiredFont_GetFaceName() != NULL )
// 		return CExtPaintManagerOffice2003::CreateDefaultFont();
//bool bUseDesiredRibbonFontFaceName = false;
//static __EXT_MFC_SAFE_LPCTSTR
//		g_sDesiredRibbonFontFaceName = _T("Segoe UI");
//CWindowDC dc( NULL );
//	if(	! ::EnumFontFamilies(
//			dc.m_hDC,
//			NULL,
//			(FONTENUMPROC)stat_FindFontByNameCallBack,
//			reinterpret_cast < LPARAM > ( LPCTSTR(g_sDesiredRibbonFontFaceName) )
//			)
//		)
//		bUseDesiredRibbonFontFaceName = true;
//HFONT hDef = (HFONT)::GetStockObject( DEFAULT_GUI_FONT );
//LOGFONT _lf;
//	::memset( &_lf, 0, sizeof(LOGFONT) );
//	::GetObject( hDef, sizeof(LOGFONT), &_lf );
//	if( bUseDesiredRibbonFontFaceName )
//	{
//		__EXT_MFC_STRCPY( _lf.lfFaceName, LF_FACESIZE, g_sDesiredRibbonFontFaceName );
//		_lf.lfWidth = 0;
//		_lf.lfHeight = -12;
//	}
//	else
//	{
//		__EXT_MFC_STRCPY( _lf.lfFaceName, LF_FACESIZE, _T("Arial") );
//		_lf.lfWidth = 5;
//		_lf.lfHeight = 14;
//		_lf.lfWeight = 550;
//	}
//	if( g_PaintManager.m_bIsWinXPorLater )
//		_lf.lfQuality = CLEARTYPE_QUALITY;
//HFONT hDefaultGuiFont = ::CreateFontIndirect( &_lf );
//	return hDefaultGuiFont;
}

HFONT CExtPaintManagerOffice2007_Impl::CreateCaptionFont()
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::CreateCaptionFont();
	
	return CExtPaintManagerOffice2003::CreateCaptionFont();

//bool bUseDesiredRibbonFontFaceName = false;
//static __EXT_MFC_SAFE_LPCTSTR
//		g_sDesiredRibbonFontFaceName = _T("Segoe UI");
//CWindowDC dc( NULL );
//	if(	! ::EnumFontFamilies(
//			dc.m_hDC,
//			NULL,
//			(FONTENUMPROC)stat_FindFontByNameCallBack,
//			reinterpret_cast < LPARAM > ( LPCTSTR(g_sDesiredRibbonFontFaceName) )
//			)
//		)
//		bUseDesiredRibbonFontFaceName = true;
//
//	if( g_ResourceManager->DesiredFont_GetFaceName() != NULL )
//		return CExtPaintManagerOffice2003::CreateCaptionFont();
//
//HFONT hDef = (HFONT)::GetStockObject( DEFAULT_GUI_FONT );
//LOGFONT _lf;
//	::memset( &_lf, 0, sizeof(LOGFONT) );
//	::GetObject( hDef, sizeof(LOGFONT), &_lf );
//		if( bUseDesiredRibbonFontFaceName )
//		{
//			__EXT_MFC_STRCPY( _lf.lfFaceName, LF_FACESIZE, g_sDesiredRibbonFontFaceName );
//			_lf.lfWidth = 0;
//			_lf.lfHeight = -12;
//	//		_lf.lfWidth = 6;
//	//		_lf.lfHeight = 17;
//	//		_lf.lfWeight = 550;
//		}
//	else
//	{
//		__EXT_MFC_STRCPY( _lf.lfFaceName, LF_FACESIZE, _T("Arial") );
//		_lf.lfWidth = 0;
//		_lf.lfHeight = -12;
//		_lf.lfWeight = 550;
//	}
//	if( g_PaintManager.m_bIsWinXPorLater )
//		_lf.lfQuality = CLEARTYPE_QUALITY;
//HFONT hDefaultGuiFont = ::CreateFontIndirect( &_lf );
//	return hDefaultGuiFont;
}

void CExtPaintManager::SyncSysColors()
{
	ASSERT_VALID( this );
	g_PaintManager.InitUserExApi();

	// init fonts
	if( m_FontNormal.GetSafeHandle() )
		m_FontNormal.DeleteObject();
HFONT hDefaultGuiFont = CreateDefaultFont();
	ASSERT( hDefaultGuiFont != NULL );
	m_FontNormal.Attach( hDefaultGuiFont );

	if( m_FontCaption.GetSafeHandle() )
		m_FontCaption.DeleteObject();
HFONT hCaptionFont = CreateCaptionFont();
	ASSERT( hCaptionFont != NULL );
	m_FontCaption.Attach( hCaptionFont );

static __EXT_MFC_SAFE_LPCTSTR sVertFontFaceForNt4 = _T("Arial");

LOGFONT lf;
	VERIFY( m_FontNormal.GetLogFont(&lf) );
	lf.lfWeight = 900;
	if( m_FontBold.GetSafeHandle() )
		m_FontBold.DeleteObject();
	VERIFY( m_FontBold.CreateFontIndirect(&lf) );

	VERIFY( m_FontCaption.GetLogFont(&lf) );
	lf.lfWeight = 900;
	if( m_FontCaptionBold.GetSafeHandle() )
		m_FontCaptionBold.DeleteObject();
	VERIFY( m_FontCaptionBold.CreateFontIndirect(&lf) );

	VERIFY( m_FontNormal.GetLogFont(&lf) );
	lf.lfCharSet = SYMBOL_CHARSET;
	lf.lfWeight = 0;
	lf.lfHeight = ::GetSystemMetrics(SM_CYMENUCHECK) - 1;
	__EXT_MFC_STRCPY( lf.lfFaceName, LF_FACESIZE, _T("Marlett") );
	if( m_FontMarlett.GetSafeHandle() )
		m_FontMarlett.DeleteObject();
	VERIFY( m_FontMarlett.CreateFontIndirect(&lf) );

CFont * arrBarCaptFonts[ 2*2 ] =
{
	&m_FontNormalBC,		&m_FontCaption,
	&m_FontBoldBC,			&m_FontCaptionBold,
};
int i = 0;
	for(	i = 0;
			i < sizeof(arrBarCaptFonts)/sizeof(arrBarCaptFonts[0]);
			i += 2
			)
	{
		CFont * pFontSrc = arrBarCaptFonts[i+1];
		ASSERT( pFontSrc->GetSafeHandle() != NULL );
		CFont * pFontDst = arrBarCaptFonts[i];
		if( pFontDst->GetSafeHandle() != NULL )
			pFontDst->DeleteObject();
		VERIFY( pFontSrc->GetLogFont(&lf) );
		VERIFY( pFontDst->CreateFontIndirect(&lf) );
	}

	/// init colors

COLORREF clrDefaultExtendColor = ::GetSysColor( COLOR_3DFACE );
	for(	i = int(m_colors.GetSize());
			i <= __ExtMfc_MAX_SYS_COLOR_VAL;
			i++
			)
	{
		m_colors.Add( clrDefaultExtendColor );
	}

HBRUSH hDefaultExtendBrush = ::GetSysColorBrush( COLOR_3DFACE );
	for(	i = int(m_brushes.GetSize());
			i <= __ExtMfc_MAX_SYS_COLOR_VAL;
			i++
			)
	{
		m_brushes.Add( hDefaultExtendBrush );
	}

	//m_colors.clear();
	//m_brushes.clear();
	for(	i = __ExtMfc_MIN_SYS_COLOR_VAL;
			i <= __ExtMfc_MAX_SYS_COLOR_VAL;
			i++
			)
	{
		m_colors[i] = ::GetSysColor( i );
		m_brushes[i] = ::GetSysColorBrush( i );
	}
	ASSERT( m_colors.GetSize() >= __ExtMfc_MAX_SYS_COLOR_VAL+1 );
	ASSERT( m_brushes.GetSize() >= __ExtMfc_MAX_SYS_COLOR_VAL+1 );

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	Ribbon_SyncFonts();
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
}

// get any system color based brush
HBRUSH CExtPaintManager::GetBrush(
	int nColorIndex
	)
{
	ASSERT_VALID( this );
int nBrushesCount = (int)m_brushes.GetSize();
	if(
			!(
				__ExtMfc_MIN_SYS_COLOR_VAL <= nColorIndex
				&&
				nColorIndex < nBrushesCount
			)
		)
	{
		ASSERT( FALSE );
		nColorIndex = COLOR_3DFACE;
	}
HBRUSH hBrush = m_brushes[nColorIndex];
	return hBrush;
}

COLORREF CExtPaintManager::GetColor(
	int nColorIndex,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;

	if( nColorIndex >= __ExtMfc_COLOR_MAP_BASE )
	{
		int nColorIndex2 = 0;
		if( m_mapColorTranslate.Lookup( nColorIndex, nColorIndex2 ) )
			nColorIndex = nColorIndex2;
		else
		{
			ASSERT( FALSE );
			nColorIndex = COLOR_3DFACE;
		}
	}
int nColorCount = (int)m_colors.GetSize();
	if(
			!(
				__ExtMfc_MIN_SYS_COLOR_VAL <= nColorIndex
				&&
				nColorIndex < nColorCount // <= __ExtMfc_MAX_SYS_COLOR_VAL
			)
		)
	{
		ASSERT( FALSE );
		nColorIndex = COLOR_3DFACE;
	}
COLORREF clr = m_colors[nColorIndex];
	return clr;
}

COLORREF CExtPaintManager::GetColor(
	int nColorIndex,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	return ( const_cast < CExtPaintManager * > ( this ) ) -> GetColor( nColorIndex, pHelperSrc, lParam );
}

int CExtPaintManager::InstallColor(
	COLORREF clr,
	int nColorIndex // = -1
	)
{
	ASSERT_VALID( this );
int nColorCount = (int)m_colors.GetSize();
	if( nColorIndex < 0 || nColorIndex >= nColorCount )
		nColorIndex = (int)m_colors.Add( clr );
	else
		m_colors[nColorIndex] = clr;
	return nColorIndex;
}

void CExtPaintManager::InitTranslatedColors()
{
	ASSERT_VALID( this );

	m_mapColorTranslate.RemoveAll();

	m_mapColorTranslate[CLR_3DFACE_OUT]				= COLOR_3DFACE;
	m_mapColorTranslate[CLR_3DFACE_IN]				= COLOR_3DFACE;
	m_mapColorTranslate[CLR_3DFACE_DISABLED]		= COLOR_3DFACE;

	m_mapColorTranslate[CLR_3DLIGHT_OUT]			= COLOR_3DLIGHT;
	m_mapColorTranslate[CLR_3DLIGHT_IN]				= COLOR_3DLIGHT;
	m_mapColorTranslate[CLR_3DLIGHT_DISABLED]		= COLOR_3DLIGHT;

	m_mapColorTranslate[CLR_3DHILIGHT_OUT]			= COLOR_3DHILIGHT;
	m_mapColorTranslate[CLR_3DHILIGHT_IN]			= COLOR_3DHILIGHT;
	m_mapColorTranslate[CLR_3DHILIGHT_DISABLED]		= COLOR_3DHILIGHT;

	m_mapColorTranslate[CLR_3DSHADOW_OUT]			= COLOR_3DSHADOW;
	m_mapColorTranslate[CLR_3DSHADOW_IN]			= COLOR_3DSHADOW;
	m_mapColorTranslate[CLR_3DSHADOW_DISABLED]		= COLOR_3DSHADOW;

	m_mapColorTranslate[CLR_3DDKSHADOW_OUT]			= COLOR_3DDKSHADOW;
	m_mapColorTranslate[CLR_3DDKSHADOW_IN]			= COLOR_3DDKSHADOW;
	m_mapColorTranslate[CLR_3DDKSHADOW_DISABLED]	= COLOR_3DDKSHADOW;
	
	m_mapColorTranslate[CLR_TEXT_OUT]				= COLOR_WINDOWTEXT;
	m_mapColorTranslate[CLR_TEXT_IN]				= COLOR_WINDOWTEXT;
	m_mapColorTranslate[CLR_TEXT_DISABLED]			= COLOR_GRAYTEXT;

	// Menu text colors
 	m_mapColorTranslate[CLR_MENUTEXT_OUT]			= COLOR_WINDOWTEXT;
	m_mapColorTranslate[CLR_MENUTEXT_IN]			= COLOR_HIGHLIGHTTEXT;
	m_mapColorTranslate[CLR_MENUTEXT_DISABLED]		= COLOR_GRAYTEXT;

	// Task Pane Colors
	m_mapColorTranslate[CLR_TASK_PANE_BK_TOP]		= COLOR_WINDOW;
	m_mapColorTranslate[CLR_TASK_PANE_BK_BOTTOM]	= COLOR_WINDOW;

	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL] = 
		COLOR_WINDOWTEXT;
	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED] = 
		COLOR_WINDOWTEXT;
	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED] = 
		COLOR_HIGHLIGHTTEXT;
	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED_HOVERED]	= 
		COLOR_HIGHLIGHTTEXT;

	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_NORMAL]	= 
		COLOR_3DFACE;
	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_HIGHLIGHTED]	= 
		COLOR_HIGHLIGHT;
	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_NORMAL]	= 
		COLOR_3DFACE;
	m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_HIGHLIGHTED]	= 
		COLOR_HIGHLIGHT;

	// Page Navigator colors
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = COLOR_WINDOW;

	// Group Box colors
	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = COLOR_3DSHADOW;

	// Resizable Bar non client area color
	m_mapColorTranslate[CLR_WRB_FRAME] = COLOR_3DSHADOW;
}

void CExtPaintManager::InitHelperBrushes()
{
	ASSERT_VALID( this );
	if( m_brushLightDefault.GetSafeHandle() != NULL )
		m_brushLightDefault.DeleteObject();
	if( m_brushLightSystem.GetSafeHandle() != NULL )
		m_brushLightSystem.DeleteObject();
	if( m_brushDarkDefault.GetSafeHandle() != NULL )
		m_brushDarkDefault.DeleteObject();
	if( m_brushDarkSystem.GetSafeHandle() != NULL )
		m_brushDarkSystem.DeleteObject();
	if( m_brushLighterDefault.GetSafeHandle() != NULL )
		m_brushLighterDefault.DeleteObject();
	if( m_brushLighterSystem.GetSafeHandle() != NULL )
		m_brushLighterSystem.DeleteObject();
	if( m_brushDarkerDefault.GetSafeHandle() != NULL )
		m_brushDarkerDefault.DeleteObject();
	if( m_brushDarkerSystem.GetSafeHandle() != NULL )
		m_brushDarkerSystem.DeleteObject();
	if( m_brushLightestDefault.GetSafeHandle() != NULL )
		m_brushLightestDefault.DeleteObject();
	if( m_brushLightestSystem.GetSafeHandle() != NULL )
		m_brushLightestSystem.DeleteObject();
	if( m_brushDarkestDefault.GetSafeHandle() != NULL )
		m_brushDarkestDefault.DeleteObject();
	if( m_brushDarkestSystem.GetSafeHandle() != NULL )
		m_brushDarkestSystem.DeleteObject();

int nBitsPerPixel = stat_GetBPP();
	if( nBitsPerPixel > 8 )
	{
		COLORREF clrDarker = GetColor( COLOR_3DFACE, this );
		COLORREF clrLighter = GetColor( COLOR_3DHILIGHT, this );
		COLORREF clrMixed = RGB (
			GetRValue(clrDarker) + ((GetRValue(clrLighter) -
				GetRValue(clrDarker)) / 2),
			GetGValue(clrDarker) + ((GetGValue(clrLighter) -
				GetGValue(clrDarker)) / 2),
			GetBValue(clrDarker) + ((GetBValue(clrLighter) -
				GetBValue(clrDarker)) / 2)
			);
		m_brushLightDefault.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),3,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),3,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),3,5)
			);
		m_brushLighterDefault.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),4,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),4,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),4,5)
			);
		m_brushLightestDefault.CreateSolidBrush( clrMixed );
		
		clrLighter = clrDarker;
		clrDarker = GetColor( COLOR_3DSHADOW, this );
		clrMixed = RGB (
			GetRValue(clrDarker) + ((GetRValue(clrLighter) -
				GetRValue(clrDarker)) / 2 ),
			GetGValue(clrDarker) + ((GetGValue(clrLighter) -
				GetGValue(clrDarker)) / 2),
			GetBValue(clrDarker) + ((GetBValue(clrLighter) -
				GetBValue(clrDarker)) / 2)
			);
		m_brushDarkDefault.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),2,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),2,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),2,5)
			);
		m_brushDarkerDefault.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),1,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),1,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),1,5)
			);
		m_brushDarkestDefault.CreateSolidBrush( clrMixed );

		clrDarker = ::GetSysColor( COLOR_3DFACE );
		clrLighter = ::GetSysColor( COLOR_3DHILIGHT );
		clrMixed = RGB (
			GetRValue(clrDarker) + ((GetRValue(clrLighter) -
				GetRValue(clrDarker)) / 2),
			GetGValue(clrDarker) + ((GetGValue(clrLighter) -
				GetGValue(clrDarker)) / 2),
			GetBValue(clrDarker) + ((GetBValue(clrLighter) -
				GetBValue(clrDarker)) / 2)
			);
		m_brushLightSystem.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),3,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),3,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),3,5)
			);
		m_brushLighterSystem.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),4,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),4,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),4,5)
			);
		m_brushLightestSystem.CreateSolidBrush( clrMixed );
		
		clrLighter = clrDarker;
		clrDarker = ::GetSysColor( COLOR_3DSHADOW );
		clrMixed = RGB (
			GetRValue(clrDarker) + ((GetRValue(clrLighter) -
				GetRValue(clrDarker)) / 2),
			GetGValue(clrDarker) + ((GetGValue(clrLighter) -
				GetGValue(clrDarker)) / 2),
			GetBValue(clrDarker) + ((GetBValue(clrLighter) -
				GetBValue(clrDarker)) / 2)
			);
		m_brushDarkSystem.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),2,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),2,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),2,5)
			);
		m_brushDarkerSystem.CreateSolidBrush( clrMixed );
		clrMixed = RGB (
			GetRValue(clrDarker) +
				::MulDiv((GetRValue(clrLighter) -
					GetRValue(clrDarker)),1,5),
			GetGValue(clrDarker) +
				::MulDiv((GetGValue(clrLighter) -
					GetGValue(clrDarker)),1,5),
			GetBValue(clrDarker) +
				::MulDiv((GetBValue(clrLighter) -
					GetBValue(clrDarker)),1,5)
			);
		m_brushDarkestSystem.CreateSolidBrush( clrMixed );
	} // if( nBitsPerPixel > 8 )
	else
	{
		CBitmap bmp;
		COLORREF clrDarker = GetColor( COLOR_3DFACE, this );
		COLORREF clrLighter = GetColor( COLOR_3DHILIGHT, this );
		HBITMAP hBmp = stat_GenLBDIB( clrDarker, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushLightDefault.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		hBmp = stat_GenLBDIB( clrDarker, clrLighter, 1, 1, 1, 1, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushLighterDefault.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		hBmp = stat_GenLBDIB( clrDarker, clrLighter, 1, 1, 2, 2, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushLightestDefault.CreatePatternBrush( &bmp );
		bmp.DeleteObject();

		clrLighter = clrDarker;
		clrDarker = GetColor( COLOR_3DSHADOW, this );
		hBmp = stat_GenLBDIB( clrDarker, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushDarkDefault.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		hBmp = stat_GenLBDIB( clrDarker, clrLighter, 1, 1, 1, 1 );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushDarkerDefault.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		clrLighter = clrDarker;
		clrDarker = GetColor( COLOR_3DDKSHADOW, this );
		hBmp = stat_GenLBDIB( clrDarker, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushDarkestDefault.CreatePatternBrush( &bmp );
		bmp.DeleteObject();

		clrDarker = ::GetSysColor( COLOR_3DFACE );
		clrLighter = ::GetSysColor( COLOR_3DHILIGHT );
		hBmp = stat_GenLBDIB( clrDarker, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushLightSystem.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		hBmp = stat_GenLBDIB( clrDarker, clrLighter, 1, 1, 1, 1, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushLighterSystem.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		hBmp = stat_GenLBDIB( clrDarker, clrLighter, 1, 1, 2, 2, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushLightestSystem.CreatePatternBrush( &bmp );
		bmp.DeleteObject();

		clrLighter = clrDarker;
		clrDarker = ::GetSysColor( COLOR_3DSHADOW );
		hBmp = stat_GenLBDIB( clrDarker, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushDarkSystem.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		hBmp = stat_GenLBDIB( clrDarker, clrLighter, 1, 1, 1, 1 );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushDarkerSystem.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
		clrLighter = clrDarker;
		clrDarker = ::GetSysColor( COLOR_3DDKSHADOW );
		hBmp = stat_GenLBDIB( clrDarker, clrLighter );
		ASSERT( hBmp != NULL );
		bmp.Attach( hBmp );
		m_brushDarkestSystem.CreatePatternBrush( &bmp );
		bmp.DeleteObject();
	} // else from if( nBitsPerPixel > 8 )
}

static const UINT stat_pixels_dock_btn_empty[] =
{
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_btn_close[] =
{
	0,0,0,0,0,0,0,0,0,
	0,1,1,0,0,0,0,1,1,
	0,0,1,1,0,0,1,1,0,
	0,0,0,1,1,1,1,0,0,
	0,0,0,0,1,1,0,0,0,
	0,0,0,1,1,1,1,0,0,
	0,0,1,1,0,0,1,1,0,
	0,1,1,0,0,0,0,1,1,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_btn_close_dc2k[] =
{
	0,0,0,0,0,0,0,0,0,
	0,1,1,0,0,0,1,1,0,
	0,0,1,1,0,1,1,0,0,
	0,0,0,1,1,1,0,0,0,
	0,0,0,1,1,1,0,0,0,
	0,0,1,1,0,1,1,0,0,
	0,1,1,0,0,0,1,1,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_btn_thin_close[] =
{
	0,0,0,0,0,0,0,0,0,
	0,1,0,0,0,0,0,1,0,
	0,0,1,0,0,0,1,0,0,
	0,0,0,1,0,1,0,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,1,0,1,0,0,0,
	0,0,1,0,0,0,1,0,0,
	0,1,0,0,0,0,0,1,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_btn_arrow_up[] =
{
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,1,1,1,0,0,0,
	0,0,1,1,1,1,1,0,0,
	0,1,1,1,1,1,1,1,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_btn_hollow_up[] =
{
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,1,0,1,0,0,0,
	0,0,1,0,0,0,1,0,0,
	0,1,0,0,0,0,0,1,0,
	1,1,1,1,1,1,1,1,1,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_btn_arrow_up_l[] =
{
	0,0,0,0,1,0,0,0,0,
	0,0,0,1,1,1,0,0,0,
	0,0,1,1,1,1,1,0,0,
	0,1,1,1,1,1,1,1,0,
	1,1,1,1,1,1,1,1,1,
	0,0,1,1,1,1,1,0,0,
	0,0,1,1,1,1,1,0,0,
	0,0,1,1,1,1,1,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_wnd_minimize[] =
{
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,1,1,1,1,1,1,1,0,
	0,1,1,1,1,1,1,1,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_wnd_restore[] =
{
	0,0,1,1,1,1,1,1,0,
	0,0,1,0,0,0,0,1,0,
	1,1,1,1,1,1,0,1,0,
	1,1,1,1,1,1,0,1,0,
	1,0,0,0,0,1,1,1,0,
	1,0,0,0,0,1,0,0,0,
	1,0,0,0,0,1,0,0,0,
	1,1,1,1,1,1,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_wnd_maximize[] =
{
	1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,
};

static const UINT stat_pixels_dock_wnd_keep[] =
{
	0,0,1,1,1,1,1,0,0,
	0,0,1,0,0,1,1,0,0,
	0,0,1,0,0,1,1,0,0,
	0,0,1,0,0,1,1,0,0,
	0,0,1,0,0,1,1,0,0,
	0,1,1,1,1,1,1,1,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_dock_btn_contexthelp[] =
{
	0,0,0,1,1,1,1,0,0,
	0,0,1,1,0,0,1,1,0,
	0,0,1,1,0,0,1,1,0,
	0,0,0,0,0,1,1,0,0,
	0,0,0,0,1,1,0,0,0,
	0,0,0,0,1,1,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,1,1,0,0,0,
	0,0,0,0,1,1,0,0,0,
};

static const UINT stat_pixels_hollow_plus[] =
{
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,1,1,1,1,1,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,0,1,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_hollow_minus[] =
{
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,1,1,1,1,1,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_tree_plus[] =
{
	1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,1,0,0,0,1,
	1,0,0,0,1,0,0,0,1,
	1,0,1,1,1,1,1,0,1,
	1,0,0,0,1,0,0,0,1,
	1,0,0,0,1,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,
};

static const UINT stat_pixels_tree_minus[] =
{
	1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,1,1,1,1,1,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,
};

static const UINT stat_pixels_tree_plus_filled[] =
{
	1,1,1,1,1,1,1,1,1,
	1,2,2,2,2,2,2,2,1,
	1,2,2,2,1,2,2,2,1,
	1,2,2,2,1,2,2,2,1,
	1,2,1,1,1,1,1,2,1,
	1,2,2,2,1,2,2,2,1,
	1,2,2,2,1,2,2,2,1,
	1,2,2,2,2,2,2,2,1,
	1,1,1,1,1,1,1,1,1,
};

static const UINT stat_pixels_tree_minus_filled[] =
{
	1,1,1,1,1,1,1,1,1,
	1,2,2,2,2,2,2,2,1,
	1,2,2,2,2,2,2,2,1,
	1,2,2,2,2,2,2,2,1,
	1,2,1,1,1,1,1,2,1,
	1,2,2,2,2,2,2,2,1,
	1,2,2,2,2,2,2,2,1,
	1,2,2,2,2,2,2,2,1,
	1,1,1,1,1,1,1,1,1,
};

static const UINT stat_pixels_circle_plus[] =
{
	0,0,1,1,1,1,1,0,0,
	0,1,0,0,0,0,0,1,0,
	1,0,0,0,1,0,0,0,1,
	1,0,0,0,1,0,0,0,1,
	1,0,1,1,1,1,1,0,1,
	1,0,0,0,1,0,0,0,1,
	1,0,0,0,1,0,0,0,1,
	0,1,0,0,0,0,0,1,0,
	0,0,1,1,1,1,1,0,0,
};

static const UINT stat_pixels_circle_minus[] =
{
	0,0,1,1,1,1,1,0,0,
	0,1,0,0,0,0,0,1,0,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,1,1,1,1,1,0,1,
	1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,
	0,1,0,0,0,0,0,1,0,
	0,0,1,1,1,1,1,0,0,
};

static const UINT stat_pixels_arrow_pt_up[] =
{
	0,0,0,0,0,1,0,0,0,0,0,
	0,0,0,0,1,1,1,0,0,0,0,
	0,0,0,1,1,1,1,1,0,0,0,
	0,0,1,1,1,1,1,1,1,0,0,
	0,1,1,1,1,1,1,1,1,1,0,
	1,1,1,1,1,1,1,1,1,1,1,
	0,0,0,1,1,1,1,1,0,0,0,
	0,0,0,1,1,1,1,1,0,0,0,
	0,0,0,1,1,1,1,1,0,0,0,
	0,0,0,1,1,1,1,1,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_arrow_pt_lt[] =
{
	1,1,1,1,1,1,1,1,0,0,0,
	1,1,1,1,1,1,1,0,0,0,0,
	1,1,1,1,1,1,0,0,0,0,0,
	1,1,1,1,1,1,0,0,0,0,0,
	1,1,1,1,1,1,1,0,0,0,0,
	1,1,1,1,1,1,1,1,0,0,0,
	1,1,0,0,1,1,1,1,1,0,0,
	1,0,0,0,0,1,1,1,0,0,0,
	0,0,0,0,0,0,1,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,
};

static const UINT stat_pixels_arrow_small_up[] =
{
	0,0,1,0,0,
	0,1,1,1,0,
	1,1,1,1,1,
};

static const UINT stat_pixels_ellipsis[] =
{
	0,0,0,0,0,0,0,0,0,
	0,1,0,0,1,0,0,1,0,
	0,0,0,0,0,0,0,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_dock_empty(
	9,9,2,
	stat_pixels_dock_btn_empty
	);
static CExtPaintManager::glyph_t stat_glyph_dock_close(
	9,9,2,
	stat_pixels_dock_btn_close
	);
static CExtPaintManager::glyph_t stat_glyph_dock_close_dc2k(
	9,9,2,
	stat_pixels_dock_btn_close_dc2k
	);
static CExtPaintManager::glyph_t stat_glyph_dock_xp_thin_close(
	9,9,2,
	stat_pixels_dock_btn_thin_close
	);

static CExtPaintManager::glyph_t stat_glyph_dock_arrow_up(
	9,9,2,
	stat_pixels_dock_btn_arrow_up
	);
static CExtPaintManager::glyph_t stat_glyph_dock_arrow_down(
	stat_glyph_dock_arrow_up,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_dock_arrow_left(
	stat_glyph_dock_arrow_up,
	270
	);
static CExtPaintManager::glyph_t stat_glyph_dock_arrow_right(
	stat_glyph_dock_arrow_left,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_dock_wnd_minimize(
	9,9,2,
	stat_pixels_dock_wnd_minimize
	);
static CExtPaintManager::glyph_t stat_glyph_dock_wnd_restore(
	9,9,2,
	stat_pixels_dock_wnd_restore
	);
static CExtPaintManager::glyph_t stat_glyph_dock_wnd_maximize(
	9,9,2,
	stat_pixels_dock_wnd_maximize
	);
static CExtPaintManager::glyph_t stat_glyph_dock_wnd_keep(
	9,9,2,
	stat_pixels_dock_wnd_keep
	);
static CExtPaintManager::glyph_t stat_glyph_dock_wnd_unkeep(
	stat_glyph_dock_wnd_keep,
	90
	);

static CExtPaintManager::glyph_t stat_glyph_dock_wnd_contexthelp(
	9,9,2,
	stat_pixels_dock_btn_contexthelp
	);

static CExtPaintManager::glyph_t stat_glyph_dock_arrow_up_l(
	9,9,2,
	stat_pixels_dock_btn_arrow_up_l
	);
static CExtPaintManager::glyph_t stat_glyph_dock_arrow_down_l(
	stat_glyph_dock_arrow_up_l,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_dock_arrow_left_l(
	stat_glyph_dock_arrow_up_l,
	270
	);
static CExtPaintManager::glyph_t stat_glyph_dock_arrow_right_l(
	stat_glyph_dock_arrow_left_l,
	180
	);

static CExtPaintManager::glyph_t stat_glyph_dock_hollow_up(
	9,9,2,
	stat_pixels_dock_btn_hollow_up
	);
static CExtPaintManager::glyph_t stat_glyph_dock_hollow_down(
	stat_glyph_dock_hollow_up,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_dock_hollow_left(
	stat_glyph_dock_hollow_up,
	270
	);
static CExtPaintManager::glyph_t stat_glyph_dock_hollow_right(
	stat_glyph_dock_hollow_left,
	180
	);

static CExtPaintManager::glyph_t stat_glyph_hollow_plus(
	9,9,2,
	stat_pixels_hollow_plus
	);
static CExtPaintManager::glyph_t stat_glyph_hollow_minus(
	9,9,2,
	stat_pixels_hollow_minus
	);
static CExtPaintManager::glyph_t stat_glyph_tree_plus(
	9,9,2,
	stat_pixels_tree_plus
	);
static CExtPaintManager::glyph_t stat_glyph_tree_minus(
	9,9,2,
	stat_pixels_tree_minus
	);
static CExtPaintManager::glyph_t stat_glyph_tree_plus_filled(
	9,9,3,
	stat_pixels_tree_plus_filled
	);
static CExtPaintManager::glyph_t stat_glyph_tree_minus_filled(
	9,9,3,
	stat_pixels_tree_minus_filled
	);
static CExtPaintManager::glyph_t stat_glyph_circle_plus(
	9,9,2,
	stat_pixels_circle_plus
	);
static CExtPaintManager::glyph_t stat_glyph_circle_minus(
	9,9,2,
	stat_pixels_circle_minus
	);

static CExtPaintManager::glyph_t stat_glyph_arrow_pt_up(
	11,11,2,
	stat_pixels_arrow_pt_up
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_pt_down(
	stat_glyph_arrow_pt_up,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_pt_left(
	stat_glyph_arrow_pt_up,
	270
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_pt_right(
	stat_glyph_arrow_pt_left,
	180
	);

static CExtPaintManager::glyph_t stat_glyph_arrow_small_up(
	5,3,2,
	stat_pixels_arrow_small_up
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_small_down(
	stat_glyph_arrow_small_up,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_small_left(
	stat_glyph_arrow_small_up,
	270
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_small_right(
	stat_glyph_arrow_small_left,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_ellipsis(
	9,3,2,
	stat_pixels_ellipsis
	);

static CExtPaintManager::glyph_t stat_glyph_arrow_pt_lt(
	11,11,2,
	stat_pixels_arrow_pt_lt
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_pt_rt(
	stat_glyph_arrow_pt_lt,
	90
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_pt_rb(
	stat_glyph_arrow_pt_rt,
	90
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_pt_lb(
	stat_glyph_arrow_pt_rb,
	90
	);

static const UINT stat_pixels_arrow_sort_up[] =
{
	0,0,0,0,1,1,0,0,0,0,
	0,0,0,0,1,1,0,0,0,0,
	0,0,0,1,3,1,1,0,0,0,
	0,0,0,3,0,0,1,0,0,0,
	0,0,1,1,0,0,1,1,0,0,
	0,0,3,0,0,0,0,1,0,0,
	0,1,1,0,0,0,0,1,1,0,
	0,3,0,0,0,0,0,0,1,0,
	1,1,0,0,0,0,0,0,1,1,
	1,2,2,2,2,2,2,2,2,2,
};

static const UINT stat_pixels_arrow_sort_down[] =
{
	3,3,3,3,3,3,3,3,3,2,
	1,1,0,0,0,0,0,0,2,2,
	0,3,0,0,0,0,0,0,2,0,
	0,1,1,0,0,0,0,2,2,0,
	0,0,3,0,0,0,0,2,0,0,
	0,0,1,1,0,0,2,2,0,0,
	0,0,0,3,0,0,2,0,0,0,
	0,0,0,1,3,2,2,0,0,0,
	0,0,0,0,1,2,0,0,0,0,
	0,0,0,0,1,2,0,0,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_arrow_sort_up(
	10,10,4, // 8,7,4,
	stat_pixels_arrow_sort_up
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_sort_down(
	10,10,4, // 8,7,4,
	stat_pixels_arrow_sort_down
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_sort_left(
	stat_glyph_arrow_sort_down,
	90
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_sort_right(
	stat_glyph_arrow_sort_up,
	90
	);

static const UINT stat_pixels_arrow_sort_down_2007[] =
{
	1,1,1,1,1,1,1,1,1,
	0,1,1,1,1,1,1,1,0,
	0,0,1,1,1,1,1,0,0,
	0,0,0,1,1,1,0,0,0,
	0,0,0,0,1,0,0,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_arrow_sort_down_2007(
	9,5,2,
	stat_pixels_arrow_sort_down_2007
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_sort_up_2007(
	stat_glyph_arrow_sort_down_2007,
	180
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_sort_left_2007(
	stat_glyph_arrow_sort_down_2007,
	90
	);
static CExtPaintManager::glyph_t stat_glyph_arrow_sort_right_2007(
	stat_glyph_arrow_sort_up_2007,
	90
	);

static const UINT stat_pixels_tabs_list_arrow[] =
{
	1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,
	0,0,0,0,0,0,0,
	1,1,1,1,1,1,1,
	0,1,1,1,1,1,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_tabs_list_arrow(
	7,7,2,
	stat_pixels_tabs_list_arrow
	);

static const UINT stat_pixels_pn_config_button[] =
{
	1,1,0,1,1,0,0,
	0,1,1,0,1,1,0,
	0,0,1,1,0,1,1,
	0,1,1,0,1,1,0,
	1,1,0,1,1,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,
	0,1,1,1,1,1,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_pn_config_button(
	7,12,2,
	stat_pixels_pn_config_button
	);

static const UINT stat_pixels_pn_config_button_2007[] =
{
	1,1,1,1,1,
	0,1,1,1,0,
	0,0,1,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_pn_config_button_2007(
	5,3,2,
	stat_pixels_pn_config_button_2007
	);

static const UINT stat_pixels_pn_caption_expanded[] =
{
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,1,1,0,1,1,0,
	1,1,0,0,0,1,1,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,1,1,0,1,1,0,
	1,1,0,0,0,1,1,
};

static CExtPaintManager::glyph_t stat_glyph_pn_caption_expanded(
	7,8,2,
	stat_pixels_pn_caption_expanded
	);

static const UINT stat_pixels_pn_caption_collapsed[] =
{
	1,1,0,0,0,1,1,
	0,1,1,0,1,1,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
	1,1,0,0,0,1,1,
	0,1,1,0,1,1,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_pn_caption_collapsed(
	7,8,2,
	stat_pixels_pn_caption_collapsed
	);

static const UINT stat_pixels_scroll_top[] =
{
	1,1,1,1,1,1,1,
	0,0,0,0,0,0,0,
	0,0,0,1,0,0,0,
	0,0,1,1,1,0,0,
	0,1,1,1,1,1,0,
	1,1,1,1,1,1,1,
	0,0,0,0,0,0,0,
};

static CExtPaintManager::glyph_t stat_glyph_scroll_top(
	7,7,2,
	stat_pixels_scroll_top
	);

static const UINT stat_pixels_scroll_left[] =
{
	1,0,0,0,0,1,0,
	1,0,0,0,1,1,0,
	1,0,0,1,1,1,0,
	1,0,1,1,1,1,0,
	1,0,0,1,1,1,0,
	1,0,0,0,1,1,0,
	1,0,0,0,0,1,0,
};

static CExtPaintManager::glyph_t stat_glyph_scroll_left(
	7,7,2,
	stat_pixels_scroll_left
	);

static const UINT stat_pixels_scroll_bottom[] =
{
	0,0,0,0,0,0,0,
	1,1,1,1,1,1,1,
	0,1,1,1,1,1,0,
	0,0,1,1,1,0,0,
	0,0,0,1,0,0,0,
	0,0,0,0,0,0,0,
	1,1,1,1,1,1,1,
};

static CExtPaintManager::glyph_t stat_glyph_scroll_bottom(
	7,7,2,
	stat_pixels_scroll_bottom
	);

static const UINT stat_pixels_scroll_right[] =
{
	0,1,0,0,0,0,1,
	0,1,1,0,0,0,1,
	0,1,1,1,0,0,1,
	0,1,1,1,1,0,1,
	0,1,1,1,0,0,1,
	0,1,1,0,0,0,1,
	0,1,0,0,0,0,1,
};

static CExtPaintManager::glyph_t stat_glyph_scroll_right(
	7,7,2,
	stat_pixels_scroll_right
	);

CExtPaintManager::glyph_t *
	CExtPaintManager::g_DockingCaptionGlyphs[__DCBT_VALUE_MAX+1] =
{
	& stat_glyph_dock_empty,
	& stat_glyph_dock_close,
	& stat_glyph_dock_arrow_up,
	& stat_glyph_dock_arrow_down,
	& stat_glyph_dock_arrow_left,
	& stat_glyph_dock_arrow_right,
	& stat_glyph_dock_wnd_minimize,
	& stat_glyph_dock_wnd_restore,
	& stat_glyph_dock_wnd_maximize,
	& stat_glyph_dock_wnd_contexthelp,
	& stat_glyph_dock_wnd_keep,
	& stat_glyph_dock_wnd_unkeep,
	& stat_glyph_dock_arrow_up_l,
	& stat_glyph_dock_arrow_down_l,
	& stat_glyph_dock_arrow_left_l,
	& stat_glyph_dock_arrow_right_l,
	& stat_glyph_dock_xp_thin_close,
	& stat_glyph_dock_hollow_up,
	& stat_glyph_dock_hollow_down,
	& stat_glyph_dock_hollow_left,
	& stat_glyph_dock_hollow_right,
	& stat_glyph_dock_close_dc2k,
	& stat_glyph_hollow_plus,
	& stat_glyph_hollow_minus,
	& stat_glyph_tree_plus,
	& stat_glyph_tree_minus,
	& stat_glyph_circle_plus,
	& stat_glyph_circle_minus,
	& stat_glyph_arrow_pt_up,
	& stat_glyph_arrow_pt_down,
	& stat_glyph_arrow_pt_left,
	& stat_glyph_arrow_pt_right,
	& stat_glyph_arrow_pt_lt,
	& stat_glyph_arrow_pt_rt,
	& stat_glyph_arrow_pt_rb,
	& stat_glyph_arrow_pt_lb,
	& stat_glyph_arrow_small_up,
	& stat_glyph_arrow_small_down,
	& stat_glyph_arrow_small_left,
	& stat_glyph_arrow_small_right,
	& stat_glyph_ellipsis,
	& stat_glyph_arrow_sort_up,
	& stat_glyph_arrow_sort_down,
	& stat_glyph_arrow_sort_left,
	& stat_glyph_arrow_sort_right,
	& stat_glyph_tabs_list_arrow,
	& stat_glyph_pn_config_button,
	& stat_glyph_pn_config_button_2007,
	& stat_glyph_pn_caption_expanded,
	& stat_glyph_pn_caption_collapsed,
	& stat_glyph_tree_plus_filled,
	& stat_glyph_tree_minus_filled,
	& stat_glyph_scroll_top,
	& stat_glyph_scroll_left,
	& stat_glyph_scroll_bottom,
	& stat_glyph_scroll_right,
	& stat_glyph_arrow_sort_up_2007,
	& stat_glyph_arrow_sort_down_2007,
	& stat_glyph_arrow_sort_left_2007,
	& stat_glyph_arrow_sort_right_2007,
};

CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA::PAINTDOCKINGCAPTIONBUTTONDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_rcClient( 0,0,0,0 )
	, m_eType( CExtPaintManager::__DCBT_EMPTY )
	, m_bHover( false )
	, m_bPushed( false )
	, m_bEnabled( false )
	, m_bSideBar( false )
	, m_bBarWndActive( false )
	, m_bFloating( false )
{
}

CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA::PAINTDOCKINGCAPTIONBUTTONDATA(
	CObject * pHelperSrc,
	const RECT & rcClient,
	int eType, // CExtPaintManager::e_docking_caption_button_t
	bool bHover,
	bool bPushed,
	bool bEnabled,
	bool bSideBar,
	bool bBarWndActive,
	bool bFloating
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_rcClient( rcClient )
	, m_eType( eType )
	, m_bHover( bHover )
	, m_bPushed( bPushed )
	, m_bEnabled( bEnabled )
	, m_bSideBar( bSideBar )
	, m_bBarWndActive( bBarWndActive )
	, m_bFloating( bFloating )
{
}

void CExtPaintManager::PaintDockingCaptionButton(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA & _pdcbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( __DCBT_VALUE_MIN <= _pdcbd.m_eType && _pdcbd.m_eType <= __DCBT_VALUE_MAX );
	if( _pdcbd.m_rcClient.IsRectEmpty() )
		return;
bool bHover = _pdcbd.m_bHover;
	if( !_pdcbd.m_bEnabled )
		bHover = false;
COLORREF clr3dFace = ::GetSysColor( COLOR_3DFACE );
COLORREF clr3dShadow = ::GetSysColor( COLOR_3DSHADOW );
COLORREF clr3dDkShadow = ::GetSysColor( COLOR_3DDKSHADOW );
COLORREF clr3dHiLight = ::GetSysColor( COLOR_3DHILIGHT );
COLORREF ColorValues[2] = { RGB(0,0,0), RGB(0,0,0), };
	ColorValues[1] =  _pdcbd.m_bEnabled  ? ::GetSysColor( COLOR_BTNTEXT ) : ::GetSysColor( COLOR_GRAYTEXT );
CRect rcGlyph( _pdcbd.m_rcClient );
	rcGlyph.NormalizeRect();
	if( rcGlyph.Width() & 1 )
		rcGlyph.left++;
	if( rcGlyph.Height() & 1 )
		rcGlyph.top++;
	if( _pdcbd.m_eType == __DCBT_CLOSE )
		_pdcbd.m_eType = __DCBT_CLOSE_DC2K;
glyph_t * pGlyph = g_DockingCaptionGlyphs[_pdcbd.m_eType];
	ASSERT( pGlyph != NULL );
	if( ! _pdcbd.m_bFloating )
		rcGlyph.InflateRect( 1, 1 );
	rcGlyph.InflateRect( 1, 1, 0, 0 );
	dc.FillSolidRect( &rcGlyph, clr3dFace );
CRect rcGlyphShape( rcGlyph );
	if( _pdcbd.m_bPushed )
		rcGlyphShape.OffsetRect( 1, 1 );
	PaintGlyphCentered( dc, rcGlyphShape, *pGlyph, ColorValues );
	if( _pdcbd.m_bEnabled && _pdcbd.m_bPushed )
		dc.Draw3dRect( &rcGlyph, clr3dShadow, clr3dHiLight );
	else if( _pdcbd.m_bEnabled && bHover )
	{
		dc.Draw3dRect( &rcGlyph, clr3dFace, clr3dDkShadow );
		rcGlyph.DeflateRect( 1, 1 );
		dc.Draw3dRect( &rcGlyph, clr3dHiLight, clr3dShadow );
	} // else if( _pdcbd.m_bEnabled && bHover )
	else
		dc.Draw3dRect( &rcGlyph, clr3dHiLight, clr3dShadow );
}

void CExtPaintManagerXP::PaintDockingCaptionButton(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA & _pdcbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( __DCBT_VALUE_MIN <= _pdcbd.m_eType && _pdcbd.m_eType <= __DCBT_VALUE_MAX );
	if( _pdcbd.m_rcClient.IsRectEmpty() )
		return;
bool bHover = _pdcbd.m_bHover;
	if( !_pdcbd.m_bEnabled )
		bHover = false;
COLORREF ColorValues[2] = { RGB(0,0,0), RGB(0,0,0), };
	if( _pdcbd.m_bEnabled )
	{
		if( ! (bHover || _pdcbd.m_bPushed) )
			ColorValues[1] =
				GetColor(
					_pdcbd.m_bSideBar
						? (_pdcbd.m_bBarWndActive ? COLOR_HIGHLIGHTTEXT : COLOR_3DDKSHADOW )
						: COLOR_HIGHLIGHTTEXT 
						,
					_pdcbd.m_pHelperSrc,
					_pdcbd.m_lParam
					);
	} // if( bEnabled )
	else
		ColorValues[1] = GetColor( COLOR_3DSHADOW, _pdcbd.m_pHelperSrc, _pdcbd.m_lParam );
CRect rcGlyph( _pdcbd.m_rcClient );
	rcGlyph.NormalizeRect();
	if( bHover || _pdcbd.m_bPushed )
	{
		dc.FillSolidRect( &rcGlyph, GetColor( _pdcbd.m_bPushed ? XPCLR_HILIGHT : CLR_3DFACE_IN, _pdcbd.m_pHelperSrc, _pdcbd.m_lParam ) );
		CRect rcBtnBorder(rcGlyph);
		rcBtnBorder.InflateRect(1,1);
		COLORREF clrBtnBorder = GetColor( _pdcbd.m_bBarWndActive ? XPCLR_HILIGHT : XPCLR_HILIGHT_BORDER, _pdcbd.m_pHelperSrc, _pdcbd.m_lParam );
		dc.Draw3dRect( rcBtnBorder, clrBtnBorder, clrBtnBorder );
	}
	if( rcGlyph.Width() & 1 )
		rcGlyph.left++;
	if( rcGlyph.Height() & 1 )
		rcGlyph.top++;
int eType = _pdcbd.m_eType;
	if( _pdcbd.m_bSideBar && !_pdcbd.m_bFloating && eType == __DCBT_CLOSE )
		eType = __DCBT_XP_THIN_CLOSE;
glyph_t * pGlyph = g_DockingCaptionGlyphs[eType];
	ASSERT( pGlyph != NULL );
	PaintGlyphCentered( dc, rcGlyph, *pGlyph, ColorValues );
}

void CExtPaintManagerStudio2005::PaintDockingCaptionButton(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA & _pdcbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDockingCaptionButton( dc, _pdcbd );
		return;
	}
	if(		_pdcbd.m_bSideBar 
		&&	_pdcbd.m_bFloating 
		&&	(	( ! _pdcbd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtBarNcAreaButtonMenu) ) )
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
			||	(! ((CExtBarNcAreaButtonMenu*)_pdcbd.m_pHelperSrc)->OnQueryDeactivateAutohideSlider() )
#else
			||	(! ((CExtBarNcAreaButtonMenu*)_pdcbd.m_pHelperSrc)->GetBar()->IsFixedMode() )
#endif
			)
		)
		CExtPaintManager::PaintDockingCaptionButton( dc, _pdcbd );
	else
		CExtPaintManagerOffice2003::PaintDockingCaptionButton( dc, _pdcbd );
}

void CExtPaintManagerNativeXP::PaintDockingCaptionButton(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA & _pdcbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT(	__DCBT_VALUE_MIN <= _pdcbd.m_eType
		&&	_pdcbd.m_eType <= __DCBT_VALUE_MAX 
		);
	if( _pdcbd.m_rcClient.IsRectEmpty() )
		return;
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintDockingCaptionButton( dc, _pdcbd );
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pdcbd.m_pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}
	if( _pdcbd.m_eType == __DCBT_CLOSE )
	{
		if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_WINDOW ) != NULL )
		{
			INT nStateID = 
					(!_pdcbd.m_bEnabled)
						? CBS_DISABLED
						: _pdcbd.m_bPushed
							? CBS_PUSHED
							: _pdcbd.m_bHover
								? CBS_HOT
								: CBS_NORMAL;
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd,
					dc.GetSafeHdc(), 
					WP_SMALLCLOSEBUTTON, 
					nStateID, 
					&_pdcbd.m_rcClient, 
					&_pdcbd.m_rcClient
					) == S_OK
				);
			g_PaintManager.m_UxTheme.CloseThemeData();
		}
	}
	else
	{
		CRect rcGlyph( _pdcbd.m_rcClient );
		rcGlyph.NormalizeRect();

		if(		(_pdcbd.m_bHover || _pdcbd.m_bPushed)
			&&	_pdcbd.m_bEnabled 
			)
		{
			if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_TOOLBAR ) != NULL )
			{
				INT nStateID = 
					_pdcbd.m_bPushed
						? TS_PRESSED
						: _pdcbd.m_bHover
							? TS_HOT
							: TS_NORMAL;
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWnd,
						dc.GetSafeHdc(), 
						TP_BUTTON, 
						nStateID, 
						&rcGlyph, 
						&rcGlyph
						) == S_OK
					);
				g_PaintManager.m_UxTheme.CloseThemeData();
			}
		}

		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			::GetSysColor(
				(!_pdcbd.m_bEnabled)
					? COLOR_GRAYTEXT
					: (_pdcbd.m_bHover || _pdcbd.m_bPushed) 
						? COLOR_BTNTEXT
						: COLOR_HIGHLIGHTTEXT
				)
		};
		
		glyph_t * pGlyph = g_DockingCaptionGlyphs[ _pdcbd.m_eType ];
		ASSERT( pGlyph != NULL );
		if( _pdcbd.m_bPushed )
			rcGlyph.OffsetRect( 1, 1 );
		PaintGlyphCentered( dc, rcGlyph, *pGlyph, ColorValues );
	}
}

CExtPaintManager::PAINTPUSHBUTTONDATA::PAINTPUSHBUTTONDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_bHorz( false )
	, m_rcClient( 0,0,0,0 )
	, m_sText( _T("") )
	, m_pIcon( NULL )
	, m_bFlat( false )
	, m_bHover( false )
	, m_bPushed( false )
	, m_bChecked( false )
	, m_bIndeterminate( false )
	, m_bEnabled( false )
	, m_bDrawBorder( false )
	, m_bDrawFocusRect( false )
	, m_bDefaultPushButton( false )
	, m_nTextAlignment( __ALIGN_HORIZ_LEFT | __ALIGN_VERT_CENTER )
	, m_nIconAlignment( __ALIGN_HORIZ_LEFT | __ALIGN_VERT_CENTER )
	, m_rcBorderSizes( 0, 0, 0, 0 )
	, m_rcIconMargins( 0, 0, 0, 0 )
	, m_rcTextMargins( 0, 0, 0, 0 )
	, m_nFocusMode( __EBFM_CAPTION_AREA )
	, m_hFont( NULL )
	, m_bDropDown( false )
	, m_nHelperSysCmdID( 0 )
	, m_bTransparentBackground( false )
	, m_bSeparatedDropDown( false )
	, m_bNoDropDownArrow( false )
	, m_bPushedDropDown( false )
	, m_bHoverDropDown( false )
	, m_clrForceTextDisabled( ((COLORREF)-1L) )
	, m_clrForceTextNormal( ((COLORREF)-1L) )
	, m_clrForceTextHover( ((COLORREF)-1L) )
	, m_clrForceTextPressed( ((COLORREF)-1L) )
	, m_clrForceBk( ((COLORREF)-1L) )
	, m_nDrawTextFlagsH( DT_CENTER|DT_VCENTER ) // ( DT_SINGLELINE|DT_CENTER|DT_VCENTER )
	, m_bForceUseDrawTextApiH( false )
	, m_bForceRtlLayout( false )
	, m_bForceRtlText( false )
	, m_bWordBreak( false )
	, m_clrCustomAccentEffectForIcon( COLORREF(-1L) )
	, m_bHelperColorCellButton( false )
{
}

CExtPaintManager::PAINTPUSHBUTTONDATA::PAINTPUSHBUTTONDATA(
	CObject * pHelperSrc,
	bool bHorz,
	const RECT & rcClient,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	bool bFlat,
	bool bHover,
	bool bPushed,
	bool bIndeterminate,
	bool bEnabled,
	bool bDrawBorder,
	bool bDrawFocusRect,
	bool bDefaultPushButton,
	int eAlign,
	HFONT hFont, // = NULL
	bool bDropDown, // = false
	UINT nHelperSysCmdID, // = 0
	bool bTransparentBackground // = false
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_bHorz( bHorz )
	, m_rcClient( rcClient )
	, m_sText( (sText==NULL) ? _T("") : sText )
	, m_pIcon( pIcon )
	, m_bFlat( bFlat )
	, m_bHover( bHover )
	, m_bPushed( bPushed )
	, m_bChecked( false )
	, m_bIndeterminate( bIndeterminate )
	, m_bEnabled( bEnabled )
	, m_bDrawBorder( bDrawBorder )
	, m_bDrawFocusRect( bDrawFocusRect )
	, m_bDefaultPushButton( bDefaultPushButton )
	, m_nTextAlignment( eAlign )
	, m_nIconAlignment( __ALIGN_HORIZ_LEFT | __ALIGN_VERT_CENTER )
	, m_rcBorderSizes( 0, 0, 0, 0 )
	, m_rcIconMargins( 0, 0, 0, 0 )
	, m_rcTextMargins( 0, 0, 0, 0 )
	, m_hFont( hFont )
	, m_bDropDown( bDropDown )
	, m_nHelperSysCmdID( nHelperSysCmdID )
	, m_bTransparentBackground( bTransparentBackground )
	, m_bSeparatedDropDown( false )
	, m_bNoDropDownArrow( false )
	, m_bPushedDropDown( false )
	, m_bHoverDropDown( false )
	, m_clrForceTextDisabled( ((COLORREF)-1L) )
	, m_clrForceTextNormal( ((COLORREF)-1L) )
	, m_clrForceTextHover( ((COLORREF)-1L) )
	, m_clrForceTextPressed( ((COLORREF)-1L) )
	, m_clrForceBk( ((COLORREF)-1L) )
	, m_nDrawTextFlagsH( 0 ) // ( DT_SINGLELINE )
	, m_bForceUseDrawTextApiH( false )
	, m_bForceRtlLayout( false )
	, m_bForceRtlText( false )
	, m_bWordBreak( false )
	, m_clrCustomAccentEffectForIcon( COLORREF(-1L) )
	, m_bHelperColorCellButton( false )
{
	if( (m_nTextAlignment&__ALIGN_HORIZ_CENTER) != 0 )
		m_nDrawTextFlagsH |= DT_CENTER;
	else if( (m_nTextAlignment&__ALIGN_HORIZ_RIGHT) != 0 )
		m_nDrawTextFlagsH |= DT_RIGHT;
	else
		m_nDrawTextFlagsH |= DT_LEFT;

	if( (m_nTextAlignment&__ALIGN_VERT_CENTER) != 0 )
		m_nDrawTextFlagsH |= DT_VCENTER;
	else
		m_nDrawTextFlagsH |= DT_TOP;
}

bool CExtPaintManager::PAINTPUSHBUTTONDATA::IsRTL()
{
	if( m_bForceRtlLayout )
		return true;
	if( m_pHelperSrc == NULL )
		return false;
	ASSERT_VALID( m_pHelperSrc );
CExtPopupMenuWnd * pPopup =
		DYNAMIC_DOWNCAST( CExtPopupMenuWnd, m_pHelperSrc );
	if( pPopup != NULL )
		return pPopup->OnQueryLayoutRTL();
CExtBarButton * pTBB =
		DYNAMIC_DOWNCAST( CExtBarButton, m_pHelperSrc );
	if( pTBB != NULL )
	{
		CExtToolControlBar * pToolBar =
			pTBB->GetBar();
		if( pToolBar != NULL )
		{
			if( (g_ResourceManager->OnQueryLangLayout()&LAYOUT_RTL) != 0 )
				return true;
			if(		pToolBar->m_pDockSite != NULL
				&&	(pToolBar->m_pDockSite->GetExStyle()&WS_EX_LAYOUTRTL) != 0
				)
				return true;
			if( (pToolBar->GetParent()->GetExStyle()&WS_EX_LAYOUTRTL) != 0 )
				return true;
		} // if( pToolBar != NULL )
	} // if( pTBB != NULL )
	return false;
}

LONG CExtPaintManager::_CalcSplitButtonExtentImpl( const CObject * pObjButton, bool bHorz ) const
{
	ASSERT_VALID( this );
	if( pObjButton != NULL )
	{
		ASSERT_VALID( pObjButton );
		if( pObjButton->IsKindOf( RUNTIME_CLASS(CExtBarButton) ) )
			return ((CExtBarButton*)pObjButton)->_CalcSplitButtonExtent( bHorz );
		if( pObjButton->IsKindOf( RUNTIME_CLASS(CExtButton) ) )
			return ((CExtButton*)pObjButton)->_CalcSplitButtonExtent();
	}
	return _CalcSplitButtonExtent( pObjButton, bHorz );
}

LONG CExtPaintManager::_CalcSplitButtonExtent( const CObject * pObjButton, bool bHorz ) const
{
	ASSERT_VALID( this ); pObjButton;
LONG nSplitButtonExtent = __DROPDOWN_ARROW_GAP * 2 + ( bHorz ? g_glyph_btn_expand_bottom.Size().cx : g_glyph_btn_expand_right.Size().cy );
	return nSplitButtonExtent;
}

void CExtPaintManager::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if( _ppbd.m_pHelperSrc != NULL )
	{
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ppbd.m_pHelperSrc );
		if( pTBB != NULL )
		{
			if( pTBB->IsRibbonPaintingMode() )
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
			CExtToolControlBar * pBar = pTBB->GetBar();
			if(		pBar != NULL
				&&	pBar->IsKindOf( RUNTIME_CLASS( CExtRibbonPage ) )
				&&	(! pTBB->IsNoRibbonLayout() )
				&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtBarMdiRightButton ) ) )
				)
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
		} // if( pTBB != NULL )
	} // if( _ppbd.m_pHelperSrc != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

bool bRTL = _ppbd.IsRTL();

	if( !_ppbd.m_bEnabled )
	{
		_ppbd.m_bHover = false;
		_ppbd.m_bDrawFocusRect = false;
		_ppbd.m_bIndeterminate = false;
	}

	if( _ppbd.m_bSeparatedDropDown && (_ppbd.m_bPushed || _ppbd.m_bPushedDropDown) )
		_ppbd.m_bHover = false;

COLORREF clrOldText = dc.GetTextColor();
COLORREF clrOldBk = dc.GetBkColor();
int nOldBkMode = dc.SetBkMode( TRANSPARENT );

CBrush * pBrush = NULL;
COLORREF bgColor = COLORREF(-1L);
	if( _ppbd.m_clrForceBk != ((COLORREF)-1L) )
		bgColor = _ppbd.m_clrForceBk;
	else if( _ppbd.m_bHover || _ppbd.m_bPushed )
		bgColor = GetColor( CLR_3DFACE_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
	else if( _ppbd.m_bIndeterminate )
	{
		bgColor = GetColor( CLR_3DFACE_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
		pBrush = &m_brushLightestSystem;
	}
	else
		bgColor = GetColor( CLR_3DFACE_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam );

bool bPushedDropDown = false;
	if( (_ppbd.m_bPushed && !_ppbd.m_bSeparatedDropDown)
		|| _ppbd.m_bPushedDropDown
		)
		bPushedDropDown = true;

CRect rectClient( _ppbd.m_rcClient );
CRect rectCaption( _ppbd.m_rcClient );
CRect rectDropDown( 0, 0, 0, 0 );
	if( _ppbd.m_bDropDown )
	{
		rectDropDown = rectClient;
		if( _ppbd.m_bHorz )
		{
			if( bRTL )
			{
				rectCaption.left += _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.right = rectCaption.left + 1;
			} // if( bRTL )
			else
			{
				rectCaption.right -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.left = rectCaption.right - 1;
			} // else from if( bRTL )
		} // if( _ppbd.m_bHorz )
		else
		{
			rectCaption.bottom -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
			rectDropDown.top = rectCaption.bottom - 1;
		} // if( _ppbd.m_bHorz )

		if(		!_ppbd.m_bTransparentBackground 
			||	_ppbd.m_clrForceBk != ((COLORREF)-1L)
			)
		{
			if(		_ppbd.m_bEnabled
				&&	bPushedDropDown
				&&	_ppbd.m_bHover
				&&	_ppbd.m_clrForceBk == ((COLORREF)-1L)
				)
				dc.FillRect( &rectDropDown, &m_brushLightDefault );
			else
				dc.FillSolidRect( &rectDropDown, bgColor );
		} // if( ! _ppbd.m_bTransparentBackground )

		if( _ppbd.m_bSeparatedDropDown )
		{
			rectClient = rectCaption;
			if( bPushedDropDown )
			{
				if( (!_ppbd.m_bFlat) || _ppbd.m_bDrawBorder )
					dc.Draw3dRect(
						rectDropDown,
						GetColor( CLR_3DSHADOW_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
						GetColor( CLR_3DHILIGHT_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
						);
			} // if( bPushedDropDown )
			else
			{
				if( (!_ppbd.m_bFlat) || (_ppbd.m_bHover && _ppbd.m_bDrawBorder) )
					dc.Draw3dRect(
						rectDropDown,
						GetColor( CLR_3DHILIGHT_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
						GetColor( CLR_3DSHADOW_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
						);
			} // else from if( bPushedDropDown )
		} // if( _ppbd.m_bSeparatedDropDown )
	} // if( _ppbd.m_bDropDown )

	if(		(!_ppbd.m_bTransparentBackground) 
		||	_ppbd.m_clrForceBk != ((COLORREF)-1L)
		)
	{
		if(			_ppbd.m_bEnabled
				&&	_ppbd.m_bPushed
				&&	_ppbd.m_bHover
				&&	_ppbd.m_clrForceBk == ((COLORREF)-1L)
			)
			dc.FillRect( &rectClient, &m_brushLightDefault );
		else
		{
			if( pBrush != NULL )
				dc.FillRect( &rectClient, pBrush );
			else
				dc.FillSolidRect( &rectClient, bgColor );
		}
	} // if( !_ppbd.m_bTransparentBackground )
	
	// Draw pressed button
	if( _ppbd.m_bPushed || _ppbd.m_bIndeterminate )
	{
		if( pBrush != NULL )
			dc.FillRect( &rectClient, pBrush );
		if( (!_ppbd.m_bFlat) || _ppbd.m_bDrawBorder )
			dc.Draw3dRect(
				rectClient,
				GetColor( CLR_3DSHADOW_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
				GetColor( CLR_3DHILIGHT_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
				);
	} // if( _ppbd.m_bPushed || _ppbd.m_bIndeterminate )
	else // ...else draw non pressed button
	{
		if( (!_ppbd.m_bFlat) || (_ppbd.m_bHover && _ppbd.m_bDrawBorder) )
			dc.Draw3dRect(
				rectClient,
				GetColor( CLR_3DHILIGHT_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
				GetColor( CLR_3DSHADOW_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
				);
		if( (!_ppbd.m_bFlat) && _ppbd.m_bHover )
		{
			CRect cc( _ppbd.m_rcClient );
			dc.Draw3dRect(
				cc,
				GetColor( CLR_3DSHADOW_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
				GetColor( CLR_3DDKSHADOW_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
				);
			cc.DeflateRect(1,1);
			dc.Draw3dRect(
				cc,
				GetColor( CLR_3DHILIGHT_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
				GetColor( CLR_3DSHADOW_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
				);
		} // if( (!_ppbd.m_bFlat) && _ppbd.m_bHover )
	} // else from if( _ppbd.m_bPushed )

	if( _ppbd.m_bDropDown && (! _ppbd.m_bNoDropDownArrow ) )
	{
		CRect rectGlyph( rectDropDown );
		if( bPushedDropDown )
			rectGlyph.OffsetRect( GetPushedOffset() );
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			GetColor(
				_ppbd.m_bEnabled
					? CLR_TEXT_OUT
					: CLR_3DSHADOW_OUT
					,
				_ppbd.m_pHelperSrc,
				_ppbd.m_lParam
				)
		};
		if( bRTL && (rectGlyph.Width()&1) != 0 )
			rectGlyph.right++;
		PaintGlyphCentered(
			dc,
			rectGlyph,
			_ppbd.m_bHorz ? g_glyph_btn_expand_bottom : g_glyph_btn_expand_right,
			ColorValues
			);
	} // if( _ppbd.m_bDropDown && (! _ppbd.m_bNoDropDownArrow ) )

	dc.SetBkColor( bgColor );

	rectCaption.DeflateRect( _ppbd.m_rcBorderSizes );
	rectClient = rectCaption;
CRect rcFocus( rectCaption );

	// Draw icon
	if(		rectClient.bottom > rectClient.top
		&&	rectClient.right > rectClient.left
		)
		PaintPushButtonIcon( dc, rectClient, rectCaption, rcFocus, _ppbd );

CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;
	// Draw text
	if(		rectCaption.bottom > rectCaption.top
		&&	rectCaption.right > rectCaption.left
		&&	(!sTitle.IsEmpty())
		)
		PaintPushButtonText( dc, rectCaption, _ppbd );

	// Draw focus rectangle
	if(		_ppbd.m_bDrawFocusRect 
		&&	( ( !sTitle.IsEmpty() ) || _ppbd.m_nFocusMode == __EBFM_CLIENT_AREA )
		&&	rcFocus.bottom > rcFocus.top 
		&&	rcFocus.right > rcFocus.left
		)
	{
		rcFocus.DeflateRect( 2, 2 );
		dc.DrawFocusRect( &rcFocus );
	}

	dc.SetBkMode( nOldBkMode );
	dc.SetBkColor( clrOldBk );
	dc.SetTextColor( clrOldText );
}

void CExtPaintManager::PaintPushButtonMdiRight(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	PaintPushButton( dc, _ppbd );
}

void CExtPaintManager::PaintPushButtonText(
	CDC & dc,
	CRect & rcCaption,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;
bool bRTL = _ppbd.IsRTL();
	if(		rcCaption.bottom > rcCaption.top
		&&	rcCaption.right > rcCaption.left
		&&	(!sTitle.IsEmpty())
		)
	{
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		if( _ppbd.m_bEnabled )
		{
			if( _ppbd.m_bHover || _ppbd.m_bPushed )
			{
				if(			_ppbd.m_bPushed
						&&	_ppbd.m_clrForceTextPressed != ((COLORREF)-1L)
						)
						dc.SetTextColor( _ppbd.m_clrForceTextPressed );
				else if(	_ppbd.m_bHover
						&&	_ppbd.m_clrForceTextHover != ((COLORREF)-1L)
						)
						dc.SetTextColor( _ppbd.m_clrForceTextHover );
				else if( _ppbd.m_clrForceTextNormal != ((COLORREF)-1L) ) 
						dc.SetTextColor( _ppbd.m_clrForceTextNormal );
				else
						dc.SetTextColor( GetColor( COLOR_BTNTEXT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ) );
			}
			else 
			{
				dc.SetTextColor( 
					( _ppbd.m_clrForceTextNormal == ((COLORREF)-1L) )
						? GetColor( COLOR_BTNTEXT, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
						: _ppbd.m_clrForceTextNormal
					);
			}
		}
		else
			dc.SetTextColor(
				( _ppbd.m_clrForceTextDisabled == ((COLORREF)-1L) )
					? GetColor( COLOR_3DFACE, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
					: _ppbd.m_clrForceTextDisabled
				);
		CFont * pOldBtnFont = NULL;
		CFont * pCurrFont = NULL;
		if( _ppbd.m_hFont != NULL )
			pCurrFont = CFont::FromHandle(_ppbd.m_hFont);
		else
		{
			if( _ppbd.m_bDefaultPushButton )
				pCurrFont = &m_FontBold;
			else
				pCurrFont = &m_FontNormal;
		} // else from if( _ppbd.m_hFont != NULL )
		ASSERT( pCurrFont != NULL );
		pOldBtnFont = dc.SelectObject( pCurrFont );
		ASSERT( pOldBtnFont != NULL );

		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( ! _ppbd.m_bHorz )
			eLO = CExtRichContentLayout::__ELOT_90_CW;

		CRect rcTextLocation( 0, 0, 0, 0 );
		UINT nDtMeasureFlags = DT_LEFT | DT_TOP | DT_CALCRECT | ((bRTL || _ppbd.m_bForceRtlText) ? DT_RTLREADING : 0);
		if( _ppbd.m_bWordBreak )
		{
			rcTextLocation = rcCaption;
			rcTextLocation.OffsetRect( -rcTextLocation.TopLeft() );
			rcTextLocation.bottom = rcTextLocation.top;
			nDtMeasureFlags |= DT_WORDBREAK;
		}
		else
			nDtMeasureFlags |= DT_SINGLELINE;

		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, LPCTSTR(sTitle), rcTextLocation, nDtMeasureFlags, 0
			);
		if(		( bRTL || _ppbd.m_bForceRtlText )
			&&	eLO == CExtRichContentLayout::__ELOT_NORMAL
			&&	_ppbd.m_pHelperSrc != NULL
			&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtButton) )
			)
			rcTextLocation.InflateRect( 0, 0, 2, 0 ); // TO-FIX: incorrect horizontally-oriented text position on RTL buttons
		rcTextLocation.OffsetRect( rcCaption.TopLeft() - rcTextLocation.TopLeft() );
			
		UINT nDtDrawFlags = 0;
		if( (_ppbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			nDtDrawFlags |= DT_RIGHT;
			rcTextLocation.OffsetRect(
				rcCaption.Width() - rcTextLocation.Width(),
				0
				);
		}
		else if( (_ppbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			nDtDrawFlags |= DT_CENTER;
			rcTextLocation.OffsetRect(
				( rcCaption.Width() - rcTextLocation.Width() ) / 2,
				0
				);
		}
		else
			nDtDrawFlags |= DT_LEFT;
		if( (_ppbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			nDtDrawFlags |= DT_BOTTOM;
			rcTextLocation.OffsetRect(
				0,
				rcCaption.Height() - rcTextLocation.Height()
				);
		}
		else if( (_ppbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
			nDtDrawFlags |= DT_TOP;
		else
		{
			nDtDrawFlags |= DT_VCENTER;
			rcTextLocation.OffsetRect(
				0,
				( rcCaption.Height() - rcTextLocation.Height() ) / 2
				);
		}

		if( _ppbd.m_bWordBreak )
			nDtDrawFlags |= DT_WORDBREAK;
		else
			nDtDrawFlags |= DT_SINGLELINE;

		if( _ppbd.m_bPushed )
		{
			CSize szPushedOffset = GetPushedOffset();
			rcTextLocation.OffsetRect( szPushedOffset );
		}

		if( _ppbd.m_bForceUseDrawTextApiH )
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, LPCTSTR(sTitle), &rcTextLocation, nDtDrawFlags, 0
				);
		else
		{
			if(		_ppbd.m_bEnabled 
				||	_ppbd.m_clrForceTextDisabled != ((COLORREF)-1L)
				)
				CExtRichContentLayout::stat_DrawText(
					CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
					dc.m_hDC, LPCTSTR(sTitle), &rcTextLocation, nDtDrawFlags, 0
					);
			else
			{
				CRect rcDrawTextOffs = rcTextLocation;
				rcDrawTextOffs.OffsetRect( 1, 1 );
				COLORREF clrTextRestore = dc.SetTextColor( GetColor( COLOR_3DHILIGHT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ) );
				CExtRichContentLayout::stat_DrawText(
					CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
					dc.m_hDC, LPCTSTR(sTitle), &rcDrawTextOffs, nDtDrawFlags, 0
					);
				dc.SetTextColor( GetColor( COLOR_3DSHADOW, _ppbd.m_pHelperSrc, _ppbd.m_lParam ) );
				CExtRichContentLayout::stat_DrawText(
					CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
					dc.m_hDC, LPCTSTR(sTitle), rcTextLocation, nDtDrawFlags, 0
					);
				dc.SetTextColor( clrTextRestore );
			} // else from if( _ppbd.m_bEnabled )
		} // else from if( _ppbd.m_bForceUseDrawTextApiH )
		dc.SelectObject( pOldBtnFont );
		dc.SetBkMode( nOldBkMode );
	}
}

void CExtPaintManager::PaintPushButtonIcon(
	CDC & dc,
	CRect & rcClient,
	CRect & rcCaption,
	CRect & rcFocus,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;

bool bRTL = _ppbd.IsRTL();
bool bDrawIcon = true;

bool bRibbonMode = false;
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if(		_ppbd.m_pHelperSrc != NULL
		&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtRibbonButton) )
		)
	{ // ribbon button
		bRibbonMode = true;
		CExtRibbonButton * pTBB = STATIC_DOWNCAST( CExtRibbonButton, _ppbd.m_pHelperSrc );
		INT nILV = pTBB->RibbonILV_Get();
		if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
		{
			bDrawIcon = false;
			INT nTextToIconDistance = Ribbon_GetTextToIconDistance( dc, nILV, pTBB, _ppbd.m_lParam );
//			CSize _sizeIcon = _ppbd.m_pIcon->GetSize();
			CSize _sizeIcon = Ribbon_GetIconSize( pTBB, nILV, _ppbd.m_lParam );
			CRect rcIconPaint = rcCaption;
			CRect rcCP = pTBB->OnRibbonGetContentPadding();
			rcIconPaint.bottom = rcIconPaint.top + _sizeIcon.cx + rcCP.bottom + nTextToIconDistance;
			rcIconPaint.DeflateRect( rcCP.left, rcCP.top, rcCP.right, 0 );
			rcCaption.top += _sizeIcon.cy + nTextToIconDistance + rcCP.top + rcCP.bottom;
			rcCaption.DeflateRect( rcCP.left, 0, rcCP.right, rcCP.bottom );
			if( _ppbd.m_pIcon != NULL && (! _ppbd.m_pIcon->IsEmpty()) )
			{
				PaintIcon(
					dc,
					_ppbd.m_bHorz,
					_ppbd.m_pIcon,
					rcIconPaint,
					_ppbd.m_bPushed,
					_ppbd.m_bEnabled,
					_ppbd.m_bHover,
					_ppbd.m_nIconAlignment,
					_ppbd.m_bForceRtlLayout && _ppbd.m_bHorz,
					NULL,
					NULL,
					&_ppbd.m_rcIconMargins,
					_ppbd.m_clrCustomAccentEffectForIcon
					);
			} // if( _ppbd.m_pIcon != NULL && (! _ppbd.m_pIcon->IsEmpty()) )
		} // if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
	} // ribbon button
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

	// Draw the icon
	if(		bDrawIcon
		&&	rcClient.bottom > rcClient.top
		&&	rcClient.right > rcClient.left
		)
	{
		if( _ppbd.m_pIcon != NULL && (! _ppbd.m_pIcon->IsEmpty()) )
		{
			PaintIcon(
				dc,
				_ppbd.m_bHorz,
				_ppbd.m_pIcon,
				rcClient,
				_ppbd.m_bPushed,
				_ppbd.m_bEnabled,
				_ppbd.m_bHover,
				_ppbd.m_nIconAlignment,
				_ppbd.m_bForceRtlLayout && _ppbd.m_bHorz,
				NULL,
				&rcCaption,
				&_ppbd.m_rcIconMargins,
				_ppbd.m_clrCustomAccentEffectForIcon
				);
			
			if( _ppbd.m_nFocusMode == __EBFM_CAPTION_AREA )
				rcFocus = rcCaption;

			if(		_ppbd.m_bHorz
				&&	_ppbd.m_pHelperSrc != NULL
				&&	_ppbd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtPopupMenuWnd))
				)
			{ 
				// painting tool button with icon in popup menu
				if( bRTL )
					rcCaption.right -= 3;
				else
					rcCaption.left += 3;
			}

			if( ! rcCaption.IsRectEmpty() )
			{
				if( _ppbd.m_bHorz )
				{
					rcCaption.DeflateRect( 
						_ppbd.m_rcTextMargins.left,
						_ppbd.m_rcTextMargins.top,
						_ppbd.m_rcTextMargins.right,
						_ppbd.m_rcTextMargins.bottom
						);
				}
				else
				{
					rcCaption.DeflateRect( 
						_ppbd.m_rcTextMargins.top,
						_ppbd.m_rcTextMargins.right,
						_ppbd.m_rcTextMargins.bottom,
						_ppbd.m_rcTextMargins.left
						);			
				}
			}
		} // if( _ppbd.m_pIcon != NULL && (! _ppbd.m_pIcon->IsEmpty()) )
		else
		{
			if( ! bRibbonMode )
			{
				if(		_ppbd.m_pHelperSrc != NULL
					&&	_ppbd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtPopupMenuWnd))
					)
				{
					if( _ppbd.m_bHorz )
						rcCaption.DeflateRect( 3, 0 );
					else
						rcCaption.DeflateRect( 0, 3 );
				}
			} // if( ! bRibbonMode )
			COLORREF clrForceGlyphColor = COLORREF(-1L);
			if(		_ppbd.m_pHelperSrc != NULL
				&&	(	_ppbd.m_clrForceTextDisabled != COLORREF(-1L)
					||	_ppbd.m_clrForceTextNormal   != COLORREF(-1L)
					||	_ppbd.m_clrForceTextHover    != COLORREF(-1L)
					||	_ppbd.m_clrForceTextPressed  != COLORREF(-1L)
					)
				&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarMdiRightButton) )
				)
			{
				if( _ppbd.m_bEnabled )
				{
					if( _ppbd.m_bPushed )
						clrForceGlyphColor = _ppbd.m_clrForceTextPressed;
					else if( _ppbd.m_bHover )
						clrForceGlyphColor = _ppbd.m_clrForceTextHover;
					else if( _ppbd.m_bEnabled )
						clrForceGlyphColor = _ppbd.m_clrForceTextNormal;
				}
				else
					clrForceGlyphColor = _ppbd.m_clrForceTextDisabled;
			}
			PaintSysCmdGlyph(
				dc,
				_ppbd.m_nHelperSysCmdID,
				rcClient,
				false,
				_ppbd.m_bPushed,
				_ppbd.m_bEnabled,
				clrForceGlyphColor
				);
		} // else from if( _ppbd.m_pIcon != NULL && (! _ppbd.m_pIcon->IsEmpty()) )
	}
}

CExtPaintManager::PAINTCHECKRADIOBUTTONDATA::PAINTCHECKRADIOBUTTONDATA()
	: m_pHelperSrc( NULL )
	, m_eState( BOX_UNCHECKED )
	, m_lParam( 0L )
	, m_bLeftText( false )
	, m_bMultiline( false )
	, m_rcClient( 0,0,0,0 )
	, m_sText( _T("") )
	, m_bHover( false )
	, m_bPushed( false )
	, m_bEnabled( false )
	, m_bDrawFocusRect( false )
	, m_nTextAlignment( __ALIGN_HORIZ_LEFT | __ALIGN_VERT_CENTER )
	, m_rcTextMargins( 1, 1, 1, 1 )
	, m_hFont( NULL )
	, m_bTransparentBackground( false )
	, m_clrForceTextDisabled( ((COLORREF)-1L) )
	, m_clrForceTextNormal( ((COLORREF)-1L) )
	, m_clrForceTextHover( ((COLORREF)-1L) )
	, m_clrForceTextPressed( ((COLORREF)-1L) )
	, m_clrForceBk( ((COLORREF)-1L) )
{
}

CExtPaintManager::PAINTCHECKRADIOBUTTONDATA::PAINTCHECKRADIOBUTTONDATA(
	CObject * pHelperSrc,
	eBoxState_t eState,
	bool bLeftText,
	bool bMultiline,
	const RECT & rcClient,
	__EXT_MFC_SAFE_LPCTSTR sText,
	bool bHover,
	bool bPushed,
	bool bEnabled,
	bool bDrawFocusRect,
	INT eAlign,
	HFONT hFont, // = NULL
	bool bTransparentBackground // = false
	)
	: m_pHelperSrc( pHelperSrc )
	, m_eState( eState )
	, m_lParam( 0L )
	, m_bLeftText( bLeftText )
	, m_bMultiline( bMultiline )
	, m_rcClient( rcClient )
	, m_sText( (sText==NULL) ? _T("") : sText )
	, m_bHover( bHover )
	, m_bPushed( bPushed )
	, m_bEnabled( bEnabled )
	, m_bDrawFocusRect( bDrawFocusRect )
	, m_nTextAlignment( eAlign )
	, m_rcTextMargins( 1, 1, 1, 1 )
	, m_hFont( hFont )
	, m_bTransparentBackground( bTransparentBackground )
	, m_clrForceTextDisabled( ((COLORREF)-1L) )
	, m_clrForceTextNormal( ((COLORREF)-1L) )
	, m_clrForceTextHover( ((COLORREF)-1L) )
	, m_clrForceTextPressed( ((COLORREF)-1L) )
	, m_clrForceBk( ((COLORREF)-1L) )
{
}

CSize CExtPaintManager::GetCheckButtonBoxSize(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcbd
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CSize _sizeBox( 13, 13 );
	_sizeBox.cx = UiScalingDo( _sizeBox.cx, __EUIST_X );
	_sizeBox.cy = UiScalingDo( _sizeBox.cy, __EUIST_Y );
	if( _pcbd.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pcbd.m_pHelperSrc );

		CWnd * pWnd = NULL;
		if( _pcbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) ) ) 
		{
			CExtBarButton * pTBB = STATIC_DOWNCAST( CExtBarButton, _pcbd.m_pHelperSrc );
			ASSERT_VALID( pTBB );
			CExtToolControlBar * pBar = pTBB->GetBar();
			ASSERT( pBar != NULL );
			ASSERT_VALID( pBar );
			pWnd = pBar;
		}
		else 
			pWnd = DYNAMIC_DOWNCAST( CWnd, _pcbd.m_pHelperSrc );
		ASSERT( pWnd != NULL );

		if(		g_PaintManager.m_UxTheme.IsControlsThemed()
			&&	g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_BUTTON ) != NULL
			)
		{
			INT nState = 0;
			switch( _pcbd.m_eState ) 
			{
			case CExtPaintManager::BOX_UNCHECKED:
				nState = CBS_UNCHECKEDNORMAL;
				break;
			case CExtPaintManager::BOX_LDOWN_UNCHECKED:
				nState = CBS_UNCHECKEDPRESSED;
				break;
			case CExtPaintManager::BOX_DISABLED_UNCHECKED:
				nState = CBS_UNCHECKEDDISABLED;
				break;
			case CExtPaintManager::BOX_MOUSE_HOVER_UNCHECKED:
				nState = CBS_UNCHECKEDHOT;
				break;

			case CExtPaintManager::BOX_CHECKED:
				nState = CBS_CHECKEDNORMAL;
				break;
			case CExtPaintManager::BOX_LDOWN_CHECKED:
				nState = CBS_CHECKEDPRESSED;
				break;
			case CExtPaintManager::BOX_MOUSE_HOVER_CHECKED:
				nState = CBS_CHECKEDHOT;
				break;
			case CExtPaintManager::BOX_DISABLED_CHECKED:
				nState = CBS_CHECKEDDISABLED;
				break;

			case CExtPaintManager::BOX_INDETERMINATE:
				nState = CBS_MIXEDNORMAL;
				break;
			case CExtPaintManager::BOX_LDOWN_INDETERMINATE:
				nState = CBS_MIXEDPRESSED;
				break;
			case CExtPaintManager::BOX_MOUSE_HOVER_INDETERMINATE:
				nState = CBS_MIXEDHOT;
				break;
			case CExtPaintManager::BOX_DISABLED_INDETERMINATE:
				nState = CBS_MIXEDDISABLED;
				break;
			} // switch( _pcrbd.m_eState ) 
			
			VERIFY( 
				g_PaintManager.m_UxTheme.GetThemePartSize(
					dc.GetSafeHdc(),
					BP_CHECKBOX,
					nState,
					NULL,
					CExtUxTheme::__EXT_UX_TS_TRUE,
					&_sizeBox
					) == S_OK
				);

			g_PaintManager.m_UxTheme.CloseThemeData( true );
		}	
	} // if( _pcbd.m_pHelperSrc != NULL )
	return _sizeBox;
}

CSize CExtPaintManager::GetRadioButtonBoxSize(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcbd
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CSize _sizeBox( 13, 13 );
	_sizeBox.cx = UiScalingDo( _sizeBox.cx, __EUIST_X );
	_sizeBox.cy = UiScalingDo( _sizeBox.cy, __EUIST_Y );
	if( _pcbd.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pcbd.m_pHelperSrc );
		CWnd * pWnd =
			DYNAMIC_DOWNCAST( CWnd, _pcbd.m_pHelperSrc );
		ASSERT( pWnd != NULL );
		if(		g_PaintManager.m_UxTheme.IsControlsThemed()
			&&	g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_BUTTON ) != NULL
			)
		{
			INT nState = 0;
			switch( _pcbd.m_eState ) 
			{
			case CExtPaintManager::BOX_UNCHECKED:
				nState = CBS_UNCHECKEDNORMAL;
				break;
			case CExtPaintManager::BOX_LDOWN_UNCHECKED:
				nState = CBS_UNCHECKEDPRESSED;
				break;
			case CExtPaintManager::BOX_DISABLED_UNCHECKED:
				nState = CBS_UNCHECKEDDISABLED;
				break;
			case CExtPaintManager::BOX_MOUSE_HOVER_UNCHECKED:
				nState = CBS_UNCHECKEDHOT;
				break;

			case CExtPaintManager::BOX_CHECKED:
				nState = CBS_CHECKEDNORMAL;
				break;
			case CExtPaintManager::BOX_LDOWN_CHECKED:
				nState = CBS_CHECKEDPRESSED;
				break;
			case CExtPaintManager::BOX_MOUSE_HOVER_CHECKED:
				nState = CBS_CHECKEDHOT;
				break;
			case CExtPaintManager::BOX_DISABLED_CHECKED:
				nState = CBS_CHECKEDDISABLED;
				break;
			} // switch( _pcrbd.m_eState ) 
			
			VERIFY( 
				g_PaintManager.m_UxTheme.GetThemePartSize(
					dc.GetSafeHdc(), 
					BP_RADIOBUTTON, 
					nState, 
					NULL, 
					CExtUxTheme::__EXT_UX_TS_TRUE,
					&_sizeBox
					) == S_OK
				);

			g_PaintManager.m_UxTheme.CloseThemeData( true );
		}	
	} // if( _pcbd.m_pHelperSrc != NULL )
	return _sizeBox;
}

void CExtPaintManager::PaintCheckButtonBox(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcrbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcrbd.m_rcClient.IsRectEmpty() )
		return;
	if( _pcrbd.m_pHelperSrc == NULL )
		return;

	ASSERT_VALID( _pcrbd.m_pHelperSrc );

CWnd * pWnd = NULL;
	if( _pcrbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) ) ) 
	{
		CExtBarButton * pTBB = STATIC_DOWNCAST( CExtBarButton, _pcrbd.m_pHelperSrc );
		ASSERT_VALID( pTBB );
		CExtToolControlBar * pBar = pTBB->GetBar();
		ASSERT( pBar != NULL );
		ASSERT_VALID( pBar );
		pWnd = pBar;
	}
	else 
		pWnd = DYNAMIC_DOWNCAST( CWnd, _pcrbd.m_pHelperSrc );
	ASSERT( pWnd != NULL );

INT nState = 0;
INT nStateForUxTheme = 0;

	switch( _pcrbd.m_eState ) 
	{
	case CExtPaintManager::BOX_UNCHECKED:
		nStateForUxTheme = CBS_UNCHECKEDNORMAL;
		nState = DFCS_BUTTONCHECK;
		break;
	case CExtPaintManager::BOX_LDOWN_UNCHECKED:
		nStateForUxTheme = CBS_UNCHECKEDPRESSED;
		nState = DFCS_BUTTONCHECK | DFCS_PUSHED;
		break;
	case CExtPaintManager::BOX_DISABLED_UNCHECKED:
		nStateForUxTheme = CBS_UNCHECKEDDISABLED;
		nState = DFCS_BUTTONCHECK | DFCS_INACTIVE;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_UNCHECKED:
		nStateForUxTheme = CBS_UNCHECKEDHOT;
		nState = DFCS_BUTTONCHECK;
		break;

	case CExtPaintManager::BOX_CHECKED:
		nStateForUxTheme = CBS_CHECKEDNORMAL;
		nState = DFCS_BUTTONCHECK | DFCS_CHECKED;
		break;
	case CExtPaintManager::BOX_LDOWN_CHECKED:
		nStateForUxTheme = CBS_CHECKEDPRESSED;
		nState = DFCS_BUTTONCHECK | DFCS_CHECKED | DFCS_PUSHED;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_CHECKED:
		nStateForUxTheme = CBS_CHECKEDHOT;
		nState = DFCS_BUTTONCHECK | DFCS_CHECKED;
		break;
	case CExtPaintManager::BOX_DISABLED_CHECKED:
		nStateForUxTheme = CBS_CHECKEDDISABLED;
		nState = DFCS_BUTTONCHECK | DFCS_CHECKED | DFCS_INACTIVE;
		break;

	case CExtPaintManager::BOX_INDETERMINATE:
		nStateForUxTheme = CBS_MIXEDNORMAL;
		nState = DFCS_BUTTON3STATE | DFCS_CHECKED;
		break;
	case CExtPaintManager::BOX_LDOWN_INDETERMINATE:
		nStateForUxTheme = CBS_MIXEDPRESSED;
		nState = DFCS_BUTTON3STATE | DFCS_CHECKED | DFCS_PUSHED;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_INDETERMINATE:
		nStateForUxTheme = CBS_MIXEDHOT;
		nState = DFCS_BUTTON3STATE | DFCS_CHECKED;
		break;
	case CExtPaintManager::BOX_DISABLED_INDETERMINATE:
		nStateForUxTheme = CBS_MIXEDDISABLED;
		nState = DFCS_BUTTON3STATE | DFCS_CHECKED | DFCS_INACTIVE;
		break;
	} // switch( _pcrbd.m_eState ) 
INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
bool bDefaultDrawing = true;
	if(		g_PaintManager.m_UxTheme.IsControlsThemed()
		&&	g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_BUTTON ) != NULL
		)
	{
		if( g_PaintManager.m_UxTheme.DrawBackground(
				pWnd->GetSafeHwnd(),
				dc.GetSafeHdc(), 
				BP_CHECKBOX, 
				nStateForUxTheme, 
				&_pcrbd.m_rcBox, 
				&_pcrbd.m_rcBox
				) == S_OK
			)
			bDefaultDrawing = false;
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
	if( bDefaultDrawing )
	{
		DWORD dwStyle = pWnd->GetStyle();
		if( dwStyle & BS_FLAT )
			nState |= DFCS_FLAT;
		dc.DrawFrameControl( &_pcrbd.m_rcBox, DFC_BUTTON, nState );
	} // if( bDefaultDrawing )
	dc.SetBkMode( nOldBkMode );
}

void CExtPaintManager::PaintRadioButtonBox(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcrbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcrbd.m_rcClient.IsRectEmpty() )
		return;
	if( _pcrbd.m_pHelperSrc == NULL )
		return;

	ASSERT_VALID( _pcrbd.m_pHelperSrc );
CWnd * pWnd =
		DYNAMIC_DOWNCAST( CWnd, _pcrbd.m_pHelperSrc );
	ASSERT( pWnd != NULL );

INT nState = 0;
INT nStateForUxTheme = 0;

	switch( _pcrbd.m_eState ) 
	{
	case CExtPaintManager::BOX_UNCHECKED:
		nStateForUxTheme = RBS_UNCHECKEDNORMAL;
		break;
	case CExtPaintManager::BOX_LDOWN_UNCHECKED:
		nStateForUxTheme = RBS_UNCHECKEDPRESSED;
		nState = DFCS_PUSHED;
		break;
	case CExtPaintManager::BOX_DISABLED_UNCHECKED:
		nStateForUxTheme = RBS_UNCHECKEDDISABLED;
		nState = DFCS_INACTIVE;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_UNCHECKED:
		nStateForUxTheme = RBS_UNCHECKEDHOT;
		break;

	case CExtPaintManager::BOX_CHECKED:
		nStateForUxTheme = RBS_CHECKEDNORMAL;
		nState = DFCS_CHECKED;
		break;
	case CExtPaintManager::BOX_LDOWN_CHECKED:
		nStateForUxTheme = RBS_CHECKEDPRESSED;
		nState = DFCS_CHECKED | DFCS_PUSHED;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_CHECKED:
		nStateForUxTheme = RBS_CHECKEDHOT;
		nState = DFCS_CHECKED;
		break;
	case CExtPaintManager::BOX_DISABLED_CHECKED:
		nStateForUxTheme = RBS_CHECKEDDISABLED;
		nState = DFCS_CHECKED | DFCS_INACTIVE;
		break;
	} // switch( _pcrbd.m_eState ) 
INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
bool bDefaultDrawing = true;
	if(		g_PaintManager.m_UxTheme.IsControlsThemed()
		&&	g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_BUTTON ) != NULL )
	{
		if( g_PaintManager.m_UxTheme.DrawBackground(
				pWnd->GetSafeHwnd(),
				dc.GetSafeHdc(), 
				BP_RADIOBUTTON, 
				nStateForUxTheme, 
				&_pcrbd.m_rcBox, 
				&_pcrbd.m_rcBox
				) == S_OK
			)
			bDefaultDrawing = false;
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
	if( bDefaultDrawing )
	{
		DWORD dwStyle = pWnd->GetStyle();
		if( dwStyle & BS_FLAT )
			nState |= DFCS_FLAT;
		dc.DrawFrameControl( &_pcrbd.m_rcBox, DFC_BUTTON, nState | DFCS_BUTTONRADIO );
	} // if( bDefaultDrawing )
	dc.SetBkMode( nOldBkMode );
}

void CExtPaintManager::PaintCheckOrRadioButtonText(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcrbd,
	CSize _sizeBox,
	CRect & rcBoxLocation
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcrbd.m_rcClient.IsRectEmpty() )
		return;

	if( !_pcrbd.m_bEnabled )
	{
		_pcrbd.m_bHover = false;
		_pcrbd.m_bDrawFocusRect = false;
	}

CRect rcTextArea( _pcrbd.m_rcClient );
CRect rcTextLocation( 0, 0, 0, 0);

	rcBoxLocation.SetRect(
		_pcrbd.m_rcClient.left,
		_pcrbd.m_rcClient.top,
		_pcrbd.m_rcClient.left + _sizeBox.cx,
		_pcrbd.m_rcClient.top + _sizeBox.cy
		);

	if( (_pcrbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		rcBoxLocation.OffsetRect(
			0,
			( _pcrbd.m_rcClient.bottom - _sizeBox.cy ) - 2
			);
	else if( (_pcrbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_CENTER )
		rcBoxLocation.OffsetRect(
			0,
			( _pcrbd.m_rcClient.Height() - rcBoxLocation.Height() ) / 2
			);
	else
		rcBoxLocation.OffsetRect( 0, 1 );

	// pre-calculate box coordinates
	if( _pcrbd.m_bLeftText )
	{
		rcBoxLocation.OffsetRect(
			_pcrbd.m_rcClient.Width() - rcBoxLocation.Width(),
			0
			);
		rcTextArea.right = rcBoxLocation.left - 2;
		rcTextArea.left += 1;
	} // if( _pcrbd.m_bLeftText )
	else
		rcTextArea.left = rcBoxLocation.right + 4;

	rcTextArea.DeflateRect( _pcrbd.m_rcTextMargins );
	
	INT nOldBkMode = dc.SetBkMode( TRANSPARENT );

	// draw text
	INT nTextLength =
		(_pcrbd.m_sText == NULL)
			? INT(0)
			: INT(_tcslen(_pcrbd.m_sText));
	if(		nTextLength > 0
		&&	rcTextArea.bottom > rcTextArea.top 
		&&	rcTextArea.right > rcTextArea.left
		)
	{
		// if have valid area, text & focus rect
		ASSERT( _pcrbd.m_sText != NULL );

		COLORREF clrText =
			QueryObjectTextColor(
				dc,
				_pcrbd.m_bEnabled,
				_pcrbd.m_bDrawFocusRect,
				_pcrbd.m_bHover,
				_pcrbd.m_bPushed,
				_pcrbd.m_pHelperSrc
				);
		if( clrText == COLORREF(-1L) )
		{
			if( _pcrbd.m_bEnabled )
			{
				if( _pcrbd.m_bHover || _pcrbd.m_bPushed )
				{
					if(			_pcrbd.m_bPushed
							&&	_pcrbd.m_clrForceTextPressed != ((COLORREF)-1L)
							)
							clrText = _pcrbd.m_clrForceTextPressed;
					else if(	_pcrbd.m_bHover
							&&	_pcrbd.m_clrForceTextHover != ((COLORREF)-1L)
							)
							clrText = _pcrbd.m_clrForceTextHover;
					else if( _pcrbd.m_clrForceTextNormal != ((COLORREF)-1L) ) 
							clrText = _pcrbd.m_clrForceTextNormal;
					else
							clrText = GetColor( COLOR_BTNTEXT, this );
				} // if( _pcrbd.m_bHover || _pcrbd.m_bPushed )
				else
					clrText = 
					( _pcrbd.m_clrForceTextNormal == ((COLORREF)-1L) )
						? GetColor( COLOR_BTNTEXT, this )
						: _pcrbd.m_clrForceTextNormal;
			} // if( _pcrbd.m_bEnabled )
			else
			{
				clrText = 
					( _pcrbd.m_clrForceTextDisabled == ((COLORREF)-1L) )
						? GetColor( CLR_TEXT_DISABLED, this )
						: _pcrbd.m_clrForceTextDisabled;
			} // else from if( _pcrbd.m_bEnabled )
		} // if( clrText == COLORREF(-1L) )

		COLORREF clrOldText = dc.SetTextColor( clrText );

		CFont * pOldBtnFont = NULL;
		CFont * pCurrFont = NULL;
		if( _pcrbd.m_hFont != NULL )
			pCurrFont = CFont::FromHandle( _pcrbd.m_hFont );
		else
			pCurrFont = &m_FontNormal;
		ASSERT( pCurrFont != NULL );
		pOldBtnFont = dc.SelectObject( pCurrFont );
		
		UINT nDtMeasureFlags =
			DT_LEFT|DT_TOP|DT_CALCRECT;
		if( _pcrbd.m_bMultiline )
		{
			rcTextLocation = rcTextArea;
			rcTextLocation.OffsetRect( -rcTextLocation.TopLeft() );
			rcTextLocation.bottom = rcTextLocation.top;
			nDtMeasureFlags |= DT_WORDBREAK;
		}
		else
			nDtMeasureFlags |= DT_SINGLELINE;

		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			_pcrbd.m_sText,  nTextLength,
			rcTextLocation,
			nDtMeasureFlags, 0
			);
		rcTextLocation.OffsetRect(
			rcTextArea.TopLeft() - rcTextLocation.TopLeft()
			);
		
		UINT nDtDrawFlags = 0;
		if( (_pcrbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			nDtDrawFlags |= DT_RIGHT;
			rcTextLocation.OffsetRect(
				rcTextArea.Width() - rcTextLocation.Width(),
				0
				);
		}
		else if( (_pcrbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			nDtDrawFlags |= DT_CENTER;
			rcTextLocation.OffsetRect(
				( rcTextArea.Width() - rcTextLocation.Width() ) / 2,
				0
				);
		}
		else
			nDtDrawFlags |= DT_LEFT;
		
		if( (_pcrbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			nDtDrawFlags |= DT_BOTTOM;
			rcTextLocation.OffsetRect(
				0,
				rcTextArea.Height() - rcTextLocation.Height()
				);
		}
		else if( (_pcrbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
		{
			nDtDrawFlags |= DT_TOP;
		}
		else
		{
			nDtDrawFlags |= DT_VCENTER;
			rcTextLocation.OffsetRect(
				0,
				( rcTextArea.Height() - rcTextLocation.Height() ) / 2
				);
		}

		if( _pcrbd.m_bMultiline )
			nDtDrawFlags |= DT_WORDBREAK;
		else
			nDtDrawFlags |= DT_SINGLELINE;

		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			_pcrbd.m_sText, nTextLength,
			rcTextLocation,
			nDtDrawFlags, 0
			);
		
		dc.SelectObject( pOldBtnFont );
		dc.SetTextColor( clrOldText );

		if( _pcrbd.m_bDrawFocusRect )
		{
			CRect rcFocus( rcTextLocation );
			rcFocus.InflateRect( 2, 2 );
			rcFocus.left = max( rcFocus.left, rcTextArea.left );
			rcFocus.top = max( rcFocus.top, rcTextArea.top );
			rcFocus.right = min( rcFocus.right, rcTextArea.right );
			rcFocus.bottom = min( rcFocus.bottom, rcTextArea.bottom );
			rcFocus.InflateRect(
				_pcrbd.m_bLeftText ? 0 : 1,
				0,
				_pcrbd.m_bLeftText ? 1 : 0,
				0
				);
			dc.DrawFocusRect( &rcFocus );
		} // if( _pcrbd.m_bDrawFocusRect )

	} // if have valid area, text & focus rect
	
	dc.SetBkMode( nOldBkMode );
}

void CExtPaintManager::PaintCheckButton(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcrbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcrbd.m_rcClient.IsRectEmpty() )
		return;

	if( !_pcrbd.m_bEnabled )
	{
		_pcrbd.m_bHover = false;
		_pcrbd.m_bDrawFocusRect = false;
	}

	CSize szCheckBox = 
		GetCheckButtonBoxSize( dc, _pcrbd );

	// draw text
	CRect rcBoxLocation;
	PaintCheckOrRadioButtonText(
		dc,
		_pcrbd,
		szCheckBox,
		rcBoxLocation
		);

	// draw check box
	_pcrbd.m_rcBox = rcBoxLocation;
	PaintCheckButtonBox( dc, _pcrbd );
}

void CExtPaintManager::PaintRadioButton(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcrbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcrbd.m_rcClient.IsRectEmpty() )
		return;

	if( !_pcrbd.m_bEnabled )
	{
		_pcrbd.m_bHover = false;
		_pcrbd.m_bDrawFocusRect = false;
	}

	CSize szRadioBox = 
		GetRadioButtonBoxSize( dc, _pcrbd );

	// draw text
	CRect rcBoxLocation;
	PaintCheckOrRadioButtonText(
		dc,
		_pcrbd,
		szRadioBox,
		rcBoxLocation
		);

	// draw radio box
	_pcrbd.m_rcBox = rcBoxLocation;
	PaintRadioButtonBox( dc, _pcrbd );
}

CSize CExtPaintManager::GetDropDividerMerics()
{
	ASSERT_VALID( this );
	return CSize( 6, 6 );
}

void CExtPaintManager::PaintDropDivider(
	CDC & dc,
	const RECT & rcItem,
	bool bBefore,
	bool bHorz
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rc( rcItem );
CSize _sizeDDM = GetDropDividerMerics();
COLORREF clr = GetColor( COLOR_BTNTEXT, this );
	if( bHorz )
	{
		rc.InflateRect( 0, 1 );
		if( bBefore )
		{
			rc.right = rc.left + 1;
			rc.left--;
		} // if( bBefore )
		else
		{
			rc.left = rc.right - 1;
			rc.right++;
		} // else from if( bBefore )
		dc.FillSolidRect( &rc, clr );
		CRect rc2( rc );
		rc2.bottom = rc2.top + 1;
		rc2.InflateRect( 2, 0 );
		dc.FillSolidRect( &rc2, clr );
		rc2.DeflateRect( 1, 0 );
		rc2.bottom++;
		dc.FillSolidRect( &rc2, clr );
		rc2 = rc;
		rc2.top = rc2.bottom - 1;
		rc2.InflateRect( 2, 0 );
		dc.FillSolidRect( &rc2, clr );
		rc2.DeflateRect( 1, 0 );
		rc2.top--;
		dc.FillSolidRect( &rc2, clr );
	} // if( bHorz )
	else
	{
		rc.InflateRect( 1, 0 );
		if( bBefore )
		{
			rc.bottom = rc.top + 1;
			rc.top--;
		} // if( bBefore )
		else
		{
			rc.top = rc.bottom - 1;
			rc.bottom++;
			rc.right--;
		} // else from if( bBefore )
		dc.FillSolidRect( &rc, clr );
		CRect rc2( rc );
		rc2.right = rc2.left + 1;
		rc2.InflateRect( 0, 2 );
		dc.FillSolidRect( &rc2, clr );
		rc2.DeflateRect( 0, 1 );
		rc2.right++;
		dc.FillSolidRect( &rc2, clr );
		rc2 = rc;
		rc2.left = rc2.right - 1;
		rc2.InflateRect( 0, 2 );
		dc.FillSolidRect( &rc2, clr );
		rc2.DeflateRect( 0, 1 );
		rc2.left--;
		dc.FillSolidRect( &rc2, clr );
	} // else from if( bHorz )
}

INT CExtPaintManager::GetDropDownButtonWidth(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc; lParam;
#ifdef _DEBUG
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
	}
#endif // _DEBUG
INT nDD = 15; // 14;
	nDD = UiScalingDo( nDD, __EUIST_X );
	return nDD;
}

INT CExtPaintManagerNativeXP::GetDropDownButtonWidth(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
#ifdef _DEBUG
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
	}
#endif // _DEBUG
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return CExtPaintManager::GetDropDownButtonWidth( pHelperSrc, lParam );
INT nDD = ::GetSystemMetrics( SM_CXHTHUMB );
	nDD = UiScalingDo( nDD, __EUIST_X );
	return nDD;
}

INT CExtPaintManagerOffice2007_Impl::GetDropDownButtonWidth(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetDropDownButtonWidth( pHelperSrc, lParam );
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
		if( pTBB != NULL && pTBB->IsRibbonPaintingMode() )
		{
			if( pTBB->IsKindOf( RUNTIME_CLASS(CExtBarTextFieldButton) ) )
			{
				INT nDD = 14;
				//nDD = UiScalingDo( nDD, __EUIST_X );
				return nDD;
			}
			CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			if(		pParentTBB != NULL
				&&	pParentTBB->IsKindOf( RUNTIME_CLASS(CExtRibbonButtonToolGroup) )
				)
			{
				INT nDD = 10;
				nDD = UiScalingDo( nDD, __EUIST_X );
				return nDD;
			}
			INT nDD = 13;
			nDD = UiScalingDo( nDD, __EUIST_X );
			return nDD;
		} // if( pTBB != NULL && pTBB->IsRibbonPaintingMode() )
	} // if( pHelperSrc != NULL )
#endif // #if (!defined __EXT_MFC_NO_RIBBON_BAR)
INT nDD = m_sizeComboBoxDropDown.cx;
	nDD = UiScalingDo( nDD, __EUIST_X );
	return nDD;
}

INT CExtPaintManager::GetSpinButtonWidth(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
#ifdef _DEBUG
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
	}
#endif // _DEBUG
INT nDD = 15;
	nDD = UiScalingDo( nDD, __EUIST_X );
	return nDD;
}

INT CExtPaintManagerNativeXP::GetSpinButtonWidth(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
#ifdef _DEBUG
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
	}
#endif // _DEBUG

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return CExtPaintManager::GetSpinButtonWidth( pHelperSrc, lParam );
INT nDD = ::GetSystemMetrics( SM_CXHTHUMB );
	nDD = UiScalingDo( nDD, __EUIST_X );
	return nDD;
}

INT CExtPaintManagerOffice2007_Impl::GetSpinButtonWidth(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::GetSpinButtonWidth(
				pHelperSrc,
				lParam
				);

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		CExtBarButton * pTBB =
			DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
		if( pTBB != NULL && pTBB->IsRibbonPaintingMode() )
		{
			if( pTBB->IsKindOf( RUNTIME_CLASS(CExtBarTextFieldButton) ) )
			{
				INT nDD = 14;
				//nDD = UiScalingDo( nDD, __EUIST_X );
				return nDD;
			}
			CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			if(		pParentTBB != NULL
				&&	pParentTBB->IsKindOf( RUNTIME_CLASS(CExtRibbonButtonToolGroup) )
				)
			{
				INT nDD = 10;
				nDD = UiScalingDo( nDD, __EUIST_X );
				return nDD;
			}
			INT nDD = 13;
			nDD = UiScalingDo( nDD, __EUIST_X );
			return nDD;
		} // if( pTBB != NULL && pTBB->IsRibbonPaintingMode() )
	} // if( pHelperSrc != NULL )
#endif // #if (!defined __EXT_MFC_NO_RIBBON_BAR)
INT nDD = m_sizeComboBoxDropDown.cx;
	nDD = UiScalingDo( nDD, __EUIST_X );
	return nDD;
}

CRect CExtPaintManager::GetSpinButtonMargins(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
#ifdef _DEBUG
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
	}
#endif // _DEBUG
	return CRect( 0, 3, 3, 3 );
}

CRect CExtPaintManagerNativeXP::GetSpinButtonMargins(
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
#ifdef _DEBUG
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
	}
#endif // _DEBUG
	return CRect( 0, 1, 1, 1 );
}

void CExtPaintManager::PaintDragSourceRect(
	CDC & dc,
	const RECT & rcItem
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( !dc.RectVisible(&rcItem) )
		return;
COLORREF clr = GetColor( COLOR_BTNTEXT, this );
CRect rc( rcItem );
	dc.Draw3dRect( &rc, clr, clr );
	rc.DeflateRect( 1, 1 );
	dc.Draw3dRect( &rc, clr, clr );
}

void CExtPaintManager::PaintMenuSeparator(
	CDC & dc,
	const RECT & rectItem,
	int nIconAreaWidth,
	bool bRarelyUsed,
	bool bIsForceNoLeftGradient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	nIconAreaWidth;
	bIsForceNoLeftGradient;
	if( ::IsRectEmpty(&rectItem) )
		return;
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtRibbonGalleryPopupMenuWnd ) )
		&&	( ((CExtPopupMenuWnd*)pHelperSrc)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) == 0
		&&	((CExtRibbonGalleryPopupMenuWnd*)pHelperSrc)->ItemGetCount() > 0
		)
	{
		CRect rc;
		((CExtRibbonGalleryPopupMenuWnd*)pHelperSrc)->_GetClientRect( &rc );
		rc.top = rectItem.top; // + ( rectItem.bottom - rectItem.top ) / 2;
		rc.bottom = rc.top + 2;
		rc.DeflateRect( 3, 0 );
		COLORREF clrBtnShadow = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
		COLORREF clrBtnHilight = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
		dc.Draw3dRect(
			rc,
			clrBtnShadow,
			clrBtnHilight
			);
		return;
	}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
CRect rectItem2( rectItem );
	if( bRarelyUsed )
		dc.FillRect(
			&rectItem2,
			&m_brushLightDefault
			);
	else
		dc.FillSolidRect(
			&rectItem2,
			GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam )
			);
int nFunnyDeflateMetric =
		::GetSystemMetrics(SM_CXSMICON) / 2;
	rectItem2.DeflateRect(
		nFunnyDeflateMetric,
		0
		);
COLORREF clrBtnShadow =
		GetColor(
			bRarelyUsed ?
				CLR_3DFACE_OUT : CLR_3DSHADOW_OUT,
			pHelperSrc,
			lParam
			);
COLORREF clrBtnHilight =
		GetColor( CLR_3DHILIGHT_OUT, pHelperSrc, lParam );
const int nSeparatorHeight = 2;
	rectItem2.top += ( rectItem2.Height() - nSeparatorHeight ) / 2;
	rectItem2.bottom = rectItem2.top + nSeparatorHeight;
	dc.Draw3dRect(
		rectItem2,
		clrBtnShadow,
		clrBtnHilight
		);
}

void CExtPaintManagerXP::PaintMenuSeparator(
	CDC & dc,
	const RECT & rectItem,
	int nIconAreaWidth,
	bool bRarelyUsed,
	bool bIsForceNoLeftGradient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty(&rectItem) )
		return;
bool bRTL = false;
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		CExtPopupMenuWnd * pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	} // if( pHelperSrc != NULL )
CRect rc( rectItem ); 
	if( ! bIsForceNoLeftGradient )
	{
		CRect rcBottomFill( rectItem );
		if( bRTL )
			rcBottomFill.left = rcBottomFill.right - nIconAreaWidth;
		else
			rcBottomFill.right = rcBottomFill.left + nIconAreaWidth;
		COLORREF clr3dFace =
			GetColor(
				bRarelyUsed ? XPCLR_RARELY_BORDER : CLR_3DFACE_OUT,
				pHelperSrc,
				lParam 
			);
		dc.FillSolidRect( rcBottomFill, clr3dFace );
	} // if( ! bIsForceNoLeftGradient )

CRect rcGradient( rectItem );
	if( bRTL )
		rcGradient.left = rcGradient.right - nIconAreaWidth;
	else
		rcGradient.right = rcGradient.left + nIconAreaWidth;
	if( ! bIsForceNoLeftGradient )
	{
		COLORREF clrGradientLeft = ((COLORREF)(-1L)), 
				 clrGradientMiddle((COLORREF)(-1L)),
				 clrGradientRight((COLORREF)(-1L));
		if( bRarelyUsed )
		{
			if(		m_nIdxClrMlaRarelyLeft >= 0
				&&	m_nIdxClrMlaRarelyMiddle >= 0
				&&	m_nIdxClrMlaRarelyRight >= 0
				&&	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8
				)
			{ // if paint gradient on rarely used item's left part
				clrGradientLeft = GetColor( m_nIdxClrMlaRarelyLeft, pHelperSrc, lParam );
				clrGradientMiddle = GetColor( m_nIdxClrMlaRarelyMiddle, pHelperSrc, lParam );
				clrGradientRight = GetColor( m_nIdxClrMlaRarelyRight, pHelperSrc, lParam );
			} // if paint gradient on rarely used item's left part
		} // if( bRarelyUsed )
		else
		{
			if(		m_nIdxClrMlaNormLeft >= 0
				&&	m_nIdxClrMlaNormMiddle >= 0
				&&	m_nIdxClrMlaNormRight >= 0
				&&	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8
				)
			{ // if paint gradient on rarely used item's left part
				clrGradientLeft = GetColor( m_nIdxClrMlaNormLeft, pHelperSrc, lParam );
				clrGradientMiddle = GetColor( m_nIdxClrMlaNormMiddle, pHelperSrc, lParam );
				clrGradientRight = GetColor( m_nIdxClrMlaNormRight, pHelperSrc, lParam );
			} // if paint gradient on rarely used item's left part
		} // else from if( bRarelyUsed )
		if( clrGradientLeft != ((COLORREF)(-1L)) )
		{
			ASSERT( clrGradientRight != ((COLORREF)(-1L)) );
			stat_PaintGradientRect2steps( 
				dc,
				rcGradient, 
				clrGradientLeft,
				clrGradientMiddle, 
				clrGradientRight,
				false,
				1,
				2
				);
		} // if( clrGradientLeft != ((COLORREF)(-1L)) )
	} // if( ! bIsForceNoLeftGradient )

	if( bRTL )
		rc.right -= nIconAreaWidth;
	else
		rc.left += nIconAreaWidth;
	dc.FillSolidRect( rc, GetColor( XPCLR_3DFACE_NORMAL, pHelperSrc, lParam ) );

PAINTMENUITEMDATA _pmid; // fake
	_pmid.m_bForceNoLeftGradient = bIsForceNoLeftGradient;
	PaintMenuItemLeftAreaMarginXP(
		dc,
		_pmid,
		rcGradient,
		rc
		);

	if( bRTL )
		rc.right -= __EXT_MENU_GAP;
	else
		rc.left += __EXT_MENU_GAP;
	rc.top += rc.Height()/2 - 1;
	rc.bottom = rc.top + 1;

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtRibbonGalleryPopupMenuWnd ) )
		&&	( ((CExtPopupMenuWnd*)pHelperSrc)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) == 0
		&&	((CExtRibbonGalleryPopupMenuWnd*)pHelperSrc)->ItemGetCount() > 0
		)
	{
		CRect rcC;
		((CExtRibbonGalleryPopupMenuWnd*)pHelperSrc)->_GetClientRect( &rcC );
		rc.left = rcC.left;
		rc.right = rcC.right;
		rc.DeflateRect( 1, 0 );
	}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

	dc.FillSolidRect(
		rc,
		GetColor( XPCLR_SEPARATOR, pHelperSrc, lParam )
		);
}

bool CExtPaintManagerNativeXP::PaintMenuSeparator_UX(
	HWND hWnd,
	CDC & dc,
	const RECT & rectItem,
	int nIconAreaWidth,
	bool bRarelyUsed,
	bool bIsForceNoLeftGradient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bRarelyUsed;
	bIsForceNoLeftGradient;
	pHelperSrc;
	lParam;
	if( ::IsRectEmpty(&rectItem) )
		return true;
	if( hWnd == NULL || ( ! ::IsWindow( hWnd ) ) )
		return false;
	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_MENU ) == NULL )
		return false;
bool bRTL = false;
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		CExtPopupMenuWnd * pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}
HRESULT hr0 = S_OK, hr1 = S_OK, hr2 = S_OK;
CRect rcBk( rectItem );
	rcBk.DeflateRect( 1, 0, 1, 0 );
CRect rcFillSelectedBk = rcBk;
	if( nIconAreaWidth > 0 )
	{
		CRect rcLeftArea = rcFillSelectedBk;
		if( bRTL )
			rcFillSelectedBk.right = rcLeftArea.left = rcLeftArea.right - nIconAreaWidth - 1;
		else
			rcFillSelectedBk.left = rcLeftArea.right = rcLeftArea.left + nIconAreaWidth + 1;
		rcLeftArea.InflateRect( 0, 1 );
		hr0 =
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd, 
				dc.GetSafeHdc(), 
				MENU_POPUPGUTTER,
				MPI_NORMAL, 
				&rcLeftArea, 
				&rcLeftArea
				);
	}
	hr1 =
		g_PaintManager.m_UxTheme.DrawBackground(
			hWnd, 
			dc.GetSafeHdc(), 
			MENU_POPUPITEM,
			MPI_NORMAL, 
			&rcFillSelectedBk, 
			&rcFillSelectedBk
			);
CRect rcSeparator( rectItem );
//	rcSeparator.top += ( rectItem.bottom - rectItem.top ) / 2;
//	rcSeparator.bottom = rcSeparator.top + 1;
	rcSeparator.DeflateRect( 3, 1 );
	if( bRTL )
		rcSeparator.right -= nIconAreaWidth;
	else
		rcSeparator.left += nIconAreaWidth;
	hr2 =
		g_PaintManager.m_UxTheme.DrawBackground(
			hWnd, 
			dc.GetSafeHdc(), 
			MENU_POPUPSEPARATOR, 
			0, 
			&rcSeparator,
			&rcSeparator
			);
bool bThemedApproachOK = ( hr0 == S_OK && hr1 == S_OK && hr2 == S_OK ) ? true : false;
	g_PaintManager.m_UxTheme.CloseThemeData();
	return bThemedApproachOK;
}

void CExtPaintManagerNativeXP::PaintMenuSeparator(
	CDC & dc,
	const RECT & rectItem,
	int nIconAreaWidth,
	bool bRarelyUsed,
	bool bIsForceNoLeftGradient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty(&rectItem) )
		return;

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintMenuSeparator(
			dc,
			rectItem,
			nIconAreaWidth,
			bRarelyUsed,
			bIsForceNoLeftGradient,
			pHelperSrc,
			lParam
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

	if( PaintMenuSeparator_UX( hWnd, dc, rectItem, nIconAreaWidth, bRarelyUsed, bIsForceNoLeftGradient, pHelperSrc, lParam ) )
		return;

CRect rcSeparator( rectItem );
	rcSeparator.top += ( rectItem.bottom - rectItem.top ) / 2;
	rcSeparator.bottom = rcSeparator.top + 1;
	rcSeparator.DeflateRect( 3, 0 );

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtRibbonGalleryPopupMenuWnd ) )
		&&	( ((CExtPopupMenuWnd*)pHelperSrc)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) == 0
		&&	((CExtRibbonGalleryPopupMenuWnd*)pHelperSrc)->ItemGetCount() > 0
		)
	{
		CRect rcC;
		((CExtRibbonGalleryPopupMenuWnd*)pHelperSrc)->_GetClientRect( &rcC );
		rcSeparator.left = rcC.left;
		rcSeparator.right = rcC.right;
		rcSeparator.DeflateRect( 1, 0 );
	}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

	dc.FillSolidRect(
		&rcSeparator,
		::GetSysColor( COLOR_3DSHADOW )
		);
}

void CExtPaintManager::PaintSysCmdGlyph(
	CDC & dc,
	UINT nHelperSysCmdID,
	const RECT & rcItem,
	bool bHover,
	bool bPushed,
	bool bEnabled,
	COLORREF clrForceGlyphColor // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
e_docking_caption_button_t eGlyph = __DCBT_EMPTY;
	switch( nHelperSysCmdID )
	{
	case SC_CLOSE:
		eGlyph = __DCBT_CLOSE;
	break;
	case SC_RESTORE:
		eGlyph = __DCBT_WND_RESTORE;
	break;
	case SC_MINIMIZE:
		eGlyph = __DCBT_WND_MINIMIZE;
	break;
	case SC_MAXIMIZE:
		eGlyph = __DCBT_WND_MAXIMIZE;
	break;
	case SC_CONTEXTHELP:
		eGlyph = __DCBT_WND_CONTEXTHELP;
	break;
	} // switch( nHelperSysCmdID )
	if( eGlyph == __DCBT_EMPTY )
		return;
COLORREF ColorValues[2] = { RGB(0,0,0), RGB(0,0,0), };
CRect _rcItem( rcItem );
	if( bPushed )
		_rcItem.OffsetRect( GetPushedOffset() );
	if( clrForceGlyphColor != COLORREF(-1L) )
		ColorValues[1] = clrForceGlyphColor;
	else if( bEnabled )
		ColorValues[1] = GetColor( bHover ? CLR_MENUTEXT_IN : CLR_MENUTEXT_OUT, this );
	else
	{
		ColorValues[1] = GetColor( CLR_3DHILIGHT_OUT, this );
		_rcItem.OffsetRect(1,1);
		PaintGlyphCentered( dc, _rcItem, *g_DockingCaptionGlyphs[eGlyph], ColorValues );
		_rcItem.OffsetRect( -1, -1 );
		ColorValues[1] = GetColor( CLR_3DSHADOW_OUT, this );
	} // if( bEnabled )
	PaintGlyphCentered( dc, _rcItem, *g_DockingCaptionGlyphs[eGlyph], ColorValues );
}

void CExtPaintManagerXP::PaintSysCmdGlyph(
	CDC & dc,
	UINT nHelperSysCmdID,
	const RECT & rcItem,
	bool bHover,
	bool bPushed,
	bool bEnabled,
	COLORREF clrForceGlyphColor // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
e_docking_caption_button_t eGlyph = __DCBT_EMPTY;
	switch( nHelperSysCmdID )
	{
	case SC_CLOSE:
		eGlyph = __DCBT_CLOSE;
	break;
	case SC_RESTORE:
		eGlyph = __DCBT_WND_RESTORE;
	break;
	case SC_MINIMIZE:
		eGlyph = __DCBT_WND_MINIMIZE;
	break;
	case SC_MAXIMIZE:
		eGlyph = __DCBT_WND_MAXIMIZE;
	break;
	case SC_CONTEXTHELP:
		eGlyph = __DCBT_WND_CONTEXTHELP;
	break;
	} // switch( nHelperSysCmdID )
	if( eGlyph == __DCBT_EMPTY )
		return;
COLORREF ColorValues[2] = { RGB(0,0,0), RGB(0,0,0), };
CRect _rcItem( rcItem );
	if( bPushed )
		_rcItem.OffsetRect( GetPushedOffset() );
	if( clrForceGlyphColor != COLORREF(-1L) )
		ColorValues[1] = clrForceGlyphColor;
	else if( bEnabled )
	{
		if( m_bEnabledHoverIconShadows && bHover && (!bPushed) )
		{
			// COLOR_3DDKSHADOW changed to COLOR_3DSHADOW
			// by the Dmitry Yakovlev's advice
			ColorValues[1] = GetColor( COLOR_3DSHADOW, this  );
			PaintGlyphCentered( dc, _rcItem, *g_DockingCaptionGlyphs[eGlyph], ColorValues );
			// corrected by the Dmitry Yakovlev's advice
			_rcItem.OffsetRect( -2, -2 );
		} // if( m_bEnabledHoverIconShadows && bHover && (!bPushed) )
		ColorValues[1] = GetColor( bHover ? CLR_MENUTEXT_IN : CLR_MENUTEXT_OUT, this );
	} // if( bEnabled )
	else
		ColorValues[1] = GetColor( CLR_MENUTEXT_DISABLED, this );
	PaintGlyphCentered( dc, _rcItem, *g_DockingCaptionGlyphs[eGlyph], ColorValues );
}

int CExtPaintManager::TearOff_GetCaptionHeight() const
{
	ASSERT_VALID( this );
	return 8;
}

void CExtPaintManager::TearOff_GetCaptionPaint(
	CDC & dc,
	const RECT & rectItem,
	bool bHover,
	bool bPressed,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	dc;
	rectItem;
	bHover;
	bPressed;
	pHelperSrc;
	lParam;
}

CExtPaintManager::PAINTMENUITEMDATA::PAINTMENUITEMDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_rcItem( 0, 0, 0, 0 )
	, m_rcItemWithIndents( 0, 0, 0, 0 )
	, m_nIconAreaWidth( 0 )
	, m_sText( _T("") )
	, m_sAccelText( _T("") )
	, m_sExtendedText( _T("") )
	, m_pIcon( NULL )
	, m_bPopup( false )
	, m_bSelected( false )
	, m_bPushedCheck( false )
	, m_bPushedRadio( false )
	, m_bIndeterminate( false )
	, m_bEnabled( false )
	, m_bRarelyUsed( false )
	, m_bRarelyUsedPrev( false )
	, m_bRarelyUsedNext( false )
	, m_nHelperSysCmdID( 0L )
	, m_bForceNoLeftGradient( false )
	, m_bCustomizeListMode( false )
	, m_bSeparatedDropDown( false )
	, m_rcInPlaceWnd( 0, 0, 0, 0 )
	, m_strInPlaceText( _T("") )
	, m_bXtraMark( false )
	, m_bXtraChecked( false )
	, m_bBigAccent( false )
	, m_bHelperPopupDropped( false )
	, m_hCustomFont( NULL )
	, m_clrCustomAccentEffectForIcon( COLORREF(-1L) )
	, m_clrForceMenuText( COLORREF(-1L) )
{
}

CExtPaintManager::PAINTMENUITEMDATA::PAINTMENUITEMDATA(
	CObject * pHelperSrc,
	const RECT & rcItem,
	const RECT & rcItemWithIndents,
	INT nIconAreaWidth,
	__EXT_MFC_SAFE_LPCTSTR sText,
	__EXT_MFC_SAFE_LPCTSTR sAccelText,
	CExtCmdIcon * pIcon,
	bool bPopup,
	bool bSelected,
	bool bPushedCheck,
	bool bPushedRadio,
	bool bIndeterminate,
	bool bEnabled,
	bool bRarelyUsed,
	bool bRarelyUsedPrev,
	bool bRarelyUsedNext,
	UINT nHelperSysCmdID, // for painting system menu glyphs
	HFONT hCustomFont
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_rcItem( rcItem )
	, m_rcItemWithIndents( rcItemWithIndents )
	, m_nIconAreaWidth( nIconAreaWidth )
	, m_sText( (sText == NULL) ? _T("") : sText )
	, m_sAccelText( (sAccelText == NULL) ? _T("") : sAccelText )
	, m_sExtendedText( _T("") )
	, m_pIcon( pIcon )
	, m_bPopup( bPopup )
	, m_bSelected( bSelected )
	, m_bPushedCheck( bPushedCheck )
	, m_bPushedRadio( bPushedRadio )
	, m_bIndeterminate( bIndeterminate )
	, m_bEnabled( bEnabled )
	, m_bRarelyUsed( bRarelyUsed )
	, m_bRarelyUsedPrev( bRarelyUsedPrev )
	, m_bRarelyUsedNext( bRarelyUsedNext )
	, m_nHelperSysCmdID( nHelperSysCmdID )
	, m_bForceNoLeftGradient( false )
	, m_bCustomizeListMode( false )
	, m_bSeparatedDropDown( false )
	, m_rcInPlaceWnd( 0, 0, 0, 0 )
	, m_strInPlaceText( _T("") )
	, m_bXtraMark( false )
	, m_bXtraChecked( false )
	, m_bBigAccent( false )
	, m_bHelperPopupDropped( false )
	, m_hCustomFont( hCustomFont )
	, m_clrCustomAccentEffectForIcon( COLORREF(-1L) )
	, m_clrForceMenuText( COLORREF(-1L) )
{
}

void CExtPaintManager::PaintMenuItem(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pmid.m_rcItem.IsRectEmpty() )
		return;
bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		CExtPopupMenuWnd * pPopup =
			DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	} // if( _pmid.m_pHelperSrc != NULL )
CExtSafeString _sText =
		(_pmid.m_sText==NULL) ? _T("") : _pmid.m_sText;
CExtSafeString _sAccelText =
		(_pmid.m_sAccelText==NULL) ? _T("") : _pmid.m_sAccelText;

COLORREF clr3dFace = GetColor( CLR_3DFACE_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
COLORREF clrBk = clr3dFace;
COLORREF clrText = 
		GetColor( 
			_pmid.m_bEnabled 
				? CLR_MENUTEXT_OUT 
				: CLR_MENUTEXT_DISABLED, 
			_pmid.m_pHelperSrc, 
			_pmid.m_lParam 
			);
CRect rcBk( _pmid.m_rcItem );
CRect rcBkWithIndents( _pmid.m_rcItemWithIndents );
	dc.FillSolidRect( rcBkWithIndents, clrBk );

	if( _pmid.m_bSelected )
	{
		ASSERT( _pmid.m_bEnabled );
		clrBk = GetColor( COLOR_HIGHLIGHT, _pmid.m_pHelperSrc, _pmid.m_lParam );
		clrText = GetColor( CLR_MENUTEXT_IN, _pmid.m_pHelperSrc, _pmid.m_lParam  );
	}

	if( _pmid.m_bRarelyUsed )
	{
		dc.FillRect( rcBkWithIndents, &m_brushLightDefault );
		if( ! _pmid.m_bRarelyUsedPrev )
		{
			CPen penShadow(
				PS_SOLID,
				1,
				GetColor( COLOR_3DSHADOW, _pmid.m_pHelperSrc, _pmid.m_lParam )
				);
			CPen * pOldPen =
				dc.SelectObject( &penShadow );
			ASSERT( pOldPen != NULL );
			dc.MoveTo( rcBkWithIndents.left, rcBkWithIndents.top );
			dc.LineTo( rcBkWithIndents.right, rcBkWithIndents.top );
			dc.SelectObject( pOldPen );
		}
		if( ! _pmid.m_bRarelyUsedNext )
		{
			CPen penLight(
				PS_SOLID,
				1,
				GetColor( COLOR_3DHIGHLIGHT, _pmid.m_pHelperSrc, _pmid.m_lParam )
				);
			CPen * pOldPen =
				dc.SelectObject( &penLight );
			ASSERT( pOldPen != NULL );
			dc.MoveTo( rcBkWithIndents.left, rcBkWithIndents.bottom - 1 );
			dc.LineTo( rcBkWithIndents.right, rcBkWithIndents.bottom - 1 );
			dc.SelectObject( pOldPen );
		}
	}

bool bSmallerSelRect = 
		(		(_pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()))
			||	_pmid.m_bPushedCheck
			||	_pmid.m_bPushedRadio
			) ? true : false;
	if( bSmallerSelRect )
	{
		if( bRTL )
			rcBk.right -= _pmid.m_nIconAreaWidth;
		else
			rcBk.left += _pmid.m_nIconAreaWidth;
	}
	rcBk.DeflateRect( 1, 0, 0, 0 );
	if( _pmid.m_bSelected || (!_pmid.m_bRarelyUsed) )
		dc.FillSolidRect( rcBk, clrBk );
	if( ! bSmallerSelRect )
	{
		if( bRTL )
			rcBk.right -= _pmid.m_nIconAreaWidth;
		else
			rcBk.left += _pmid.m_nIconAreaWidth;
	}
	rcBk.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_GAP );

COLORREF clrOldText = dc.SetTextColor( clrText );
int nOldBkMode = dc.SetBkMode( TRANSPARENT );

	rcBk.DeflateRect( __EXT_MENU_GAP, 0 );
CFont * pRenderFont =
		( _pmid.m_hCustomFont == NULL )
			? (&m_FontNormal)
			: CFont::FromHandle(_pmid.m_hCustomFont)
			;
CFont * pOldFont = dc.SelectObject( pRenderFont );
	ASSERT( pOldFont != NULL );

DWORD dwDtAlignFlags = bRTL ? (DT_RIGHT|DT_RTLREADING) : DT_LEFT;
CRect rcMeasureText( 0, 0, 0, 0 );
	CExtRichContentLayout::stat_DrawText(
		dc.m_hDC,
		LPCTSTR(_sText), _sText.GetLength(),
		&rcMeasureText,
		DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0
		);
CRect rcDrawText( rcBk ), rcDrawTextExtended( rcBk );
INT nLenTextExtended = ( _pmid.m_sExtendedText != NULL ) ? INT( _tcslen( _pmid.m_sExtendedText ) ) : 0;
	if( nLenTextExtended > 0 )
	{
		rcDrawText.bottom
			= rcDrawTextExtended.top
			= rcDrawText.top + rcMeasureText.Height();
	}
	else
	{
		rcDrawText.OffsetRect(
			0,
			( rcDrawText.Height() - rcMeasureText.Height() ) / 2
			);
	}

COLORREF clrTextRestore = dc.GetTextColor();
	if( _pmid.m_clrForceMenuText != COLORREF(-1L) )
		dc.SetTextColor( _pmid.m_clrForceMenuText );
	
	if( bRTL )
	{
		rcDrawText.left = rcDrawText.right - rcMeasureText.Width();
		if( _pmid.m_bEnabled )
		{
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR(_sText), _sText.GetLength(),
				&rcDrawText,
				DT_SINGLELINE|dwDtAlignFlags, 0
				);
			if( nLenTextExtended > 0 )
			{
				CFont * pOldFont = dc.SelectObject( &m_FontNormal );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					_pmid.m_sExtendedText, nLenTextExtended,
					&rcDrawTextExtended,
					dwDtAlignFlags, 0
					);
				dc.SelectObject( pOldFont );
			}
		}
		else
		{
			CRect rcDrawTextOffs = rcDrawText;
			rcDrawTextOffs.OffsetRect( 1, 1 );
			COLORREF clrTextRestore = COLORREF(-1L);
			if( _pmid.m_clrForceMenuText == COLORREF(-1L) )
				clrTextRestore = 
					dc.SetTextColor(
						GetColor(
							COLOR_3DHILIGHT,
							_pmid.m_pHelperSrc,
							_pmid.m_lParam
							)
						);
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR(_sText), _sText.GetLength(),
				&rcDrawTextOffs,
				DT_SINGLELINE|dwDtAlignFlags, 0
				);
			dc.SetTextColor(
				GetColor(
					CLR_MENUTEXT_DISABLED,
					_pmid.m_pHelperSrc,
					_pmid.m_lParam
					)
				);
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR(_sText), _sText.GetLength(),
				&rcDrawText,
				DT_SINGLELINE|dwDtAlignFlags, 0
				);
			if( nLenTextExtended > 0 )
			{
				CFont * pOldFont = dc.SelectObject( &m_FontNormal );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					_pmid.m_sExtendedText, nLenTextExtended,
					&rcDrawTextExtended,
					dwDtAlignFlags, 0
					);
				dc.SelectObject( pOldFont );
			}
			if( clrTextRestore != COLORREF(-1L) )
				dc.SetTextColor( clrTextRestore );
		}
	}
	else
	{
		if( _pmid.m_clrForceMenuText == COLORREF(-1L) )
		{
			CExtRichContentLayout::DRAWSTATE_data_t _DSD;
			_DSD.m_fuFlags |= ( _pmid.m_bEnabled ? DSS_NORMAL : m_DSS_DISABLED_style );
			CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_sText), rcDrawText, 0, 0, NULL, NULL, 0, 0, 0, NULL, &_DSD );
			if( nLenTextExtended > 0 )
			{
				CFont * pOldFont = dc.SelectObject( &m_FontNormal );
				COLORREF clrOldTextColor = COLORREF(-1L);
				if( ! _pmid.m_bEnabled )
					clrOldTextColor = dc.SetTextColor( GetColor(COLOR_3DSHADOW) );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					_pmid.m_sExtendedText, nLenTextExtended,
					&rcDrawTextExtended,
					dwDtAlignFlags, 0
					);
				if( ! _pmid.m_bEnabled )
					dc.SetTextColor( clrOldTextColor );
				dc.SelectObject( pOldFont );
			}
		}
		else
		{
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR(_sText), _sText.GetLength(),
				&rcDrawText,
				DT_SINGLELINE|dwDtAlignFlags, 0
				);
			if( nLenTextExtended > 0 )
			{
				CFont * pOldFont = dc.SelectObject( &m_FontNormal );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					_pmid.m_sExtendedText, nLenTextExtended,
					&rcDrawTextExtended,
					dwDtAlignFlags, 0
					);
				dc.SelectObject( pOldFont );
			}
		}
	}

	if( ! _sAccelText.IsEmpty() )
	{
		rcMeasureText.SetRect( 0, 0, 0, 0 );
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(_sAccelText), _sAccelText.GetLength(),
			&rcMeasureText,
			DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0
			);
		rcDrawText = rcBk;
		rcDrawText.OffsetRect(
			0,
			( rcDrawText.Height() - rcMeasureText.Height() ) / 2
			);

		if( bRTL )
		{
			rcDrawText.right =
				rcDrawText.left
				+ rcMeasureText.Width()
				+ __EXT_MENU_POPUP_ARROW_AREA_DX
				;
			rcBk.right = rcDrawText.right;
		}
		else
		{
			rcDrawText.left =
				rcDrawText.right
				- rcMeasureText.Width()
				- __EXT_MENU_POPUP_ARROW_AREA_DX
				;
			rcBk.left = rcDrawText.left;
		}

		if( bRTL )
		{
			rcDrawText.left = rcDrawText.right - rcMeasureText.Width();
			if( _pmid.m_bEnabled )
			{
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(_sAccelText), _sAccelText.GetLength(),
					&rcDrawText,
					DT_SINGLELINE|dwDtAlignFlags, 0
					);
			}
			else
			{
				CRect rcDrawTextOffs = rcDrawText;
				rcDrawTextOffs.OffsetRect( 1, 1 );
				COLORREF clrTextRestore = COLORREF(-1L);
				if( _pmid.m_clrForceMenuText == COLORREF(-1L) )
					clrTextRestore = 
						dc.SetTextColor(
							GetColor(
								COLOR_3DHILIGHT,
								_pmid.m_pHelperSrc,
								_pmid.m_lParam
								)
							);
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(_sAccelText), _sAccelText.GetLength(),
					&rcDrawTextOffs,
					DT_SINGLELINE|dwDtAlignFlags, 0
					);
				dc.SetTextColor(
					GetColor(
						CLR_MENUTEXT_DISABLED,
						_pmid.m_pHelperSrc,
						_pmid.m_lParam
						)
					);
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(_sAccelText), _sAccelText.GetLength(),
					&rcDrawText,
					DT_SINGLELINE|dwDtAlignFlags, 0
					);
				if( clrTextRestore != COLORREF(-1L) )
					dc.SetTextColor( clrTextRestore );
			} // else from if( _pmid.m_bEnabled )
		} // if( bRTL )
		else
		{
			if( _pmid.m_clrForceMenuText == COLORREF(-1L) )
			{
				CExtRichContentLayout::DRAWSTATE_data_t _DSD;
				_DSD.m_fuFlags |= ( _pmid.m_bEnabled ? DSS_NORMAL : m_DSS_DISABLED_style );
				CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_sAccelText), rcDrawText, 0, 0, NULL, NULL, 0, 0, 0, NULL, &_DSD );
			}
			else
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(_sAccelText), _sAccelText.GetLength(),
					&rcDrawText,
					DT_SINGLELINE|dwDtAlignFlags, 0
					);
		}
	} // if( ! _sAccelText.IsEmpty() )

	dc.SetTextColor( clrTextRestore );

	if( _pmid.m_bPopup )
	{
		CRect rcPopupArrow( _pmid.m_rcItem );
		rcPopupArrow.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_GAP );
		if( bRTL )
			rcPopupArrow.right =
				rcPopupArrow.left + __EXT_MENU_POPUP_ARROW_AREA_DX;
		else
			rcPopupArrow.left =
				rcPopupArrow.right - __EXT_MENU_POPUP_ARROW_AREA_DX;
		if( _pmid.m_bCustomizeListMode )
		{
			COLORREF ColorValues[2] =
			{
				RGB(0,0,0),
				GetColor(
					_pmid.m_bSelected 
						? CLR_MENUTEXT_IN 
						: CLR_MENUTEXT_OUT,
					_pmid.m_pHelperSrc,
					_pmid.m_lParam 
					)
			};
			PaintGlyphCentered(
				dc,
				rcPopupArrow,
				_pmid.m_bSeparatedDropDown
					? g_glyph_customize_dropdown_src
					: g_glyph_customize_popup_src,
				ColorValues
				);
		} // if( _pmid.m_bCustomizeListMode )
		else
		{
			COLORREF clrPopupArrow = clrText;
			if( _pmid.m_bSeparatedDropDown )
			{
				if( _pmid.m_bSelected )
				{
					if( _pmid.m_bHelperPopupDropped )
						clrPopupArrow = GetColor( CLR_3DHILIGHT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
					else
					{
						clrPopupArrow = GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
						CRect rcButton(
							bRTL ? _pmid.m_rcItem.left : rcPopupArrow.left,
							_pmid.m_rcItem.top,
							bRTL ? rcPopupArrow.right : _pmid.m_rcItem.right,
							_pmid.m_rcItem.bottom
							);
						if( _pmid.m_bRarelyUsed )
							dc.FillRect(
								&rcButton,
								&m_brushLightDefault
								);	
						else
							dc.FillSolidRect(
								&rcButton,
								GetColor( CLR_3DFACE_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam )
								);	
					}
				} // if( _pmid.m_bSelected )
				else
				{
					CRect rcSeparator(
						bRTL ? rcPopupArrow.right : rcPopupArrow.left,
						rcBk.top,
						bRTL ? rcPopupArrow.right : rcPopupArrow.left,
						rcBk.bottom
						);
					PaintSeparator(
						dc,
						rcSeparator,
						true,
						true,
						NULL
						);
				} // else from if( _pmid.m_bSelected )
			} // if( _pmid.m_bSeparatedDropDown )

			dc.SelectObject( &m_FontMarlett );
			CRect _rcPopupArrow( rcPopupArrow );
			if( bRTL )
				_rcPopupArrow.right -= 2;
			else
				_rcPopupArrow.left += 2;
			dc.SetTextColor( clrPopupArrow );
			LPCTSTR strDrawArrow = bRTL ? _T("3") : _T("4");
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				strDrawArrow,
				_rcPopupArrow,
				DT_CENTER|DT_VCENTER|DT_SINGLELINE, 0
				);
		} // else from if( _pmid.m_bCustomizeListMode )
	} // if( _pmid.m_bPopup )
	
	dc.SelectObject( pOldFont );
	dc.SetBkMode( nOldBkMode );
	dc.SetTextColor( clrOldText );

	// paint icon area
	PaintMenuItemIcon( dc, _pmid );

	// paint inplace control area
	PaintMenuItemInPlaceWnd( dc, _pmid );
}

void CExtPaintManager::PaintMenuItemIcon(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pmid.m_rcItem.IsRectEmpty() )
		return;

bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		CExtPopupMenuWnd * pPopup =
			DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}

CSize sizeIcon( __EXT_MENU_ICON_CX, __EXT_MENU_ICON_CY );
	if( _pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()) )
	{
		sizeIcon = _pmid.m_pIcon->GetSize();
		if(	sizeIcon.cx <= 18 && sizeIcon.cy < sizeIcon.cx )
			sizeIcon.cy = sizeIcon.cx;
	}
CRect rcIcon( _pmid.m_rcItem.TopLeft(), sizeIcon );
	if( bRTL )
		rcIcon.OffsetRect( _pmid.m_rcItem.Width() - sizeIcon.cx, 0 );
	if( _pmid.m_bXtraMark )
	{
		rcIcon.OffsetRect(
			( ( _pmid.m_nIconAreaWidth/2 - rcIcon.Width() ) / 2 + _pmid.m_nIconAreaWidth/2 - 2 )
				* (bRTL ? (-1) : 1),
			( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
			);
		if( _pmid.m_bXtraChecked )
		{
			CRect rcXtraMark(
				bRTL ? (_pmid.m_rcItem.right - _pmid.m_rcItem.Height() - 1) : (_pmid.m_rcItem.left + 1),
				_pmid.m_rcItem.top + 1,
				bRTL ? (_pmid.m_rcItem.right - 1) : (_pmid.m_rcItem.left + _pmid.m_rcItem.Height() - 1),
				_pmid.m_rcItem.bottom - 1
				);
			dc.FillRect(
				rcXtraMark,
				&m_brushLightDefault
				);
			COLORREF clrCheck = GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
			int x = rcXtraMark.left + rcXtraMark.Width() / 2 - 3;
			int y = rcXtraMark.top + rcXtraMark.Height() / 2 - 3;
			ASSERT( !_pmid.m_bPushedRadio );
			stat_PaintCheckMark( dc, x, y, clrCheck );
			dc.Draw3dRect(
				rcXtraMark,
				GetColor( CLR_3DSHADOW_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam ),
				GetColor( CLR_3DHILIGHT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam )
				);
		}
	}
	else
	{
		rcIcon.OffsetRect(
			( ( _pmid.m_nIconAreaWidth - rcIcon.Width() ) / 2 ) * (bRTL ? (-1) : 1),
			( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
			);
	}

CRect rcIconFrame(rcIcon);
	rcIconFrame.InflateRect(
		__EXT_MENU_IMG_RECT_OUT_GAP,
		__EXT_MENU_IMG_RECT_OUT_GAP
		);

	if( _pmid.m_bIndeterminate )
		dc.FillRect(
			rcIconFrame,
			&m_brushLightestSystem
			);
	else if( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio )
		dc.FillRect(
			rcIconFrame,
			&m_brushLightDefault
			);

	if( _pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()) )
	{
		_pmid.m_pIcon->Paint(
			this,
			dc,
			rcIcon.left,
			rcIcon.top,
			-1,
			-1,
			_pmid.m_bEnabled
				? CExtCmdIcon::__PAINT_NORMAL
				: CExtCmdIcon::__PAINT_DISABLED
			);
		if(		_pmid.m_bSelected
			&&	_pmid.m_bEnabled
			&&	(! ( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio ) )
			)
			dc.Draw3dRect(
				&rcIconFrame,
				GetColor( CLR_3DHILIGHT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam ),
				GetColor( CLR_3DSHADOW_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam )
				);
	}
	else
	{
		PaintSysCmdGlyph(
			dc,
			_pmid.m_nHelperSysCmdID,
			rcIcon,
			_pmid.m_bSelected,
			false,
			_pmid.m_bEnabled
			);
	}
	
	if( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio )
	{
		if( _pmid.m_pIcon == NULL || _pmid.m_pIcon->IsEmpty() )
		{
			COLORREF clrCheck = GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
			int x = rcIcon.left + rcIcon.Width()/2 - 3;
			int y = rcIcon.top + rcIcon.Height()/2 - 3;
			if( _pmid.m_bPushedCheck )
			{
				ASSERT( !_pmid.m_bPushedRadio );
				if( _pmid.m_bIndeterminate )
					stat_PaintIndeterminatedSquare( dc, x, y, clrCheck );
				else
					stat_PaintCheckMark( dc, x, y, clrCheck );
			}
			else
			{
				ASSERT( !_pmid.m_bPushedCheck );
				stat_PaintRadioDot( dc, x, y, clrCheck );
			}
		}
		dc.Draw3dRect(
			rcIconFrame,
			GetColor( CLR_3DSHADOW_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam ),
			GetColor( CLR_3DHILIGHT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam )
			);
	}
}

void CExtPaintManager::PaintMenuItemInPlaceWnd(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		_pmid.m_rcItem.IsRectEmpty() 
		||	_pmid.m_rcInPlaceWnd.IsRectEmpty()
		)
		return;

bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		CExtPopupMenuWnd * pPopup =
			DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}

CRect rcInPlaceWndOuterBorder( _pmid.m_rcInPlaceWnd );
	rcInPlaceWndOuterBorder.InflateRect( 2, 2, 2, 3 );
INT nDD = GetDropDownButtonWidth( _pmid.m_pHelperSrc, _pmid.m_lParam );
CRect rcBk( rcInPlaceWndOuterBorder );
	if( _pmid.m_bPopup )
		rcBk.right += nDD;
	dc.FillSolidRect(
		&rcBk,
		GetColor(
			_pmid.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE,
			_pmid.m_pHelperSrc,
			_pmid.m_lParam
			)
		);
	if( _pmid.m_bPopup )
	{
		rcInPlaceWndOuterBorder.right += nDD;
		if( _pmid.m_bEnabled )
		{
			PAINTCOMBOFRAMEDATA _pcfd(
				_pmid.m_pHelperSrc,
				rcInPlaceWndOuterBorder,
				_pmid.m_bSelected, // hover
				_pmid.m_bSelected && _pmid.m_bHelperPopupDropped, // pushed
				_pmid.m_bEnabled
				);
			_pcfd.m_bNoTopOuterBorder = true;
			PaintComboFrame( dc, _pcfd );
		}
		else
		{
			CRect rcBorder( rcInPlaceWndOuterBorder );
			rcBorder.DeflateRect( 2, 2 );
			COLORREF clrBorder =
				GetColor( COLOR_WINDOW, _pmid.m_pHelperSrc, _pmid.m_lParam );
			dc.Draw3dRect(
				&rcBorder,
				clrBorder,
				clrBorder
				);
			// paint arrow down
			CRect rcBtn( rcBorder );
			rcBtn.left = rcBtn.right - nDD;
			glyph_t * pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
			ASSERT( pGlyph != NULL );
			COLORREF ColorValues[2] =
			{
				RGB(0,0,0),
				GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam )
			};
			PaintGlyphCentered(
				dc,
				rcBtn,
				*pGlyph,
				ColorValues
				);
		}
		rcInPlaceWndOuterBorder.DeflateRect( 1, 1 );
		rcInPlaceWndOuterBorder.right -= nDD;
	}
	else
	{
		if( _pmid.m_bEnabled )
		{
			COLORREF clrFace = GetColor( COLOR_3DFACE, _pmid.m_pHelperSrc, _pmid.m_lParam );
			dc.Draw3dRect(
				rcInPlaceWndOuterBorder,
				clrFace,
				clrFace
				);
			rcInPlaceWndOuterBorder.DeflateRect( 1, 1 );
			if( _pmid.m_bSelected )
				dc.Draw3dRect(
					rcInPlaceWndOuterBorder,
					GetColor( COLOR_3DSHADOW, _pmid.m_pHelperSrc, _pmid.m_lParam ),
					GetColor( COLOR_3DHIGHLIGHT, _pmid.m_pHelperSrc, _pmid.m_lParam )
					);
			else
				dc.Draw3dRect(
					rcInPlaceWndOuterBorder,
					clrFace,
					clrFace
					);
		}
		else
		{
			CRect rcBorder( rcInPlaceWndOuterBorder );
			rcBorder.DeflateRect( 2, 2 );
			COLORREF clrBorder = GetColor( COLOR_WINDOW, _pmid.m_pHelperSrc, _pmid.m_lParam );
			dc.Draw3dRect(
				&rcBorder,
				clrBorder,
				clrBorder
				);
		}
	} // else from if( _pmid.m_bPopup )

	if( ! _pmid.m_strInPlaceText.IsEmpty() )
	{
		rcInPlaceWndOuterBorder.DeflateRect( 5, 2, 2, 2 );
		
		COLORREF clrOldText =
			dc.SetTextColor(
				GetColor( 
					_pmid.m_bEnabled 
						? COLOR_WINDOWTEXT 
						: COLOR_3DSHADOW, 
					_pmid.m_pHelperSrc, 
					_pmid.m_lParam 
					)
				);
		
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		
		CFont * pRenderFont =
			( _pmid.m_hCustomFont == NULL )
				? (&m_FontNormal)
				: CFont::FromHandle(_pmid.m_hCustomFont)
				;
		CFont * pOldFont = dc.SelectObject( pRenderFont );
		ASSERT( pOldFont != NULL );
	
		DWORD dwDtAlignFlags = bRTL ? (DT_RIGHT|DT_RTLREADING) : DT_LEFT;
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(_pmid.m_strInPlaceText), _pmid.m_strInPlaceText.GetLength(),
			&rcInPlaceWndOuterBorder,
			DT_SINGLELINE|DT_NOPREFIX|DT_TOP|dwDtAlignFlags, 0
			);

		dc.SelectObject( pOldFont );
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
	}
}

void CExtPaintManagerXP::PaintMenuItemLeftAreaMarginXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcFillLeftPart,
	const RECT & rcFillRightPart
	)
{
	ASSERT_VALID( this );
	dc; _pmid; rcFillLeftPart; rcFillRightPart;
}

bool CExtPaintManagerXP::PaintMenuItemBackgroundXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcSelectionArea
	)
{
	ASSERT_VALID( this );
	dc; _pmid; rcSelectionArea;
	return false;
}

bool CExtPaintManagerXP::PaintMenuItemSelectionAreaXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcSelectionArea
	)
{
	ASSERT_VALID( this );
	dc; _pmid; rcSelectionArea;
	return false;
}

bool CExtPaintManagerXP::PaintMenuItemCheckMarkAreaXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcCheckMarkArea,
	CExtPaintManagerXP::e_CheckMarkAreaTypeXP eCMATXP
	)
{
	ASSERT_VALID( this );
	dc; _pmid; rcCheckMarkArea; eCMATXP;
	return false;
}

void CExtPaintManagerXP::PaintMenuItem(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pmid.m_rcItem.IsRectEmpty() )
		return;
CExtPopupMenuWnd * pPopup = NULL;
bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}
CExtSafeString _sText = (_pmid.m_sText==NULL) ? _T("") : _pmid.m_sText;
CExtSafeString _sAccelText = (_pmid.m_sAccelText==NULL) ? _T("") : _pmid.m_sAccelText;
COLORREF clr3dFace = GetColor( _pmid.m_bRarelyUsed ? XPCLR_RARELY_BORDER : CLR_3DFACE_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
COLORREF clrDkBorder = GetColor( XPCLR_HILIGHT_BORDER, _pmid.m_pHelperSrc, _pmid.m_lParam );
COLORREF clrBk = clr3dFace;
COLORREF clrText = 
		GetColor(
			_pmid.m_bEnabled 
				? _pmid.m_bSelected
					? CLR_MENUTEXT_IN
					: CLR_MENUTEXT_OUT 
				: CLR_MENUTEXT_DISABLED, 
			_pmid.m_pHelperSrc, 
			_pmid.m_lParam 
			);
COLORREF clrRight = GetColor( XPCLR_3DFACE_NORMAL, _pmid.m_pHelperSrc, _pmid.m_lParam );
CRect rcBk( _pmid.m_rcItemWithIndents );
CRect rcSelBk( _pmid.m_rcItem );
	// paint left area
COLORREF clrGradientLeft = ((COLORREF)(-1L)), 
		 clrGradientMiddle((COLORREF)(-1L)),
		 clrGradientRight((COLORREF)(-1L));
	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
	{
		if( _pmid.m_bRarelyUsed )
		{
			if(		m_nIdxClrMlaRarelyLeft >= 0
				&&	m_nIdxClrMlaRarelyMiddle >= 0
				&&	m_nIdxClrMlaRarelyRight >= 0
				)
			{ 
				// if paint gradient on rarely used item's left part
				clrGradientLeft = GetColor( m_nIdxClrMlaRarelyLeft, _pmid.m_pHelperSrc, _pmid.m_lParam );
				clrGradientMiddle = GetColor( m_nIdxClrMlaRarelyMiddle, _pmid.m_pHelperSrc, _pmid.m_lParam );
				clrGradientRight = GetColor( m_nIdxClrMlaRarelyRight, _pmid.m_pHelperSrc, _pmid.m_lParam );
			}
		}
		else
		{
			if(		m_nIdxClrMlaNormLeft >= 0
				&&	m_nIdxClrMlaNormMiddle >= 0
				&&	m_nIdxClrMlaNormRight >= 0
				)
			{ 
				// if paint gradient on rarely used item's left part
				clrGradientLeft = GetColor( m_nIdxClrMlaNormLeft, _pmid.m_pHelperSrc, _pmid.m_lParam );
				clrGradientMiddle = GetColor( m_nIdxClrMlaNormMiddle, _pmid.m_pHelperSrc, _pmid.m_lParam );
				clrGradientRight = GetColor( m_nIdxClrMlaNormRight, _pmid.m_pHelperSrc, _pmid.m_lParam );
			}
		}
	}
		
CRect rcGradient( rcBk );
	if( bRTL )
		rcGradient.left = rcGradient.right - _pmid.m_nIconAreaWidth;
	else
		rcGradient.right = rcGradient.left + _pmid.m_nIconAreaWidth;

CRect rcFillRightPart( rcBk );
	if( ! _pmid.m_bForceNoLeftGradient )
	{
		if(		(!_pmid.m_bForceNoLeftGradient) 
			&&	clrGradientLeft != ((COLORREF)(-1L)) 
			)
		{
			ASSERT( clrGradientRight != ((COLORREF)(-1L)) );
			stat_PaintGradientRect2steps( 
				dc,
				rcGradient, 
				clrGradientLeft,
				clrGradientMiddle, 
				clrGradientRight,
				false,
				1,
				2
				);
		} // if( (!_pmid.m_bForceNoLeftGradient) && clrGradientLeft != ((COLORREF)(-1L)) )
		else
			dc.FillSolidRect( &rcGradient, clrBk );

		if( bRTL )
			rcFillRightPart.right -= _pmid.m_nIconAreaWidth;
		else
			rcFillRightPart.left += _pmid.m_nIconAreaWidth;
		dc.FillSolidRect( &rcFillRightPart, clrRight );
	} // if( ! _pmid.m_bForceNoLeftGradient )
	PaintMenuItemLeftAreaMarginXP( dc, _pmid, rcGradient, rcFillRightPart );
bool bCustomBackgroundDrawn = PaintMenuItemBackgroundXP( dc, _pmid, rcSelBk );
bool bCustomSelectionDrawn = bCustomBackgroundDrawn;
	if( _pmid.m_bSelected && ( ! bCustomSelectionDrawn ) )
	{
		if( ! PaintMenuItemSelectionAreaXP( dc, _pmid, rcSelBk ) )
		{
			ASSERT( _pmid.m_bEnabled );
			dc.FillSolidRect( &rcSelBk, GetColor( CLR_3DFACE_IN, _pmid.m_pHelperSrc, _pmid.m_lParam )  );	
			dc.Draw3dRect( &rcSelBk, clrDkBorder, clrDkBorder );
		}
		else
			bCustomSelectionDrawn = true;
	}

//	if( ! _pmid.m_bForceNoLeftGradient )
//	{
		if( bRTL )
			rcBk.right -= _pmid.m_nIconAreaWidth;
		else
			rcBk.left += _pmid.m_nIconAreaWidth;
//	}

	rcBk.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_IMG_RECT_OUT_GAP-1 );
	if( bRTL )
		rcBk.right -= 5;
	else
		rcBk.left += 5;

COLORREF clrOldText =
		dc.SetTextColor(
			( _pmid.m_clrForceMenuText != COLORREF(-1L) )
				? _pmid.m_clrForceMenuText
				: clrText
			);
int nOldBkMode = dc.SetBkMode( TRANSPARENT );
CFont * pRenderFont = ( _pmid.m_hCustomFont == NULL ) ? (&m_FontNormal) : CFont::FromHandle(_pmid.m_hCustomFont);
CFont * pOldFont = dc.SelectObject( pRenderFont );
CRect rcMeasureText( 0, 0, 0, 0 );
DWORD dwDtAlignFlags = bRTL ? (DT_RIGHT|DT_RTLREADING) : DT_LEFT;
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_sText), _sText.GetLength(), &rcMeasureText, DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0 );
CRect rcDrawText( rcBk ), rcDrawTextExtended( rcBk );
INT nLenTextExtended = ( _pmid.m_sExtendedText != NULL ) ? INT( _tcslen( _pmid.m_sExtendedText ) ) : 0;
	if( nLenTextExtended > 0 )
		rcDrawText.bottom = rcDrawTextExtended.top = rcDrawText.top + rcMeasureText.Height();
	else
		rcDrawText.OffsetRect( 0, ( rcDrawText.Height() - rcMeasureText.Height() ) / 2 );
	if( bRTL )
		rcDrawText.left = rcDrawText.right - rcMeasureText.Width();
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_sText), _sText.GetLength(), &rcDrawText, DT_SINGLELINE|dwDtAlignFlags, 0 );
	if( nLenTextExtended > 0 )
	{
		CFont * pOldFont = dc.SelectObject( &m_FontNormal );
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, _pmid.m_sExtendedText, nLenTextExtended, &rcDrawTextExtended, dwDtAlignFlags, 0 );
		dc.SelectObject( pOldFont );
	}

	if( ! _sAccelText.IsEmpty() )
	{
		rcMeasureText.SetRect( 0, 0, 0, 0 );
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_sAccelText), _sAccelText.GetLength(), &rcMeasureText, DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0 );
		rcDrawText = rcBk;
		rcDrawText.OffsetRect( bRTL ? 5 : (-5), ( rcDrawText.Height() - rcMeasureText.Height() ) / 2 );
		if( bRTL )
		{
			rcDrawText.right =
				rcDrawText.left
				+ rcMeasureText.Width()
				+ __EXT_MENU_POPUP_ARROW_AREA_DX
				;
			rcBk.right = rcDrawText.right;
		}
		else
		{
			rcDrawText.left =
				rcDrawText.right
				- rcMeasureText.Width()
				- __EXT_MENU_POPUP_ARROW_AREA_DX
				;
			rcBk.left = rcDrawText.left;
		}

		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(_sAccelText), _sAccelText.GetLength(),
			&rcDrawText,
			DT_SINGLELINE|dwDtAlignFlags, 0
			);
	} // if( ! _sAccelText.IsEmpty() )

	if( _pmid.m_bPopup && (! bCustomBackgroundDrawn ) )
	{
		CRect rcPopupArrow( _pmid.m_rcItem );
		rcPopupArrow.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_GAP );
	
		if( bRTL )
			rcPopupArrow.right =
				rcPopupArrow.left + __EXT_MENU_POPUP_ARROW_AREA_DX;
		else
			rcPopupArrow.left =
				rcPopupArrow.right - __EXT_MENU_POPUP_ARROW_AREA_DX;
		
		if( _pmid.m_bCustomizeListMode )
		{
			COLORREF ColorValues[2] =
			{
				RGB( 0, 0, 0 ),
				GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam )
			};
			PaintGlyphCentered(
				dc,
				rcPopupArrow,
				_pmid.m_bSeparatedDropDown
					? g_glyph_customize_dropdown_src
					: g_glyph_customize_popup_src,
				ColorValues
				);
		}
		else
		{
			COLORREF clrPopupArrow = clrText;
			if( _pmid.m_bSeparatedDropDown )
			{
				if( _pmid.m_bSelected )
				{
					clrPopupArrow = GetColor( CLR_MENUTEXT_IN, _pmid.m_pHelperSrc, _pmid.m_lParam );
					CRect rcButton = rcSelBk;
				
					if( bRTL )
					{
						rcButton.right = rcPopupArrow.right + 1;
						rcButton.DeflateRect( 1, 1, 0, 1 );
					}
					else
					{
						rcButton.left = rcPopupArrow.left - 1;
						rcButton.DeflateRect( 0, 1, 1, 1 );
					}
				
					if( _pmid.m_bHelperPopupDropped )
					{
						if( ! bCustomSelectionDrawn )
							dc.FillSolidRect(
								&rcButton,
								GetColor( XPCLR_HILIGHT, _pmid.m_pHelperSrc, _pmid.m_lParam )
								);
					}
				
					if( bRTL )
						rcButton.left = rcButton.right - 1;
					else
						rcButton.right = rcButton.left + 1;
				
					dc.FillSolidRect(
						&rcButton,
						GetColor( XPCLR_HILIGHT_BORDER, _pmid.m_pHelperSrc, _pmid.m_lParam )
						);	
				} // if( _pmid.m_bSelected )
				else
				{
					CRect rcSeparator(
						bRTL ? rcPopupArrow.right : rcPopupArrow.left,
						rcBk.top,
						bRTL ? rcPopupArrow.right : rcPopupArrow.left,
						rcBk.bottom
						);
					PaintSeparator(
						dc,
						rcSeparator,
						true,
						true,
						NULL
						);
				} // else from if( _pmid.m_bSelected )
			} // if( _pmid.m_bSeparatedDropDown )
		
			dc.SelectObject( &m_FontMarlett );
			
			CRect _rcPopupArrow( rcPopupArrow );
			_rcPopupArrow.left += 2;
			dc.SetTextColor( clrPopupArrow );
			
			LPCTSTR strDrawArrow = bRTL ? _T("3") : _T("4");
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				strDrawArrow,
				_rcPopupArrow,
				DT_CENTER|DT_VCENTER|DT_SINGLELINE, 0
				);

		} // else from if( _pmid.m_bCustomizeListMode )

	} // if( _pmid.m_bPopup && (! bCustomBackgroundDrawn ) )
	
	dc.SelectObject( pOldFont );
	dc.SetBkMode( nOldBkMode );
	dc.SetTextColor( clrOldText );

	// paint icon area
	PaintMenuItemIcon( dc, _pmid );

	// paint inplace control area
	PaintMenuItemInPlaceWnd( dc, _pmid );
}

void CExtPaintManagerXP::PaintMenuItemIcon(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pmid.m_rcItem.IsRectEmpty() )
		return;

CExtPopupMenuWnd * pPopup = NULL;
bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}

COLORREF clrBkHilight = 
		GetColor( XPCLR_HILIGHT, _pmid.m_pHelperSrc, _pmid.m_lParam );

COLORREF clrIconBkHilight =
		( _pmid.m_bSelected )
// 	||	( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio )
// 	||	( _pmid.m_bXtraMark || _pmid.m_bXtraChecked ) )
		? clrBkHilight
		: GetColor( CLR_3DFACE_IN, _pmid.m_pHelperSrc, _pmid.m_lParam );

COLORREF clrDkBorder = GetColor( XPCLR_HILIGHT_BORDER, _pmid.m_pHelperSrc, _pmid.m_lParam );
COLORREF clrDkBorderSelected = GetColor( XPCLR_HILIGHT_BORDER_SELECTED, _pmid.m_pHelperSrc, _pmid.m_lParam );

CSize sizeIcon( __EXT_MENU_ICON_CX, __EXT_MENU_ICON_CY );
	if( _pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()) )
	{
		sizeIcon = _pmid.m_pIcon->GetSize();
		if(	sizeIcon.cx <= 18 && sizeIcon.cy < sizeIcon.cx )
			sizeIcon.cy = sizeIcon.cx;
	}
CRect rcIcon( _pmid.m_rcItem.TopLeft(), sizeIcon );
	if( bRTL )
		rcIcon.OffsetRect( _pmid.m_rcItem.Width() - sizeIcon.cx, 0 );
	if( _pmid.m_bXtraMark )
	{
		rcIcon.OffsetRect(
			(( _pmid.m_nIconAreaWidth/2 - rcIcon.Width() ) / 2 + _pmid.m_nIconAreaWidth/2 - 2)
				* ( bRTL ? (-1) : 1 ),
			( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
			);
		if( _pmid.m_bXtraChecked )
		{
			CRect rcXtraMark(
				bRTL ? (_pmid.m_rcItem.right - _pmid.m_rcItem.Height() - 1) : (_pmid.m_rcItem.left + 1),
				_pmid.m_rcItem.top + 1,
				bRTL ? (_pmid.m_rcItem.right - 1) : (_pmid.m_rcItem.left + _pmid.m_rcItem.Height() - 1),
				_pmid.m_rcItem.bottom - 1
				);
			bool bCustomBackgroundDrawn = false;
			if(		pPopup != NULL
				&&	( pPopup->TrackFlagsGet() & TPMX_RIBBON_MODE ) != 0 
				)
				bCustomBackgroundDrawn = 
					PaintMenuItemCheckMarkAreaXP(
						dc,
						_pmid,
						rcXtraMark,
						__ECMATXP_EXTRA_MARK_CHECKED
						);
			if( ! bCustomBackgroundDrawn )
			{
				int nIdxMainGradientLeft = -1;
				int nIdxMainGradientRight = -1;
				
				if( _pmid.m_bSelected )
				{
					nIdxMainGradientLeft = m_nIdxClrBtnHovPresLeft;
					nIdxMainGradientRight = m_nIdxClrBtnHovPresRight;
				}
				else
				{
					nIdxMainGradientLeft = m_nIdxClrBtnPressedLeft;
					nIdxMainGradientRight = m_nIdxClrBtnPressedRight;
				}

				if( nIdxMainGradientLeft >= 0 && nIdxMainGradientRight >= 0 )
				{
					stat_PaintGradientRect(
						dc,
						rcXtraMark,
						GetColor( nIdxMainGradientRight, _pmid.m_pHelperSrc, _pmid.m_lParam ),
						GetColor( nIdxMainGradientLeft, _pmid.m_pHelperSrc, _pmid.m_lParam ),
						true
						);
				}
				else
				{
					dc.FillSolidRect(
						rcXtraMark,
						clrIconBkHilight
						);
				}
				COLORREF clrCheck = GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
				int x = rcXtraMark.left + rcXtraMark.Width()/2 - 3;
				int y = rcXtraMark.top + rcXtraMark.Height()/2 - 3;
				ASSERT( !_pmid.m_bPushedRadio );
				stat_PaintCheckMark( dc, x, y, clrCheck );
				COLORREF clrBorder = _pmid.m_bSelected ? clrDkBorderSelected : clrDkBorder;
				dc.Draw3dRect( rcXtraMark, clrBorder, clrBorder );
			}
		}
	}
	else
	{
		rcIcon.OffsetRect(
			( ( _pmid.m_nIconAreaWidth - rcIcon.Width() ) / 2 - 1 ) * (bRTL ? (-1) : 1),
			( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
			);
	}

CRect rcIconFrame( rcIcon );
	rcIconFrame.InflateRect(__EXT_MENU_IMG_RECT_OUT_GAP,__EXT_MENU_IMG_RECT_OUT_GAP);
	if( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio )
	{
		bool bCustomBackgroundDrawn = false;
		if(		pPopup != NULL
			&&	( pPopup->TrackFlagsGet() & TPMX_RIBBON_MODE ) != 0 
			)
			bCustomBackgroundDrawn = 
				PaintMenuItemCheckMarkAreaXP(
					dc,
					_pmid,
					rcIconFrame,
					__ECMATXP_ICON_OR_CHECK_OR_RADIO_FRAME
					);
		if( ! bCustomBackgroundDrawn )
		{
			int nIdxMainGradientLeft = -1;
			int nIdxMainGradientRight = -1;

			if( _pmid.m_bSelected )
			{
				nIdxMainGradientLeft = m_nIdxClrBtnHovPresLeft;
				nIdxMainGradientRight = m_nIdxClrBtnHovPresRight;
			}
			else if( _pmid.m_bIndeterminate )
			{
				clrIconBkHilight =
					dc.GetNearestColor(
						stat_HLS_Adjust(
							clrIconBkHilight,
							0.0,
							0.85,
							0.5
							)
						);
			}
			else
			{
				nIdxMainGradientLeft = m_nIdxClrBtnPressedLeft;
				nIdxMainGradientRight = m_nIdxClrBtnPressedRight;
			}

			if( nIdxMainGradientLeft >= 0 && nIdxMainGradientRight >= 0 )
			{
				stat_PaintGradientRect(
					dc,
					rcIconFrame,
					GetColor( nIdxMainGradientRight, _pmid.m_pHelperSrc, _pmid.m_lParam ),
					GetColor( nIdxMainGradientLeft, _pmid.m_pHelperSrc, _pmid.m_lParam ),
					true
					);
			}
			else
			{
				dc.FillSolidRect(
					rcIconFrame,
					clrIconBkHilight
					);
			}
		}
	}
	if( _pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()) )
	{
		PaintIcon(
			dc,
			true,
			_pmid.m_pIcon,
			rcIcon,
			_pmid.m_bPushedCheck || _pmid.m_bPushedRadio,
			_pmid.m_bEnabled,
			_pmid.m_bSelected,
			__ALIGN_HORIZ_LEFT | __ALIGN_VERT_TOP,
			false,
			NULL,
			NULL,
			NULL,
			_pmid.m_clrCustomAccentEffectForIcon
			);
	}
	else
	{
		PaintSysCmdGlyph(
			dc,
			_pmid.m_nHelperSysCmdID,
			rcIcon,
			_pmid.m_bSelected,
			false,
			_pmid.m_bEnabled
			);
	}

	if( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio )
	{
		if( _pmid.m_pIcon == NULL || _pmid.m_pIcon->IsEmpty() )
		{
			COLORREF clrCheck = GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
			int x = rcIcon.left + rcIcon.Width()/2 - 3;
			int y = rcIcon.top + rcIcon.Height()/2 - 3;
			if( _pmid.m_bPushedCheck )
			{
				ASSERT( !_pmid.m_bPushedRadio );
				if( _pmid.m_bIndeterminate )
					stat_PaintIndeterminatedSquare( dc, x, y, clrCheck );
				else
					stat_PaintCheckMark( dc, x, y, clrCheck );
			}
			else
			{
				ASSERT( !_pmid.m_bPushedCheck );
				stat_PaintRadioDot( dc, x, y, clrCheck );
			}
		}

		COLORREF clrBorder = 
			_pmid.m_bSelected ? clrDkBorderSelected : clrDkBorder;
		dc.Draw3dRect(
			rcIconFrame,
			clrBorder,
			clrBorder
			);
	}
}

void CExtPaintManagerXP::PaintMenuItemInPlaceWnd(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		_pmid.m_rcItem.IsRectEmpty() 
		||	_pmid.m_rcInPlaceWnd.IsRectEmpty()
		)
		return;

bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		CExtPopupMenuWnd * pPopup =
			DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}

CRect rcInPlaceWndOuterBorder( _pmid.m_rcInPlaceWnd );
	rcInPlaceWndOuterBorder.InflateRect( 1, 2 );
	if( _pmid.m_bPopup )
	{
		INT nDD = GetDropDownButtonWidth( _pmid.m_pHelperSrc, _pmid.m_lParam );
		rcInPlaceWndOuterBorder.right += nDD;
	
		dc.FillSolidRect(
			&rcInPlaceWndOuterBorder,
			::GetSysColor( _pmid.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE )
			);

		PAINTCOMBOFRAMEDATA _pcfd(
			_pmid.m_pHelperSrc,
			rcInPlaceWndOuterBorder,
			_pmid.m_bSelected,
			_pmid.m_bHelperPopupDropped,
			_pmid.m_bEnabled
			);
		PaintComboFrame(
			dc,
			_pcfd
			);

		if( ! _pmid.m_bSelected )
		{
			COLORREF clrBorder = 
				GetColor( 
					_pmid.m_bEnabled 
						? XPCLR_TEXT_FIELD_BORDER_NORMAL 
						: XPCLR_TEXT_FIELD_BORDER_DISABLED
						, 
					_pmid.m_pHelperSrc, 
					_pmid.m_lParam 
				);
			dc.Draw3dRect(
				&rcInPlaceWndOuterBorder,
				clrBorder,
				clrBorder
				);
		}
		rcInPlaceWndOuterBorder.right -= nDD;
	}
	else
	{
		// paint text field
		dc.FillSolidRect(
			&rcInPlaceWndOuterBorder,
			::GetSysColor( _pmid.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE )
			);
		COLORREF clrBorder = 
			_pmid.m_bSelected
				? GetColor( XPCLR_HILIGHT_BORDER, _pmid.m_pHelperSrc, _pmid.m_lParam )
				: GetColor( 
					_pmid.m_bEnabled 
						? XPCLR_TEXT_FIELD_BORDER_NORMAL 
						: XPCLR_TEXT_FIELD_BORDER_DISABLED, 
					_pmid.m_pHelperSrc, 
					_pmid.m_lParam 
					);
		dc.Draw3dRect(
			&rcInPlaceWndOuterBorder,
			clrBorder,
			clrBorder
			);
	}

	if( !_pmid.m_strInPlaceText.IsEmpty() )
	{
		rcInPlaceWndOuterBorder.DeflateRect( 5, 3, 2, 2 );
		
		COLORREF clrOldText =
			dc.SetTextColor(
				GetColor( 
					_pmid.m_bEnabled 
						? COLOR_WINDOWTEXT 
						: COLOR_3DSHADOW, 
					_pmid.m_pHelperSrc, 
					_pmid.m_lParam 
					)
				);
		
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		
		CFont * pRenderFont =
			( _pmid.m_hCustomFont == NULL )
				? (&m_FontNormal)
				: CFont::FromHandle(_pmid.m_hCustomFont)
				;
		CFont * pOldFont = dc.SelectObject( pRenderFont );
		ASSERT( pOldFont != NULL );
	
		DWORD dwDtAlignFlags = bRTL ? (DT_RIGHT|DT_RTLREADING) : DT_LEFT;
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(_pmid.m_strInPlaceText), _pmid.m_strInPlaceText.GetLength(),
			&rcInPlaceWndOuterBorder,
			DT_SINGLELINE|DT_NOPREFIX|DT_TOP|dwDtAlignFlags, 0
			);

		dc.SelectObject( pOldFont );
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
	}
}

bool CExtPaintManagerNativeXP::PaintMenuItem_UX(
	HWND hWnd,
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pmid.m_rcItem.IsRectEmpty() || hWnd == NULL || (! ::IsWindow( hWnd ) ) )
		return false;
bool bThemedApproachOK = false;
	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_MENU ) == NULL )
		return false;
bool bCloseTheme = true;
	try
	{
		HRESULT hr = S_OK;
		bool bRTL = false;
		if( _pmid.m_pHelperSrc != NULL )
		{
			ASSERT_VALID( _pmid.m_pHelperSrc );
			CExtPopupMenuWnd * pPopup =
				DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
			if( pPopup != NULL )
				bRTL = pPopup->OnQueryLayoutRTL();
		}

		CExtSafeString _sText = (_pmid.m_sText==NULL) ? _T("") : _pmid.m_sText;
		CExtSafeString _sAccelText = (_pmid.m_sAccelText==NULL) ? _T("") : _pmid.m_sAccelText;
// COLORREF clrText = 
// _pmid.m_bSelected 
// ? ::GetSysColor( COLOR_HIGHLIGHTTEXT )
// : ::GetSysColor( COLOR_MENUTEXT );
		CRect rcBk( _pmid.m_rcItem );
// bool bSmallerSelRect = 
// 	(		(_pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()))
// 		||	_pmid.m_bPushedCheck
// 		||	_pmid.m_bPushedRadio
// 		) ? true : false;
// if( bSmallerSelRect )
// {
// 	if( bRTL )
// 		rcBk.right -= _pmid.m_nIconAreaWidth;
// 	else
// 		rcBk.left += _pmid.m_nIconAreaWidth;
// }
		rcBk.DeflateRect( 1, 0, 1, 0 );
		CRect rcFillSelectedBk = rcBk;
		if( _pmid.m_rcInPlaceWnd.IsRectEmpty() )
			rcBk.DeflateRect( 0, 1 );
		if( _pmid.m_bSelected )
		{
			if(		_pmid.m_bSeparatedDropDown
				&&	( ! _pmid.m_bHelperPopupDropped )
				)
			{
				if( bRTL )
					rcFillSelectedBk.left += __EXT_MENU_POPUP_ARROW_AREA_DX;
				else
					rcFillSelectedBk.right -= __EXT_MENU_POPUP_ARROW_AREA_DX;
			}
// dc.FillSolidRect( 
// rcFillSelectedBk, 
// ::GetSysColor( COLOR_HIGHLIGHT ) 
// );
		}
		int nMenuItemStateID = ( _pmid.m_bEnabled ? ( _pmid.m_bSelected ? MPI_HOT : MPI_NORMAL ) : MPI_DISABLED );
		if( _pmid.m_nIconAreaWidth > 0 )
		{
			CRect rcLeftArea = rcFillSelectedBk;
			if( bRTL )
				rcLeftArea.left = rcLeftArea.right - _pmid.m_nIconAreaWidth;
			else
				rcLeftArea.right = rcLeftArea.left + _pmid.m_nIconAreaWidth;
			rcLeftArea.InflateRect( 0, 1 );
			hr =
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd, 
					dc.GetSafeHdc(), 
					MENU_POPUPGUTTER,
					nMenuItemStateID, 
					&rcLeftArea, 
					&rcLeftArea
					);
			if( hr != S_OK )
				::AfxThrowUserException();
		}
		hr =
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd, 
				dc.GetSafeHdc(), 
				MENU_POPUPITEM,
				nMenuItemStateID, 
				&rcFillSelectedBk, 
				&rcFillSelectedBk
				);
		if( hr != S_OK )
			::AfxThrowUserException();

// if( ! bSmallerSelRect )
// {
// 	if( bRTL )
// 		rcBk.right -= _pmid.m_nIconAreaWidth;
// 	else
// 		rcBk.left += _pmid.m_nIconAreaWidth;
// }
		if( bRTL )
			rcBk.right -= _pmid.m_nIconAreaWidth;
		else
			rcBk.left += _pmid.m_nIconAreaWidth;
		rcBk.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_GAP );

// COLORREF clrOldText =
// dc.SetTextColor(
// ( _pmid.m_clrForceMenuText != COLORREF(-1L) )
// 	? _pmid.m_clrForceMenuText
// 	: clrText
// );
		int nOldBkMode = dc.SetBkMode( TRANSPARENT );

		rcBk.DeflateRect( __EXT_MENU_GAP, 0 );

		CFont * pRenderFont =
			( _pmid.m_hCustomFont == NULL )
				? (&m_FontNormal)
				: CFont::FromHandle(_pmid.m_hCustomFont)
				;
		CFont * pOldFont = dc.SelectObject( pRenderFont );
		ASSERT( pOldFont != NULL );

		DWORD dwDtAlignFlags = bRTL ? (DT_RIGHT|DT_RTLREADING) : DT_LEFT;
		CRect rcMeasureText( 0, 0, 0, 0 );
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC, LPCTSTR(_sText), &rcMeasureText, DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0,
			hWnd, VSCLASS_MENU, 0, MENU_POPUPITEM, nMenuItemStateID
			);
// 		hr =
// 			g_PaintManager.m_UxTheme.DrawThemeText(
// 				dc.GetSafeHdc(), 
// 				MENU_POPUPITEM,
// 				nMenuItemStateID, 
// 				LPCTSTR(_sText),
// 				_sText.GetLength(),
// 				DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags,
// 				0,
// 				&rcMeasureText
// 				);
// 		if( hr != S_OK )
// 			::AfxThrowUserException();

		CRect rcDrawText( rcBk ), rcDrawTextExtended( rcBk );
		INT nLenTextExtended = ( _pmid.m_sExtendedText != NULL ) ? INT( _tcslen( _pmid.m_sExtendedText ) ) : 0;

		if( nLenTextExtended > 0 )
		{
			rcDrawText.bottom
				= rcDrawTextExtended.top
				= rcDrawText.top + rcMeasureText.Height();
		}
		else
			rcDrawText.OffsetRect(
				0,
				( rcDrawText.Height() - rcMeasureText.Height() ) / 2
				);

/*
		hr =
			g_PaintManager.m_UxTheme.DrawThemeText(
				dc.GetSafeHdc(), 
				MENU_POPUPITEM,
				nMenuItemStateID, 
				LPCTSTR(_sText),
				_sText.GetLength(),
				DT_SINGLELINE|dwDtAlignFlags,
				0,
				&rcDrawText
				);
		if( hr != S_OK )
			::AfxThrowUserException();
*/
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC, LPCTSTR(_sText), &rcDrawText, DT_SINGLELINE|dwDtAlignFlags, 0,
			hWnd, VSCLASS_MENU, 0, MENU_POPUPITEM, nMenuItemStateID
			);

		if( nLenTextExtended > 0 )
		{
			CFont * pOldFont = dc.SelectObject( &m_FontNormal );
/*
			hr =
				g_PaintManager.m_UxTheme.DrawThemeText(
					dc.GetSafeHdc(), 
					MENU_POPUPITEM,
					nMenuItemStateID, 
					LPCTSTR(_pmid.m_sExtendedText),
					nLenTextExtended,
					dwDtAlignFlags,
					0,
					&rcDrawTextExtended
					);
			if( hr != S_OK )
				::AfxThrowUserException();
*/
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC, LPCTSTR(_pmid.m_sExtendedText), nLenTextExtended, &rcDrawTextExtended, dwDtAlignFlags, 0,
				hWnd, VSCLASS_MENU, 0, MENU_POPUPITEM, nMenuItemStateID
				);
			dc.SelectObject( pOldFont );
		}

		if( ! _sAccelText.IsEmpty() )
		{
			rcMeasureText.SetRect( 0, 0, 0, 0 );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC, LPCTSTR(_sAccelText), _sAccelText.GetLength(), &rcMeasureText,
				DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0
				);
			rcDrawText = rcBk;
			rcDrawText.OffsetRect(
				0,
				( rcDrawText.Height() - rcMeasureText.Height() ) / 2
				);
			if( bRTL )
			{
				rcDrawText.right =
					rcDrawText.left
					+ rcMeasureText.Width()
					+ __EXT_MENU_POPUP_ARROW_AREA_DX
					;
				rcBk.right = rcDrawText.right;
			}
			else
			{
				rcDrawText.left =
					rcDrawText.right
					- rcMeasureText.Width()
					- __EXT_MENU_POPUP_ARROW_AREA_DX
					;
				rcBk.left = rcDrawText.left;
			}
/*
			hr =
				g_PaintManager.m_UxTheme.DrawThemeText(
					dc.GetSafeHdc(), 
					MENU_POPUPITEM,
					nMenuItemStateID, 
					LPCTSTR(_sAccelText),
					_sAccelText.GetLength(),
					DT_SINGLELINE|dwDtAlignFlags,
					0,
					&rcDrawText
					);
			if( hr != S_OK )
				::AfxThrowUserException();
*/
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC, LPCTSTR(_sAccelText), &rcDrawText, DT_SINGLELINE|dwDtAlignFlags, 0,
				hWnd, VSCLASS_MENU, 0, MENU_POPUPITEM, nMenuItemStateID
				);
		} // if( ! _sAccelText.IsEmpty() )

		if( _pmid.m_bPopup )
		{
			CRect rcPopupArrow( _pmid.m_rcItem );
			rcPopupArrow.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_GAP );
			if( bRTL )
				rcPopupArrow.right =
					rcPopupArrow.left + __EXT_MENU_POPUP_ARROW_AREA_DX;
			else
				rcPopupArrow.left =
					rcPopupArrow.right - __EXT_MENU_POPUP_ARROW_AREA_DX;
			if( _pmid.m_bCustomizeListMode )
			{
				COLORREF ColorValues[2] =
				{
					RGB(0,0,0),
					::GetSysColor(
						//_pmid.m_bSelected ? COLOR_HIGHLIGHTTEXT :
							COLOR_MENUTEXT )
				};
				PaintGlyphCentered(
					dc,
					rcPopupArrow,
					_pmid.m_bSeparatedDropDown
						? g_glyph_customize_dropdown_src
						: g_glyph_customize_popup_src,
					ColorValues
					);
			}
			else
			{
				CRect _rcPopupArrow( rcPopupArrow );
				if( bRTL )
					_rcPopupArrow.right -= 2;
				else
					_rcPopupArrow.left += 2;
				hr =
					g_PaintManager.m_UxTheme.DrawBackground(
						hWnd, 
						dc.GetSafeHdc(), 
						MENU_POPUPSUBMENU,
						_pmid.m_bEnabled ? MSM_NORMAL : MSM_DISABLED, 
						&_rcPopupArrow, 
						&_rcPopupArrow
						);
				if( hr != S_OK )
					::AfxThrowUserException();
			} // else from if( _pmid.m_bCustomizeListMode )
		} // if( _pmid.m_bPopup )

		dc.SelectObject( pOldFont );
		dc.SetBkMode( nOldBkMode );
// dc.SetTextColor( clrOldText );

		// paint icon area
		if( ! PaintMenuItemIcon_UX( hWnd, dc, _pmid ) )
			::AfxThrowUserException();

		g_PaintManager.m_UxTheme.CloseThemeData();
		bCloseTheme = false;

		// paint inplace control area
		PaintMenuItemInPlaceWnd( dc, _pmid );

		bThemedApproachOK = true;
	} // try
	catch( CException * pException )
	{
		pException->Delete();
		bThemedApproachOK = false;
	} 
	catch( ... )
	{
		bThemedApproachOK = false;
	}
	if( bCloseTheme )
		g_PaintManager.m_UxTheme.CloseThemeData();
	return bThemedApproachOK;
}

void CExtPaintManagerNativeXP::PaintMenuItem(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pmid.m_rcItem.IsRectEmpty() )
		return;

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintMenuItem(
			dc,
			_pmid
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pmid.m_pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

	if( PaintMenuItem_UX( hWnd, dc, _pmid ) )
		return;

bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		CExtPopupMenuWnd * pPopup =
			DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}

CExtSafeString _sText = (_pmid.m_sText==NULL) ? _T("") : _pmid.m_sText;
CExtSafeString _sAccelText = (_pmid.m_sAccelText==NULL) ? _T("") : _pmid.m_sAccelText;
COLORREF clrText = 
		_pmid.m_bSelected 
			? ::GetSysColor( COLOR_HIGHLIGHTTEXT )
			: ::GetSysColor( COLOR_MENUTEXT );
CRect rcBk( _pmid.m_rcItem );
bool bSmallerSelRect = 
		(		(_pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()))
			||	_pmid.m_bPushedCheck
			||	_pmid.m_bPushedRadio
			) ? true : false;
	if( bSmallerSelRect )
	{
		if( bRTL )
			rcBk.right -= _pmid.m_nIconAreaWidth;
		else
			rcBk.left += _pmid.m_nIconAreaWidth;
	}
	rcBk.DeflateRect( 1, 0, 1, 0 );

	if( _pmid.m_rcInPlaceWnd.IsRectEmpty() )
		rcBk.DeflateRect( 0, 1 );

	if( _pmid.m_bSelected )
	{
		CRect rcFillSelectedBk = rcBk;
		if(		_pmid.m_bSeparatedDropDown
			&&	( ! _pmid.m_bHelperPopupDropped )
			)
		{
			if( bRTL )
				rcFillSelectedBk.left += __EXT_MENU_POPUP_ARROW_AREA_DX;
			else
				rcFillSelectedBk.right -= __EXT_MENU_POPUP_ARROW_AREA_DX;
		}
		dc.FillSolidRect( 
			rcFillSelectedBk, 
			::GetSysColor( COLOR_HIGHLIGHT ) 
			);
	}

	if( ! bSmallerSelRect )
	{
		if( bRTL )
			rcBk.right -= _pmid.m_nIconAreaWidth;
		else
			rcBk.left += _pmid.m_nIconAreaWidth;
	}
	rcBk.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_GAP );

COLORREF clrOldText =
		dc.SetTextColor(
			( _pmid.m_clrForceMenuText != COLORREF(-1L) )
				? _pmid.m_clrForceMenuText
				: clrText
			);
int nOldBkMode = dc.SetBkMode( TRANSPARENT );

	rcBk.DeflateRect( __EXT_MENU_GAP, 0 );

CFont * pRenderFont =
		( _pmid.m_hCustomFont == NULL )
			? (&m_FontNormal)
			: CFont::FromHandle(_pmid.m_hCustomFont)
			;
CFont * pOldFont = dc.SelectObject( pRenderFont );
	ASSERT( pOldFont != NULL );

DWORD dwDtAlignFlags = bRTL ? (DT_RIGHT|DT_RTLREADING) : DT_LEFT;
CRect rcMeasureText( 0, 0, 0, 0 );
	CExtRichContentLayout::stat_DrawText(
		dc.m_hDC,
		LPCTSTR(_sText), _sText.GetLength(),
		&rcMeasureText,
		DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0
		);
CRect rcDrawText( rcBk ), rcDrawTextExtended( rcBk );
INT nLenTextExtended = ( _pmid.m_sExtendedText != NULL ) ? INT( _tcslen( _pmid.m_sExtendedText ) ) : 0;
	
	if( nLenTextExtended > 0 )
	{
		rcDrawText.bottom
			= rcDrawTextExtended.top
			= rcDrawText.top + rcMeasureText.Height();
	}
	else
		rcDrawText.OffsetRect(
			0,
			( rcDrawText.Height() - rcMeasureText.Height() ) / 2
			);

	if( bRTL )
	{
		rcDrawText.left = rcDrawText.right - rcMeasureText.Width();
		if( _pmid.m_bEnabled )
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR(_sText), _sText.GetLength(),
				&rcDrawText,
				DT_SINGLELINE|dwDtAlignFlags, 0
				);
		else
		{
			CRect rcDrawTextOffs = rcDrawText;
			rcDrawTextOffs.OffsetRect( 1, 1 );
			COLORREF clrTextRestore =
				dc.SetTextColor( ::GetSysColor( COLOR_3DHILIGHT ) );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR(_sText), _sText.GetLength(),
				&rcDrawTextOffs,
				DT_SINGLELINE|dwDtAlignFlags, 0
				);
			dc.SetTextColor( ::GetSysColor( COLOR_3DSHADOW ) );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR(_sText), _sText.GetLength(),
				&rcDrawText,
				DT_SINGLELINE|dwDtAlignFlags, 0
				);
			dc.SetTextColor( clrTextRestore );
		}
	}
	else
	{
		CExtRichContentLayout::DRAWSTATE_data_t _DSD;
		_DSD.m_fuFlags |= ( _pmid.m_bEnabled ? DSS_NORMAL : m_DSS_DISABLED_style );
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_sText), rcDrawText, 0, 0, NULL, NULL, 0, 0, 0, NULL, &_DSD );
	}
	
	if( nLenTextExtended > 0 )
	{
		CFont * pOldFont = dc.SelectObject( &m_FontNormal );
		COLORREF clrOldTextColor = COLORREF(-1L);
		if( ! _pmid.m_bEnabled )
			clrOldTextColor = dc.SetTextColor( GetColor(COLOR_3DSHADOW) );
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			_pmid.m_sExtendedText, nLenTextExtended,
			&rcDrawTextExtended,
			dwDtAlignFlags, 0
			);
		if( ! _pmid.m_bEnabled )
			dc.SetTextColor( clrOldTextColor );
		dc.SelectObject( pOldFont );
	}

	if( ! _sAccelText.IsEmpty() )
	{
		rcMeasureText.SetRect( 0, 0, 0, 0 );
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(_sAccelText), _sAccelText.GetLength(),
			&rcMeasureText,
			DT_CALCRECT|DT_SINGLELINE|dwDtAlignFlags, 0
			);
		rcDrawText = rcBk;
		rcDrawText.OffsetRect(
			0,
			( rcDrawText.Height() - rcMeasureText.Height() ) / 2
			);
		if( bRTL )
		{
			rcDrawText.right =
				rcDrawText.left
				+ rcMeasureText.Width()
				+ __EXT_MENU_POPUP_ARROW_AREA_DX
				;
			rcBk.right = rcDrawText.right;
		}
		else
		{
			rcDrawText.left =
				rcDrawText.right
				- rcMeasureText.Width()
				- __EXT_MENU_POPUP_ARROW_AREA_DX
				;
			rcBk.left = rcDrawText.left;
		}
		if( bRTL )
		{
			rcDrawText.left = rcDrawText.right - rcMeasureText.Width();
			if( _pmid.m_bEnabled )
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(_sAccelText), _sAccelText.GetLength(),
					&rcDrawText,
					DT_SINGLELINE|dwDtAlignFlags, 0
					);
			else
			{
				CRect rcDrawTextOffs = rcDrawText;
				rcDrawTextOffs.OffsetRect( 1, 1 );
				COLORREF clrTextRestore = dc.SetTextColor( ::GetSysColor( COLOR_3DHILIGHT ) );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(_sAccelText), _sAccelText.GetLength(),
					&rcDrawTextOffs,
					DT_SINGLELINE|dwDtAlignFlags, 0
					);
				dc.SetTextColor( ::GetSysColor( COLOR_3DSHADOW ) );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(_sAccelText), _sAccelText.GetLength(),
					&rcDrawText,
					DT_SINGLELINE|dwDtAlignFlags, 0
					);
				dc.SetTextColor( clrTextRestore );
			}
		} // if( bRTL )
		else
		{
			CExtRichContentLayout::DRAWSTATE_data_t _DSD;
			_DSD.m_fuFlags |= ( _pmid.m_bEnabled ? DSS_NORMAL : m_DSS_DISABLED_style );
			CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_sAccelText), rcDrawText, 0, 0, NULL, NULL, 0, 0, 0, NULL, &_DSD );
		}
	} // if( ! _sAccelText.IsEmpty() )

	if( _pmid.m_bPopup )
	{
		CRect rcPopupArrow( _pmid.m_rcItem );
		rcPopupArrow.DeflateRect( __EXT_MENU_GAP, __EXT_MENU_GAP );
		if( bRTL )
			rcPopupArrow.right =
				rcPopupArrow.left + __EXT_MENU_POPUP_ARROW_AREA_DX;
		else
			rcPopupArrow.left =
				rcPopupArrow.right - __EXT_MENU_POPUP_ARROW_AREA_DX;
		if( _pmid.m_bCustomizeListMode )
		{
			COLORREF ColorValues[2] =
			{
				RGB(0,0,0),
				::GetSysColor( _pmid.m_bSelected ? COLOR_HIGHLIGHTTEXT : COLOR_MENUTEXT )
			};
			PaintGlyphCentered(
				dc,
				rcPopupArrow,
				_pmid.m_bSeparatedDropDown
					? g_glyph_customize_dropdown_src
					: g_glyph_customize_popup_src,
				ColorValues
				);
		}
		else
		{
			COLORREF clrPopupArrow = clrText;
			if( _pmid.m_bSeparatedDropDown )
			{
				if( _pmid.m_bSelected )
				{
					clrPopupArrow = ::GetSysColor( _pmid.m_bHelperPopupDropped ? COLOR_HIGHLIGHTTEXT : COLOR_BTNTEXT );
				}
				else
				{
					CRect rcSeparator(
						bRTL ? rcPopupArrow.right : rcPopupArrow.left,
						rcBk.top,
						bRTL ? rcPopupArrow.right : rcPopupArrow.left,
						rcBk.bottom
						);
					PaintSeparator(
						dc,
						rcSeparator,
						true,
						true,
						NULL
						);
				}
			}

			dc.SelectObject( &m_FontMarlett );
			CRect _rcPopupArrow( rcPopupArrow );
			if( bRTL )
				_rcPopupArrow.right -= 2;
			else
				_rcPopupArrow.left += 2;
			dc.SetTextColor( clrPopupArrow );
			LPCTSTR strDrawArrow = bRTL ? _T("3") : _T("4");
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				strDrawArrow,
				_rcPopupArrow,
				DT_CENTER|DT_VCENTER|DT_SINGLELINE, 0
				);
		} // else from if( _pmid.m_bCustomizeListMode )
	} // if( _pmid.m_bPopup )
	
	dc.SelectObject( pOldFont );
	dc.SetBkMode( nOldBkMode );
	dc.SetTextColor( clrOldText );

	// paint icon area
	PaintMenuItemIcon( dc, _pmid );

	// paint inplace control area
	PaintMenuItemInPlaceWnd( dc, _pmid );
}

void CExtPaintManagerNativeXP::PaintMenuItemIcon(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintMenuItemIcon(
			dc,
			_pmid
			);
		return;
	}
	
	if( _pmid.m_rcItem.IsRectEmpty() )
		return;

HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pmid.m_pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		CExtPopupMenuWnd * pPopup =
			DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}

	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_TOOLBAR ) != NULL )
	{
		CSize sizeIcon( __EXT_MENU_ICON_CX, __EXT_MENU_ICON_CY );
		if( _pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()) )
		{
			sizeIcon = _pmid.m_pIcon->GetSize();
			if(		sizeIcon.cx <= 18 
				&&	sizeIcon.cy < sizeIcon.cx 
				)
				sizeIcon.cy = sizeIcon.cx;
		}
		CRect rcIcon( _pmid.m_rcItem.TopLeft(), sizeIcon );
		if( bRTL )
			rcIcon.OffsetRect( _pmid.m_rcItem.Width() - sizeIcon.cx, 0 );
		if( _pmid.m_bXtraMark )
		{
			rcIcon.OffsetRect(
				( ( _pmid.m_nIconAreaWidth/2 - rcIcon.Width() ) / 2 + _pmid.m_nIconAreaWidth/2 - 2 )
					* (bRTL ? (-1) : 1),
				( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
				);
			if( _pmid.m_bXtraChecked )
			{
				CRect rcXtraMark(
					bRTL ? (_pmid.m_rcItem.right - _pmid.m_rcItem.Height() - 1) : (_pmid.m_rcItem.left + 1),
					_pmid.m_rcItem.top + 1,
					bRTL ? (_pmid.m_rcItem.right - 1) : (_pmid.m_rcItem.left + _pmid.m_rcItem.Height() - 1),
					_pmid.m_rcItem.bottom - 1
					);
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWnd,
						dc.GetSafeHdc(), 
						TP_BUTTON, 
						_pmid.m_bSelected ? TS_HOTCHECKED : TS_CHECKED, 
						&rcXtraMark, 
						&rcXtraMark
						) == S_OK
					);
				COLORREF clrCheck = ::GetSysColor( COLOR_BTNTEXT );
				int x = rcXtraMark.left + rcXtraMark.Width()/2 - 3;
				int y = rcXtraMark.top + rcXtraMark.Height()/2 - 3;
				ASSERT( !_pmid.m_bPushedRadio );
				stat_PaintCheckMark( dc, x, y, clrCheck );
			}
		}
		else
		{
			rcIcon.OffsetRect(
				( ( _pmid.m_nIconAreaWidth - rcIcon.Width() ) / 2 ) * (bRTL ? (-1) : 1),
				( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
				);
		}

		CRect rcIconFrame(rcIcon);
		rcIconFrame.InflateRect(
			__EXT_MENU_IMG_RECT_OUT_GAP,
			__EXT_MENU_IMG_RECT_OUT_GAP
			);

		if( _pmid.m_bPushedCheck || _pmid.m_bIndeterminate || _pmid.m_bPushedRadio )
		{
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd,
					dc.GetSafeHdc(), 
					TP_BUTTON, 
					_pmid.m_bSelected ? TS_HOTCHECKED : ( _pmid.m_bIndeterminate ? TS_PRESSED : TS_CHECKED ), 
					&rcIconFrame, 
					&rcIconFrame
					) == S_OK
				);

			if( _pmid.m_pIcon == NULL || _pmid.m_pIcon->IsEmpty() )
			{
				COLORREF clrCheck = ::GetSysColor( COLOR_BTNTEXT );
				int x = rcIcon.left + rcIcon.Width()/2 - 3;
				int y = rcIcon.top + rcIcon.Height()/2 - 3;
				if( _pmid.m_bPushedCheck )
				{
					ASSERT( !_pmid.m_bPushedRadio );
					if( _pmid.m_bIndeterminate )
						stat_PaintIndeterminatedSquare( dc, x, y, clrCheck );
					else
						stat_PaintCheckMark( dc, x, y, clrCheck );
				}
				else
				{
					ASSERT( !_pmid.m_bPushedCheck );
					stat_PaintRadioDot( dc, x, y, clrCheck );
				}
			}
		}

		if(		_pmid.m_pIcon != NULL 
			&&	(! _pmid.m_pIcon->IsEmpty()) 
			)
		{
			if(		_pmid.m_bSelected
				&&	_pmid.m_bEnabled
				&&	(! ( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio ) )
				)
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWnd,
						dc.GetSafeHdc(), 
						TP_BUTTON, 
						TS_HOT, 
						&rcIconFrame, 
						&rcIconFrame
						) == S_OK
					);
			}
			_pmid.m_pIcon->Paint(
				this,
				dc,
				rcIcon.left,
				rcIcon.top,
				-1,
				-1,
				_pmid.m_bEnabled
					? CExtCmdIcon::__PAINT_NORMAL
					: CExtCmdIcon::__PAINT_DISABLED
				);
		}
		else
		{
			PaintSysCmdGlyph(
				dc,
				_pmid.m_nHelperSysCmdID,
				rcIcon,
				_pmid.m_bSelected,
				false,
				_pmid.m_bEnabled
				);
		}
		
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

void CExtPaintManagerNativeXP::PaintMenuTearOffButton(
	CDC & dc,
	const RECT & rectButton,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	if( IsHighContrast() )
	{
		CExtPaintManager::PaintMenuTearOffButton( dc, rectButton, bPushed, bHover, pHelperSrc, lParam );
		return;
	}
bool bThemedApproachOK = false;
HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}
	if( hWnd != NULL && g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_REBAR ) != NULL )
	{
		CRect rc = rectButton;
		HRESULT hr =
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd,
				dc.GetSafeHdc(), 
				RP_BACKGROUND, 
				0,
				&rc, 
				&rc
				);
		bThemedApproachOK = ( hr == S_OK ) ? true : false;
		if( bThemedApproachOK )
		{
			rc.DeflateRect( rc.Width() / 8, 2 );
			if( rc.left < rc.right && rc.top < rc.bottom )
			{
				hr =
					g_PaintManager.m_UxTheme.DrawBackground(
						hWnd,
						dc.GetSafeHdc(), 
						RP_GRIPPER, 
						0,
						&rc, 
						&rc
						);
				bThemedApproachOK = ( hr == S_OK ) ? true : false;
			}
		}
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
	if( bThemedApproachOK )
		return;
	CExtPaintManager::PaintMenuTearOffButton( dc, rectButton, bPushed, bHover, pHelperSrc, lParam );
}

bool CExtPaintManagerNativeXP::PaintSysCmdGlyph_UX(
	HWND hWnd,
	CDC & dc,
	UINT nHelperSysCmdID,
	const RECT & rcItem,
	bool bHover,
	bool bPushed,
	bool bEnabled,
	COLORREF clrForceGlyphColor // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( g_PaintManager.m_UxTheme.IsControlsThemed() );
	ASSERT( hWnd != NULL && ::IsWindow( hWnd ) );
//	ASSERT( g_PaintManager.m_UxTheme.m_hUxTheme != NULL ); // menu class should be already opened
	hWnd;
	bHover;
	bPushed;
	clrForceGlyphColor;
	if( ! ( rcItem.left < rcItem.right && rcItem.top < rcItem.bottom ) )
		return true;
int nPartID = 0, nStateID = 0;
	switch( nHelperSysCmdID )
	{
	case SC_CLOSE:
		nPartID = MENU_SYSTEMCLOSE;
		nStateID = bEnabled ? MSYSC_NORMAL : MSYSC_DISABLED;
	break;
	case SC_RESTORE:
		nPartID = MENU_SYSTEMRESTORE;
		nStateID = bEnabled ? MSYSR_NORMAL : MSYSR_DISABLED;
	break;
	case SC_MINIMIZE:
		nPartID = MENU_SYSTEMMINIMIZE;
		nStateID = bEnabled ? MSYSMN_NORMAL : MSYSMN_DISABLED;
	break;
	case SC_MAXIMIZE:
		nPartID = MENU_SYSTEMMAXIMIZE;
		nStateID = bEnabled ? MSYSMX_NORMAL : MSYSMX_DISABLED;
	break;
//	case SC_CONTEXTHELP:
//	break;
	default:
		return false;
	} // switch( nHelperSysCmdID )
	VERIFY( 
		g_PaintManager.m_UxTheme.DrawBackground(
			hWnd,
			dc.GetSafeHdc(), 
			nPartID, 
			nStateID, 
			&rcItem, 
			&rcItem
			) == S_OK
		);
	return true;
}

bool CExtPaintManagerNativeXP::PaintMenuItemIcon_UX(
	HWND hWnd,
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( g_PaintManager.m_UxTheme.IsControlsThemed() );
	ASSERT( hWnd != NULL && ::IsWindow( hWnd ) );
//	ASSERT( g_PaintManager.m_UxTheme.m_hUxTheme != NULL ); // menu class should be already opened
	if( _pmid.m_rcItem.IsRectEmpty() )
		return true;
CSize sizeIcon( __EXT_MENU_ICON_CX, __EXT_MENU_ICON_CY );
	if( _pmid.m_pIcon != NULL && (! _pmid.m_pIcon->IsEmpty()) )
	{
		sizeIcon = _pmid.m_pIcon->GetSize();
		if(		sizeIcon.cx <= 18 
			&&	sizeIcon.cy < sizeIcon.cx 
			)
			sizeIcon.cy = sizeIcon.cx;
	}
CRect rcIcon( _pmid.m_rcItem.TopLeft(), sizeIcon );
CExtPopupMenuWnd * pPopup = NULL;
bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}
	if( bRTL )
		rcIcon.OffsetRect( _pmid.m_rcItem.Width() - sizeIcon.cx, 0 );
	if( _pmid.m_bXtraMark )
	{
		rcIcon.OffsetRect(
			( ( _pmid.m_nIconAreaWidth/2 - rcIcon.Width() ) / 2 + _pmid.m_nIconAreaWidth/2 - 2 )
				* (bRTL ? (-1) : 1),
			( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
			);
		if( _pmid.m_bXtraChecked )
		{
			CRect rcXtraMark(
				bRTL ? (_pmid.m_rcItem.right - _pmid.m_rcItem.Height() - 1) : (_pmid.m_rcItem.left + 1),
				_pmid.m_rcItem.top + 1,
				bRTL ? (_pmid.m_rcItem.right - 1) : (_pmid.m_rcItem.left + _pmid.m_rcItem.Height() - 1),
				_pmid.m_rcItem.bottom - 1
				);
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd,
					dc.GetSafeHdc(), 
					MENU_POPUPCHECKBACKGROUND, 
					_pmid.m_bEnabled ? MCB_NORMAL : MCB_DISABLED, 
					&rcXtraMark, 
					&rcXtraMark
					) == S_OK
				);
			COLORREF clrCheck = ::GetSysColor( COLOR_BTNTEXT );
			int x = rcXtraMark.left + rcXtraMark.Width()/2 - 3;
			int y = rcXtraMark.top + rcXtraMark.Height()/2 - 3;
			ASSERT( !_pmid.m_bPushedRadio );
			stat_PaintCheckMark( dc, x, y, clrCheck );
		}
	}
	else
	{
		rcIcon.OffsetRect(
			( ( _pmid.m_nIconAreaWidth - rcIcon.Width() ) / 2 ) * (bRTL ? (-1) : 1),
			( _pmid.m_rcItem.Height() - rcIcon.Height() ) / 2
			);
	}

CRect rcIconFrame(rcIcon);
	rcIconFrame.InflateRect(
		__EXT_MENU_IMG_RECT_OUT_GAP,
		__EXT_MENU_IMG_RECT_OUT_GAP
		);

	if( _pmid.m_bPushedCheck || _pmid.m_bIndeterminate || _pmid.m_bPushedRadio )
	{
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd,
				dc.GetSafeHdc(), 
				MENU_POPUPCHECKBACKGROUND, 
				_pmid.m_bEnabled ? MCB_NORMAL : MCB_DISABLED, 
				&rcIconFrame, 
				&rcIconFrame
				) == S_OK
			);

		if( _pmid.m_pIcon == NULL || _pmid.m_pIcon->IsEmpty() )
		{
			if( ! _pmid.m_bIndeterminate )
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWnd,
						dc.GetSafeHdc(), 
						MENU_POPUPCHECK, 
						_pmid.m_bPushedCheck
							?
								//(	_pmid.m_bIndeterminate
								//		?	MC_BULLETDISABLED
								//		:
											( _pmid.m_bEnabled ? MC_CHECKMARKNORMAL : MC_CHECKMARKDISABLED )
								//)
							:	( _pmid.m_bEnabled ? MC_BULLETNORMAL : MC_BULLETDISABLED )
							, 
						&rcIcon, 
						&rcIcon
						) == S_OK
					);
			}
			else
			{
				COLORREF clrCheck = GetColor( CLR_MENUTEXT_OUT, _pmid.m_pHelperSrc, _pmid.m_lParam );
				int x = rcIcon.left + rcIcon.Width()/2 - 3;
				int y = rcIcon.top + rcIcon.Height()/2 - 3;
				stat_PaintIndeterminatedSquare( dc, x, y, clrCheck );
			}
		}
	}

	if(		_pmid.m_pIcon != NULL 
		&&	(! _pmid.m_pIcon->IsEmpty()) 
		)
	{
		if(		_pmid.m_bSelected
			&&	_pmid.m_bEnabled
			&&	(! ( _pmid.m_bPushedCheck || _pmid.m_bPushedRadio ) )
			)
		{
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd,
					dc.GetSafeHdc(), 
					MENU_POPUPCHECKBACKGROUND, 
					_pmid.m_bEnabled ? MCB_NORMAL : MCB_DISABLED, 
					&rcIconFrame, 
					&rcIconFrame
					) == S_OK
				);
		}
		_pmid.m_pIcon->Paint(
			this,
			dc,
			rcIcon.left,
			rcIcon.top,
			-1,
			-1,
			_pmid.m_bEnabled
				? CExtCmdIcon::__PAINT_NORMAL
				: CExtCmdIcon::__PAINT_DISABLED
			);
	}
	else
	{
		if( ! PaintSysCmdGlyph_UX(
				hWnd,
				dc,
				_pmid.m_nHelperSysCmdID,
				rcIcon,
				_pmid.m_bSelected,
				false,
				_pmid.m_bEnabled
				)
			)
			PaintSysCmdGlyph(
				dc,
				_pmid.m_nHelperSysCmdID,
				rcIcon,
				_pmid.m_bSelected,
				false,
				_pmid.m_bEnabled
				);
	}

	return true;
}

void CExtPaintManagerNativeXP::PaintMenuItemInPlaceWnd(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintMenuItemInPlaceWnd(
			dc,
			_pmid
			);
		return;
	}
	
	if(		_pmid.m_rcItem.IsRectEmpty() 
		||	_pmid.m_rcInPlaceWnd.IsRectEmpty()
		)
		return;

bool bRTL = false;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		CExtPopupMenuWnd * pPopup =
			DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}

CRect rcInPlaceWndOuterBorder( _pmid.m_rcInPlaceWnd );
	rcInPlaceWndOuterBorder.InflateRect( 2, 2, 1, 2 );
INT nDD = GetDropDownButtonWidth( _pmid.m_pHelperSrc, _pmid.m_lParam );
CRect rcBk( rcInPlaceWndOuterBorder );
	if( _pmid.m_bPopup )
		rcBk.right += nDD;
	dc.FillSolidRect(
		&rcBk,
		::GetSysColor( _pmid.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE )
		);
	if( _pmid.m_bPopup )
	{
		rcInPlaceWndOuterBorder.right += nDD;
		if( _pmid.m_bEnabled )
		{
			PAINTCOMBOFRAMEDATA _pcfd(
				_pmid.m_pHelperSrc,
				rcInPlaceWndOuterBorder,
				_pmid.m_bSelected, // hover
				_pmid.m_bSelected && _pmid.m_bHelperPopupDropped, // pushed
				_pmid.m_bEnabled
				);
			_pcfd.m_bNoTopOuterBorder = true;
			PaintComboFrame( dc, _pcfd );
		}
		else
		{
			CRect rcBorder( rcInPlaceWndOuterBorder );
			rcBorder.DeflateRect( 2, 2 );
			COLORREF clrBorder = ::GetSysColor( COLOR_WINDOW );
			dc.Draw3dRect(
				&rcBorder,
				clrBorder,
				clrBorder
				);
			// paint arrow down
			CRect rcBtn( rcBorder );
			rcBtn.left = rcBtn.right - nDD;
			glyph_t * pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
			ASSERT( pGlyph != NULL );
			COLORREF ColorValues[2] =
			{
				RGB(0,0,0),
				::GetSysColor( COLOR_BTNTEXT )
			};
			PaintGlyphCentered(
				dc,
				rcBtn,
				*pGlyph,
				ColorValues
				);
		} // else from if( _pmid.m_bEnabled )
		rcInPlaceWndOuterBorder.DeflateRect( 1, 1 );
		rcInPlaceWndOuterBorder.right -= nDD;
	} // if( _pmid.m_bPopup )
	else
	{
		if( _pmid.m_bEnabled )
		{
			CRect rcItem( rcInPlaceWndOuterBorder );
			rcItem.DeflateRect(3,3);
			PAINTCONTROLFRAMEDATA _pcfd(
					_pmid.m_pHelperSrc,
					rcItem,
					true,
					_pmid.m_bSelected,
					_pmid.m_bEnabled,
					false,
					false
					);
			PaintControlFrame( dc, _pcfd );
		}
		else
		{
			CRect rcBorder( rcInPlaceWndOuterBorder );
			rcBorder.DeflateRect( 2, 2 );
			COLORREF clrBorder = ::GetSysColor( COLOR_WINDOW );
			dc.Draw3dRect(
				&rcBorder,
				clrBorder,
				clrBorder
				);
		}
	} // else from if( _pmid.m_bPopup )

	if( !_pmid.m_strInPlaceText.IsEmpty() )
	{
		rcInPlaceWndOuterBorder.DeflateRect( 5, 2, 2, 2 );
		
		COLORREF clrOldText =
			dc.SetTextColor(
				GetColor( 
					_pmid.m_bEnabled 
						? COLOR_WINDOWTEXT 
						: COLOR_3DSHADOW, 
					_pmid.m_pHelperSrc, 
					_pmid.m_lParam 
					)
				);
		
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		
		CFont * pRenderFont =
			( _pmid.m_hCustomFont == NULL )
				? (&m_FontNormal)
				: CFont::FromHandle(_pmid.m_hCustomFont)
				;
		CFont * pOldFont = dc.SelectObject( pRenderFont );
		ASSERT( pOldFont != NULL );
	
		DWORD dwDtAlignFlags = bRTL ? (DT_RIGHT|DT_RTLREADING) : DT_LEFT;
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(_pmid.m_strInPlaceText), _pmid.m_strInPlaceText.GetLength(),
			&rcInPlaceWndOuterBorder,
			DT_SINGLELINE|DT_NOPREFIX|DT_TOP|dwDtAlignFlags, 0
			);

		dc.SelectObject( pOldFont );
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
	}
}

CSize CExtPaintManager::GetToolBarButtonOffset( BOOL bHorz ) const
{
	ASSERT_VALID( this );
	bHorz;
	return
		CSize(
			0, // bHorz ? 0 : 1,
			0
			);
}

CSize CExtPaintManagerOffice2003::GetToolBarButtonOffset( BOOL bHorz ) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetToolBarButtonOffset( bHorz );
	return
		CSize( 0, bHorz ? -1 : 0 );
}

void CExtPaintManager::PaintIcon(
	CDC & dc,
	bool bHorz,
	CExtCmdIcon * pIcon,
	const CRect & rcClient,
	bool bPushed,
	bool bEnabled,
	bool bHover, // = false
	INT nIconAlignment, // = 0
	bool bRTL, // = false
	CRect * prcIcon, // = NULL
	CRect * prcText, // = NULL
	CRect * prcIconMargins, // = NULL
	COLORREF clrCustomAccentEffectForIcon // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bHorz;
	bRTL;
	
	if( pIcon == NULL || pIcon->IsEmpty() )
	{
		if( prcIcon != NULL )
			*prcIcon = CRect( 0, 0, 0, 0 );
		if( prcText != NULL )
			*prcText = rcClient;
		return;
	}

CSize _sizeIcon = pIcon->GetSize();
	ASSERT( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 );

CRect rcIconMargins( 0, 0, 0, 0 );
	if( prcIconMargins != NULL )
		rcIconMargins = *prcIconMargins;

CRect rcTextLocation( rcClient );
CRect rcIconLocation( 0, 0, _sizeIcon.cx, _sizeIcon.cy );

	if( bHorz )
	{
		rcIconLocation.OffsetRect( 
			rcClient.left, 
			rcClient.top 
			);

		if(	( _sizeIcon.cx + rcIconMargins.left + rcIconMargins.right ) > rcClient.Width() )
		{
			nIconAlignment &= ~__ALIGN_HORIZ_MASK;
			nIconAlignment |= __ALIGN_HORIZ_CENTER;
		}

		if(	( _sizeIcon.cy + rcIconMargins.top + rcIconMargins.bottom ) > rcClient.Height() )
		{
			nIconAlignment &= ~__ALIGN_VERT_MASK;
			nIconAlignment |= __ALIGN_VERT_CENTER;
		}

		if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			rcIconLocation.OffsetRect( rcClient.right - rcIconLocation.right - rcIconMargins.right, 0 );
			rcTextLocation.right = rcIconLocation.left - rcIconMargins.left;
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			rcIconLocation.OffsetRect( ( rcClient.right - rcIconLocation.right ) / 2 + rcIconMargins.left - rcIconMargins.right, 0 );
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_LEFT )
		{
			rcIconLocation.OffsetRect( rcIconMargins.left, 0 );
			rcTextLocation.left = rcIconLocation.right + rcIconMargins.right;
		}

		if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
		{
			rcIconLocation.OffsetRect( 0, rcIconMargins.top );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.top = rcIconLocation.bottom + rcIconMargins.bottom;
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_CENTER )
		{
			rcIconLocation.OffsetRect( 0, ( rcClient.bottom - rcIconLocation.bottom ) / 2 + rcIconMargins.top - rcIconMargins.bottom );
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			rcIconLocation.OffsetRect( 0, rcClient.bottom - rcIconLocation.bottom - rcIconMargins.bottom );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.bottom = rcIconLocation.top - rcIconMargins.top;
		}
	}
	else
	{
		rcIconLocation.OffsetRect( 
			rcClient.right - rcIconLocation.Width(), 
			rcClient.top 
			);

		if(	( _sizeIcon.cy + rcIconMargins.top + rcIconMargins.bottom ) > rcClient.Height() )
		{
			nIconAlignment &= ~__ALIGN_HORIZ_MASK;
			nIconAlignment |= __ALIGN_HORIZ_CENTER;
		}

		if(	( _sizeIcon.cx + rcIconMargins.left + rcIconMargins.right ) > rcClient.Width() )
		{
			nIconAlignment &= ~__ALIGN_VERT_MASK;
			nIconAlignment |= __ALIGN_VERT_CENTER;
		}

		if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			rcIconLocation.OffsetRect( 0, rcClient.bottom - rcIconLocation.bottom - rcIconMargins.bottom );
			rcTextLocation.bottom = rcIconLocation.top - rcIconMargins.top;
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			rcIconLocation.OffsetRect( 0, ( rcClient.bottom - rcIconLocation.bottom ) / 2 + rcIconMargins.top - rcIconMargins.bottom );
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_LEFT )
		{
			rcIconLocation.OffsetRect( 0, rcIconMargins.top );
			rcTextLocation.top = rcIconLocation.bottom;
		}
		
		if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
		{
			rcIconLocation.OffsetRect( rcIconMargins.right, 0 );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.right = rcIconLocation.left;
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_CENTER )
		{
			rcIconLocation.OffsetRect( ( rcClient.left - rcIconLocation.left ) / 2 + rcIconMargins.right - rcIconMargins.left, 0 );
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			rcIconLocation.OffsetRect( rcClient.left - rcIconLocation.left - rcIconMargins.left, 0 );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.left = rcIconLocation.right;
		}
	}

	if(		(nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER 
		&&	(nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_CENTER
		)
		rcTextLocation.SetRectEmpty();

	if(		rcTextLocation.top >= rcTextLocation.bottom
		||	rcTextLocation.left >= rcTextLocation.right
		)
		rcTextLocation.SetRectEmpty();
    
	// if button is pressed then press the icon also
	if( bPushed )
	{
		CSize sizePushedOffset = GetPushedOffset();
		rcIconLocation.OffsetRect( sizePushedOffset.cx, sizePushedOffset.cy );
	}
	
	if(		( ! bEnabled )
		&&	clrCustomAccentEffectForIcon != COLORREF(-1L)
		)
	{
		pIcon->PaintAccentEmboss(
			this,
			dc.GetSafeHdc(),
			clrCustomAccentEffectForIcon,
			rcIconLocation.left,
			rcIconLocation.top
			);
	}
	else
	{
		pIcon->Paint(
			this,
			dc.GetSafeHdc(),
			rcIconLocation.left,
			rcIconLocation.top,
			-1,
			-1,
			(! bEnabled )
				? CExtCmdIcon::__PAINT_DISABLED
				: bPushed
					? CExtCmdIcon::__PAINT_PRESSED
					: bHover
						? CExtCmdIcon::__PAINT_HOVER
						: CExtCmdIcon::__PAINT_NORMAL
			);
	}


	if( prcIcon != NULL )
		*prcIcon = rcIconLocation;
	if( prcText != NULL )
		*prcText = rcTextLocation;
}

void CExtPaintManagerOffice2003::PaintSeparator(
	CDC & dc,
	const RECT & rectItem,
	bool bHorz,
	bool bTransparentBk,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintSeparator(
			dc,
			rectItem,
			bHorz,
			bTransparentBk,
			pHelperSrc,
			lParam
			);
		return;
	}

	if(		pHelperSrc == NULL
		||	(!(	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtToolControlBar))
			||	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtBarButton))
#ifndef __EXT_MFC_NO_STATUSBAR
			||	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtStatusControlBar))
#endif // __EXT_MFC_NO_STATUSBAR
			))
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerXP::PaintSeparator(
			dc,
			rectItem,
			bHorz,
			bTransparentBk,
			pHelperSrc,
			lParam
			);
		return;
	}
CRect rectItem2(rectItem);
	if( !bTransparentBk )
		dc.FillSolidRect(
			rectItem2,
			GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam )
			);

COLORREF clrBtnShadow = GetColor( _2003CLR_SEPARATOR_DARK, pHelperSrc, lParam );
COLORREF clrBtnHilight = GetColor( _2003CLR_SEPARATOR_LIGHT, pHelperSrc, lParam );
	if( bHorz )
	{
		int x = (rectItem2.left + rectItem2.right) / 2;
		rectItem2.left = x-1; rectItem2.right = x+1;
		if(		pHelperSrc == NULL
#ifndef __EXT_MFC_NO_STATUSBAR
			||	(! pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtStatusControlBar)) )
#endif // __EXT_MFC_NO_STATUSBAR
			)
			rectItem2.DeflateRect( 0, 2, 0, 2 );
		dc.Draw3dRect(
			rectItem2,
			clrBtnShadow,
			clrBtnHilight
		);
	} // if( bHorz )
	else
	{
		int y = (rectItem2.top+rectItem2.bottom)/2;
		rectItem2.top = y-1; rectItem2.bottom = y+1;
		if(		pHelperSrc == NULL
#ifndef __EXT_MFC_NO_STATUSBAR
			||	(! pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtStatusControlBar)) )
#endif // __EXT_MFC_NO_STATUSBAR
			)
			rectItem2.DeflateRect( 3, 0, 3, 0 );
		dc.Draw3dRect(
			rectItem2,
			clrBtnShadow,
			clrBtnHilight
			);
	} // else from if( bHorz )
}

void CExtPaintManagerStudio2005::PaintSeparator(
	CDC & dc,
	const RECT & rectItem,
	bool bHorz,
	bool bTransparentBk,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerOffice2003::PaintSeparator(
			dc,
			rectItem,
			bHorz,
			bTransparentBk,
			pHelperSrc,
			lParam
			);
		return;
	}

	if(		pHelperSrc == NULL
		||	(! pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtToolControlBar)) )
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerOffice2003::PaintSeparator(
			dc,
			rectItem,
			bHorz,
			bTransparentBk,
			pHelperSrc,
			lParam
			);
		return;
	}
CRect rectItem2(rectItem);
	if( !bTransparentBk )
		dc.FillSolidRect(
			rectItem2,
			GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam )
			);

COLORREF clrSeparator =
		CExtBitmap::stat_RGB_Blend(
			GetColor( COLOR_3DFACE, pHelperSrc, lParam ),
			GetColor( COLOR_3DSHADOW, pHelperSrc, lParam ),
			144
			);
CPen _pen( PS_SOLID, 1, clrSeparator );
CPen * pOldPen = dc.SelectObject( &_pen );
	if( bHorz )
	{
		rectItem2.DeflateRect( 0, 1 );
		int x = ( rectItem2.left + rectItem2.right ) / 2;
		dc.MoveTo( x, rectItem2.top );
		dc.LineTo( x, rectItem2.bottom );
	}
	else
	{
		rectItem2.DeflateRect( 1, 0, 3, 0 );
		int y = ( rectItem2.top + rectItem2.bottom ) / 2;
		dc.MoveTo( rectItem2.left, y );
		dc.LineTo( rectItem2.right, y );
	} // else from if( bHorz )
	dc.SelectObject( pOldPen );
}

void CExtPaintManagerXP::PaintSeparator(
	CDC & dc,
	const RECT & rectItem,
	bool bHorz,
	bool bTransparentBk,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rectItem2(rectItem);
	if( !bTransparentBk )
		dc.FillSolidRect(
			rectItem2,
			GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam )
			);
	if( bHorz )
	{
		rectItem2.left =
			rectItem2.left + rectItem2.Width()/2 - 1;
		rectItem2.right =
			rectItem2.left + 1;
		rectItem2.DeflateRect( 0, 1 );
	}
	else
	{
		rectItem2.top =
			rectItem2.top + rectItem2.Height()/2 - 1;
		rectItem2.bottom =
			rectItem2.top + 1;
		rectItem2.DeflateRect( 1, 0 );
	}
	dc.FillSolidRect(
		&rectItem2,
		GetColor( XPCLR_SEPARATOR, pHelperSrc, lParam )
		);
}

void CExtPaintManager::PaintSeparator(
	CDC & dc,
	const RECT & rectItem,
	bool bHorz,
	bool bTransparentBk,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rectItem2(rectItem);
	if( !bTransparentBk )
		dc.FillSolidRect(
			rectItem2,
			GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam )
			);

COLORREF clrBtnShadow =  GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam );
COLORREF clrBtnHilight = GetColor( CLR_3DHILIGHT_OUT, pHelperSrc, lParam );
	if( bHorz )
	{
		int x = (rectItem2.left + rectItem2.right) / 2;
		rectItem2.left = x-1; rectItem2.right = x+1;
		rectItem2.DeflateRect( 0, 0, 0, 1 );
		dc.Draw3dRect(
			rectItem2,
			clrBtnShadow,
			clrBtnHilight
		);
	} // if( bHorz )
	else
	{
		int y = (rectItem2.top+rectItem2.bottom)/2;
		rectItem2.top = y-1; rectItem2.bottom = y+1;
		rectItem2.DeflateRect( 0, 0, 1, 0 );
		dc.Draw3dRect(
			rectItem2,
			clrBtnShadow,
			clrBtnHilight
			);
	} // else from if( bHorz )
}

void CExtPaintManagerNativeXP::PaintSeparator(
	CDC & dc,
	const RECT & rectItem,
	bool bHorz,
	bool bTransparentBk,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintSeparator(
			dc,
			rectItem,
			bHorz,
			bTransparentBk,
			pHelperSrc,
			lParam
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

HWND hWnd = NULL;
CWnd * pWnd =
		DYNAMIC_DOWNCAST(
			CWnd,
			pHelperSrc
			);
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}
	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_TOOLBAR ) != NULL )
	{
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd,
				dc.GetSafeHdc(), 
				bHorz ? TP_SEPARATOR : TP_SEPARATORVERT, 
				TS_NORMAL, 
				&rectItem, 
				&rectItem
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

CExtPaintManager::PAINTCONTROLFRAMEDATA::PAINTCONTROLFRAMEDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_rcClient( 0,0,0,0 )
	, m_bFlat( false )
	, m_bHover( false )
	, m_bEnabled( false )
	, m_bFocus( false )
	, m_bReadOnly( false )
{
}

CExtPaintManager::PAINTCONTROLFRAMEDATA::PAINTCONTROLFRAMEDATA(
	CObject * pHelperSrc,
	const RECT & rcClient,
	bool bFlat,
	bool bHover,
	bool bEnabled,
	bool bFocus,
	bool bReadOnly
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_rcClient( rcClient )
	, m_bFlat( bFlat )
	, m_bHover( bHover )
	, m_bEnabled( bEnabled )
	, m_bFocus( bFocus )
	, m_bReadOnly( bReadOnly )
{
}

void CExtPaintManager::PaintControlFrame(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

COLORREF clrForceInner = COLORREF( -1L );
COLORREF clrForceOuter = COLORREF( -1L );
	if( _pcfd.m_pHelperSrc != NULL )
	{
#ifndef __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDurationWnd ) ) )
		{
			CExtDurationWnd * pWnd = DYNAMIC_DOWNCAST( CExtDurationWnd, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
			}
		}
#endif // __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtEdit ) ) )
		{
			CExtEdit * pWnd = DYNAMIC_DOWNCAST( CExtEdit, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
				CWnd * pWndParent = pWnd->GetParent();
				if( pWndParent != NULL )
				{
					ASSERT_VALID( pWndParent );
					if( pWndParent->IsKindOf( RUNTIME_CLASS( CExtResizableDialog ) ) )
					{
						CExtResizableDialog * pDlg = DYNAMIC_DOWNCAST( CExtResizableDialog, pWndParent );
						if( pDlg != NULL )
							clrForceOuter = pDlg->GetBkColor();
					}
					else if( pWndParent->IsKindOf( RUNTIME_CLASS( CDialog ) ) )
					{
						clrForceOuter = ::GetSysColor( COLOR_3DFACE );
					}
				}
			}
		}
	} // if( _pcfd.m_pHelperSrc != NULL )
COLORREF clrInner =
	( clrForceInner != COLORREF( -1L ) ) 
		? clrForceInner 
		: GetColor( COLOR_WINDOW, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
COLORREF clrIn1, clrIn2;
	clrIn1 = clrIn2 = GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
COLORREF clrOut1, clrOut2;
	clrOut1 = clrOut2 =
		( clrForceOuter != COLORREF( -1L ) ) 
			? clrForceOuter 
			: GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
			;
	if( _pcfd.m_bEnabled )
	{
		if( _pcfd.m_bHover && _pcfd.m_bFocus )
		{
				clrIn1 = GetColor( COLOR_3DFACE, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
				clrIn2 = GetColor( COLOR_3DDKSHADOW, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
				clrOut1 = GetColor( COLOR_3DHILIGHT, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
				clrOut2 = GetColor( COLOR_3DSHADOW, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
		}
		else
		{
			if( _pcfd.m_bHover || _pcfd.m_bFocus )
			{
				clrIn1 = GetColor( COLOR_3DHILIGHT, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
				clrIn2 = GetColor( COLOR_3DSHADOW, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			}
			else
				clrIn1 = clrIn2 =
					dc.GetNearestColor(
						stat_HLS_Adjust(
							GetColor( COLOR_3DFACE, _pcfd.m_pHelperSrc, _pcfd.m_lParam ),
							0.0, -0.1, 0.0
							)
						);
		}
	}
CRect rectItem( _pcfd.m_rcClient );
	rectItem.DeflateRect( 1, 1 );
	dc.Draw3dRect( rectItem, clrInner, clrInner );
	if( ! (_pcfd.m_bHover || _pcfd.m_bFocus ) )
		rectItem.InflateRect( 1, 1 );
	dc.Draw3dRect( rectItem, clrIn2, clrIn1 );
	rectItem.InflateRect( 1, 1 );
	dc.Draw3dRect( rectItem, clrOut2, clrOut1 );
}

void CExtPaintManagerXP::PaintControlFrame(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
COLORREF clrForceInner = COLORREF( -1L );
COLORREF clrForceOuter = COLORREF( -1L );
	if( _pcfd.m_pHelperSrc != NULL )
	{
#ifndef __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDurationWnd ) ) )
		{
			CExtDurationWnd * pWnd = DYNAMIC_DOWNCAST( CExtDurationWnd, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
			}
		}
#endif // __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtEdit ) ) )
		{
			CExtEdit * pWnd = DYNAMIC_DOWNCAST( CExtEdit, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
				CWnd * pWndParent = pWnd->GetParent();
				if( pWndParent != NULL )
				{
					ASSERT_VALID( pWndParent );
					if( pWndParent->IsKindOf( RUNTIME_CLASS( CExtResizableDialog ) ) )
					{
						CExtResizableDialog * pDlg = DYNAMIC_DOWNCAST( CExtResizableDialog, pWndParent );
						if( pDlg != NULL )
							clrForceOuter = pDlg->GetBkColor();
					}
					else if( pWndParent->IsKindOf( RUNTIME_CLASS( CDialog ) ) )
					{
						clrForceOuter = ::GetSysColor( COLOR_3DFACE );
					}
				}
			}
		}
	} // if( _pcfd.m_pHelperSrc != NULL )
COLORREF clrInner =
	( clrForceInner != COLORREF( -1L ) ) 
		? clrForceInner 
		: GetColor( COLOR_WINDOW, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
		;
COLORREF clrIn =
		GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
COLORREF clrOut =
		( clrForceOuter != COLORREF( -1L ) ) 
			? clrForceOuter 
			: GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
			;
	if( _pcfd.m_bEnabled )
	{
		if( _pcfd.m_bHover )
		{
			if( _pcfd.m_bFocus )
				clrIn = clrOut = GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			else
				clrIn = GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
		} // if( _pcfd.m_bHover )
		else
		{
			if( _pcfd.m_bFocus )
				clrIn = GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			else
				clrIn = dc.GetNearestColor( stat_HLS_Adjust( clrIn, 0.0, -0.1, 0.0 ) );
		} // else from if( _pcfd.m_bHover )
	} // else from if( _pcfd.m_bEnabled )
CRect rectItem( _pcfd.m_rcClient );
	rectItem.DeflateRect( 1, 1 );
	dc.Draw3dRect( rectItem, clrInner, clrInner );
	if( !(_pcfd.m_bHover || _pcfd.m_bFocus) )
		rectItem.InflateRect( 1, 1 );
	dc.Draw3dRect( rectItem, clrIn, clrIn );
	rectItem.InflateRect( 1, 1 );
	dc.Draw3dRect( rectItem, clrOut, clrOut );
}

void CExtPaintManagerOffice2003::PaintControlFrame(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintControlFrame( dc, _pcfd );
		return;
	}
CRect rcItem( _pcfd.m_rcClient );
CRect rcClip( _pcfd.m_rcClient );
	rcClip.DeflateRect(1,1);
	if( _pcfd.m_bHover || _pcfd.m_bFocus )
		rcClip.DeflateRect(1,1);
COLORREF clrForceInner = COLORREF( -1L );
COLORREF clrForceOuter = COLORREF( -1L );
	if( _pcfd.m_pHelperSrc != NULL )
	{
#ifndef __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDurationWnd ) ) )
		{
			CExtDurationWnd * pWnd = DYNAMIC_DOWNCAST( CExtDurationWnd, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
			}
		}
#endif // __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtEdit ) ) )
		{
			CExtEdit * pWnd = DYNAMIC_DOWNCAST( CExtEdit, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
				CWnd * pWndParent = pWnd->GetParent();
				if( pWndParent != NULL )
				{
					ASSERT_VALID( pWndParent );
					if( pWndParent->IsKindOf( RUNTIME_CLASS( CExtResizableDialog ) ) )
					{
						CExtResizableDialog * pDlg = DYNAMIC_DOWNCAST( CExtResizableDialog, pWndParent );
						if( pDlg != NULL )
							clrForceOuter = pDlg->GetBkColor();
					}
					else if( pWndParent->IsKindOf( RUNTIME_CLASS( CDialog ) ) )
					{
						clrForceOuter = ::GetSysColor( COLOR_3DFACE );
					}
				}
			}
		}
	} // if( _pcfd.m_pHelperSrc != NULL )
COLORREF clrInner =
	( clrForceInner != COLORREF( -1L ) ) 
		? clrForceInner 
		: GetColor( COLOR_WINDOW, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
		;
COLORREF clrIn =
		GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
COLORREF clrOut = 
		( clrForceOuter != COLORREF( -1L ) ) 
			? clrForceOuter 
			: COLORREF( -1L ) // GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			;
	if( _pcfd.m_bEnabled )
	{
		rcClip.InflateRect( 1, 1 );
		if( _pcfd.m_bHover )
		{
			clrIn = GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			if( _pcfd.m_bFocus )
			{
				rcClip.InflateRect( 1, 1 );
				clrOut = GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			}
		} // if( _pcfd.m_bHover )
		else
		{
			if( _pcfd.m_bFocus )
				clrIn = GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			else
				clrIn = dc.GetNearestColor( stat_HLS_Adjust( clrIn, 0.0, -0.1, 0.0 ) );
		} // else from if( _pcfd.m_bHover )
	} // else from if( _pcfd.m_bEnabled )
	rcItem.DeflateRect( 1, 1 );
	dc.Draw3dRect( rcItem, clrInner, clrInner );
	if( !(_pcfd.m_bHover || _pcfd.m_bFocus) )
		rcItem.InflateRect( 1, 1 );
	dc.Draw3dRect( rcItem, clrIn, clrIn );
	rcItem.InflateRect( 1, 1 );
	dc.Draw3dRect( rcItem, clrOut, clrOut );
	if( clrOut != COLORREF( -1L ) )
 		rcClip.InflateRect(1,1);
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pcfd.m_pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		dc.ExcludeClipRect( &rcClip );
		PaintDockerBkgnd( true, dc, pWnd );
		dc.SelectClipRgn( NULL );
	}
}

void CExtPaintManagerNativeXP::PaintControlFrame(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintControlFrame( dc, _pcfd );
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pcfd.m_pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}
	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_EDIT ) != NULL )
	{
		CRect rcItem( _pcfd.m_rcClient );
		INT nStateID = 
				(!_pcfd.m_bEnabled)
					? ETS_DISABLED
					: _pcfd.m_bReadOnly
						? ETS_READONLY
						: _pcfd.m_bFocus
							? ETS_FOCUSED
							: _pcfd.m_bHover
								? ETS_HOT
								: ETS_NORMAL;
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd,
				dc.GetSafeHdc(), 
				EP_EDITTEXT, 
				nStateID, 
				&rcItem, 
				&rcItem
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

CExtPaintManager::PAINTCOMBOFRAMEDATA::PAINTCOMBOFRAMEDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_rcClient( 0,0,0,0 )
	, m_bHover( false )
	, m_bPushed( false )
	, m_bEnabled( false )
	, m_clrForceNABorder( COLORREF(-1L) )
	, m_clrForceNAContent( COLORREF(-1L) )
	, m_clrForceActiveOuterBorder( COLORREF(-1L) )
	, m_bNoTopOuterBorder( false )
	, m_bRightText( false )
{
}

CExtPaintManager::PAINTCOMBOFRAMEDATA::PAINTCOMBOFRAMEDATA(
	CObject * pHelperSrc,
	const RECT & rcClient,
	bool bHover,
	bool bPushed,
	bool bEnabled,
	bool bRightText // = false
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_rcClient( rcClient )
	, m_bHover( bHover )
	, m_bPushed( bPushed )
	, m_bEnabled( bEnabled )
	, m_clrForceNABorder( COLORREF(-1L) )
	, m_clrForceNAContent( COLORREF(-1L) )
	, m_clrForceActiveOuterBorder( COLORREF(-1L) )
	, m_bNoTopOuterBorder( false )
	, m_bRightText( bRightText )
{
}

void CExtPaintManager::PaintComboFrame(
	CDC & dc,
	CExtPaintManager::PAINTCOMBOFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CExtComboBoxBase * pWndCombo = NULL;
	if(		_pcfd.m_pHelperSrc != NULL 
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtComboBoxBase ) )
		)
	{
		pWndCombo = STATIC_DOWNCAST( CExtComboBoxBase, _pcfd.m_pHelperSrc );
		ASSERT_VALID( pWndCombo );
	}
COLORREF clrHilightOut =
		( _pcfd.m_clrForceNABorder == COLORREF(-1L) || _pcfd.m_bPushed || _pcfd.m_bHover )
			? GetColor( CLR_3DHILIGHT_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
			: _pcfd.m_clrForceNABorder
			;
COLORREF clrFaceOut =
		( _pcfd.m_clrForceNABorder == COLORREF(-1L) || _pcfd.m_bPushed || _pcfd.m_bHover )
			? GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
			: _pcfd.m_clrForceNABorder
			;
COLORREF clrTopLeft, clrBottomRight;
	if( _pcfd.m_clrForceNAContent == COLORREF(-1L) )
	{
		clrTopLeft = clrBottomRight = clrFaceOut;
		clrFaceOut = dc.GetNearestColor( stat_HLS_Adjust( GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam ), 0.0, -0.1, 0.0 ) );
	}
	else
		clrTopLeft = clrBottomRight = _pcfd.m_clrForceNAContent;
	if( _pcfd.m_bPushed || _pcfd.m_bHover )
	{
		clrTopLeft     = GetColor( CLR_3DSHADOW_IN, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
		clrBottomRight = GetColor( CLR_3DHILIGHT_IN, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
	}
COLORREF clrWindow = COLORREF( -1L );
	if(		_pcfd.m_clrForceNABorder == COLORREF(-1L) 
		||	_pcfd.m_bPushed 
		|| _pcfd.m_bHover 
		)
	{
		if( pWndCombo != NULL )
			clrWindow = pWndCombo->GetBkColor();
		if( clrWindow == COLORREF(-1L) )
		{
			COLORREF clrSysBk = GetColor( _pcfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			clrWindow = clrSysBk;
		}
	}
	else
		clrWindow = _pcfd.m_clrForceNABorder;
 CRect rectClient( _pcfd.m_rcClient );
	dc.Draw3dRect( &rectClient, clrTopLeft, clrBottomRight );
	rectClient.DeflateRect(1,1);
	dc.Draw3dRect(
		&rectClient,
		_pcfd.m_bEnabled ? clrFaceOut : clrHilightOut,
		_pcfd.m_bEnabled ? clrFaceOut : clrHilightOut
		);
INT nDD = GetDropDownButtonWidth( _pcfd.m_pHelperSrc, _pcfd.m_lParam );
CRect rcDDButton( rectClient );
	if( _pcfd.m_bRightText )
		rcDDButton.right = rcDDButton.left + nDD;
	else
		rcDDButton.left = rcDDButton.right - nDD;
	if( _pcfd.m_bHover || _pcfd.m_bPushed )
		dc.Draw3dRect( &rcDDButton, clrFaceOut, clrFaceOut );
	rcDDButton.DeflateRect(1,1);
PAINTPUSHBUTTONDATA _ppbd(
		_pcfd.m_pHelperSrc,
		true,
		rcDDButton,
		NULL,
		NULL,
		true,
		( _pcfd.m_bHover && (!_pcfd.m_bPushed) ) ? true : false,
		_pcfd.m_bPushed ? true : false,
		false,
		_pcfd.m_bEnabled,
		true,
		false,
		false,
		0,
		NULL
		);
	PaintPushButton( dc, _ppbd );
	if( !(_pcfd.m_bHover || _pcfd.m_bPushed) )
		dc.Draw3dRect( &rcDDButton, clrWindow, clrWindow );
CRect rcDDButtonGlyph( rcDDButton );
	if( _pcfd.m_bPushed )
		rcDDButtonGlyph.OffsetRect( 1, 1 );
	// paint arrow down
glyph_t* pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
	ASSERT( pGlyph != NULL );
	COLORREF ColorValues[2] = { RGB(0,0,0), ::GetSysColor( COLOR_BTNTEXT ) };
	PaintGlyphCentered( dc, rcDDButtonGlyph, *pGlyph, ColorValues );
}

#if (!defined __EXT_MFC_NO_TAB_CTRL)

void CExtPaintManager::GetThemeAccentTabColors(
	COLORREF * pClrSetectedTabItemText,
	COLORREF * pClrSetectedTabItemFace, // = NULL
	COLORREF * pClrSetectedTabItemBorderLight, // = NULL
	COLORREF * pClrSetectedTabItemBorderDark, // = NULL
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( pClrSetectedTabItemText != NULL )
		(*pClrSetectedTabItemText) = GetColor( COLOR_BTNTEXT, pHelperSrc, lParam );
	if( pClrSetectedTabItemFace != NULL )
		(*pClrSetectedTabItemFace) = GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam );
	if( pClrSetectedTabItemBorderLight != NULL )
		(*pClrSetectedTabItemBorderLight) = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
	if( pClrSetectedTabItemBorderDark != NULL )
		(*pClrSetectedTabItemBorderDark) = GetColor( COLOR_3DDKSHADOW, pHelperSrc, lParam );
}

void CExtPaintManager::PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bTopLeft,
	bool bHorz,
	bool bSelected,
	bool bCenteredText,
	bool bGroupedMode,
	bool bInGroupActive,
	bool bInvertedVerticalMode,
	const CRect & rcEntireItem,
	CSize sizeTextMeasured,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator, // = COLORREF(-1L)
	bool bDwmMode // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

CExtCmdIcon * pIconTabItemCloseButton = NULL;
CExtCmdIcon::e_paint_type_t ePaintStateITICB =
		(CExtCmdIcon::e_paint_type_t) CExtCmdIcon::__PAINT_INVISIBLE;
CRect rcTabItemCloseButton( 0, 0, 0, 0 );
CExtBarButton * pTBB = NULL;
CExtTabWnd * pTabs = NULL;
CExtTabWnd::TAB_ITEM_INFO * pTII = NULL;
bool bNoPrefix = false;
	if( pHelperSrc != NULL )
	{
		pTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( pTabs != NULL )
		{
			ASSERT_VALID( pTabs );
			pTII = pTabs->ItemGet( LONG( lParam ) );
			ASSERT( pTII != NULL );
			ASSERT_VALID( pTII );
			pIconTabItemCloseButton =
				pTabs->OnTabWndQueryItemCloseButtonShape( pTII );
			if( pIconTabItemCloseButton != NULL )
			{
				rcTabItemCloseButton = pTII->CloseButtonRectGet();
				ePaintStateITICB = (CExtCmdIcon::e_paint_type_t)
					pTabs->OnTabWndQueryItemCloseButtonPaintState( pTII );
			} // if( pIconTabItemCloseButton != NULL )
			bNoPrefix = ( ( pTabs->GetTabWndStyleEx() & __ETWS_EX_NO_PREFIX ) != 0 ) ? true : false;
		} // if( pTabs != NULL )
		else
		{
			pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
#ifdef _DEBUG
			if( pTBB != NULL )
			{
				ASSERT_VALID( pTBB );
			} // if( pTBB != NULL )
#endif // _DEBUG
		} // else from if( pTabs != NULL )
	} // if( pHelperSrc != NULL )

bool bEnabled = true;
	if( pTII != NULL )
		bEnabled = pTII->EnabledGet();
	else if( pTBB != NULL )
		bEnabled = pTBB->IsEnabled();

#if (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)
	if( pTII != NULL )
	{
		CObject * pObject = pTII->EventProviderGet();
		if( pObject != NULL )
		{
			CExtDynamicControlBar * pBar = DYNAMIC_DOWNCAST( CExtDynamicControlBar, pObject );
			if( pBar != NULL )
			{
				bool bFlashCaptionHighlightedState = false;
				if( pBar->FlashCaptionIsInProgress( &bFlashCaptionHighlightedState ) )
				{
					if( bFlashCaptionHighlightedState )
					{
						clrForceText = pBar->m_clrFlashCaptionText;
						clrForceTabBk = pBar->m_clrFlashCaptionBackground;
						bSelected = true;
					}
				}
			}
		}
	}
#endif// (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)

COLORREF clrText = clrForceText;
	if( clrText == COLORREF(-1L) )
	{
		if( bEnabled ) 
		{
			clrText =
				GetColor(
					(bSelected && !bGroupedMode)
						? COLOR_BTNTEXT
						: ( bGroupedMode
							? COLOR_BTNTEXT
							: COLOR_3DHILIGHT
							)
						,
					pHelperSrc,
					lParam 
					);
		}
		else
		{
			clrText =
				GetColor(
					(bSelected && !bGroupedMode)
						? CLR_TEXT_DISABLED
						: ( bGroupedMode ? CLR_TEXT_DISABLED : COLOR_3DFACE )
						,
					pHelperSrc,
					lParam 
					);
		}
	}

COLORREF clrTabBk = clrForceTabBk;
	if( clrTabBk == COLORREF(-1L) )
		clrTabBk =
			GetColor(
				COLOR_BTNFACE,
				pHelperSrc,
				lParam
				);
COLORREF clrTabBorderLT = clrForceTabBorderLT;
	if( clrTabBorderLT == COLORREF(-1L) )
		clrTabBorderLT =
			GetColor(
				bGroupedMode
					? COLOR_3DSHADOW
					: COLOR_3DHILIGHT
					,
				pHelperSrc,
				lParam 
				);
COLORREF clrTabBorderRB = clrForceTabBorderRB;
	if( clrTabBorderRB == COLORREF(-1L) )
		clrTabBorderRB =
			GetColor(
				bGroupedMode
					? COLOR_3DSHADOW
					: COLOR_3DDKSHADOW
					,
				pHelperSrc,
				lParam 
				);
COLORREF clrTabSeparator = clrForceTabSeparator;
	if( clrTabSeparator == COLORREF(-1L) )
		clrTabSeparator =
			GetColor(
				bGroupedMode
					? COLOR_3DSHADOW
					: COLOR_3DLIGHT
					,
				pHelperSrc,
				lParam 
				);

bool bDrawIcon = (		
			pIcon != NULL 
		&&	(!pIcon->IsEmpty()) 
		&&	( pTabs == NULL || (pTabs->GetTabWndStyle()&__ETWS_HIDE_ICONS) == 0  )
		);
	CExtPaintManager::stat_PaintTabItemImpl(
		dc,
		rcTabItemsArea,
		bTopLeft,
		bHorz,
		bSelected,
		bEnabled,
		bCenteredText,
		bGroupedMode,
		bInGroupActive,
		bInvertedVerticalMode,
		bDrawIcon,
		rcEntireItem,
		sizeTextMeasured,
		pFont,
		sText,
		bNoPrefix,
		pIcon,
		pIconTabItemCloseButton,
		INT(ePaintStateITICB),
		rcTabItemCloseButton,
		clrText,
		clrTabBk,
		clrTabBorderLT,
		clrTabBorderRB,
		clrTabSeparator,
		( pTBB != NULL ) ? false : true,
		pHelperSrc,
		bDwmMode
		);
}

void CExtPaintManagerXP::PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bTopLeft,
	bool bHorz,
	bool bSelected,
	bool bCenteredText,
	bool bGroupedMode,
	bool bInGroupActive,
	bool bInvertedVerticalMode,
	const CRect & rcEntireItem,
	CSize sizeTextMeasured,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator, // = COLORREF(-1L)
	bool bDwmMode // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

CExtCmdIcon * pIconTabItemCloseButton = NULL;
CExtCmdIcon::e_paint_type_t ePaintStateITICB =
		(CExtCmdIcon::e_paint_type_t) CExtCmdIcon::__PAINT_INVISIBLE;
CRect rcTabItemCloseButton( 0, 0, 0, 0 );
CExtBarButton * pTBB = NULL;
CExtTabWnd * pTabs = NULL;
CExtTabWnd::TAB_ITEM_INFO * pTII = NULL;
bool bNoPrefix = false;
	if( pHelperSrc != NULL )
	{
		pTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( pTabs != NULL )
		{
			ASSERT_VALID( pTabs );
			pTII = pTabs->ItemGet( LONG( lParam ) );
			ASSERT( pTII != NULL );
			ASSERT_VALID( pTII );
			pIconTabItemCloseButton =
				pTabs->OnTabWndQueryItemCloseButtonShape( pTII );
			if( pIconTabItemCloseButton != NULL )
			{
				rcTabItemCloseButton = pTII->CloseButtonRectGet();
				ePaintStateITICB = (CExtCmdIcon::e_paint_type_t)
					pTabs->OnTabWndQueryItemCloseButtonPaintState( pTII );
			} // if( pIconTabItemCloseButton != NULL )
			bNoPrefix = ( ( pTabs->GetTabWndStyleEx() & __ETWS_EX_NO_PREFIX ) != 0 ) ? true : false;
		} // if( pTabs != NULL )
		else
		{
			pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
#ifdef _DEBUG
			if( pTBB != NULL )
			{
				ASSERT_VALID( pTBB );
			} // if( pTBB != NULL )
#endif // _DEBUG
		} // else from if( pTabs != NULL )
	} // if( pHelperSrc != NULL )

bool bEnabled = true;
	if( pTII != NULL )
		bEnabled = pTII->EnabledGet();
	else if( pTBB != NULL )
		bEnabled = pTBB->IsEnabled();

#if (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)
	if( pTII != NULL )
	{
		CObject * pObject = pTII->EventProviderGet();
		if( pObject != NULL )
		{
			CExtDynamicControlBar * pBar = DYNAMIC_DOWNCAST( CExtDynamicControlBar, pObject );
			if( pBar != NULL )
			{
				bool bFlashCaptionHighlightedState = false;
				if( pBar->FlashCaptionIsInProgress( &bFlashCaptionHighlightedState ) )
				{
					if( bFlashCaptionHighlightedState )
					{
						clrForceText = pBar->m_clrFlashCaptionText;
						clrForceTabBk = pBar->m_clrFlashCaptionBackground;
						bSelected = true;
					}
				}
			}
		}
	}
#endif// (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)

COLORREF clrText = clrForceText;
	if( clrText == COLORREF(-1L) )
	{
		if( bEnabled ) 
			clrText = GetColor( ( bSelected || bGroupedMode ) ? COLOR_BTNTEXT : COLOR_3DSHADOW, pHelperSrc, lParam );
		else
			clrText = GetColor( CLR_TEXT_DISABLED, pHelperSrc, lParam  );
	}

COLORREF clrTabBk = clrForceTabBk;
	if( clrTabBk == COLORREF(-1L) )
		clrTabBk = GetColor( bGroupedMode ? COLOR_3DFACE : XPCLR_3DFACE_DARK , pHelperSrc, lParam );
COLORREF clrTabBorderLT = clrForceTabBorderLT;
	if( clrTabBorderLT == COLORREF(-1L) )
		clrTabBorderLT = GetColor( bGroupedMode ? COLOR_3DSHADOW : COLOR_3DHILIGHT, pHelperSrc, lParam );
COLORREF clrTabBorderRB = clrForceTabBorderRB;
	if( clrTabBorderRB == COLORREF(-1L) )
		clrTabBorderRB = GetColor( bGroupedMode ? COLOR_3DSHADOW : COLOR_3DDKSHADOW, pHelperSrc, lParam  );
COLORREF clrTabSeparator = clrForceTabSeparator;
	if( clrTabSeparator == COLORREF(-1L) )
		clrTabSeparator = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam  );

bool bDrawIcon = (		
		pIcon != NULL 
		&&	(!pIcon->IsEmpty()) 
		&&	( pTabs == NULL || (pTabs->GetTabWndStyle()&__ETWS_HIDE_ICONS) == 0  ) 
		);
	CExtPaintManager::stat_PaintTabItemImpl(
		dc,
		rcTabItemsArea,
		bTopLeft,
		bHorz,
		bSelected,
		bEnabled,
		bCenteredText,
		bGroupedMode,
		bInGroupActive,
		bInvertedVerticalMode,
		bDrawIcon,
		rcEntireItem,
		sizeTextMeasured,
		pFont,
		sText,
		bNoPrefix,
		pIcon,
		pIconTabItemCloseButton,
		INT(ePaintStateITICB),
		rcTabItemCloseButton,
		clrText,
		clrTabBk,
		clrTabBorderLT,
		clrTabBorderRB,
		clrTabSeparator,
		( pTBB != NULL ) ? false : true,
		pHelperSrc,
		bDwmMode
		);
}

void CExtPaintManager::PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
int idxClrTabNearMargin = COLOR_3DDKSHADOW;
	switch( dwOrientation )
	{
	case __ETWS_ORIENT_TOP:
		idxClrTabNearMargin = COLOR_3DHILIGHT;
	break;
	case __ETWS_ORIENT_BOTTOM:
	break;
	case __ETWS_ORIENT_LEFT:
		idxClrTabNearMargin = COLOR_3DHILIGHT;
	break;
	case __ETWS_ORIENT_RIGHT:
	break;
#ifdef _DEBUG
	default:
		ASSERT( FALSE );
	break;
#endif // _DEBUG
	} // switch( dwOrientation )

COLORREF clrTabItemsAreaBk =
		GetColor(
			( bGroupedMode || IsHighContrast() )
				? COLOR_3DFACE 
				: COLOR_3DSHADOW, 
			pHelperSrc, 
			lParam 
			);
COLORREF clrTabNearBorderAreaBk =
		GetColor( COLOR_3DFACE, pHelperSrc, lParam );
COLORREF clrTabNearMargin = 
		GetColor( idxClrTabNearMargin, pHelperSrc, lParam );

	CExtPaintManager::stat_PaintTabClientAreaImpl(
		dc,
		rcClient,
		rcTabItemsArea,
		rcTabNearBorderArea,
		dwOrientation,
		bGroupedMode,
		clrTabItemsAreaBk,
		clrTabNearBorderAreaBk,
		clrTabNearMargin
		);
}

bool CExtPaintManager::QueryTabWndHoverChangingRedraw(
	const CExtTabWnd * pWndTab,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pWndTab );
	pWndTab;
	lParam;
	return false;
}

bool CExtPaintManagerNativeXP::QueryTabWndHoverChangingRedraw(
	const CExtTabWnd * pWndTab,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pWndTab );
bool bGroupedMode =
		(pWndTab->GetTabWndStyle() & __ETWS_GROUPED) ? true : false;
	if(		bGroupedMode
		||	(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		)
	{
		return 
			CExtPaintManager::QueryTabWndHoverChangingRedraw(
				pWndTab,
				lParam
				);
	}
	return true;
}

void CExtPaintManagerXP::PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
int idxClrTabNearMargin = COLOR_3DSHADOW;
	switch( dwOrientation )
	{
	case __ETWS_ORIENT_TOP:
		idxClrTabNearMargin = COLOR_3DHILIGHT;
	break;
	case __ETWS_ORIENT_BOTTOM:
	break;
	case __ETWS_ORIENT_LEFT:
		idxClrTabNearMargin = COLOR_3DHILIGHT;
	break;
	case __ETWS_ORIENT_RIGHT:
	break;
#ifdef _DEBUG
	default:
		ASSERT( FALSE );
	break;
#endif // _DEBUG
	} // switch( dwOrientation )

COLORREF clrTabItemsAreaBk =
		( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
			? GetColor( XPCLR_3DFACE_NORMAL, pHelperSrc, lParam )
			: GetColor( XPCLR_3DFACE_DARK, pHelperSrc, lParam )
			;

COLORREF clrTabNearBorderAreaBk =
		GetColor( XPCLR_3DFACE_DARK, pHelperSrc, lParam );
COLORREF clrTabNearMargin = 
		GetColor( idxClrTabNearMargin, pHelperSrc, lParam );

	CExtPaintManager::stat_PaintTabClientAreaImpl(
		dc,
		rcClient,
		rcTabItemsArea,
		rcTabNearBorderArea,
		dwOrientation,
		bGroupedMode,
		clrTabItemsAreaBk,
		clrTabNearBorderAreaBk,
		clrTabNearMargin
		);
}

void CExtPaintManagerOffice2003::PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
		return;
	}

	bool bFrameBackground = false;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtTabWnd))
		&&	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8
		)
	{
		CExtTabWnd * pExtTabWnd = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if(		pExtTabWnd != NULL
			&&	(	pExtTabWnd->m_bReflectParentSizing
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
				||	pExtTabWnd->_IsMdiTabCtrl()
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
				)
			)
			bFrameBackground = true;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
		else if(	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtDynTabWnd))
				||	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtDynAutoHideArea))
			)
			bFrameBackground = true;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
	}
	if( bFrameBackground )
	{
		CRect rcTabNearMargin( rcTabNearBorderArea ); // prepare tab border margin rect
		switch( dwOrientation )
		{
		case __ETWS_ORIENT_TOP:
			rcTabNearMargin.bottom = rcTabNearMargin.top + 1;
		break;
		case __ETWS_ORIENT_BOTTOM:
			rcTabNearMargin.top = rcTabNearMargin.bottom - 1;
		break;
		case __ETWS_ORIENT_LEFT:
			rcTabNearMargin.right = rcTabNearMargin.left + 1;
		break;
		case __ETWS_ORIENT_RIGHT:
			rcTabNearMargin.left = rcTabNearMargin.right - 1;
		break;
#ifdef _DEBUG
		default:
			ASSERT( FALSE );
		break;
#endif // _DEBUG
		} // switch( dwOrientation )
		CWnd * pWnd = STATIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( ! PaintDockerBkgnd( true, dc,  pWnd ) )
		{
			CWnd * pFrame = pWnd->GetParentFrame();
			if( pFrame == NULL )
				pFrame = pWnd->GetParent();
			ASSERT_VALID( pFrame );
			CRect rcPaintGradient;
			pFrame->GetClientRect( &rcPaintGradient );
			pFrame->ClientToScreen( &rcPaintGradient );
			((CExtTabWnd*)pHelperSrc)->ScreenToClient( &rcPaintGradient );
			PaintDockerBkgnd( true, dc, rcPaintGradient, rcClient );
		}
		if( ! bGroupedMode )
		{
COLORREF clrTabNearMargin = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
COLORREF clrTabNearBorderAreaBk = GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam );
			// fill tab border area
			dc.FillSolidRect(
				&rcTabNearBorderArea,
				clrTabNearBorderAreaBk
				);
			// paint tab border margin
			dc.FillSolidRect(
				&rcTabNearMargin,
				clrTabNearMargin
				);
		} // if( !bGroupedMode )
		return;
	} // if( bFrameBackground )
	CExtPaintManagerXP::PaintTabClientArea(
		dc,
		rcClient,
		rcTabItemsArea,
		rcTabNearBorderArea,
		dwOrientation,
		bGroupedMode,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManager::PaintTabbedTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	rcTabNearBorderArea;
	bGroupedMode;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtTabWnd))
		)
	{
		CWnd * pWnd = STATIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( ! PaintDockerBkgnd( true, dc, pWnd, lParam ) )
			dc.FillSolidRect( &rcClient, GetColor( CExtPaintManager::CLR_3DFACE_OUT ) );
		COLORREF clr = 0;
		CRect rcTabNearMargin( rcTabItemsArea );
		switch( dwOrientation )
		{
		case __ETWS_ORIENT_TOP:
			rcTabNearMargin.top = rcTabNearMargin.bottom - 1;
			rcTabNearMargin.left = rcClient.left;
			rcTabNearMargin.right = rcClient.right;
			rcTabNearMargin.OffsetRect( 0, 1 );
			clr = GetColor( COLOR_3DHIGHLIGHT );
			break;
		case __ETWS_ORIENT_BOTTOM:
			rcTabNearMargin.bottom = rcTabNearMargin.top + 1;
			rcTabNearMargin.left = rcClient.left;
			rcTabNearMargin.right = rcClient.right;
			rcTabNearMargin.OffsetRect( 0, -1 );
			clr = GetColor( COLOR_3DSHADOW );
			break;
		case __ETWS_ORIENT_LEFT:
			rcTabNearMargin.left = rcTabNearMargin.right - 1;
			rcTabNearMargin.top = rcClient.top;
			rcTabNearMargin.bottom = rcClient.bottom;
			rcTabNearMargin.OffsetRect( 1, 0 );
			clr = GetColor( COLOR_3DHIGHLIGHT );
			break;
		case __ETWS_ORIENT_RIGHT:
			rcTabNearMargin.right = rcTabNearMargin.left + 1;
			rcTabNearMargin.top = rcClient.top;
			rcTabNearMargin.bottom = rcClient.bottom;
			rcTabNearMargin.OffsetRect( -1, 0 );
			clr = GetColor( COLOR_3DSHADOW );
			break;
		default:
			ASSERT( FALSE );
			return;
		} // switch( dwOrientation )

		// paint tab border margin
		dc.FillSolidRect(
			&rcTabNearMargin,
			clr
			);
	}
}

void CExtPaintManagerStudio2005::PaintTabbedTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabbedTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
		return;
	}
	
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtTabWnd))
		)
	{
		CWnd * pWnd = STATIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( ! PaintDockerBkgnd( true, dc, pWnd, lParam ) )
			dc.FillSolidRect( &rcClient, GetColor( CExtPaintManager::CLR_3DFACE_OUT ) );
		CRect rcTabNearMargin( rcTabItemsArea );
		switch( dwOrientation )
		{
		case __ETWS_ORIENT_TOP:
			rcTabNearMargin.top = rcTabNearMargin.bottom - 1;
			rcTabNearMargin.left = rcClient.left;
			rcTabNearMargin.right = rcClient.right;
			rcTabNearMargin.OffsetRect( 0, 1 );
			break;
		case __ETWS_ORIENT_BOTTOM:
			rcTabNearMargin.bottom = rcTabNearMargin.top + 1;
			rcTabNearMargin.left = rcClient.left;
			rcTabNearMargin.right = rcClient.right;
			rcTabNearMargin.OffsetRect( 0, -1 );
			break;
		case __ETWS_ORIENT_LEFT:
			rcTabNearMargin.left = rcTabNearMargin.right - 1;
			rcTabNearMargin.top = rcClient.top;
			rcTabNearMargin.bottom = rcClient.bottom;
			rcTabNearMargin.OffsetRect( 1, 0 );
			break;
		case __ETWS_ORIENT_RIGHT:
			rcTabNearMargin.right = rcTabNearMargin.left + 1;
			rcTabNearMargin.top = rcClient.top;
			rcTabNearMargin.bottom = rcClient.bottom;
			rcTabNearMargin.OffsetRect( -1, 0 );
			break;
		default:
			ASSERT( FALSE );
			return;
		} // switch( dwOrientation )

		// paint tab border margin
		dc.FillSolidRect(
			&rcTabNearMargin,
			GetColor( COLOR_3DSHADOW )
			);
	}
}

void CExtPaintManager::PaintTabButton(
	CDC & dc,
	CRect & rcButton,
	LONG nHitTest,
	bool bTopLeft,
	bool bHorz,
	bool bEnabled,
	bool bHover,
	bool bPushed,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bFlat // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
COLORREF clrGlyph = GetColor( bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED, pHelperSrc, lParam  );
COLORREF clrTL = GetColor( bPushed ? COLOR_3DDKSHADOW : COLOR_3DHILIGHT, pHelperSrc, lParam  );
COLORREF clrBR = GetColor( bPushed ? COLOR_3DHILIGHT : COLOR_3DDKSHADOW, pHelperSrc, lParam  );
	CExtPaintManager::stat_PaintTabButtonImpl(
		dc,
		rcButton,
		nHitTest,
		bTopLeft,
		bHorz,
		bEnabled,
		bHover,
		bPushed,
		bGroupedMode,
		clrGlyph,
		clrTL,
		clrBR,
		bFlat
		);
}

void CExtPaintManagerXP::PaintTabButton(
	CDC & dc,
	CRect & rcButton,
	LONG nHitTest,
	bool bTopLeft,
	bool bHorz,
	bool bEnabled,
	bool bHover,
	bool bPushed,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bFlat // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
COLORREF clrGlyph = GetColor( bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED, pHelperSrc, lParam  );
COLORREF clrTL = GetColor( bPushed ? COLOR_3DDKSHADOW : COLOR_3DHILIGHT, pHelperSrc, lParam );
COLORREF clrBR = GetColor( bPushed ? COLOR_3DHILIGHT : COLOR_3DDKSHADOW, pHelperSrc, lParam );
	CExtPaintManager::stat_PaintTabButtonImpl(
		dc,
		rcButton,
		nHitTest,
		bTopLeft,
		bHorz,
		bEnabled,
		bHover,
		bPushed,
		bGroupedMode,
		clrGlyph,
		clrTL,
		clrBR,
		bFlat
		);
}

void CExtPaintManagerStudio2005::PaintTabButton(
	CDC & dc,
	CRect & rcButton,
	LONG nHitTest,
	bool bTopLeft,
	bool bHorz,
	bool bEnabled,
	bool bHover,
	bool bPushed,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bFlat // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabButton(
			dc,
			rcButton,
			nHitTest,
			bTopLeft,
			bHorz,
			bEnabled,
			bHover,
			bPushed,
			bGroupedMode,
			pHelperSrc,
			lParam,
			bFlat
			);
		return;
	}

	if( bEnabled && ( bHover || bPushed ) )
	{
		PAINTPUSHBUTTONDATA _ppbd(
			pHelperSrc,
			bHorz,
			rcButton,
			_T(""),
			NULL,	// pIcon
			false,	// bFlat
			bHover,
			bPushed,
			false,	// bIndeterminate
			bEnabled,
			false,	// bDrawBorder
			false,	// bDrawFocusRect
			false,	// bDefaultPushButton
			0,
			NULL,	// hFont
			false,	// bDropDown
			0,
			false	// bTransparentBackground
			);

		PaintPushButton( dc, _ppbd );
	}

	CExtPaintManagerOffice2003::PaintTabButton(
		dc,
		rcButton,
		nHitTest,
		bTopLeft,
		bHorz,
		bEnabled,
		bHover,
		bPushed,
		bGroupedMode,
		pHelperSrc,
		lParam,
		true
		);
}

void CExtPaintManagerOffice2007_R2_Obsidian::PaintTabButton(
	CDC & dc,
	CRect & rcButton,
	LONG nHitTest,
	bool bTopLeft,
	bool bHorz,
	bool bEnabled,
	bool bHover,
	bool bPushed,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bFlat // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabButton( dc, rcButton, nHitTest, bTopLeft, bHorz, bEnabled, bHover, bPushed, bGroupedMode, pHelperSrc, lParam, bFlat );
		return;
	}
COLORREF clrGlyph = RGB(141,141,141);
	if( bEnabled )
	{
		if(		pHelperSrc != NULL
			&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) ) 
			)
			clrGlyph = RGB(0,0,0);
		else
			clrGlyph = RGB(255,255,255);
	}
COLORREF clrTL = GetColor( bPushed ? COLOR_3DDKSHADOW : COLOR_3DHILIGHT, pHelperSrc, lParam );
COLORREF clrBR = GetColor( bPushed ? COLOR_3DHILIGHT : COLOR_3DDKSHADOW, pHelperSrc, lParam );
	CExtPaintManager::stat_PaintTabButtonImpl( dc, rcButton, nHitTest, bTopLeft, bHorz, bEnabled, bHover, bPushed, bGroupedMode, clrGlyph, clrTL, clrBR, bFlat );
}

void CExtPaintManagerOffice2010_R2_Black::PaintTabButton(
	CDC & dc,
	CRect & rcButton,
	LONG nHitTest,
	bool bTopLeft,
	bool bHorz,
	bool bEnabled,
	bool bHover,
	bool bPushed,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bFlat // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabButton( dc, rcButton, nHitTest, bTopLeft, bHorz, bEnabled, bHover, bPushed, bGroupedMode, pHelperSrc, lParam, bFlat );
		return;
	}
COLORREF clrGlyph = RGB(141,141,141);
	if( bEnabled )
	{
		if(		pHelperSrc != NULL
			&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) ) 
			)
			clrGlyph = RGB(0,0,0);
		else
			clrGlyph = RGB(220,220,220);
	}
COLORREF clrTL = GetColor( bPushed ? COLOR_3DDKSHADOW : COLOR_3DHILIGHT, pHelperSrc, lParam );
COLORREF clrBR = GetColor( bPushed ? COLOR_3DHILIGHT : COLOR_3DDKSHADOW, pHelperSrc, lParam );
	CExtPaintManager::stat_PaintTabButtonImpl( dc, rcButton, nHitTest, bTopLeft, bHorz, bEnabled, bHover, bPushed, bGroupedMode, clrGlyph, clrTL, clrBR, bFlat );
}

void CExtPaintManager::TabWnd_AdjustTabAreaMetric( CExtTabWnd * pTabWnd, DWORD dwOrientation, LONG & nTabAreaMetric, LPARAM lParam )
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	pTabWnd; dwOrientation; nTabAreaMetric; lParam;
}

void CExtPaintManagerNativeXP::TabWnd_AdjustTabAreaMetric( CExtTabWnd * pTabWnd, DWORD dwOrientation, LONG & nTabAreaMetric, LPARAM lParam )
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	pTabWnd; lParam;
	if( ( dwOrientation == __ETWS_ORIENT_BOTTOM || dwOrientation == __ETWS_ORIENT_RIGHT ) && ( pTabWnd->GetTabWndStyle() & __ETWS_GROUPED ) == 0 )
		nTabAreaMetric += 2;
}

void CExtPaintManager::TabWnd_MeasureItemAreaMargins(
	CExtTabWnd * pTabWnd,
	LONG & nSpaceBefore,
	LONG & nSpaceAfter,
	LONG & nSpaceOver
	)
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
	pTabWnd;
	nSpaceBefore	= 4;
	nSpaceAfter		= 2;
	if( (pTabWnd->GetTabWndStyle() & __ETWS_GROUPED) == 0 )
		nSpaceOver	= 2;
}

void CExtPaintManagerNativeXP::TabWnd_MeasureItemAreaMargins(
	CExtTabWnd * pTabWnd,
	LONG & nSpaceBefore,
	LONG & nSpaceAfter,
	LONG & nSpaceOver
	)
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
bool bGroupedMode = ( pTabWnd->GetTabWndStyle() & __ETWS_GROUPED ) ? true : false;
	if(		bGroupedMode
		||	(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		)
	{
		CExtPaintManager::TabWnd_MeasureItemAreaMargins( pTabWnd, nSpaceBefore, nSpaceAfter, nSpaceOver );
		return;
	}
	nSpaceBefore	= 0;
	nSpaceAfter		= 0;
	nSpaceOver		= 0;
}

void CExtPaintManager::TabWnd_UpdateItemMeasure(
	CExtTabWnd * pTabWnd,
	CExtTabWnd::TAB_ITEM_INFO * pTii,
	CDC & dcMeasure,
	CSize & sizePreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTii );
	ASSERT( dcMeasure.GetSafeHdc() != NULL );
	ASSERT( pTii->GetTabWnd() == pTabWnd );
	pTabWnd; pTii; dcMeasure; sizePreCalc;
}

void CExtPaintManager::TabWnd_AdjustItemCloseButtonRect(
	CRect & rcCloseButton,
	CExtTabWnd * pTabWnd
	)
{
	ASSERT_VALID( this );
	pTabWnd; rcCloseButton;
}

bool CExtPaintManager::TabWnd_GetParentSizingMargin(
	INT & nMargin,
	DWORD dwOrientation,
	CExtTabWnd * pTabWnd
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTabWnd );
	nMargin; dwOrientation; pTabWnd;
	return false;
}

bool CExtPaintManagerNativeXP::TabWnd_GetParentSizingMargin(
	INT & nMargin,
	DWORD dwOrientation,
	CExtTabWnd * pTabWnd
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTabWnd );
	if(		(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		||	pTabWnd->_IsCustomLayoutTabWnd() 
		)
		return CExtPaintManager::TabWnd_GetParentSizingMargin( nMargin, dwOrientation, pTabWnd );
	nMargin = 1;
	return true;
}

void CExtPaintManager::PaintTabNcAreaRect(
	CDC & dc,
	const RECT & rc,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
COLORREF clrTL = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
COLORREF clrBR = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
	dc.Draw3dRect( &rc, clrTL, clrBR );
}

bool CExtPaintManager::PaintTabMdiOuterBorder(
	CDC & dc,
	const CRect & rcOuterBorder,
	const CRect & rcMdiAreaClient,
	const CRect & rcMdiAreaWnd,
	HWND hWndHooked,
	CExtTabWnd * pTabWnd,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pTabWnd->GetSafeHwnd() != NULL );
	ASSERT( hWndHooked != NULL && ::IsWindow(hWndHooked) );
	dc; rcOuterBorder; rcMdiAreaClient; rcMdiAreaWnd; hWndHooked; pTabWnd; lParam;
	return false;
}

void CExtPaintManagerXP::PaintTabNcAreaRect(
	CDC & dc,
	const RECT & rc,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
COLORREF clrTL = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
COLORREF clrBR = clrTL;
	dc.Draw3dRect( &rc, clrTL, clrBR );
}

void CExtPaintManagerNativeXP::PaintTabNcAreaRect(
	CDC & dc,
	const RECT & rc,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		||	pHelperSrc == NULL
		||	(! pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) ) )
		||	((CExtTabWnd*)pHelperSrc)->_IsCustomLayoutTabWnd()
		)
		CExtPaintManager::PaintTabNcAreaRect( dc, rc, pHelperSrc, lParam );
	PaintDockerBkgnd( false, dc, (CWnd*)pHelperSrc, lParam );
}

#endif // #if (!defined __EXT_MFC_NO_TAB_CTRL)

void CExtPaintManager::PaintDockBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcClient ) || ( ! dc.RectVisible( &rcClient ) ) )
		return;
	if( RenderCustomBackground( true, dc, pHelperSrc, lParam ) )
		return;
	dc.FillSolidRect( &rcClient, GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam ) );
}

CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA::PAINTINHERITEDBACKGROUNDDATA(
	bool bClientMapping,
	CDC & dc,
	CWnd * pWnd,
	CObject * pObjHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
	: m_bClientMapping( bClientMapping )
	, m_bBackgroundDrawn( false )
	, m_bSequenceCanceled( false )
	, m_hWndBackgroundRequestPainter( NULL )
	, m_dc( dc )
	, m_pWnd( pWnd )
	, m_pObjHelperSrc( pObjHelperSrc )
	, m_lParam( lParam )
{
	ASSERT_VALID( (&m_dc) );
	ASSERT( m_dc.GetSafeHdc() != NULL );
	ASSERT_VALID( m_pWnd );
	ASSERT( m_pWnd->GetSafeHwnd() != NULL );
}

CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA::PAINTINHERITEDBACKGROUNDDATA(
	bool bClientMapping,
	CDC & dc,
	CObject * pObjHelperSrc,
	LPARAM lParam // = 0L
	)
	: m_bClientMapping( bClientMapping )
	, m_bBackgroundDrawn( false )
	, m_bSequenceCanceled( false )
	, m_hWndBackgroundRequestPainter( NULL )
	, m_dc( dc )
	, m_pWnd( NULL )
	, m_pObjHelperSrc( pObjHelperSrc )
	, m_lParam( lParam )
{
	ASSERT_VALID( (&m_dc) );
	ASSERT( m_dc.GetSafeHdc() != NULL );
	ASSERT_VALID( m_pObjHelperSrc );
	m_pWnd = STATIC_DOWNCAST( CWnd, m_pObjHelperSrc );
	ASSERT_VALID( m_pWnd );
	ASSERT( m_pWnd->GetSafeHwnd() != NULL );
}

bool CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA::Notify()
{
	ASSERT_VALID( (&m_dc) );
	ASSERT( m_dc.GetSafeHdc() != NULL );
	ASSERT_VALID( m_pWnd );
	ASSERT( m_pWnd->GetSafeHwnd() != NULL );
HWND hWnd = m_pWnd->GetSafeHwnd();
	for( ; hWnd != NULL; hWnd = ::GetParent(hWnd) )
	{
		::SendMessage( hWnd, CExtPaintManager::g_nMsgPaintInheritedBackground, *this, 0 );
		if( m_bSequenceCanceled )
		{
			m_bBackgroundDrawn = false;
			m_hWndBackgroundRequestPainter = NULL;
			break;
		} // if( m_bSequenceCanceled )
		if( m_bBackgroundDrawn )
		{
			if( m_hWndBackgroundRequestPainter == NULL )
				m_hWndBackgroundRequestPainter = hWnd;
			return true;
		} // if( m_bBackgroundDrawn )
		__EXT_MFC_LONG_PTR dwStyle = ::__EXT_MFC_GetWindowLong( hWnd, GWL_STYLE );
		if( (dwStyle&WS_CHILD) == 0 )
			break;
	} // for( ; hWnd != NULL; hWnd = ::GetParent(hWnd) )
	return false;
}

CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA::operator WPARAM() const
{
	return WPARAM( this );
}

CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA *
	CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA::FromWPARAM( WPARAM wParam )
{
PAINTINHERITEDBACKGROUNDDATA * pPIBD =
			reinterpret_cast < PAINTINHERITEDBACKGROUNDDATA * > ( wParam );
	ASSERT( pPIBD != NULL );
	return pPIBD;
}

CRect CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA::GetRenderingRect() const
{
CRect rc;
	if( m_bClientMapping )
		m_pWnd->GetClientRect( &rc );
	else
	{
		m_pWnd->GetWindowRect( &rc );
		rc.OffsetRect( -rc.left, -rc.top );
	}
	return rc;
}

bool CExtPaintManager::RenderCustomBackground(
	bool bClientMapping,
	CDC & dc,
	CObject * pObjHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	if(		pObjHelperSrc == NULL
		||	(! GetCustomBackgroundInheritanceMode( pObjHelperSrc, lParam ) )
		||	dc.GetSafeHdc() == NULL
		)
		return false;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pObjHelperSrc );
	if( pWnd->GetSafeHwnd() == NULL )
	{
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pObjHelperSrc );
		if( pTBB != NULL )
			pWnd = pTBB->GetBar();
	}
	if( pWnd->GetSafeHwnd() == NULL )
		return false;
CExtPaintManager::PAINTINHERITEDBACKGROUNDDATA _pibd(
		bClientMapping,
		dc,
		pWnd,
		pObjHelperSrc,
		lParam
		);
	return _pibd.Notify();
}

UINT CExtPaintManager::g_nMsgPaintInheritedBackground =
	::RegisterWindowMessage(
		_T("CExtPaintManager::g_nMsgPaintInheritedBackground")
		);

bool CExtPaintManager::IsCustomBackgroundInheritanceEnabled() const
{
	ASSERT_VALID( this );
	return m_bCustomBackgroundInheritanceEnabled;
}

bool CExtPaintManager::GetCustomBackgroundInheritanceMode(
	CObject * pObjHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pObjHelperSrc );
	pObjHelperSrc;
	lParam;
	return IsCustomBackgroundInheritanceEnabled();
}

bool CExtPaintManager::GetCb2DbTransparentMode(
	CObject * pObjHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( GetCustomBackgroundInheritanceMode(
			pObjHelperSrc,
			lParam
			)
		)
		return true;
	return false;
}

bool CExtPaintManagerNativeXP::GetCb2DbTransparentMode(
	CObject * pObjHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( GetCustomBackgroundInheritanceMode(
			pObjHelperSrc,
			lParam
			)
		)
		return true;
//	return false;
	return true;
}

bool CExtPaintManagerOffice2003::GetCb2DbTransparentMode(
	CObject * pObjHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::GetCb2DbTransparentMode( pObjHelperSrc, lParam );

	if( stat_GetBPP() <= 8 )
		return false;

// (- 2.25)
//	if( g_PaintManager.m_bUxValidColorsExtracted && pObjHelperSrc != NULL )
//	{
//		ASSERT_VALID( pObjHelperSrc );
//		CDialog * pWnd = DYNAMIC_DOWNCAST( CDialog, pObjHelperSrc );
//		if(		pWnd != NULL
//			&&	pWnd->GetSafeHwnd() != NULL
//			&&	(pWnd->GetStyle()&WS_CHILD) != 0
//			)
//		{
//			return false;
//		} // if( pWnd != NULL && ...
//	} // if( g_PaintManager.m_bUxValidColorsExtracted && pObjHelperSrc != NULL )
	return true;
}

bool CExtPaintManager::PaintDocumentClientAreaBkgnd(
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pWnd->GetSafeHwnd() != NULL );
CRect rcClient;
	pWnd->GetClientRect( &rcClient );
	if( dc.RectVisible( &rcClient ) )
		dc.FillSolidRect( rcClient, GetColor( COLOR_3DFACE, pWnd, lParam ) );	
	return true;
}

bool CExtPaintManager::PaintDockerBkgnd(
	bool bClientMapping,
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pWnd->GetSafeHwnd() != NULL );
	if( RenderCustomBackground( bClientMapping, dc, pWnd, lParam ) )
		return true;
CRect rc;
	if( bClientMapping )
		pWnd->GetClientRect( &rc );
	else
	{
		pWnd->GetWindowRect( &rc );
		rc.OffsetRect( -rc.left, -rc.top );
	}
	dc.FillSolidRect( rc, GetColor( CLR_3DFACE_OUT, pWnd, lParam ) );	
	return true;
}

bool CExtPaintManager::PaintDockerBkgnd(
	bool bClientMapping,
	CDC & dc,
	const CRect &rcDst,
	const CRect &rcWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	rcWnd; lParam; bClientMapping;
	dc.FillSolidRect( rcDst, GetColor( CLR_3DFACE_OUT, NULL ) );		
	return true;
}

bool CExtPaintManagerNativeXP::PaintDockerBkgnd(
	bool bClientMapping,
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pWnd->GetSafeHwnd() != NULL );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return  CExtPaintManager::PaintDockerBkgnd( bClientMapping, dc, pWnd, lParam );
	if( RenderCustomBackground( bClientMapping, dc, pWnd, lParam ) )
		return true;
	if(	! GetCb2DbTransparentMode( pWnd ) )
		return false;
bool bToolbarShade = false;
bool bToolbarHorz = false;
CWnd * pFrame = pWnd;
	for( ; pFrame != NULL; pFrame = pFrame->GetParent() )
	{
		if( (pFrame->GetStyle() & WS_CHILD) == 0 )
			break;
		else // frame features - design mode
			if( pFrame->IsKindOf(RUNTIME_CLASS(CFrameWnd)) )
				break;
		if(		pFrame != pWnd
			&&	pFrame->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
			)
		{
			if( ((CExtToolControlBar*)pFrame)->m_pDockSite != NULL )
			{
				if(		(!(	pFrame->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) )
						||	pFrame->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
						) )
					&&	(! ((CExtToolControlBar*)pFrame)->m_bForceNoBalloonWhenRedockable)
					)
				{
					if( ((CExtToolControlBar*)pFrame)->m_pDockBar == NULL )
					{
						if( ((CExtToolControlBar*)pFrame)->m_bForceBalloonGradientInDialogs != 0 )
						{
							bToolbarShade = true;
							DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
							bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
							break;
						}
						continue;
					}
					if( ! ((CExtToolControlBar*)pFrame)->IsFloating() )
					{
						bToolbarShade = true;
						bToolbarHorz = ((CExtToolControlBar*)pFrame)->IsDockedHorizontally();
					}
					break;
				}
			}
			else if( ((CExtToolControlBar*)pFrame)->m_bForceBalloonGradientInDialogs != 0 )
			{
				bToolbarShade = true;
				DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
				bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
				break;
			}
		}
	} // for( ; pFrame != NULL; pFrame = pFrame->GetParent() )

	if( pFrame == NULL )
		return false;

CExtToolControlBar::FtLayoutQuery _FtLayoutQuery;
	if( _FtLayoutQuery.Query( pWnd->m_hWnd ) )
	{
		if( bClientMapping )
			_FtLayoutQuery.ReMapRectsToTargetClient();
		else
			_FtLayoutQuery.ReMapRectsToTargetWindow();
		_FtLayoutQuery.DrawRects( dc );
		return true;
	} // if( _FtLayoutQuery.Query( pWnd->m_hWnd ) )

CRect rcPaintGradient;
	pFrame->GetClientRect( &rcPaintGradient );
	pFrame->ClientToScreen( &rcPaintGradient );

	if( bClientMapping )
	{
		pWnd->ScreenToClient( &rcPaintGradient );
	} // if( bClientMapping )
	else
	{
		CRect rc;
		pWnd->GetWindowRect( &rc );
		rcPaintGradient.OffsetRect( -rc.left, -rc.top );
	} // else from if( bClientMapping )
	if(		::IsRectEmpty( &rcPaintGradient )
		||	( ! dc.RectVisible( &rcPaintGradient ) )
		)
		return true;
	if( bToolbarShade )
	{
		bool bRebarDrawingStyle = false;
		CExtControlBar * pWndCB = DYNAMIC_DOWNCAST( CExtControlBar, pFrame );
		if( pWndCB != NULL )
		{
			ASSERT_VALID( pWndCB );
			if( pWndCB->m_pDockBar->GetSafeHwnd() != NULL )
			{
				ASSERT_VALID( pWndCB->m_pDockBar );
				if(		pWndCB->IsFixedDockStyle() 
					&&	(!pWndCB->IsFloating())
					)
					bRebarDrawingStyle = true;
			}
		}
		if( bRebarDrawingStyle )
		{
			CRect rcPaint;
			pWndCB->m_pDockBar->GetWindowRect( &rcPaint );
			pWndCB->ScreenToClient( &rcPaint );
			if( g_PaintManager.m_UxTheme.OpenThemeData( pWndCB->GetSafeHwnd(), VSCLASS_REBAR ) != NULL )
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						pWndCB->GetSafeHwnd(),
						dc.GetSafeHdc(), 
						0, 
						0, 
						&rcPaint, 
						&rcPaint
						) == S_OK
					);
				g_PaintManager.m_UxTheme.CloseThemeData();
			}
		}
		else
			dc.FillSolidRect( &rcPaintGradient, ::GetSysColor( COLOR_3DFACE ) );
	} // else if( bToolbarShade )
	else
		dc.FillSolidRect( rcPaintGradient, ::GetSysColor( COLOR_3DFACE ) );		
	return true;
}

bool CExtPaintManagerOffice2003::PaintDockerBkgnd(
	bool bClientMapping,
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pWnd->GetSafeHwnd() != NULL );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintDockerBkgnd( bClientMapping, dc, pWnd, lParam );
	if( RenderCustomBackground( bClientMapping, dc, pWnd, lParam ) )
		return true;
	if(	! GetCb2DbTransparentMode( pWnd ) )
		return false;
COLORREF clrSolidShade0 = ((COLORREF)(-1L));
COLORREF clrSolidShade1 = ((COLORREF)(-1L));
bool bToolbarShade = false;
bool bToolbarHorz = false;
CWnd * pFrame = pWnd;
	for( ; pFrame != NULL; pFrame = pFrame->GetParent() )
	{
		if( (pFrame->GetStyle() & WS_CHILD) == 0 )
			break;
		else // frame features - design mode
			if( pFrame->IsKindOf(RUNTIME_CLASS(CFrameWnd)) )
				break;
		if(		pFrame != pWnd
			&&	pFrame->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
			)
		{
			if( ((CExtToolControlBar*)pFrame)->m_pDockSite != NULL )
			{
				if(		(!(	pFrame->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) )
						||	pFrame->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
						) )
					&&	(! ((CExtToolControlBar*)pFrame)->m_bForceNoBalloonWhenRedockable)
					)
				{
					if( ((CExtToolControlBar*)pFrame)->m_pDockBar == NULL )
					{
						if( ((CExtToolControlBar*)pFrame)->m_bForceBalloonGradientInDialogs != 0 )
						{
							bToolbarShade = true;
							DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
							bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
							break;
						}
						continue;
					}
					if( ((CExtToolControlBar*)pFrame)->IsFloating() )
					{
						clrSolidShade0 = GetColor( _2003CLR_GRADIENT_DARK, pWnd, lParam );
						clrSolidShade1 = GetColor( _2003CLR_GRADIENT_LIGHT, pWnd, lParam );
					}
					else
					{
						bToolbarShade = true;
						bToolbarHorz = ((CExtToolControlBar*)pFrame)->IsDockedHorizontally();
					}
					break;
				}
			}
			else if( ((CExtToolControlBar*)pFrame)->m_bForceBalloonGradientInDialogs != 0 )
			{
				bToolbarShade = true;
				DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
				bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
				break;
			}
		}
	} // for( ; pFrame != NULL; pFrame = pFrame->GetParent() )
	if( pFrame == NULL )
		return false;

CExtToolControlBar::FtLayoutQuery _FtLayoutQuery;
	if( _FtLayoutQuery.Query( pWnd->m_hWnd ) )
	{
		if( bClientMapping )
			_FtLayoutQuery.ReMapRectsToTargetClient();
		else
			_FtLayoutQuery.ReMapRectsToTargetWindow();
		_FtLayoutQuery.DrawRects( dc );
		return true;
	} // if( _FtLayoutQuery.Query( pWnd->m_hWnd ) )

CRect rcPaintGradient;
///	pFrame->GetWindowRect( &rcPaintGradient );
	pFrame->GetClientRect( &rcPaintGradient );
	pFrame->ClientToScreen( &rcPaintGradient );

	if( bClientMapping )
	{
		pWnd->ScreenToClient( &rcPaintGradient );
	} // if( bClientMapping )
	else
	{
		CRect rc;
		pWnd->GetWindowRect( &rc );
		rcPaintGradient.OffsetRect( -rc.left, -rc.top );
///		rcPaintGradient.OffsetRect( -rcPaintGradient.left, -rcPaintGradient.top );
	} // else from if( bClientMapping )

	if(		::IsRectEmpty( &rcPaintGradient )
		||	( ! dc.RectVisible( &rcPaintGradient ) )
		)
		return true;

	if( clrSolidShade0 != ((COLORREF)(-1L)) )
	{
		if( clrSolidShade1 != ((COLORREF)(-1L)) )
		{
			bool bRTL = ( (dc.GetLayout()&LAYOUT_RTL) != 0 ) ? true : false;
			if( bRTL )
			{
				COLORREF clrTmp = clrSolidShade0;
				clrSolidShade0 = clrSolidShade1;
				clrSolidShade1 = clrTmp;
			} // if( bRTL )
			stat_PaintGradientRect(
				dc,
				rcPaintGradient,
				clrSolidShade0,
				clrSolidShade1,
				true
				);
		} // if( clrSolidShade1 != ((COLORREF)(-1L)) )
		else
			dc.FillSolidRect( rcPaintGradient, clrSolidShade0 );
		return true;
	} // if( clrSolidShade0 != ((COLORREF)(-1L)) )

	if( bToolbarShade )
	{
		if( OnQueryUseThemeColors() )
		{
			// if use WinXP themed colors
			COLORREF clrLeft   = GetColor( _2003CLR_TOOLBAR_GRADIENT_LIGHT,  pWnd, lParam );
			COLORREF clrMiddle = GetColor( _2003CLR_TOOLBAR_GRADIENT_MIDDLE, pWnd, lParam );
			COLORREF clrRight  = GetColor( _2003CLR_TOOLBAR_GRADIENT_DARK,   pWnd, lParam );
			stat_PaintGradientRect2steps( dc, rcPaintGradient, clrLeft, clrMiddle, clrRight, bToolbarHorz, 5, 11 );
		} // if( OnQueryUseThemeColors() )
		else
		{
			COLORREF clrLeft = 
				bToolbarHorz 
					? GetColor( _2003CLR_MLA_NORM_RIGHT, pWnd, lParam )
					: GetColor( _2003CLR_MLA_NORM_LEFT,  pWnd, lParam )
					;
			COLORREF clrRight = 
				bToolbarHorz 
					? GetColor( _2003CLR_MLA_NORM_LEFT,  pWnd, lParam )
					: GetColor( _2003CLR_MLA_NORM_RIGHT, pWnd, lParam )
					;
			stat_PaintGradientRect( dc, rcPaintGradient, clrLeft, clrRight, bToolbarHorz );
		} // else from if( OnQueryUseThemeColors() )
	} // if( bToolbarShade )
	else
	{
		CRect rcWnd;
		if( bClientMapping )
		{
			pWnd->GetClientRect( &rcWnd );
			pFrame->ClientToScreen( &rcWnd );
		}
		else
			pWnd->GetWindowRect( &rcWnd );
		PaintDockerBkgnd( bClientMapping, dc, rcPaintGradient, rcWnd );
	} // else from if(	bToolbarShade )
	return true;
}

bool CExtPaintManagerOffice2003::PaintDockerBkgnd(
	bool bClientMapping,
	CDC & dc,
	const CRect &rcDst,
	const CRect &rcWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintDockerBkgnd( bClientMapping, dc, rcDst, rcWnd, lParam );
COLORREF clrLeft  = GetColor( _2003CLR_GRADIENT_DARK,  NULL );
COLORREF clrRight = GetColor( _2003CLR_GRADIENT_LIGHT, NULL );
	if( clrLeft == clrRight )
	{
		dc.FillSolidRect( &rcDst, clrLeft );
		return true;
	}
CRect rcDst1( rcDst );
CRect rcDst2( 0, 0, 0, 0 );
bool bRTL = ( (dc.GetLayout()&LAYOUT_RTL) != 0 ) ? true : false;
	if( rcDst.Width() >= 686 ) 
	{
		if( bRTL )
		{
			rcDst2 = rcDst;
			rcDst2.right = rcDst2.left + rcDst1.Width() - 686;
			rcDst1 = rcDst;
			rcDst1.left = rcDst2.right;
		} // if( bRTL )
		else
		{
			rcDst1.right = rcDst1.left + 686;
			rcDst2 = rcDst;
			rcDst2.left = rcDst1.right;
		} // else from if( bRTL )
	} // if( rcDst.Width() >= 686 ) 
	stat_PaintGradientRect( dc, rcDst1, bRTL ? clrRight : clrLeft, bRTL ? clrLeft : clrRight, false, 64 );
	if( ! rcDst2.IsRectNull() )
	{
		if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 16 )
			dc.FillSolidRect( &rcDst2, clrRight );
		else
			stat_PaintGradientRect( dc, rcDst2, clrRight, clrRight, false, 64 );
	}
	return true;
}

void CExtPaintManager::PaintControlBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcClient ) || ( ! dc.RectVisible( &rcClient ) ) )
		return;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
		&&	( ((CExtToolControlBar*)pHelperSrc)->m_bForceNoBalloonWhenRedockable )
		&&	RenderCustomBackground( true, dc, pHelperSrc, lParam )
		)
		return;
	dc.FillSolidRect( &rcClient, GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam ) );
}

void CExtPaintManagerOffice2003::InitTranslatedColors()
{
	ASSERT_VALID( this );

	m_nIdxClrBtnHoverLeft = -1;
	m_nIdxClrBtnHoverRight = -1;
	m_nIdxClrBtnPressedLeft = -1;
	m_nIdxClrBtnPressedRight = -1;
	m_nIdxClrBtnHovPresLeft = -1;
	m_nIdxClrBtnHovPresRight = -1;
	m_nIdxClrTbFillMargin = -1;
	g_PaintManager.m_bUxValidColorsExtracted = false;

	g_PaintManager.InitUserExApi();
	
	CExtPaintManagerXP::InitTranslatedColors();

	if( stat_GetBPP() > 8 )
	{
		if(	OnQueryUseThemeColors() )
		{ 
			// if use WinXP themed colors
			COLORREF clrFillHint, clrAccentHint;
			OnQueryThemeColors( &clrFillHint, &clrAccentHint );

			// xp - menu face
			COLORREF xpclr_MenuLight = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.95, -0.05 );
			xpclr_MenuLight = RGB(
				GetRValue(xpclr_MenuLight) + ::MulDiv( 255 - GetRValue(xpclr_MenuLight), 40, 100 ),
				GetGValue(xpclr_MenuLight) + ::MulDiv( 255 - GetGValue(xpclr_MenuLight), 20, 100 ),
				GetBValue(xpclr_MenuLight) );
			xpclr_MenuLight = CExtBitmap::stat_HLS_Adjust( xpclr_MenuLight, 0.00, 0.06, 0.05 );

			// 2003 - float light
			COLORREF xpclr_FloatFace = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.50, 0.00 );
			
			// xp - rarely used item left side
			COLORREF xpclr_RarelyUsedMenuLeft = RGB(
				( 999L*long(GetRValue(clrFillHint)) ) / 1000L,
				( 995L*long(GetGValue(clrFillHint)) ) / 1000L,
				( 995L*long(GetBValue(clrFillHint)) ) / 1000L );
			
			// xp - control bar background
			COLORREF xpclr_ControlBarBk = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.20, 0.00 );
			
			// xp - orange like light ver
			COLORREF xpclr_Highlight = CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.02, 0.60, 0.45 );
			
			// 2003 - dark orange
			COLORREF clr2003faceIn = CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.00, -0.30, 0.45 );
			
			// xp - blue like dark ver
			COLORREF clrTmp = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.20, 0.00 );
			COLORREF xpclr_HighlightDarked = CExtBitmap::stat_HLS_Adjust( clrTmp, 0.00, -0.25, 0.10 );
			
			// xp - dark selected border
			COLORREF xpclr_HighlightBorder = CExtBitmap::stat_HLS_Adjust( xpclr_HighlightDarked, 0.00, -0.50, 0.00 );
			
			// xp - dark gray separator
			COLORREF xpclr_Separator = RGB(
					( 857L*long(GetRValue(clrFillHint)) ) / 1000L,
					( 857L*long(GetGValue(clrFillHint)) ) / 1000L,
					( 857L*long(GetBValue(clrFillHint)) ) / 1000L );
			
			// xp - dark panel border (for floating controlbars)
			COLORREF xpclr_PanelBorder =
				CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.25, 0.00 );

			m_mapColorTranslate[CLR_3DFACE_OUT] = InstallColor( xpclr_ControlBarBk );
			m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( xpclr_Highlight );
			m_mapColorTranslate[CLR_3DFACE_DISABLED] = COLOR_3DFACE;

			int idxClrDark = InstallColor( xpclr_PanelBorder );

			m_mapColorTranslate[CLR_3DLIGHT_OUT]			= idxClrDark;
			m_mapColorTranslate[CLR_3DLIGHT_IN]				= idxClrDark;
			m_mapColorTranslate[CLR_3DLIGHT_DISABLED]		= idxClrDark;

			m_mapColorTranslate[CLR_3DHILIGHT_OUT]			= idxClrDark;
			m_mapColorTranslate[CLR_3DHILIGHT_IN]			= idxClrDark;
			m_mapColorTranslate[CLR_3DHILIGHT_DISABLED]		= idxClrDark;

			m_mapColorTranslate[CLR_3DSHADOW_OUT]			= idxClrDark;
			m_mapColorTranslate[CLR_3DSHADOW_IN]			= idxClrDark;
			m_mapColorTranslate[CLR_3DSHADOW_DISABLED]		= idxClrDark;

			m_mapColorTranslate[CLR_3DDKSHADOW_OUT]			= idxClrDark;
			m_mapColorTranslate[CLR_3DDKSHADOW_IN]			= idxClrDark;
			m_mapColorTranslate[CLR_3DDKSHADOW_DISABLED]	= idxClrDark;
			
			m_mapColorTranslate[CLR_TEXT_OUT]				= COLOR_WINDOWTEXT;
			m_mapColorTranslate[CLR_TEXT_IN]				= COLOR_WINDOWTEXT;
			m_mapColorTranslate[CLR_TEXT_DISABLED]			= COLOR_GRAYTEXT;
			m_mapColorTranslate[XPCLR_PUSHEDHOVERTEXT]		= COLOR_BTNTEXT;

			// Menu text colors
			m_mapColorTranslate[CLR_MENUTEXT_OUT]			= InstallColor( RGB(0,0,0) );
			m_mapColorTranslate[CLR_MENUTEXT_IN]			= InstallColor( RGB(0,0,0) );
			m_mapColorTranslate[CLR_MENUTEXT_DISABLED]		= COLOR_GRAYTEXT;

			m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL]		= COLOR_3DFACE;
			m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED]	= InstallColor( xpclr_Separator );

			m_mapColorTranslate[XPCLR_3DFACE_DARK]			= InstallColor( xpclr_ControlBarBk );
			m_mapColorTranslate[XPCLR_3DFACE_NORMAL]		= InstallColor( xpclr_MenuLight );
			m_mapColorTranslate[XPCLR_SEPARATOR]			= InstallColor( xpclr_Separator ); 

			m_mapColorTranslate[XPCLR_HILIGHT] =
				//InstallColor( xpclr_HighlightDarked ); 
				InstallColor( clr2003faceIn ); 

			m_mapColorTranslate[XPCLR_HILIGHT_BORDER]			= InstallColor( xpclr_HighlightBorder ); 
			m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= InstallColor( xpclr_HighlightBorder );  
			
			m_mapColorTranslate[XPCLR_RARELY_BORDER]		= InstallColor( xpclr_RarelyUsedMenuLeft );

			m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F]		= InstallColor( xpclr_FloatFace );
			
			// install new colors
			m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] =
				InstallColor(
					( OnQuerySystemTheme() == ThemeLunaSilver )
						? CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.845, 0.10 )
						: CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.43, 0.00 )
					);
			m_mapColorTranslate[_2003CLR_GRADIENT_DARK] =
				InstallColor(
					( OnQuerySystemTheme() == ThemeLunaSilver )
						? CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.45, 0.10 )
						: CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.02, 0.07, 0.00 )
					);

			m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT]      = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.98, 0.00 ) );
			m_mapColorTranslate[_2003CLR_SEPARATOR_DARK]       = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.45, -0.00 ) );
			m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK]     = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.60, 0.00 ) );
			m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT]    = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.95, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT]         = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.10, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_DARK]          = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.60, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_LIGHT]   = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.00, 0.85, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_DARK]    = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.00, -0.05, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_LIGHT] = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.00, 0.30, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_DARK]  = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.00, -0.30, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPGLYPH_LIGHT]       = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.97, 0.00 ) );
			m_mapColorTranslate[_2003CLR_EXPGLYPH_DARK]        = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.97, 0.00 ) );
			m_mapColorTranslate[_2003CLR_STATUSBAR_ITEM]       = COLOR_3DSHADOW;

			COLORREF clrTbGradientLight  = (COLORREF)(-1L);
			COLORREF clrTbGradientMiddle = (COLORREF)(-1L);
			COLORREF clrTbGradientDark   = (COLORREF)(-1L);
			COLORREF clrTbBottomLine     = (COLORREF)(-1L);
			COLORREF clrMlaNormLeft      = (COLORREF)(-1L);
			COLORREF clrMlaNormMiddle    = (COLORREF)(-1L);
			COLORREF clrMlaNormRight     = (COLORREF)(-1L);
			COLORREF clrMlaRarelyLeft    = (COLORREF)(-1L);
			COLORREF clrMlaRarelyMiddle  = (COLORREF)(-1L);
			COLORREF clrMlaRarelyRight   = (COLORREF)(-1L);
			COLORREF clrMenuBorder       = (COLORREF)(-1L);
			COLORREF clrTbbBkTop         = (COLORREF)(-1L);
			COLORREF clrTbbBkBottom      = (COLORREF)(-1L);

			e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
			switch( eCurrentTheme ) 
			{
			case ThemeLunaRoyale:       // +2.87
			case ThemeVistaOrLaterUX:   // +2.87
			case ThemeVistaOrLaterDWM:  // +2.87
			case ThemeLunaBlue:
				clrTbGradientLight  = RGB(221, 236, 254);
				clrTbGradientMiddle = RGB(202, 225, 252);
				clrTbGradientDark   = RGB(110, 155, 216);
				clrTbBottomLine     = RGB(59, 97, 156);
				clrMlaNormLeft      = RGB(227, 239, 255);
				clrMlaNormMiddle    = RGB(202, 225, 252);
				clrMlaNormRight     = RGB(135, 173, 228);
				clrMlaRarelyLeft    = RGB(203, 221, 246);
				clrMlaRarelyMiddle  = RGB(161, 196, 248);
				clrMlaRarelyRight   = RGB(121, 161, 220);
				clrMenuBorder       = RGB(0, 45, 150);
				clrTbbBkTop         = RGB(227, 239, 255);
				clrTbbBkBottom      = RGB(123, 164, 224);
			break;
			case ThemeLunaOlive:
				clrTbGradientLight  = RGB(244, 247, 222);
				clrTbGradientMiddle = RGB(206, 220, 167);
				clrTbGradientDark   = RGB(177, 192, 139);
 				clrTbBottomLine     = RGB(96, 128, 88);
				clrMlaNormLeft      = RGB(255, 255, 237);
				clrMlaNormMiddle    = RGB(206, 219, 167);
				clrMlaNormRight     = RGB(184, 199, 146);
				clrMlaRarelyLeft    = RGB(230, 230, 209);
				clrMlaRarelyMiddle  = RGB(186, 200, 143);
				clrMlaRarelyRight   = RGB(164, 180, 120);
				clrMenuBorder       = RGB(117, 141, 94);
				clrTbbBkTop         = RGB(237, 239, 214);
				clrTbbBkBottom      = RGB(181, 196, 143);
			break;
			case ThemeLunaSilver:
				clrTbGradientLight  = RGB(243, 244, 250);
				clrTbGradientMiddle = RGB(225, 226, 236);
				clrTbGradientDark   = RGB(134, 130, 166);
				clrTbBottomLine     = RGB(124, 124, 148);
				clrMlaNormLeft      = RGB(249, 249, 255);
				clrMlaNormMiddle    = RGB(225, 226, 236);
				clrMlaNormRight     = RGB(159, 157, 185);
				clrMlaRarelyLeft    = RGB(215, 215, 226);
				clrMlaRarelyMiddle  = RGB(184, 185, 202);
				clrMlaRarelyRight   = RGB(128, 126, 158);
				clrMenuBorder       = RGB(124, 124, 148);
				clrTbbBkTop         = RGB(231, 233, 241);
				clrTbbBkBottom      = RGB(172, 170, 194);
			break;
			default:
				clrTbGradientLight  = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.75, 0.15 );
				clrTbGradientMiddle = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.65, 0.15 );
				clrTbGradientDark   = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00,-0.22,-0.25 );
				clrTbBottomLine     = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.60, 0.00 );
				clrMlaNormLeft      = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.75, 0.00 );
				clrMlaNormRight     = CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, -0.10, 0.00 );
				clrMlaNormMiddle    = CExtBitmap::stat_HLS_Adjust( clrMlaNormRight, 0.00, 0.55, 0.00 );
				clrMlaRarelyLeft    = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.30, 0.00 );
				clrMlaRarelyRight   = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.25, 0.00 );
				clrMlaRarelyMiddle  = CExtBitmap::stat_HLS_Adjust( clrMlaRarelyRight, 0.00, 0.55, 0.00 );
				clrMenuBorder       = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.68, 0.00 );
				clrTbbBkTop         = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.75, 0.00 );
				clrTbbBkBottom      = CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, -0.10, 0.00 );
			break;
			} // switch( eCurrentTheme ) 

			m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP]     = InstallColor( clrTbbBkTop );
			m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM]  = InstallColor( clrTbbBkBottom );
			m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT]  = InstallColor( clrTbGradientLight );
			m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( clrTbGradientMiddle );
			m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK]   = InstallColor( clrTbGradientDark );
			m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE]     = InstallColor( clrTbBottomLine );
			m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT]           = InstallColor( clrMlaNormLeft );
			m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE]         = InstallColor( clrMlaNormMiddle );
			m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT]          = InstallColor( clrMlaNormRight );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT]         = InstallColor( clrMlaRarelyLeft );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE]       = InstallColor( clrMlaRarelyMiddle );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT]        = InstallColor( clrMlaRarelyRight );
			m_mapColorTranslate[XPCLR_MENU_BORDER]                = InstallColor( clrMenuBorder );
			m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT]          = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.05, 0.75, 0.00 ) );
			m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT]         = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, -0.05, -0.02, 0.00 ) );
			m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT]        = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.02, 0.40, 0.00 ) );
			m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT]       = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, -0.07, -0.31, 0.00 ) );
			m_mapColorTranslate[_2003CLR_BTN_HP_LEFT]             = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, -0.07, -0.31, 0.00 ) );
			m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT]            = InstallColor( CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.02, 0.40, 0.00 ) );
			// page navigator colors
			m_mapColorTranslate[_2003CLR_PN_BORDER]               = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.10, -0.55, 0.00 ) );
			m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT]        = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.02, -0.23, -0.25 ) );
			m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK]         = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.05, -0.60, 0.00 ) );
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]   = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.45, 0.00 ) );
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]    = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.00, 0.00 ) );
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT]  = m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT];
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]   = m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK];
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE]  = m_mapColorTranslate[_2003CLR_PN_BORDER];
			m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT]           = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.55, 0.20 ) );
			m_mapColorTranslate[_2003CLR_PN_ITEM_DARK]            = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.13, -0.15 ) );

			// Popup menu Expand Button
			m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT]     = InstallColor( GetColor( _2003CLR_MLA_NORM_LEFT, this ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK]      = InstallColor( GetColor( _2003CLR_MLA_NORM_RIGHT, this ) );

			// Button colors
			m_nIdxClrBtnHoverLeft    = _2003CLR_BTN_HOVER_LEFT;
			m_nIdxClrBtnHoverRight   = _2003CLR_BTN_HOVER_RIGHT;
			m_nIdxClrBtnPressedLeft  = _2003CLR_BTN_PRESSED_LEFT;
			m_nIdxClrBtnPressedRight = _2003CLR_BTN_PRESSED_RIGHT;
			m_nIdxClrBtnHovPresLeft  = _2003CLR_BTN_HP_LEFT;
			m_nIdxClrBtnHovPresRight = _2003CLR_BTN_HP_RIGHT;
		
			m_nIdxClrTbFillMargin    = _2003CLR_TOOLBAR_BOTTOM_LINE;

			m_colors[COLOR_3DFACE]      = clrFillHint;
			m_colors[COLOR_3DLIGHT]     = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.45, 0.10 );
			m_colors[COLOR_3DHIGHLIGHT] = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.75, 0.00 );
			m_colors[COLOR_3DSHADOW]    = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.45, 0.10 );
			m_colors[COLOR_3DDKSHADOW]  = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.75, 0.00 );

			// Task Pane Colors
			COLORREF clrTPBkTop    = (COLORREF)(-1L);
			COLORREF clrTPBkBottom = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionTextNormal      = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionTextNormalHover = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionBkLeftNormal    = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionBkRightNormal   = (COLORREF)(-1L);
		
			switch( eCurrentTheme ) 
			{
			case ThemeLunaRoyale:       // +2.87
			case ThemeVistaOrLaterUX:   // +2.87
			case ThemeVistaOrLaterDWM:  // +2.87
			case ThemeLunaBlue:
				clrTPBkTop							= RGB(221, 236, 254);
				clrTPBkBottom						= RGB(74, 122, 201);
				clrTPGroupCaptionTextNormal			= RGB(0, 45, 134);
				clrTPGroupCaptionTextNormalHover	= RGB(0, 45, 134);
				clrTPGroupCaptionBkLeftNormal		= RGB(196, 219, 249);
				clrTPGroupCaptionBkRightNormal		= RGB(101, 143, 224);
			break;
			case ThemeLunaOlive:
				clrTPBkTop							= RGB(243, 242, 231);
				clrTPBkBottom						= RGB(190, 198, 152);
				clrTPGroupCaptionTextNormal			= RGB(90, 107, 70);
				clrTPGroupCaptionTextNormalHover	= RGB(90, 107, 70);
				clrTPGroupCaptionBkLeftNormal		= RGB(210, 223, 174);
				clrTPGroupCaptionBkRightNormal		= RGB(161, 176, 128);
			break;
			case ThemeLunaSilver:
				clrTPBkTop							= RGB(238, 238, 244);
				clrTPBkBottom						= RGB(177, 176, 195);
				clrTPGroupCaptionTextNormal			= RGB(92, 91, 121);
				clrTPGroupCaptionTextNormalHover	= RGB(92, 91, 121);
				clrTPGroupCaptionBkLeftNormal		= RGB(207, 207, 222);
				clrTPGroupCaptionBkRightNormal		= RGB(169, 168, 191);
			break;
			default:
				clrTPBkTop    = CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ),  GetColor( COLOR_WINDOW, this ), 50 );
				clrTPBkBottom = GetColor( COLOR_3DFACE, this );
				clrTPGroupCaptionTextNormal      = GetColor( COLOR_WINDOWTEXT, this );
				clrTPGroupCaptionTextNormalHover = GetColor( COLOR_WINDOWTEXT, this );
				clrTPGroupCaptionBkLeftNormal    = CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ), GetColor( COLOR_WINDOW, this ), 39 );
				clrTPGroupCaptionBkRightNormal   = CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ), GetColor( COLOR_WINDOW, this ), 70 );
			break;
			} // switch( eCurrentTheme ) 
			m_mapColorTranslate[ CLR_TASK_PANE_BK_TOP ]    = InstallColor( clrTPBkTop );
			m_mapColorTranslate[ CLR_TASK_PANE_BK_BOTTOM ] = InstallColor( clrTPBkBottom );

			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL ]              = InstallColor( clrTPGroupCaptionTextNormal );
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED ]      = InstallColor( clrTPGroupCaptionTextNormalHover );
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED ]         = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL ];
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED_HOVERED ] = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED ];

			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_NORMAL]	            = InstallColor( clrTPGroupCaptionBkLeftNormal );
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_HIGHLIGHTED]        = InstallColor( clrTPGroupCaptionBkRightNormal );
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_NORMAL]            = InstallColor( clrTPGroupCaptionBkRightNormal );
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_HIGHLIGHTED]       = InstallColor( clrTPGroupCaptionBkLeftNormal );

		} // if use WinXP themed colors
		else
		{ // if use system colors
			// install new colors
			m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT]         = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ), GetColor( COLOR_WINDOW, this ), 222 ) );
			m_mapColorTranslate[_2003CLR_GRADIENT_DARK]          = COLOR_3DFACE;
			m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT]        = InstallColor( RGB(255,255,255) );
			m_mapColorTranslate[_2003CLR_SEPARATOR_DARK]         = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( COLOR_WINDOW, this ), 0.0, -0.36, -0.80 ) );
			m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK]       = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( COLOR_3DSHADOW, this ), 0.0, 0.20, 0.0 ) );
			m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT]      = COLOR_WINDOW;
			m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT]           = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( COLOR_3DSHADOW, this ), 0.0, 0.70, 0.10 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_DARK]            = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( COLOR_3DSHADOW, this ), 0.0, -0.05, 0.0 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_LIGHT]     = m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_DARK] =
				InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_HILIGHT, this ), 0.0, 0.30, 0.0 ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_LIGHT]   = m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_DARK] =
				InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_HILIGHT, this ), 0.0, 0.60, 0.0 ) );
			m_mapColorTranslate[_2003CLR_EXPGLYPH_LIGHT]         = COLOR_WINDOW;
			m_mapColorTranslate[_2003CLR_EXPGLYPH_DARK]          = COLOR_BTNTEXT;
			m_mapColorTranslate[_2003CLR_STATUSBAR_ITEM]         = COLOR_3DSHADOW;
			
			m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT]          = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_WINDOW, this ), GetColor( XPCLR_3DFACE_NORMAL, this ), 0 ) );
			m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE]        = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, 0.40, 0.00 ) );
			m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT]         = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, -0.04, 0.00 ) );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT]        = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_WINDOW, this ), GetColor( XPCLR_3DFACE_DARK, this ), 500 ) );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE]      = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( _2003CLR_MLA_NORM_RIGHT, this ), 0.00, 0.30, 0.00 ) );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT]       = InstallColor( CExtBitmap::stat_HLS_Adjust( GetColor( _2003CLR_MLA_NORM_RIGHT, this ), 0.00, -0.04, 0.00 ) );

			m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP]    = m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT];
			m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT];

			// Button colors
			m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT]         = InstallColor( GetColor( CLR_3DFACE_IN, this ) );
			m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT]        = InstallColor( GetColor( CLR_3DFACE_IN, this ) );
			m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT]       = InstallColor( GetColor( CLR_3DFACE_IN, this ) );
			m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT]      = InstallColor( GetColor( CLR_3DFACE_IN, this ) );
			m_mapColorTranslate[_2003CLR_BTN_HP_LEFT]            = InstallColor( GetColor( XPCLR_HILIGHT, this ) );
			m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT]           = InstallColor( GetColor( XPCLR_HILIGHT, this ) );

			// page navigator colors
			m_mapColorTranslate[_2003CLR_PN_BORDER]              = InstallColor( GetColor( COLOR_3DSHADOW, this ) );
			m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT]       = InstallColor( GetColor( COLOR_3DLIGHT, this ) );
			m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK]        = InstallColor( GetColor( COLOR_3DSHADOW, this ) );
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]  = InstallColor( GetColor( COLOR_3DHILIGHT, this ) );
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]   = InstallColor( GetColor( COLOR_3DLIGHT, this ) );
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT];
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]  = m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK];
			m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = m_mapColorTranslate[_2003CLR_PN_BORDER];
			m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT]          = InstallColor( GetColor( COLOR_3DHILIGHT, this ) );
			m_mapColorTranslate[_2003CLR_PN_ITEM_DARK]           = InstallColor( GetColor( COLOR_3DLIGHT, this ) );

			// Popup menu Expand Button
			m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT]    = InstallColor( GetColor( XPCLR_3DFACE_NORMAL, this ) );
			m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK]     = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_WINDOW, this ), GetColor( COLOR_3DFACE, this ), 550 ) );

			// Task Pane Colors
			m_mapColorTranslate[ CLR_TASK_PANE_BK_TOP ]          = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ), GetColor( COLOR_WINDOW, this ), 50 ) );			
			m_mapColorTranslate[ CLR_TASK_PANE_BK_BOTTOM ]       = InstallColor( GetColor( COLOR_3DFACE, this ) );			
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL ]              = COLOR_WINDOWTEXT;
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED ]      = COLOR_WINDOWTEXT;
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED ]         = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL ];
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED_HOVERED ] = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED ];

			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_NORMAL ] = 
				InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ),  GetColor( COLOR_WINDOW, this ), 39 ) );			
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_NORMAL ] = 
				InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ), GetColor( COLOR_WINDOW, this ), 70 ) );			
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_HIGHLIGHTED]  = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_NORMAL ];
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_HIGHLIGHTED] = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_NORMAL ];
		} // if use system colors
	} // if( stat_GetBPP() > 8 )
	else
	{
		m_mapColorTranslate[_2003CLR_STATUSBAR_ITEM] = InstallColor( GetColor( COLOR_3DSHADOW, this ) );
	} // else from if( stat_GetBPP() > 8 )
}

void CExtPaintManagerOffice2003::PaintControlBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcClient ) || ( ! dc.RectVisible( &rcClient ) ) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintControlBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	}
CExtToolControlBar * pToolBar = NULL;
CWnd * pFrame = NULL;
	if( pHelperSrc != NULL )
	{
		pToolBar = DYNAMIC_DOWNCAST( CExtToolControlBar, pHelperSrc );
		if( pToolBar != NULL )
		{
			if(	!	(	pToolBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
					||	pToolBar->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) )
					)
				)
			{ // not menu bar, not panel bar
				if( pToolBar->m_pDockSite != NULL )
				{
					if(		pToolBar->m_bForceNoBalloonWhenRedockable
						&&	(! pToolBar->IsFloating() )
						)
						pToolBar = NULL;
					else
					if(		( pToolBar->m_pDockBar == NULL || pToolBar->IsFloating() )
						&&  (!pToolBar->m_bForceBalloonGradientInDialogs)
						)
						pToolBar = NULL;
				} // if( pToolBar->m_pDockSite != NULL )
				else
				{
					CWnd * pWndOwner = pToolBar->GetOwner();
					if( pWndOwner != NULL )
					{
						pFrame =
							DYNAMIC_DOWNCAST( CFrameWnd, pWndOwner );
						if( pFrame == NULL )
						{
							if( (pWndOwner->GetStyle()&WS_CHILD) != 0 )
								pFrame = pWndOwner->GetParentFrame();
						} // if( pFrame == NULL )
						if(		pFrame != NULL 
							&&  (!pToolBar->m_bForceBalloonGradientInDialogs)
							)
						{
							if( pFrame->IsKindOf( RUNTIME_CLASS(CExtMiniDockFrameWnd) ) )
							{ // if ext mini dock frame
							} // if ext mini dock frame
							else
							{
								CControlBar * pDocker =
									((CFrameWnd *)pFrame)->
										GetControlBar( AFX_IDW_DOCKBAR_TOP );
								if( pDocker == NULL )
								{
									pFrame = NULL;
									pToolBar = NULL;
								}
								else if( ! pDocker->IsKindOf(RUNTIME_CLASS(CExtDockOuterBar)) )
								{
									pFrame = NULL;
									pToolBar = NULL;
								}
							}
						} // if( pFrame != NULL )
					} // if( pWndOwner != NULL )
				} // else from if( pToolBar->m_pDockSite != NULL )
			} // not menu bar, not panel bar
		} // if( pToolBar != NULL )
	} // if( pHelperSrc != NULL )
	if(		pToolBar == NULL
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
		if(		pWnd != NULL
			&&	GetCb2DbTransparentMode( pWnd )
			&&	PaintDockerBkgnd( true, dc, pWnd )
			)
			return;
		CExtPaintManagerXP::PaintControlBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	}
CRect rcPaintGradient;
	if( pFrame == NULL )
		pFrame = (pToolBar->m_pDockSite == NULL)
			? pToolBar->GetParent()
			: pToolBar->GetParentFrame()
			;
	ASSERT_VALID( pFrame );
	pFrame->GetClientRect( &rcPaintGradient );
	pFrame->ClientToScreen( &rcPaintGradient );
	pToolBar->ScreenToClient( &rcPaintGradient );
	if(	::IsRectEmpty( &rcPaintGradient )
		|| ( ! dc.RectVisible( &rcPaintGradient ) )
		)
		return;
bool bHorz = true;
	if( pToolBar->IsDocked() )
		bHorz = (! pToolBar->IsDockedVertically() );
	PaintDockerBkgnd( true, dc, pToolBar );
	if(		pToolBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
		||	pToolBar->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) )
		||	(	( pToolBar->m_pDockSite == NULL || pToolBar->m_bPresubclassDialogMode )
			&&	(! pToolBar->m_bForceBalloonGradientInDialogs )
			)
		)
		return; // if dockbar-like background style
	pToolBar->GetWindowRect( &rcPaintGradient );
	pToolBar->ScreenToClient( &rcPaintGradient );
int nIdxClrTbFillMargin = -1;
CRgn _rgnBaloonRight, _rgnBaloonLeft, _rgnBaloonSet;
CSize _sizeRoundedAreaMerics = FixedBar_GetRoundedAreaMerics();
	if( g_PaintManager.m_bIsWin9x )
	{ // region fix for Win9x
		if(		_sizeRoundedAreaMerics.cx > 0
			&&	_sizeRoundedAreaMerics.cx <= 4
			)
			_sizeRoundedAreaMerics.cx +=
				__WIN9X_FIXED_BAR_ROUNDED_AREA_ADJUST_X;
		if(		_sizeRoundedAreaMerics.cy > 0
			&&	_sizeRoundedAreaMerics.cy <= 4
			)
			_sizeRoundedAreaMerics.cy +=
				__WIN9X_FIXED_BAR_ROUNDED_AREA_ADJUST_Y;
	} // region fix for Win9x
	if(		_sizeRoundedAreaMerics.cx > 0
		&&	_sizeRoundedAreaMerics.cy > 0
		&&	pToolBar->IsDocked()
		)
	{ // if balloon style
		nIdxClrTbFillMargin = m_nIdxClrTbFillMargin;
		if( pToolBar->IsBarWithGripper() )
		{
			if(		_rgnBaloonRight.CreateRoundRectRgn(
						0,
						0,
						rcClient.right - rcClient.left,
						rcClient.bottom - rcClient.top,
						_sizeRoundedAreaMerics.cx,
						_sizeRoundedAreaMerics.cy
						)
				&&	_rgnBaloonLeft.CreateRectRgn(
						0,
						0,
						bHorz
							? (_sizeRoundedAreaMerics.cx + 2)
							: (rcClient.right - rcClient.left - 1),
						bHorz
							? (rcClient.bottom - rcClient.top - 1)
							: (_sizeRoundedAreaMerics.cy + 2)
						)
				&&	_rgnBaloonSet.CreateRectRgn( 0, 0, 1, 1 )
				&&	_rgnBaloonSet.CombineRgn(
						&_rgnBaloonLeft,
						&_rgnBaloonRight,
						RGN_OR
						) != ERROR
				)
				dc.SelectClipRgn( &_rgnBaloonSet );
#ifdef _DEBUG
			else
			{
				ASSERT( FALSE );
			}
#endif // _DEBUG
		} // if( pToolBar->IsBarWithGripper() )
		else
		{
			if(	_rgnBaloonSet.CreateRoundRectRgn(
					0,
					0,
					(rcClient.right - rcClient.left - 1),
					(rcClient.bottom - rcClient.top - 1),
					_sizeRoundedAreaMerics.cx,
					_sizeRoundedAreaMerics.cy
					)
				)
			{
				dc.SelectClipRgn( &_rgnBaloonSet );
			}
#ifdef _DEBUG
			else
			{
				ASSERT( FALSE );
			}
#endif // _DEBUG
		} // else from if( pToolBar->IsBarWithGripper() )
	}  // if balloon style
	OnPaintToolBarGradient( dc, rcPaintGradient, bHorz, pHelperSrc, lParam );
	if( nIdxClrTbFillMargin >= 0 )
	{
		CPen _pen( PS_SOLID, 1, GetColor( m_nIdxClrTbFillMargin, pHelperSrc, lParam ) );
		CPen * pOldPen = dc.SelectObject( &_pen );
		CRect rcClient;
		pToolBar->GetClientRect( &rcClient );
		if( bHorz )
		{
			dc.MoveTo( rcClient.left, rcClient.bottom - 2 );
			dc.LineTo( rcClient.right, rcClient.bottom - 2 );
		} // if( bHorz )
		else
		{
			dc.MoveTo( rcClient.right - 2, rcClient.top );
			dc.LineTo( rcClient.right - 2, rcClient.bottom );
		} // else from if( bHorz )
		dc.SelectObject( pOldPen );
	} // if( nIdxClrTbFillMargin >= 0 )
	if( _rgnBaloonSet.GetSafeHandle() != NULL )
		dc.SelectClipRgn( NULL );
}

void CExtPaintManagerNativeXP::PaintControlBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcClient ) || ( ! dc.RectVisible( &rcClient ) ) )
		return;
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintControlBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
		&&	( ((CExtToolControlBar*)pHelperSrc)->m_bForceNoBalloonWhenRedockable )
		&&	RenderCustomBackground( true, dc, pHelperSrc, lParam )
		)
		return;
bool bRebarDrawingStyle = false;
CExtControlBar * pWnd = DYNAMIC_DOWNCAST( CExtControlBar, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		if( pWnd->m_pDockBar->GetSafeHwnd() != NULL )
		{
			ASSERT_VALID( pWnd->m_pDockBar );
			if( pWnd->IsFixedDockStyle() && ( ! pWnd->IsFloating() ) )
				bRebarDrawingStyle = true;
		}
	}
	if( bRebarDrawingStyle )
	{
		CRect rcPaint;
		pWnd->m_pDockBar->GetWindowRect( &rcPaint );
		pWnd->ScreenToClient( &rcPaint );
		if( g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_REBAR ) != NULL )
		{
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					pWnd->GetSafeHwnd(),
					dc.GetSafeHdc(), 
					0, 
					0, 
					&rcPaint, 
					&rcPaint
					) == S_OK
				);
			g_PaintManager.m_UxTheme.CloseThemeData();
		}
	}
	else
		dc.FillSolidRect( &rcClient, ::GetSysColor( COLOR_3DFACE ) );
}

void CExtPaintManagerOffice2003::OnPaintToolBarGradient(
	CDC & dc,
	CRect rcPaintGradient,
	bool bHorz,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrLeft, // = COLORREF(-1L)
	COLORREF clrRight // = COLORREF(-1L)
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( clrLeft != COLORREF(-1L) && clrRight != COLORREF(-1L) )
		stat_PaintGradientRect(  dc, rcPaintGradient, clrLeft, clrRight, bHorz  );
	else
	{
		CExtPaintManagerOffice2003 * pThis = const_cast < CExtPaintManagerOffice2003 * > ( this );
		if( OnQueryUseThemeColors() )
		{
			// if use WinXP themed colors
			COLORREF clrLeft   = pThis->GetColor( _2003CLR_TOOLBAR_GRADIENT_LIGHT,  pHelperSrc, lParam );
			COLORREF clrMiddle = pThis->GetColor( _2003CLR_TOOLBAR_GRADIENT_MIDDLE, pHelperSrc, lParam );
			COLORREF clrRight  = pThis->GetColor( _2003CLR_TOOLBAR_GRADIENT_DARK,   pHelperSrc, lParam );
			stat_PaintGradientRect2steps( dc, rcPaintGradient, clrLeft, clrMiddle, clrRight, bHorz, 5, 11 );
		} // if( OnQueryUseThemeColors() )
		else
		{
			clrLeft = bHorz 
					? pThis->GetColor( _2003CLR_MLA_NORM_RIGHT, pHelperSrc, lParam )
					: pThis->GetColor( _2003CLR_MLA_NORM_LEFT,  pHelperSrc, lParam );
			clrRight = bHorz 
					? pThis->GetColor( _2003CLR_MLA_NORM_LEFT,  pHelperSrc, lParam )
					: pThis->GetColor( _2003CLR_MLA_NORM_RIGHT, pHelperSrc, lParam );
			stat_PaintGradientRect( dc, rcPaintGradient, clrLeft, clrRight, bHorz  );
		} // else from if( OnQueryUseThemeColors() )
	} // else from if( clrLeft != COLORREF(-1L) && clrRight != COLORREF(-1L) )
}

void CExtPaintManagerOffice2003::PaintDockBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		::IsRectEmpty( &rcClient )
		|| ( ! dc.RectVisible( &rcClient ) )
		)
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDockBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	}
CRect rcPaintGradient( 0, 0, 0, 0 );
CExtDockOuterBar * pOuterDocker = NULL;
	if( pHelperSrc != NULL )
	{
		pOuterDocker = DYNAMIC_DOWNCAST( CExtDockOuterBar, pHelperSrc );
		if( pOuterDocker != NULL )
		{
			CFrameWnd * pFrame =
				pOuterDocker->GetParentFrame();
			ASSERT_VALID( pFrame );
			pFrame->GetClientRect( &rcPaintGradient );
			pFrame->ClientToScreen( &rcPaintGradient );
			pOuterDocker->ScreenToClient( &rcPaintGradient );
			if(		::IsRectEmpty( &rcPaintGradient )
				|| ( ! dc.RectVisible( &rcPaintGradient ) )
				)
				return;
		}
	}
	if(		pOuterDocker == NULL
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerXP::PaintDockBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	}
	if( RenderCustomBackground( true, dc, pHelperSrc, lParam ) )
		return;
	PaintDockerBkgnd( true, dc, rcPaintGradient, rcClient );
}

void CExtPaintManagerNativeXP::PaintDockBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcClient ) || ( ! dc.RectVisible( &rcClient ) ) )
		return;
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintDockBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	if( RenderCustomBackground( true, dc, pHelperSrc, lParam ) )
		return;
HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}
	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_REBAR ) != NULL )
	{
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd,
				dc.GetSafeHdc(), 
				0, 
				0, 
				&rcClient, 
				&rcClient
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

CExtPaintManager::PAINTDOCKINGFRAMEDATA::PAINTDOCKINGFRAMEDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_rcWindow( 0,0,0,0 )
	, m_rcClient( 0,0,0,0 )
	, m_bActive( false )
	, m_bFloating( false )
	, m_bExtBar( false )
	, m_bSideBar( false )
{
}

CExtPaintManager::PAINTDOCKINGFRAMEDATA::PAINTDOCKINGFRAMEDATA(
	CObject * pHelperSrc,
	const RECT & rcWindow,
	const RECT & rcClient,
	bool bActive,
	bool bFloating,
	bool bExtBar,
	bool bSideBar // = false
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_rcWindow( rcWindow )
	, m_rcClient( rcClient )
	, m_bActive( bActive )
	, m_bFloating( bFloating )
	, m_bExtBar( bExtBar )
	, m_bSideBar( bSideBar )
{
}

void CExtPaintManager::PaintDockingFrame(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGFRAMEDATA & _pdfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pdfd.m_rcWindow.IsRectEmpty() )
		return;
	dc.ExcludeClipRect( _pdfd.m_rcClient );
CRect rcWnd( _pdfd.m_rcWindow );
COLORREF clr3dFace = GetColor( CLR_3DFACE_OUT, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clr3dHilight = GetColor( CLR_3DHILIGHT_OUT, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clr3dShadow = GetColor( CLR_3DSHADOW_OUT, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clr3dDkShadow = GetColor( CLR_3DDKSHADOW_OUT, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
	if(		_pdfd.m_pHelperSrc != NULL
		&&	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
		&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_pDockSite != NULL )
		&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable )
		)
	{
	}
	else
	{
		dc.FillSolidRect( &rcWnd, clr3dFace );
		if( _pdfd.m_bFloating )
		{
			dc.Draw3dRect( &rcWnd, clr3dFace, clr3dDkShadow);
			rcWnd.DeflateRect( 1, 1 );
			dc.Draw3dRect( &rcWnd, clr3dHilight, clr3dShadow);
		}
		else if( ! _pdfd.m_bExtBar )
				dc.Draw3dRect( &rcWnd, clr3dHilight, clr3dShadow);
	}
	dc.IntersectClipRect( _pdfd.m_rcWindow );
}

void CExtPaintManagerXP::PaintDockingFrame(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGFRAMEDATA & _pdfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pdfd.m_rcWindow.IsRectEmpty() )
		return;
	dc.ExcludeClipRect( _pdfd.m_rcClient );
CRect rcWnd( _pdfd.m_rcWindow );
COLORREF clr3dFace = GetColor( COLOR_3DFACE, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clrDark = GetColor( COLOR_3DSHADOW, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clrBkOld = dc.GetBkColor();
COLORREF clrBkNew =
		GetColor(
			( _pdfd.m_bFloating )
				? (	_pdfd.m_bExtBar ? XPCLR_3DFACE_FLOAT_R : XPCLR_3DFACE_FLOAT_F )
				: CLR_3DFACE_OUT
				,
			_pdfd.m_pHelperSrc,
			_pdfd.m_lParam 
			);
	if( _pdfd.m_bFloating )
	{
		dc.Draw3dRect( &rcWnd, clrDark, clrDark);
		rcWnd.DeflateRect(1,1);
		dc.Draw3dRect( &rcWnd, clrDark, clrDark);
		rcWnd.DeflateRect(1,1);
		dc.Draw3dRect( &rcWnd, clrBkNew, clrBkNew);
		rcWnd.DeflateRect(0,0,1,1);
		dc.SetPixel( rcWnd.left, rcWnd.top, clrDark );
		dc.SetPixel( rcWnd.left, rcWnd.bottom, clrDark );
		dc.SetPixel( rcWnd.right, rcWnd.top, clrDark );
		dc.SetPixel( rcWnd.right, rcWnd.bottom, clrDark );
	} // if( _pdfd.m_bFloating )
	else
	{
		if(		_pdfd.m_pHelperSrc != NULL
			&&	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
			&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_pDockSite != NULL )
			&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable )
			)
		{
			dc.SelectClipRgn(NULL);
			return;
		}
		dc.FillSolidRect( &rcWnd, clrBkNew );
		if( ! _pdfd.m_bExtBar )
			dc.Draw3dRect( &rcWnd, clr3dFace, clr3dFace);

		if(		_pdfd.m_pHelperSrc != NULL
			&&	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
			&&	(!_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) ))
			&&	IsHighContrast()
			)
		{
			CExtToolControlBar * pBar = STATIC_DOWNCAST( CExtToolControlBar, _pdfd.m_pHelperSrc );
			ASSERT_VALID( pBar );

			if( ! pBar->IsFloating() )
			{
				COLORREF clrOldText =  dc.SetTextColor( GetColor( COLOR_3DSHADOW, _pdfd.m_pHelperSrc, _pdfd.m_lParam ) );
				dc.DrawFocusRect( &rcWnd );
				dc.SetTextColor( clrOldText );
			}
		}	
		if(		(!_pdfd.m_bSideBar)
			&&	(::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8 )
			)
		{
			static WORD hatchBits[8] = { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, };
			CBrush br;
			CBitmap bmp;
			bmp.CreateBitmap( 8, 8, 1, 1, hatchBits );
			br.CreatePatternBrush( &bmp );
			LOGBRUSH lbr;
			br.GetLogBrush( &lbr );
			HPEN hPenDesired = ::ExtCreatePen( PS_GEOMETRIC, 1, &lbr, 0, NULL );
			if( hPenDesired == NULL )
			{
				COLORREF clrDesiredSolidPen = GetColor( COLOR_3DSHADOW, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
				hPenDesired = ::CreatePen( PS_SOLID, 1, clrDesiredSolidPen );
				if( hPenDesired == NULL )
				{
					hPenDesired = (HPEN) ::GetStockObject(BLACK_PEN);
					ASSERT( hPenDesired != NULL );
				} // if( hPenDesired == NULL )
			} // if( hPenDesired == NULL )
			CPen pen;
			VERIFY( pen.Attach( hPenDesired ) );
			CPen * pOldPen = dc.SelectObject( &pen );
			if( m_bHelperXpStyle8BitBarRect )
			{
				dc.MoveTo( rcWnd.left, rcWnd.top );
				dc.LineTo( rcWnd.right-1, rcWnd.top );
				dc.LineTo( rcWnd.right-1, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left, rcWnd.top );
			} // if( m_bHelperXpStyle8BitBarRect )
			else
			{
				static const SIZE g_sizeRO = { 2, 2 };
				dc.MoveTo( rcWnd.left+g_sizeRO.cx, rcWnd.top );
				dc.LineTo( rcWnd.right-1-g_sizeRO.cx, rcWnd.top );
				dc.LineTo( rcWnd.right-1, rcWnd.top+g_sizeRO.cy );
				dc.LineTo( rcWnd.right-1, rcWnd.bottom-1-g_sizeRO.cy );
				dc.LineTo( rcWnd.right-1-g_sizeRO.cx, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left+g_sizeRO.cx, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left, rcWnd.bottom-1-g_sizeRO.cy );
				dc.LineTo( rcWnd.left, rcWnd.top+g_sizeRO.cy );
				dc.LineTo( rcWnd.left+g_sizeRO.cx, rcWnd.top );
			} // else from if( m_bHelperXpStyle8BitBarRect )
			dc.SelectObject( pOldPen );
		} // if( !_pdfd.m_bSideBar && ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) < 8 )
	} // else from if( _pdfd.m_bFloating )
	dc.SetBkColor( clrBkOld );
	//dc.IntersectClipRect(rectWindow);
	dc.SelectClipRgn(NULL);
}

void CExtPaintManagerOffice2003::PaintDockingFrame(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGFRAMEDATA & _pdfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pdfd.m_rcWindow.IsRectEmpty() )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDockingFrame( dc, _pdfd );
		return;
	}
	if(		_pdfd.m_bFloating
		//||	(!_pdfd.m_bExtBar)
		//||	_pdfd.m_bSideBar
		||	_pdfd.m_pHelperSrc == NULL
		||	(! _pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtControlBar) ) )
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerXP::PaintDockingFrame( dc, _pdfd );
		return;
	}
}

void CExtPaintManagerNativeXP::PaintDockingFrame(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGFRAMEDATA & _pdfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pdfd.m_rcWindow.IsRectEmpty() )
		return;
	if(		_pdfd.m_pHelperSrc != NULL
		&&	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
		&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_pDockSite != NULL )
		&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable )
		)
		return;
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintDockingFrame( dc, _pdfd );
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pdfd.m_pHelperSrc );
	ASSERT( pWnd != NULL );
	ASSERT_VALID( pWnd );
CRect rcWnd( _pdfd.m_rcWindow );
	dc.ExcludeClipRect( _pdfd.m_rcClient );
	dc.FillSolidRect( &rcWnd, ::GetSysColor( COLOR_3DFACE ) );
bool bRebarDrawingStyle = false;
CExtControlBar * pCB = DYNAMIC_DOWNCAST( CExtControlBar, _pdfd.m_pHelperSrc );
	if( pCB != NULL )
	{
		ASSERT_VALID( pCB );
		if( pCB->m_pDockBar->GetSafeHwnd() != NULL )
		{
			ASSERT_VALID( pCB->m_pDockBar );
			if(		pCB->IsFixedDockStyle() 
				&&	(!pCB->IsFloating())
				)
				bRebarDrawingStyle = true;
		}
	}
	if(		bRebarDrawingStyle 
		&&	(!_pdfd.m_bFloating)
		&&	(!_pdfd.m_bExtBar)
		)
	{
		CRect rcPaint;
		pCB->m_pDockBar->GetWindowRect( &rcPaint );
		pCB->ScreenToClient( &rcPaint );
		CRect rcAdjust( 0, 0, 0, 0 );
		FixedBar_AdjustClientRect( pCB, rcAdjust );
		rcPaint.DeflateRect( &rcAdjust );

		if(	g_PaintManager.m_UxTheme.OpenThemeData( pCB->GetSafeHwnd(), VSCLASS_REBAR ) != NULL )
		{
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					pCB->GetSafeHwnd(),
					dc.GetSafeHdc(), 
					0, 
					0, 
					&rcPaint, 
					&rcPaint
					) == S_OK
				);
			COLORREF clrEdgeShadow = COLORREF( -1L );
			VERIFY( 
				g_PaintManager.m_UxTheme.GetThemeColor(
					RP_BAND, 
					0,
					TMT_EDGESHADOWCOLOR, 
					&clrEdgeShadow
					) == S_OK
				);
			if( clrEdgeShadow != COLORREF( -1L ) )
				dc.Draw3dRect( &rcWnd, ::GetSysColor( COLOR_BTNHIGHLIGHT ), clrEdgeShadow );
			g_PaintManager.m_UxTheme.CloseThemeData();
		}
	}
	if( _pdfd.m_bFloating )
	{
		if(	g_PaintManager.m_UxTheme.OpenThemeData(  pCB->GetSafeHwnd(), VSCLASS_WINDOW ) != NULL )
		{
// !!! TODO
// _pdfd.m_bActive = true;
// !!! TODO
			INT nStateID = _pdfd.m_bActive ? FS_ACTIVE : FS_INACTIVE;
			CRect rcNcLeft( _pdfd.m_rcWindow );
			rcNcLeft.right = _pdfd.m_rcClient.left;
			if( rcNcLeft.Width() > 0 )
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						pCB->GetSafeHwnd(), 
						dc.GetSafeHdc(), 
						WP_SMALLFRAMELEFT, 
						nStateID, 
						&rcNcLeft, 
						&rcNcLeft
						) == S_OK
					);
			}	
			CRect rcNcRight( _pdfd.m_rcWindow );
			rcNcRight.left = _pdfd.m_rcClient.right;
			if( rcNcRight.Width() > 0 )
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						pCB->GetSafeHwnd(), 
						dc.GetSafeHdc(), 
						WP_SMALLFRAMERIGHT, 
						nStateID, 
						&rcNcRight, 
						&rcNcRight
						) == S_OK
					);
			}
			CRect rcNcTop( _pdfd.m_rcWindow );
			rcNcTop.bottom = _pdfd.m_rcClient.top;
			if( rcNcTop.Height() > 0 )
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						pCB->GetSafeHwnd(), 
						dc.GetSafeHdc(), 
						WP_SMALLCAPTION, 
						_pdfd.m_bActive
							? CS_ACTIVE
							: CS_INACTIVE, 
						&rcNcTop, 
						&rcNcTop
						) == S_OK
					);
			}
			CRect rcNcBottom( _pdfd.m_rcWindow );
			rcNcBottom.top = _pdfd.m_rcClient.bottom;
			if( rcNcBottom.Height() > 0 )
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						pCB->GetSafeHwnd(), 
						dc.GetSafeHdc(), 
						WP_SMALLFRAMEBOTTOM, 
						nStateID, 
						&rcNcBottom, 
						&rcNcBottom
						) == S_OK
					);
			}
		} // if( g_PaintManager.m_UxTheme.OpenThemeData ...
	} // if( _pdfd.m_bFloating )
	dc.IntersectClipRect( _pdfd.m_rcWindow );
}

CExtPaintManager::PAINTGRIPPERDATA::PAINTGRIPPERDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_rcGripper( 0,0,0,0 )
	, m_rcText( 0,0,0,0 )
	, m_bActive( false )
	, m_bFloating( false )
	, m_bHorz( false )
	, m_bSideBar( false )
	, m_sCaption( _T("") )
	, m_bHelperNoRect( false )
	, m_bHelperNoFill( false )
	, m_bForceRTL( false )
	, m_bFlashCaptionHighlightedState( false )
	, m_clrFlashCaptionText( COLORREF(-1L) )
	, m_clrFlashCaptionBackground( COLORREF(-1L) )
{
}

CExtPaintManager::PAINTGRIPPERDATA::PAINTGRIPPERDATA(
	CObject * pHelperSrc,
	const RECT & rcGripper,
	const RECT & rcText,
	bool bActive,
	bool bFloating,
	bool bHorz,
	bool bSideBar, // = false
	__EXT_MFC_SAFE_LPCTSTR sCaption, // = NULL
	bool bForceRTL // = false
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_rcGripper( rcGripper )
	, m_rcText( rcText )
	, m_bActive( bActive )
	, m_bFloating( bFloating )
	, m_bHorz( bHorz )
	, m_bSideBar( bSideBar )
	, m_sCaption( (sCaption == NULL) ? _T("") : sCaption )
	, m_bHelperNoRect( false )
	, m_bHelperNoFill( false )
	, m_bForceRTL( bForceRTL )
	, m_bFlashCaptionHighlightedState( false )
	, m_clrFlashCaptionText( COLORREF(-1L) )
	, m_clrFlashCaptionBackground( COLORREF(-1L) )
{
}

void CExtPaintManager::PaintGripper(
	CDC & dc,
	CExtPaintManager::PAINTGRIPPERDATA & _pgd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rectGripper2( _pgd.m_rcGripper );
COLORREF clrBtnShadow =  GetColor( CLR_3DSHADOW_OUT, _pgd.m_pHelperSrc, _pgd.m_lParam );
COLORREF clrBtnHilight = GetColor( CLR_3DHILIGHT_OUT, _pgd.m_pHelperSrc, _pgd.m_lParam );
	if( _pgd.m_bSideBar || _pgd.m_bFloating )
	{
		if( ! _pgd.m_bFloating )
			rectGripper2.DeflateRect( 1, 1 );
#if (defined COLOR_GRADIENTACTIVECAPTION && defined COLOR_GRADIENTACTIVECAPTION)
		ASSERT( COLOR_GRADIENTACTIVECAPTION == 27 );
		ASSERT( COLOR_GRADIENTINACTIVECAPTION == 28 );
#endif
		INT nTextColorIndex = COLOR_HIGHLIGHTTEXT;
		if( _pgd.m_bFlashCaptionHighlightedState )
		{
			ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
			ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
			dc.FillSolidRect( rectGripper2, _pgd.m_clrFlashCaptionBackground );
		} // if( _pgd.m_bFlashCaptionHighlightedState )
		else if( _pgd.m_bSideBar )
		{
#ifdef __FREIWALD_ORIGINAL__
			if( _pgd.m_bFloating || _pgd.m_bActive )
#else
/*
			// draw an active gripper only, 
			// when the bar actually has the focus
			// (and not, whenever it is floating)
*/
			if (_pgd.m_bActive)
#endif
			{
				nTextColorIndex = COLOR_CAPTIONTEXT;
				if( ! _pgd.m_bHelperNoFill )
				{
					if( stat_GetBPP() > 8 )
					{
						COLORREF clrLeft = GetColor( COLOR_ACTIVECAPTION, _pgd.m_pHelperSrc, _pgd.m_lParam );
						COLORREF clrRight = GetColor( 27, _pgd.m_pHelperSrc, _pgd.m_lParam );
						if( (!_pgd.m_bHorz) && _pgd.m_bForceRTL )
						{
							COLORREF clrTemp = clrLeft;
							clrLeft = clrRight;
							clrRight = clrTemp;
						} // if( (!_pgd.m_bHorz) && _pgd.m_bForceRTL )
						stat_PaintGradientRect( dc, rectGripper2, clrLeft, clrRight, _pgd.m_bHorz );
					} // if( stat_GetBPP() > 8 )
					else
						dc.FillSolidRect( rectGripper2, GetColor( COLOR_ACTIVECAPTION, _pgd.m_pHelperSrc, _pgd.m_lParam ) );
				} // if( ! _pgd.m_bHelperNoFill )
			}
			else
			{
				nTextColorIndex = COLOR_INACTIVECAPTIONTEXT;
				if( ! _pgd.m_bHelperNoFill )
				{
					if( stat_GetBPP() > 8 )
					{
						COLORREF clrLeft = GetColor( COLOR_INACTIVECAPTION, _pgd.m_pHelperSrc, _pgd.m_lParam );
						COLORREF clrRight = GetColor( 28, _pgd.m_pHelperSrc, _pgd.m_lParam );
						if( (!_pgd.m_bHorz) && _pgd.m_bForceRTL )
						{
							COLORREF clrTemp = clrLeft;
							clrLeft = clrRight;
							clrRight = clrTemp;
						} // if( (!_pgd.m_bHorz) && _pgd.m_bForceRTL )
						stat_PaintGradientRect( dc, rectGripper2, clrLeft, clrRight, _pgd.m_bHorz );
					} // if( stat_GetBPP() > 8 )
					else
						dc.FillSolidRect( rectGripper2, GetColor( COLOR_INACTIVECAPTION, _pgd.m_pHelperSrc, _pgd.m_lParam ) );
				} // if( !_pgd.m_bHelperNoFill )
			}
		} // else if( _pgd.m_bSideBar )
		else
			dc.FillSolidRect( rectGripper2, GetColor( COLOR_HIGHLIGHT, _pgd.m_pHelperSrc, _pgd.m_lParam ) );
		int nTextLen = 0;
		if(		_pgd.m_sCaption != NULL
			&&	( nTextLen = int(_tcslen(_pgd.m_sCaption)) ) > 0
			&&	(! _pgd.m_rcText.IsRectEmpty() )
			&&	_pgd.m_rcText.right > _pgd.m_rcText.left
			&&	_pgd.m_rcText.bottom > _pgd.m_rcText.top
			)
		{
			COLORREF clrText = _pgd.m_bFlashCaptionHighlightedState ? _pgd.m_clrFlashCaptionText : GetColor( nTextColorIndex, _pgd.m_pHelperSrc, _pgd.m_lParam );
			COLORREF clrOldText = dc.SetTextColor(clrText);
			int nOldBkMode = dc.SetBkMode( TRANSPARENT );
			CFont * pCurrFont = ( _pgd.m_bSideBar && (!_pgd.m_bFloating) ) ? (&m_FontNormalBC) : (&m_FontBoldBC);
			CFont * pOldFont = dc.SelectObject( pCurrFont );
			ASSERT( pOldFont != NULL );
			CRect rcDrawText( _pgd.m_rcText );
			CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
			if( _pgd.m_bHorz )
				eLO = CExtRichContentLayout::__ELOT_270_CW;
			UINT nDtAlign = _pgd.m_bForceRTL ? DT_RIGHT : DT_LEFT;
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, _pgd.m_sCaption, nTextLen, rcDrawText, nDtAlign|DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetBkMode(nOldBkMode);
			dc.SetTextColor(clrOldText);
		}
	} // if( _pgd.m_bSideBar || _pgd.m_bFloating )
	else
	{
		if( _pgd.m_bHorz )
		{
			rectGripper2.DeflateRect( 4, 1, 4, 0 );
			rectGripper2.right = rectGripper2.left + 3;
			dc.Draw3dRect( rectGripper2, clrBtnHilight, clrBtnShadow );
			rectGripper2.OffsetRect( 3, 0 );
			dc.Draw3dRect( rectGripper2, clrBtnHilight, clrBtnShadow );
		} // if( bHorz )
		else
		{
			rectGripper2.OffsetRect( 1, 0 );
			rectGripper2.DeflateRect( 0, 4, 1, 4 );
			rectGripper2.bottom = rectGripper2.top + 3;
			dc.Draw3dRect( rectGripper2, clrBtnHilight, clrBtnShadow );
			rectGripper2.OffsetRect( 0, 3 );
			dc.Draw3dRect( rectGripper2, clrBtnHilight, clrBtnShadow );
		} // else from if( bHorz )
	} // else from if( _pgd.m_bSideBar || _pgd.m_bFloating )
}

void CExtPaintManagerXP::PaintGripper(
	CDC & dc,
	CExtPaintManager::PAINTGRIPPERDATA & _pgd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CRect rectGripper( _pgd.m_rcGripper );
	if( _pgd.m_bSideBar || _pgd.m_bFloating )
	{
		if( _pgd.m_bFlashCaptionHighlightedState )
		{
			ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
			ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
			dc.FillSolidRect( rectGripper, _pgd.m_clrFlashCaptionBackground );
		} // if( _pgd.m_bFlashCaptionHighlightedState )
		else
		{
			COLORREF clrGrip =
				GetColor(
					_pgd.m_bSideBar ? ( _pgd.m_bActive ? COLOR_HIGHLIGHT : XPCLR_3DFACE_DARK ) : COLOR_3DSHADOW,
					_pgd.m_pHelperSrc,
					_pgd.m_lParam 
					);
			if( ! _pgd.m_bHelperNoFill )
				dc.FillSolidRect( rectGripper, clrGrip );
			if(		_pgd.m_bSideBar
				&&	(!_pgd.m_bHelperNoFill)
				&&	(!_pgd.m_bFloating)
				&&	(!_pgd.m_bActive)
				)
			{ // rect border of docked bar caption like VS-.NET-7.0
				COLORREF clrSideRect = GetColor( COLOR_3DSHADOW, _pgd.m_pHelperSrc, _pgd.m_lParam );
				stat_PaintDotNet3dRect( dc, rectGripper, clrSideRect, clrSideRect );
			} // rect border of docked bar caption like VS-.NET-7.0
		} // else from  // if( _pgd.m_bFlashCaptionHighlightedState )
		int nTextLen = 0;
		if(		_pgd.m_sCaption != NULL
			&&	( nTextLen = int(_tcslen(_pgd.m_sCaption)) ) > 0
			&&	(! _pgd.m_rcText.IsRectEmpty() )
			&&	_pgd.m_rcText.right > _pgd.m_rcText.left
			&&	_pgd.m_rcText.bottom > _pgd.m_rcText.top
			)
		{
			e_paint_manager_name_t ePMN = OnQueryPaintManagerName();
			e_system_theme_t eST = OnQuerySystemTheme();
			COLORREF clrText = _pgd.m_clrFlashCaptionText;
			if( ! _pgd.m_bFlashCaptionHighlightedState )
			{
				if(		( ePMN == Studio2005 || ePMN == Studio2008 )
					&&	g_PaintManager.m_bIsWinVistaOrLater
					)
					clrText = GetColor( COLOR_BTNTEXT, _pgd.m_pHelperSrc, _pgd.m_lParam );
				else
				if( _pgd.m_bActive || (! _pgd.m_bSideBar) )
					clrText = GetColor(
							( ( ePMN == Office2003 || ePMN == Studio2005 ) && ( eST == ThemeLunaSilver ) ) ? COLOR_WINDOW : COLOR_HIGHLIGHTTEXT,
							_pgd.m_pHelperSrc, _pgd.m_lParam
							);
				else
					clrText = GetColor( COLOR_BTNTEXT, _pgd.m_pHelperSrc, _pgd.m_lParam );
			}
			COLORREF clrOldText =
				dc.SetTextColor(clrText);
			int nOldBkMode = dc.SetBkMode( TRANSPARENT );
			CFont * pCurrFont = ( _pgd.m_bSideBar ? (&m_FontNormalBC) : (&m_FontBoldBC) );
			CFont * pOldFont = dc.SelectObject( pCurrFont );
			CRect rcDrawText( _pgd.m_rcText );
			CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
			if( _pgd.m_bHorz )
				eLO = CExtRichContentLayout::__ELOT_270_CW;
			UINT nDtAlign = _pgd.m_bForceRTL ? DT_RIGHT : DT_LEFT;
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, _pgd.m_sCaption, nTextLen, rcDrawText, nDtAlign|DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetBkMode( nOldBkMode );
			dc.SetTextColor( clrOldText );
		}
	} // if( _pgd.m_bSideBar || _pgd.m_bFloating )
	else
	{
		COLORREF clrGrip = GetColor( CLR_3DFACE_OUT, _pgd.m_pHelperSrc, _pgd.m_lParam );
		CRect rcGripToClear( _pgd.m_rcGripper );
		rcGripToClear.DeflateRect( 1, 1 );
		if(		_pgd.m_pHelperSrc != NULL
			&&	_pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
			&&	((CControlBar*)_pgd.m_pHelperSrc)->m_pDockSite != NULL
			&&	((CExtToolControlBar*)_pgd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable
			)
		{
		}
		else
			dc.FillSolidRect( rcGripToClear, clrGrip );
		CPen pen;
		pen.CreatePen( PS_SOLID, 1, GetColor( XPCLR_GRIPPER, _pgd.m_pHelperSrc, _pgd.m_lParam ) );
		CPen * pOldPen = dc.SelectObject( &pen );
		if( _pgd.m_bHorz )
		{
			rectGripper.DeflateRect( 4, 1, 6, 2 );
			rectGripper.right = rectGripper.left + 5;
			rectGripper.DeflateRect( 1, 0 );
			CRect rcLine( rectGripper );
			INT nLineCount = rectGripper.Height() / (1 + 1);
			rcLine.top += rcLine.Height() - (1 + 1) * nLineCount;
			rcLine.bottom = rcLine.top + 1;
			for( INT nLine = 0; nLine < nLineCount; nLine++ )
			{
				dc.MoveTo( rcLine.left, rcLine.top + 1 );
				dc.LineTo( rcLine.right, rcLine.bottom );
				rcLine.OffsetRect( 0, 1 + 1 );
			}
		}
		else
		{
			rectGripper.OffsetRect( 1, 0 );
			rectGripper.DeflateRect( 1, 4, 2, 6 );
			rectGripper.bottom = rectGripper.top + 5;
			rectGripper.DeflateRect( 0, 1 );
			CRect rcLine( rectGripper );
			int nLineCount = rectGripper.Width() / (1 + 1);
			rcLine.left += rcLine.Width() - (1 + 1) * nLineCount;
			rcLine.right = rcLine.left + 1;
			for( int nLine = 0; nLine < nLineCount; nLine++ )
			{
				dc.MoveTo( rcLine.left + 1, rcLine.top );
				dc.LineTo( rcLine.right, rcLine.bottom );
				rcLine.OffsetRect( 1 + 1, 0 );
			}
		} // else from if( _pgd.m_bHorz )
		dc.SelectObject( pOldPen );
	} // else from if( _pgd.m_bSideBar || _pgd.m_bFloating )
}

void CExtPaintManagerOffice2003::PaintGripper(
	CDC & dc,
	CExtPaintManager::PAINTGRIPPERDATA & _pgd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintGripper( dc, _pgd );
		return;
	}
bool bStyleOffice2003 = true;
	if(		_pgd.m_bFloating
		//||	_pgd.m_bSideBar
		||	_pgd.m_pHelperSrc == NULL
		||	(!(
				_pgd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtControlBar))
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
				|| _pgd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtDynAutoHideSlider))
#endif
			))
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
		bStyleOffice2003 = false;
CWnd * pBar = NULL;
bool bForceNoBaloon = false;
bool bInactiveResizableBarCapt = false;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
	if(		bStyleOffice2003
		&&	_pgd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtDynAutoHideSlider))
		)
	{ // auto-hide slider
		pBar = STATIC_DOWNCAST( CWnd, _pgd.m_pHelperSrc );
		bInactiveResizableBarCapt = true;
	} // auto-hide slider
	else 
#endif
	if( bStyleOffice2003 )
	{ // non-dockers
		pBar = STATIC_DOWNCAST( CWnd, _pgd.m_pHelperSrc );
		ASSERT_VALID( pBar );
		if( _pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) ) )
		{ // if panel bar
			bForceNoBaloon = true;
		} // if panel bar
		if(		_pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
			&&	((CControlBar*)_pgd.m_pHelperSrc)->m_pDockSite != NULL
			&&	((CExtToolControlBar*)_pgd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable
			)
			bForceNoBaloon = true;
		if( _pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtControlBar) ) )
		{ // if control bar
			if(	((CExtControlBar*)pBar)->m_pDockSite != NULL )
			{ // if docked
				if( ((CExtControlBar*)pBar)->IsFloating() )
					bStyleOffice2003 = false;
			} // if docked
			else
			{ // if simple
				CExtToolControlBar *pToolBar = 
					DYNAMIC_DOWNCAST( CExtToolControlBar, _pgd.m_pHelperSrc );
				if( pToolBar == NULL || ( ! pToolBar->m_bForceBalloonGradientInDialogs ) )
					bForceNoBaloon = true;
			} // if simple
		} // if control bar
		else
		{ // if NOT control bar
			bStyleOffice2003 = false;
		} // if NOT control bar
	} // non-dockers
	if( ! bStyleOffice2003 )
	{
		CExtPaintManagerXP::PaintGripper( dc, _pgd );
		return;
	} // if( !bStyleOffice2003 )
	ASSERT_VALID( pBar );
CRect rcBarWnd, rcBarClient;
	pBar->GetWindowRect( &rcBarWnd );
	pBar->GetClientRect( &rcBarClient );
	pBar->ClientToScreen( &rcBarClient );
	if( _pgd.m_bSideBar || bInactiveResizableBarCapt )
	{ // if resizable bar caption
		_pgd.m_bHelperNoFill = _pgd.m_bHelperNoRect = !_pgd.m_bActive;
		if( _pgd.m_bSideBar )
			bInactiveResizableBarCapt = !_pgd.m_bActive;
		if( bInactiveResizableBarCapt )
		{
			CRect rcHelper( rcBarClient );
			rcHelper.OffsetRect( -rcBarWnd.TopLeft() );
			CRect rcGripper( _pgd.m_rcGripper );
			rcGripper.bottom = rcHelper.top + 4;
			COLORREF clrLeft =
				GetColor( _2003CLR_GRADIENT_LIGHT, _pgd.m_pHelperSrc, _pgd.m_lParam );
			COLORREF clrRight =
				GetColor( _2003CLR_GRADIENT_DARK, _pgd.m_pHelperSrc, _pgd.m_lParam );
			if( _pgd.m_bForceRTL )
			{
				COLORREF clrTemp = clrLeft;
				clrLeft = clrRight;
				clrRight = clrTemp;
			}
			stat_PaintGradientRect( dc, rcGripper, clrLeft, clrRight );
		} // if( bInactiveResizableBarCapt )
		CExtPaintManagerXP::PaintGripper( dc, _pgd );
		return;
	} // if resizable bar caption

	if(		(! pBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar)) )
		&&	(! bForceNoBaloon )
		)
	{ // if toolbar balloon style
		CRect rcPaintGradient( rcBarWnd );
		if( _pgd.m_bHorz )
		{
			rcPaintGradient.top = rcBarClient.top;
			rcPaintGradient.bottom = rcBarClient.bottom; // + 1;
			rcPaintGradient.right = rcBarClient.right;
			rcPaintGradient.OffsetRect( -rcPaintGradient.left, -rcPaintGradient.top + rcBarClient.top - rcBarWnd.top );
		} // if( _pgd.m_bHorz )
		else
		{
			rcPaintGradient.left = rcBarClient.left;
			rcPaintGradient.right = rcBarClient.right; // + 1;
			rcPaintGradient.bottom = rcBarClient.bottom;
			rcPaintGradient.OffsetRect( -rcPaintGradient.left + rcBarClient.left - rcBarWnd.left, -rcPaintGradient.top );
		} // else from if( _pgd.m_bHorz )
		int nIdxClrTbFillMargin = -1;
		CRgn _rgnBaloonSet;
		const CSize _sizeRoundedAreaMerics = FixedBar_GetRoundedAreaMerics();
		if(		_sizeRoundedAreaMerics.cx > 0
			&&	_sizeRoundedAreaMerics.cy > 0
			)
		{ // if balloon style
			nIdxClrTbFillMargin = m_nIdxClrTbFillMargin;
			if(	_rgnBaloonSet.CreateRoundRectRgn(
					rcPaintGradient.left,
					rcPaintGradient.top,
					rcPaintGradient.Width(),
					rcPaintGradient.Height(),
					_sizeRoundedAreaMerics.cx,
					_sizeRoundedAreaMerics.cy
					)
				)
				dc.SelectClipRgn( &_rgnBaloonSet );
		}  // if balloon style
		OnPaintToolBarGradient( dc, rcPaintGradient, _pgd.m_bHorz, _pgd.m_pHelperSrc, _pgd.m_lParam );
		if( nIdxClrTbFillMargin >= 0 )
		{
			CPen _pen( PS_SOLID, 1, GetColor( m_nIdxClrTbFillMargin, _pgd.m_pHelperSrc, _pgd.m_lParam ) );
			CPen  * pOldPen = dc.SelectObject( &_pen );
			if( _pgd.m_bHorz )
			{
				dc.MoveTo( rcPaintGradient.left, rcPaintGradient.bottom-2 );
				dc.LineTo( rcPaintGradient.right, rcPaintGradient.bottom-2 );
			} // if( _pgd.m_bHorz )
			else
			{
				dc.MoveTo( rcPaintGradient.right-2, rcPaintGradient.top );
				dc.LineTo( rcPaintGradient.right-2, rcPaintGradient.bottom );
			} // else from if( _pgd.m_bHorz )
			dc.SelectObject( pOldPen );
		} // if( nIdxClrTbFillMargin >= 0 )

		if( _rgnBaloonSet.GetSafeHandle() != NULL )
			dc.SelectClipRgn( NULL );
	} // if toolbar balloon style
COLORREF clrDotShadow = GetColor( _2003CLR_GRIPPER_DOT_LIGHT, _pgd.m_pHelperSrc, _pgd.m_lParam );
COLORREF clrDotFace = GetColor( _2003CLR_GRIPPER_DOT_DARK, _pgd.m_pHelperSrc, _pgd.m_lParam );
static const CSize g_sizeGripDot( 2, 2 );
static const CSize g_sizeGripDist( 1, 1 );
static const CSize g_sizeGripShadowOffset( 1, 1 );
CRect rcGripHelper( _pgd.m_rcGripper );
CRect rcBarClientW( rcBarClient );
	rcBarClientW.OffsetRect( -rcBarWnd.TopLeft() );
	if( _pgd.m_bHorz )
	{
		rcGripHelper.top = rcBarClientW.top;
		rcGripHelper.bottom = rcBarClientW.bottom;
		rcGripHelper.OffsetRect( 1, 0 );
		rcGripHelper.left += ( rcGripHelper.Width() - g_sizeGripDot.cx ) / 2;
		rcGripHelper.right = rcGripHelper.left + g_sizeGripDot.cx;
		rcGripHelper.DeflateRect( 0, g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
		rcGripHelper.DeflateRect( 0, 1 ); // + 2.27
		rcGripHelper.OffsetRect( 0, -1 ); // + 2.27
		int nDotCount = rcGripHelper.Height() / ( g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
		rcGripHelper.top += rcGripHelper.Height() - ( g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy ) * nDotCount;
		CRect rcDotFace( rcGripHelper );
		rcDotFace.bottom = rcDotFace.top + g_sizeGripDot.cy;
		CRect rcDotShadow( rcDotFace );
		rcDotShadow.OffsetRect( g_sizeGripShadowOffset );
		for( int nDot = 0; nDot < nDotCount; nDot++ )
		{
			dc.FillSolidRect( &rcDotShadow, clrDotShadow );
			dc.FillSolidRect( &rcDotFace, clrDotFace );
			rcDotFace.OffsetRect( 0, g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
			rcDotShadow.OffsetRect( 0, g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
		} // for( int nDot = 0; nDot < nDotCount; nDot++ )
	} // if( _pgd.m_bHorz )
	else
	{
		rcGripHelper.left = rcBarClientW.left;
		rcGripHelper.right = rcBarClientW.right;
		rcGripHelper.OffsetRect( 0, 1 );
		rcGripHelper.top += ( rcGripHelper.Height() - g_sizeGripDot.cy ) / 2;
		rcGripHelper.bottom = rcGripHelper.top + g_sizeGripDot.cy;
		rcGripHelper.DeflateRect( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx, 0 );
		rcGripHelper.OffsetRect( -1, 0 ); // + 2.27
		rcGripHelper.DeflateRect( 1, 0 ); // + 2.27
		int nDotCount = rcGripHelper.Width() / ( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx );
		rcGripHelper.left += rcGripHelper.Width() - ( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx ) * nDotCount;
		CRect rcDotFace( rcGripHelper );
		rcDotFace.right = rcDotFace.left + g_sizeGripDot.cx;
		CRect rcDotShadow( rcDotFace );
		rcDotShadow.OffsetRect( g_sizeGripShadowOffset );
		for( int nDot = 0; nDot < nDotCount; nDot++ )
		{
			dc.FillSolidRect( &rcDotShadow, clrDotShadow );
			dc.FillSolidRect( &rcDotFace, clrDotFace );
			rcDotFace.OffsetRect( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx, 0 );
			rcDotShadow.OffsetRect( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx, 0 );
		} // for( int nDot = 0; nDot < nDotCount; nDot++ )
	} // else from if( _pgd.m_bHorz )
}

void CExtPaintManagerNativeXP::PaintGripper(
	CDC & dc,
	CExtPaintManager::PAINTGRIPPERDATA & _pgd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintGripper( dc, _pgd );
		return;
	}
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pgd.m_pHelperSrc );
	ASSERT( pWnd != NULL );
	ASSERT_VALID( pWnd );
	if(		(!_pgd.m_bSideBar)
		&&	(!_pgd.m_bFloating) 
		)
	{
		if( g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_REBAR ) != NULL )
		{
			INT nPartID = _pgd.m_bHorz ? RP_GRIPPER : RP_GRIPPERVERT;
			CSize szPart(0,0);
			VERIFY( 
				g_PaintManager.m_UxTheme.GetThemePartSize(
					dc.GetSafeHdc(), 
					nPartID, 
					0, 
					NULL, 
					CExtUxTheme::__EXT_UX_TS_TRUE,
					&szPart
					) == S_OK
				);

			CRect rcGripper( 
				0, 
				0, 
				_pgd.m_bHorz ? szPart.cx : _pgd.m_rcGripper.Width(),
				_pgd.m_bHorz ? _pgd.m_rcGripper.Height() : szPart.cy
				);
			rcGripper.OffsetRect(
				_pgd.m_rcGripper.left + ( _pgd.m_rcGripper.Width() - rcGripper.Width() ) / 2,
				_pgd.m_rcGripper.top + ( _pgd.m_rcGripper.Height() - rcGripper.Height() ) / 2
				);

//			if( _pgd.m_bFlashCaptionHighlightedState )
//			{
//				ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
//				ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
//				dc.FillSolidRect(
//					rcGripper,
//					_pgd.m_clrFlashCaptionBackground
//					);
//			} // if( _pgd.m_bFlashCaptionHighlightedState )
//			else
			{
				//VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						pWnd->GetSafeHwnd(),
						dc.GetSafeHdc(), 
						nPartID, 
						0, 
						&rcGripper, 
						&_pgd.m_rcGripper
						//) == S_OK
					);
			} // else from if( _pgd.m_bFlashCaptionHighlightedState )

			g_PaintManager.m_UxTheme.CloseThemeData();
		}
	}
	else
	{
		INT nTextColorIndex = COLOR_HIGHLIGHTTEXT;
		if( !_pgd.m_bFloating )
		{
#if (defined COLOR_GRADIENTACTIVECAPTION && defined COLOR_GRADIENTACTIVECAPTION)
			ASSERT( COLOR_GRADIENTACTIVECAPTION == 27 );
			ASSERT( COLOR_GRADIENTINACTIVECAPTION == 28 );
#endif
			if( _pgd.m_bFlashCaptionHighlightedState )
			{
				ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
				ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
				dc.FillSolidRect( _pgd.m_rcGripper, _pgd.m_clrFlashCaptionBackground );
			} // if( _pgd.m_bFlashCaptionHighlightedState )
			else if( _pgd.m_bActive )
			{
				nTextColorIndex = COLOR_CAPTIONTEXT;
				if( _pgd.m_bFlashCaptionHighlightedState )
				{
					ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
					ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
					dc.FillSolidRect( _pgd.m_rcGripper, _pgd.m_clrFlashCaptionBackground );
				} // if( _pgd.m_bFlashCaptionHighlightedState )
				else if( !_pgd.m_bHelperNoFill )
				{
					if( stat_GetBPP() > 8 )
					{
						COLORREF clrLeft = ::GetSysColor( COLOR_ACTIVECAPTION );
						COLORREF clrRight = ::GetSysColor( 27 );
						if( (!_pgd.m_bHorz) && _pgd.m_bForceRTL )
						{
							COLORREF clrTemp = clrLeft;
							clrLeft = clrRight;
							clrRight = clrTemp;
						}
						stat_PaintGradientRect( dc, _pgd.m_rcGripper, clrLeft, clrRight, _pgd.m_bHorz );
					}
					else
						dc.FillSolidRect( _pgd.m_rcGripper, ::GetSysColor( COLOR_ACTIVECAPTION ) );
				}
			}
			else
			{
				nTextColorIndex = COLOR_INACTIVECAPTIONTEXT;
				if( !_pgd.m_bHelperNoFill )
				{
					if( stat_GetBPP() > 8 )
					{
						COLORREF clrLeft = ::GetSysColor( COLOR_INACTIVECAPTION );
						COLORREF clrRight = ::GetSysColor( 28 );
						if( (!_pgd.m_bHorz) && _pgd.m_bForceRTL )
						{
							COLORREF clrTemp = clrLeft;
							clrLeft = clrRight;
							clrRight = clrTemp;
						}
						stat_PaintGradientRect( dc, _pgd.m_rcGripper, clrLeft, clrRight, _pgd.m_bHorz );
					}
					else
						dc.FillSolidRect( _pgd.m_rcGripper, ::GetSysColor( COLOR_INACTIVECAPTION ) );
				}
			}
		} // if( !_pgd.m_bFloating )
		else
		{
				if( _pgd.m_bFlashCaptionHighlightedState )
				{
					ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
					ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
					dc.FillSolidRect( _pgd.m_rcGripper, _pgd.m_clrFlashCaptionBackground );
				} // if( _pgd.m_bFlashCaptionHighlightedState )
                else
                {
                    // pfortier - change made here to support ViewCelListBox
                    dc.FillSolidRect(_pgd.m_rcGripper, ::GetSysColor(COLOR_INACTIVECAPTION));
                }
		}

		int nTextLen = 0;
		if(		_pgd.m_sCaption != NULL
			&&	( nTextLen = int(_tcslen(_pgd.m_sCaption)) ) > 0
			&&	(! _pgd.m_rcText.IsRectEmpty() )
			&&	_pgd.m_rcText.right > _pgd.m_rcText.left
			&&	_pgd.m_rcText.bottom > _pgd.m_rcText.top
			)
		{
			COLORREF clrText = _pgd.m_bFlashCaptionHighlightedState ? _pgd.m_clrFlashCaptionText : ::GetSysColor( nTextColorIndex ) ;
			COLORREF clrOldText =
				dc.SetTextColor(clrText);
			int nOldBkMode = dc.SetBkMode( TRANSPARENT );
			CFont * pCurrFont = ( _pgd.m_bSideBar && (!_pgd.m_bFloating) ) ? (&m_FontNormalBC) : (&m_FontBoldBC) ;
			CFont * pOldFont = dc.SelectObject( pCurrFont );
			ASSERT( pOldFont != NULL );
			CRect rcDrawText( _pgd.m_rcText );
			CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
			if( _pgd.m_bHorz )
				eLO = CExtRichContentLayout::__ELOT_270_CW;
			UINT nDtAlign = _pgd.m_bForceRTL ? DT_RIGHT : DT_LEFT;
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, _pgd.m_sCaption, nTextLen, rcDrawText, nDtAlign|DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetBkMode(nOldBkMode);
			dc.SetTextColor(clrOldText);
		}
	}
}

CSize CExtPaintManager::GetPushedOffset()
{
	ASSERT_VALID( this );
	return CSize( 1, 1 );
}

CSize CExtPaintManagerXP::GetPushedOffset()
{
	ASSERT_VALID( this );
	return CSize( 0, 0 );
}

CSize CExtPaintManagerNativeXP::GetPushedOffset()
{
	ASSERT_VALID( this );
	if( g_PaintManager.m_UxTheme.IsControlsThemed() )
		return CSize( 0, 0 );
	return CExtPaintManager::GetPushedOffset();
}

#define __XP_DSS_MONO DSS_MONO

void CExtPaintManagerXP::InitTranslatedColors()
{
	ASSERT_VALID( this );

	m_DSS_DISABLED_style = __XP_DSS_MONO;

	CExtPaintManager::InitTranslatedColors();

	if( ! IsHighContrast() )
	{
		int nBitsPerPixel = stat_GetBPP();
		
		COLORREF clrSysWindow = ::GetSysColor(COLOR_WINDOW);
		COLORREF clrSys3dFace = ::GetSysColor(COLOR_3DFACE);
		COLORREF clrSys3dHilight = ::GetSysColor(COLOR_3DHILIGHT);
		COLORREF clrSys3dShadow = ::GetSysColor(COLOR_3DSHADOW);
		COLORREF clrSys3dDkShadow = ::GetSysColor(COLOR_3DDKSHADOW);
		COLORREF clrSysBtnText = ::GetSysColor(COLOR_BTNTEXT);
		
		COLORREF xpclr_MenuLight = clrSysWindow;
		COLORREF xpclr_ControlBarBk = clrSys3dFace;
		COLORREF xpclr_Highlight = clrSys3dFace;
		COLORREF xpclr_Separator = clrSys3dShadow;
		COLORREF xpclr_Gripper = clrSys3dShadow;
		COLORREF xpclr_PanelBorder = clrSys3dShadow;
		COLORREF xpclr_RarelyUsedMenuLeft = clrSys3dShadow;
		COLORREF xpclr_HighlightDarked = clrSys3dShadow;
		COLORREF xpclr_HighlightBorder = clrSysBtnText;
		
		if( nBitsPerPixel > 8 )
		{
			// xp - menu face
			xpclr_MenuLight =
				CExtBitmap::stat_RGB_Enlight(
				::GetSysColor( COLOR_3DFACE ), 
				::GetSysColor( COLOR_WINDOW ),
				143
				);
			
			// xp - rarely used item left side
			xpclr_RarelyUsedMenuLeft =
				CExtBitmap::stat_RGB_Enlight(
				::GetSysColor( COLOR_3DFACE ), 
				::GetSysColor( COLOR_3DSHADOW ),
				90
				);
			
			// xp - control bar background
			xpclr_ControlBarBk =
				CExtBitmap::stat_RGB_Enlight(
				::GetSysColor( COLOR_WINDOW ), 
				::GetSysColor( COLOR_3DFACE ),
				165
				);
			
			// xp - blue like light ver
			xpclr_Highlight =
				CExtBitmap::stat_RGB_Enlight(
				::GetSysColor( COLOR_HIGHLIGHT ), 
				::GetSysColor( COLOR_WINDOW ),
				30
				);
			
			// xp - blue like dark ver
			xpclr_HighlightDarked =
				CExtBitmap::stat_RGB_Enlight(
				::GetSysColor( COLOR_HIGHLIGHT ), 
				::GetSysColor( COLOR_WINDOW ),
				50
				);
			
			// xp - blue dark selected border
			xpclr_HighlightBorder = 
				::GetSysColor( COLOR_HIGHLIGHT );
			
			// xp - dark gray separator
			xpclr_Separator = 
				CExtBitmap::stat_RGB_Enlight(
				::GetSysColor( COLOR_3DSHADOW ), 
				::GetSysColor( COLOR_WINDOW ),
				70
				);

			// xp - dark gray gripper
			xpclr_Gripper = 
				CExtBitmap::stat_RGB_Enlight(
				::GetSysColor( COLOR_3DSHADOW ), 
				::GetSysColor( COLOR_WINDOW ),
				50
				);
			
			// xp - dark panel border (for floating control bars)
			xpclr_PanelBorder =
				RGB(
				( 750L*long(GetRValue(clrSys3dShadow)) + 250L*long(GetRValue(clrSys3dDkShadow)) ) / 1000L,
				( 750L*long(GetGValue(clrSys3dShadow)) + 250L*long(GetGValue(clrSys3dDkShadow)) ) / 1000L,
				( 750L*long(GetBValue(clrSys3dShadow)) + 250L*long(GetBValue(clrSys3dDkShadow)) ) / 1000L
				);
		} // if( nBitsPerPixel > 8 )
		
		m_mapColorTranslate[CLR_3DFACE_OUT]				= InstallColor( xpclr_ControlBarBk );
		m_mapColorTranslate[CLR_3DFACE_IN]				= InstallColor( xpclr_Highlight );
		m_mapColorTranslate[CLR_3DFACE_DISABLED]		= COLOR_3DFACE;
		
		int idxClrDark = InstallColor( xpclr_PanelBorder );
		
		m_mapColorTranslate[CLR_3DLIGHT_OUT]			= idxClrDark;
		m_mapColorTranslate[CLR_3DLIGHT_IN]				= idxClrDark;
		m_mapColorTranslate[CLR_3DLIGHT_DISABLED]		= idxClrDark;
		
		m_mapColorTranslate[CLR_3DHILIGHT_OUT]			= idxClrDark;
		m_mapColorTranslate[CLR_3DHILIGHT_IN]			= idxClrDark;
		m_mapColorTranslate[CLR_3DHILIGHT_DISABLED]		= idxClrDark;
		
		m_mapColorTranslate[CLR_3DSHADOW_OUT]			= idxClrDark;
		m_mapColorTranslate[CLR_3DSHADOW_IN]			= idxClrDark;
		m_mapColorTranslate[CLR_3DSHADOW_DISABLED]		= idxClrDark;
		
		m_mapColorTranslate[CLR_3DDKSHADOW_OUT]			= idxClrDark;
		m_mapColorTranslate[CLR_3DDKSHADOW_IN]			= idxClrDark;
		m_mapColorTranslate[CLR_3DDKSHADOW_DISABLED]	= idxClrDark;
		
		m_mapColorTranslate[CLR_TEXT_OUT]				= COLOR_WINDOWTEXT;
		m_mapColorTranslate[CLR_TEXT_IN] =
			InstallColor(
				(nBitsPerPixel > 8)
					? RGB(0,0,0)
					: clrSys3dHilight
			);
		
		m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL]		= COLOR_3DFACE;
		m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED]	= InstallColor( xpclr_Separator );
		
		m_mapColorTranslate[XPCLR_PUSHEDHOVERTEXT]			= COLOR_HIGHLIGHTTEXT;
		
		m_mapColorTranslate[XPCLR_3DFACE_DARK]				= InstallColor( xpclr_ControlBarBk );
		m_mapColorTranslate[XPCLR_3DFACE_NORMAL]			= InstallColor( xpclr_MenuLight );
		m_mapColorTranslate[XPCLR_SEPARATOR]				= InstallColor( xpclr_Separator ); 
		
		m_mapColorTranslate[XPCLR_RARELY_BORDER]			= InstallColor( xpclr_RarelyUsedMenuLeft );
		
		m_mapColorTranslate[CLR_TEXT_DISABLED]				= COLOR_GRAYTEXT;

		// Menu text colors
		m_mapColorTranslate[CLR_MENUTEXT_OUT]				= COLOR_WINDOWTEXT;
		m_mapColorTranslate[CLR_MENUTEXT_IN]				= m_mapColorTranslate[CLR_TEXT_IN];
		m_mapColorTranslate[CLR_MENUTEXT_DISABLED]			= COLOR_GRAYTEXT;
		m_mapColorTranslate[XPCLR_HILIGHT]					= InstallColor( xpclr_HighlightDarked ); 
		m_mapColorTranslate[XPCLR_HILIGHT_BORDER]			= InstallColor( xpclr_HighlightBorder ); 
		m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= InstallColor( xpclr_HighlightBorder ); 
		
		m_mapColorTranslate[XPCLR_MENU_BORDER] =
			InstallColor(
				CExtBitmap::stat_RGB_Enlight(
					::GetSysColor( COLOR_BTNTEXT ), 
					::GetSysColor( COLOR_BTNSHADOW ),
					20
					)
				);
		
		m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R]		= InstallColor( xpclr_MenuLight );
		m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F]		= InstallColor( GetColor( CLR_3DFACE_OUT, this ) );

		m_mapColorTranslate[XPCLR_GRIPPER]				= InstallColor( xpclr_Gripper ); 		
		
		// Task Pane Colors
		m_mapColorTranslate[CLR_TASK_PANE_BK_TOP]		= InstallColor( xpclr_MenuLight );
		m_mapColorTranslate[CLR_TASK_PANE_BK_BOTTOM]	= InstallColor( xpclr_MenuLight );
		
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL] = 
			COLOR_WINDOWTEXT;
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED] = 
			COLOR_WINDOWTEXT;
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED] = 
			COLOR_WINDOWTEXT;
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED_HOVERED] =
			COLOR_WINDOWTEXT;
	}
	else
	{
		m_mapColorTranslate[CLR_3DFACE_IN]						= COLOR_HIGHLIGHT;

		m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL]		= COLOR_3DFACE;
		m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED]	= COLOR_3DSHADOW;
		
		m_mapColorTranslate[XPCLR_PUSHEDHOVERTEXT]				= COLOR_HIGHLIGHTTEXT;
		
		m_mapColorTranslate[XPCLR_3DFACE_DARK]					= COLOR_3DFACE;
		m_mapColorTranslate[XPCLR_3DFACE_NORMAL]				= COLOR_3DFACE;
		m_mapColorTranslate[XPCLR_SEPARATOR]					= COLOR_3DSHADOW; 
		
		m_mapColorTranslate[XPCLR_RARELY_BORDER]				= COLOR_3DFACE;

		m_mapColorTranslate[XPCLR_HILIGHT]						= COLOR_HIGHLIGHT; 
		m_mapColorTranslate[XPCLR_HILIGHT_BORDER]				= InstallColor( RGB(255,255,255) );
		m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]		= InstallColor( RGB(0,0,0) );
		
		m_mapColorTranslate[XPCLR_MENU_BORDER]					= InstallColor( RGB(255,255,255) );

		m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R]				= COLOR_3DFACE;
		m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F]				= COLOR_3DFACE;
	
		m_mapColorTranslate[XPCLR_GRIPPER]						= COLOR_3DSHADOW;
	}
}

void CExtPaintManagerXP::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if( _ppbd.m_pHelperSrc != NULL )
	{
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ppbd.m_pHelperSrc );
		if( pTBB != NULL )
		{
			if( pTBB->IsRibbonPaintingMode() )
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
			CExtToolControlBar * pBar = pTBB->GetBar();
			if(		pBar != NULL
				&&	pBar->IsKindOf( RUNTIME_CLASS( CExtRibbonPage ) )
				&&	(! pTBB->IsNoRibbonLayout() )
				&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtBarMdiRightButton ) ) )
				)
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
		} // if( pTBB != NULL )
	} // if( _ppbd.m_pHelperSrc != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

bool bRTL = _ppbd.IsRTL();

	if( !_ppbd.m_bEnabled )
	{
		_ppbd.m_bHover = false;
		_ppbd.m_bDrawFocusRect = false;
		_ppbd.m_bIndeterminate = false;
	} // if( ! _ppbd.m_bEnabled )

COLORREF clrOldText = dc.GetTextColor();
COLORREF clrOldBk = dc.GetBkColor();
int nOldBkMode = dc.SetBkMode( TRANSPARENT );

int nIdxMainGradientLeft = -1;
int nIdxMainGradientRight = -1;
COLORREF bgColor, bgColorDD;
	if( _ppbd.m_clrForceBk != ((COLORREF)-1L) )
		bgColor = bgColorDD = _ppbd.m_clrForceBk;
	else if(_ppbd.m_bHover 
		||	_ppbd.m_bPushed 
		||	_ppbd.m_bIndeterminate
		||	_ppbd.m_bPushedDropDown 
		||	_ppbd.m_bDefaultPushButton
		)
	{
		bgColor = bgColorDD = GetColor( CLR_3DFACE_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
		if( _ppbd.m_bPushed || _ppbd.m_bPushedDropDown || _ppbd.m_bDefaultPushButton )
		{
			if( _ppbd.m_bDefaultPushButton )
				bgColorDD = bgColor = dc.GetNearestColor( stat_HLS_Adjust( GetColor( XPCLR_HILIGHT ), 0.0, 0.2, 0.0 ) );
			if( _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )
				(( _ppbd.m_bPushedDropDown ) ? bgColorDD : bgColor ) =
					GetColor( _ppbd.m_bHover ? XPCLR_HILIGHT : CLR_3DFACE_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam  );
		}
		if(		(!_ppbd.m_bHover)
			&&	_ppbd.m_bPushed
			&&	(!_ppbd.m_bPushedDropDown)
			&&	_ppbd.m_bSeparatedDropDown
			)
			bgColorDD =  GetColor( CLR_3DFACE_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
		if( _ppbd.m_bIndeterminate && ( !_ppbd.m_bHover ) && ( !_ppbd.m_bPushed ) )
			bgColor = dc.GetNearestColor( stat_HLS_Adjust( bgColor, 0.0, 0.5, 0.5 ) );
		
		if( _ppbd.m_bHover || ( _ppbd.m_bDefaultPushButton && (! _ppbd.m_bPushed ) ) )
		{
			if( _ppbd.m_bPushed )
			{
				nIdxMainGradientLeft = m_nIdxClrBtnHovPresLeft;
				nIdxMainGradientRight = m_nIdxClrBtnHovPresRight;
			} // if( _ppbd.m_bPushed )
			else
			{
				nIdxMainGradientLeft = m_nIdxClrBtnHoverLeft;
				nIdxMainGradientRight = m_nIdxClrBtnHoverRight;
			} // else from if( _ppbd.m_bPushed )
		} // if( _ppbd.m_bHover )
		else if( _ppbd.m_bPushed )
		{
			nIdxMainGradientLeft = m_nIdxClrBtnPressedLeft;
			nIdxMainGradientRight = m_nIdxClrBtnPressedRight;
		} // else if( _ppbd.m_bPushed )
	} // if(	_ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bIndeterminate || _ppbd.m_bPushedDropDown )
	else
	{
		bgColor = bgColorDD =
			GetColor(
				_ppbd.m_bFlat ? CLR_3DFACE_OUT : COLOR_3DFACE,
				_ppbd.m_pHelperSrc,
				_ppbd.m_lParam 
				);
	}

COLORREF clrDkBorder =
		GetColor(
			(_ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )
				? XPCLR_HILIGHT_BORDER
				: ( _ppbd.m_bFlat ? XPCLR_HILIGHT_BORDER : COLOR_3DSHADOW )
				,
			_ppbd.m_pHelperSrc,
			_ppbd.m_lParam 
			);
bool bPushedDropDown = false;
	if( (_ppbd.m_bPushed && !_ppbd.m_bSeparatedDropDown)
		|| _ppbd.m_bPushedDropDown
		)
		bPushedDropDown = true;

CRect rectClient( _ppbd.m_rcClient );
CRect rectCaption( _ppbd.m_rcClient );
CRect rectDropDown( 0, 0, 0, 0 );
	if( _ppbd.m_bDropDown )
	{
		rectDropDown = rectClient;
		if( _ppbd.m_bHorz )
		{
			if( bRTL )
			{
				rectCaption.left += _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.right = rectCaption.left + 1;
			} // if( bRTL )
			else
			{
				rectCaption.right -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.left = rectCaption.right - 1;
			} // else from if( bRTL )
		} // if( _ppbd.m_bHorz )
		else
		{
			rectCaption.bottom -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
			rectDropDown.top = rectCaption.bottom - 1;
		} // if( _ppbd.m_bHorz )

		if(		(! _ppbd.m_bTransparentBackground )
			&&	( _ppbd.m_bHover || _ppbd.m_bPushedDropDown )
			||	_ppbd.m_clrForceBk != ((COLORREF)-1L)
			)
			dc.FillSolidRect( &rectDropDown, bgColorDD );

		if( _ppbd.m_bSeparatedDropDown )
		{
			rectClient = rectCaption;

			if( bPushedDropDown )
			{
				if( (!_ppbd.m_bFlat) || _ppbd.m_bDrawBorder )
					dc.Draw3dRect( rectDropDown, clrDkBorder, clrDkBorder );
			} // if( bPushedDropDown )
			else
			{
				if( (!_ppbd.m_bFlat) || (_ppbd.m_bHover && _ppbd.m_bDrawBorder) )
					dc.Draw3dRect( rectDropDown, clrDkBorder, clrDkBorder );
			} // else from if( bPushedDropDown )
		} // if( _ppbd.m_bSeparatedDropDown )
	} // if( _ppbd.m_bDropDown )

	if(		( ! _ppbd.m_bTransparentBackground ) 
		||	_ppbd.m_bIndeterminate
		||	_ppbd.m_clrForceBk != ((COLORREF)-1L)
		)
	{
		if( nIdxMainGradientLeft >= 0 && nIdxMainGradientRight >= 0 )
		{
			COLORREF clrLeft  = GetColor( _ppbd.m_bHorz ? nIdxMainGradientRight : nIdxMainGradientLeft, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
			COLORREF clrRight = GetColor( _ppbd.m_bHorz ? nIdxMainGradientLeft : nIdxMainGradientRight, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
			if( _ppbd.m_bDefaultPushButton && ( ! ( _ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bPushedDropDown ) ) )
			{
				clrLeft  = dc.GetNearestColor( stat_HLS_Adjust( clrLeft,  0.0, 0.2, 0.0 ) );
				clrRight = dc.GetNearestColor( stat_HLS_Adjust( clrRight, 0.0, 0.2, 0.0 ) );
			}
			stat_PaintGradientRect( dc, rectClient, clrLeft, clrRight, _ppbd.m_bHorz );
		} // if( nIdxMainGradientLeft >= 0 && nIdxMainGradientRight >= 0 )
		else
			dc.FillSolidRect( &rectClient, bgColor );
	} // if( ! _ppbd.m_bTransparentBackground . . .
	// Draw pressed button
	if( _ppbd.m_bPushed || _ppbd.m_bIndeterminate || _ppbd.m_bPushedDropDown )
	{
		if( (!_ppbd.m_bFlat) || _ppbd.m_bDrawBorder )
			dc.Draw3dRect( rectClient, clrDkBorder, clrDkBorder );
	} // if( bPushed . . .
	else // ...else draw non pressed button
	{
		if( _ppbd.m_bFlat )
		{
			if( _ppbd.m_bHover && _ppbd.m_bDrawBorder )
				dc.Draw3dRect( rectClient, clrDkBorder, clrDkBorder );
		} // if( _ppbd.m_bFlat )
		else
		{
			dc.Draw3dRect( rectClient, clrDkBorder, clrDkBorder );
			if( _ppbd.m_bHover )
				dc.Draw3dRect( _ppbd.m_rcClient, clrDkBorder, clrDkBorder );
		}  // else from if( _ppbd.m_bFlat )
	} // else from if( _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )

	if( _ppbd.m_bDropDown && (! _ppbd.m_bNoDropDownArrow ) )
	{
		CRect rectGlyph( rectDropDown );
		if( bPushedDropDown )
			rectGlyph.OffsetRect( GetPushedOffset() );
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			RGB(0,0,0),
		};
		bool bSetDefaultColorForDD = true;
		if( _ppbd.m_bEnabled )
		{
			if( m_clrCustomDropDownGlyphEnabled != COLORREF(-1L) )
			{
				ColorValues[1] = m_clrCustomDropDownGlyphEnabled;
				bSetDefaultColorForDD = false;
			}
		}
		else
		{
			if( m_clrCustomDropDownGlyphDisabled != COLORREF(-1L) )
			{
				ColorValues[1] = m_clrCustomDropDownGlyphDisabled;
				bSetDefaultColorForDD = false;
			}
		}
		if( bSetDefaultColorForDD )
			ColorValues[1] =
				GetColor(
					_ppbd.m_bEnabled
						? COLOR_BTNTEXT
						: COLOR_3DSHADOW
						,
					_ppbd.m_pHelperSrc,
					_ppbd.m_lParam 
					);
		if( bRTL && (rectGlyph.Width()&1) == 0 )
			rectGlyph.right++;
		PaintGlyphCentered(
			dc,
			rectGlyph,
			_ppbd.m_bHorz ? g_glyph_btn_expand_bottom : g_glyph_btn_expand_right,
			ColorValues
			);
	} // if( _ppbd.m_bDropDown && (! _ppbd.m_bNoDropDownArrow ) )

	dc.SetBkColor( bgColor );

	rectCaption.DeflateRect( _ppbd.m_rcBorderSizes );
	rectClient = rectCaption;
CRect rcFocus( rectCaption );

	// Draw icon
	if(		rectClient.bottom > rectClient.top
		&&	rectClient.right > rectClient.left
		)
		PaintPushButtonIcon( dc, rectClient, rectCaption, rcFocus, _ppbd );

CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;

	// Draw text
	if(		rectCaption.bottom > rectCaption.top
		&&	rectCaption.right > rectCaption.left
		&&	(!sTitle.IsEmpty())
		)
		PaintPushButtonText( dc, rectCaption, _ppbd );

	// Draw focus rectangle
	if(		_ppbd.m_bDrawFocusRect 
		&&	( ( !sTitle.IsEmpty() ) || _ppbd.m_nFocusMode == __EBFM_CLIENT_AREA )
		&&	rcFocus.bottom > rcFocus.top 
		&&	rcFocus.right > rcFocus.left
		)
	{
		rcFocus.DeflateRect( 2, 2 );
		dc.DrawFocusRect( &rcFocus );
	}

	dc.SetBkMode( nOldBkMode );
	dc.SetBkColor( clrOldBk );
	dc.SetTextColor( clrOldText );
}

void CExtPaintManagerXP::PaintPushButtonText(
	CDC & dc,
	CRect & rcCaption,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;
bool bRTL = _ppbd.IsRTL();
	if(		rcCaption.bottom > rcCaption.top
		&&	rcCaption.right > rcCaption.left
		&&	(!sTitle.IsEmpty())
		)
	{
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		if( _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )
		{
			CSize sizePushedOffset = GetPushedOffset();
			rcCaption.OffsetRect(sizePushedOffset);
		}
		if( _ppbd.m_bEnabled ) 
		{
			if( _ppbd.m_bHover || _ppbd.m_bPushed )
			{
				if(			_ppbd.m_bPushed
						&&	_ppbd.m_clrForceTextPressed != ((COLORREF)-1L)
						)
						dc.SetTextColor( _ppbd.m_clrForceTextPressed );
				else if(	_ppbd.m_bHover
						&&	_ppbd.m_clrForceTextHover != ((COLORREF)-1L)
						)
						dc.SetTextColor( _ppbd.m_clrForceTextHover );
				else if( _ppbd.m_clrForceTextNormal != ((COLORREF)-1L) ) 
						dc.SetTextColor( _ppbd.m_clrForceTextNormal );
				else
						dc.SetTextColor( GetColor( COLOR_BTNTEXT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ) );
			}
			else 
			{
				dc.SetTextColor( 
					( _ppbd.m_clrForceTextNormal == ((COLORREF)-1L) )
						? GetColor( 
							( _ppbd.m_bHover && _ppbd.m_bPushed ) ? XPCLR_PUSHEDHOVERTEXT : COLOR_BTNTEXT, 
							_ppbd.m_pHelperSrc, 
							_ppbd.m_lParam 
							)
						: _ppbd.m_clrForceTextNormal
					);
			}
		}
		else 
			dc.SetTextColor(
				( _ppbd.m_clrForceTextDisabled == ((COLORREF)-1L) )
					? GetColor( CLR_TEXT_DISABLED, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
					: _ppbd.m_clrForceTextDisabled
				);
		CFont * pOldBtnFont = NULL;
		CFont * pCurrFont = NULL;
		if( _ppbd.m_hFont != NULL )
			pCurrFont = CFont::FromHandle( _ppbd.m_hFont );
		else
		{
			if( _ppbd.m_bDefaultPushButton )
				pCurrFont = &m_FontBold;
			else
				pCurrFont = &m_FontNormal;
		} // else from if( _ppbd.m_hFont != NULL )
		ASSERT( pCurrFont != NULL );
		pOldBtnFont = dc.SelectObject( pCurrFont );

		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( ! _ppbd.m_bHorz )
			eLO = CExtRichContentLayout::__ELOT_90_CW;
		CRect rcTextLocation( 0, 0, 0, 0);
		UINT nDtMeasureFlags = DT_LEFT | DT_TOP | DT_CALCRECT | ((bRTL || _ppbd.m_bForceRtlText) ? DT_RTLREADING : 0);
		if( _ppbd.m_bWordBreak )
		{
			rcTextLocation = rcCaption;
			rcTextLocation.OffsetRect( -rcTextLocation.TopLeft() );
			rcTextLocation.bottom = rcTextLocation.top;
			nDtMeasureFlags |= DT_WORDBREAK;
		}
		else
			nDtMeasureFlags |= DT_SINGLELINE;

		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, LPCTSTR(sTitle), rcTextLocation, nDtMeasureFlags, 0
			);
		if(		( bRTL || _ppbd.m_bForceRtlText )
			&&	eLO == CExtRichContentLayout::__ELOT_NORMAL
			&&	_ppbd.m_pHelperSrc != NULL
			&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtButton) )
			)
			rcTextLocation.InflateRect( 0, 0, 2, 0 ); // TO-FIX: incorrect horizontally-oriented text position on RTL buttons
		rcTextLocation.OffsetRect( rcCaption.TopLeft() - rcTextLocation.TopLeft() );
			
		UINT nDtDrawFlags = 0;
		if( (_ppbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			nDtDrawFlags |= DT_RIGHT;
			rcTextLocation.OffsetRect(
				rcCaption.Width() - rcTextLocation.Width(),
				0
				);
		}
		else if( (_ppbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			nDtDrawFlags |= DT_CENTER;
			rcTextLocation.OffsetRect(
				( rcCaption.Width() - rcTextLocation.Width() ) / 2,
				0
				);
		}
		else
			nDtDrawFlags |= DT_LEFT;
			
		if( (_ppbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			nDtDrawFlags |= DT_BOTTOM;
			rcTextLocation.OffsetRect(
				0,
				rcCaption.Height() - rcTextLocation.Height()
				);
		}
		else if( (_ppbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
		{
			nDtDrawFlags |= DT_TOP;
		}
		else
		{
			nDtDrawFlags |= DT_VCENTER;
			rcTextLocation.OffsetRect(
				0,
				( rcCaption.Height() - rcTextLocation.Height() ) / 2
				);
		}

		if( _ppbd.m_bWordBreak )
			nDtDrawFlags |= DT_WORDBREAK;
		else
			nDtDrawFlags |= DT_SINGLELINE;

		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, LPCTSTR(sTitle), rcTextLocation, nDtDrawFlags, 0
			);
		dc.SelectObject( pOldBtnFont );
		dc.SetBkMode( nOldBkMode );
	}
}

void CExtPaintManagerNativeXP::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintPushButton( dc, _ppbd );
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	if( _ppbd.m_bIndeterminate )
		_ppbd.m_bPushed = true;

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if( _ppbd.m_pHelperSrc != NULL )
	{
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ppbd.m_pHelperSrc );
		if( pTBB != NULL )
		{
			if( pTBB->IsRibbonPaintingMode() )
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
			CExtToolControlBar * pBar = pTBB->GetBar();
			if(		pBar != NULL
				&&	pBar->IsKindOf( RUNTIME_CLASS( CExtRibbonPage ) )
				&&	(! pTBB->IsNoRibbonLayout() )
				&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtBarMdiRightButton ) ) )
				)
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
		} // if( pTBB != NULL )
	} // if( _ppbd.m_pHelperSrc != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

HWND hWnd = NULL;
CWnd * pWnd =
		DYNAMIC_DOWNCAST(
			CWnd,
			_ppbd.m_pHelperSrc
			);
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

enum ButtonDrawingMode
{
	eModeControl,
	eModeToolBar,
	eModeMenuBar,
	eModePopupMenu,
	eModeDatePicker,
	eModeToolBox,
};

bool bHorizontal = true;

ButtonDrawingMode aDrawingMode = eModeControl;
	if( _ppbd.m_pHelperSrc != NULL  )
	{
		if(		_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) ) 
			&&	(! (_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarSliderButton ) )
				&&	_ppbd.m_lParam == CExtBarSliderButton::__ESA_THUMB) )
			)
		{
			CExtBarButton * pBarButton = (CExtBarButton*)_ppbd.m_pHelperSrc;
			CExtToolControlBar * pToolBar = DYNAMIC_DOWNCAST( CExtToolControlBar, pBarButton->GetBar() );
			ASSERT( pToolBar != NULL );
			
			if( pToolBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar)) )
				aDrawingMode = eModeMenuBar;
			else
				aDrawingMode = eModeToolBar;

			if( ! pBarButton->GetNoRotateVerticalLayout() )
			{
				if( pToolBar->IsDockedVertically() )
					bHorizontal = false;
			}
		}
		else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) ) )
		{
			aDrawingMode = eModePopupMenu;
		}
#ifndef __EXT_MFC_NO_DATE_PICKER
		else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDatePickerWnd ) ) )
		{
			aDrawingMode = eModeDatePicker;
		}
#endif // #ifndef __EXT_MFC_NO_DATE_PICKER
#ifndef __EXT_MFC_NO_TOOLBOX_CTRL
		else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtToolBoxWnd ) ) )
		{
			aDrawingMode = eModeToolBox;
		}
#endif // #ifndef __EXT_MFC_NO_TOOLBOX_CTRL
	}

bool bRTL = _ppbd.IsRTL();

CRect rectClient( _ppbd.m_rcClient );
CRect rectCaption( _ppbd.m_rcClient );
CRect rectDropDown( 0, 0, 0, 0 );
	if( _ppbd.m_bDropDown )
	{
		rectDropDown = rectClient;
		if( _ppbd.m_bHorz )
		{
			if( bRTL )
			{
				rectCaption.left += _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.right = rectCaption.left;
			}
			else
			{
				rectCaption.right -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.left = rectCaption.right;
			}
		}
		else
		{
			rectCaption.bottom -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
			rectDropDown.top = rectCaption.bottom;
		}
	} // if( _ppbd.m_bDropDown )

	if(		aDrawingMode == eModeToolBar 
		||	aDrawingMode == eModePopupMenu
		)
	{
		if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_TOOLBAR ) != NULL )
		{
			if( _ppbd.m_bDropDown )
			{
				if(! _ppbd.m_bNoDropDownArrow )
				{
					if( _ppbd.m_bSeparatedDropDown )
					{
						INT nStateID = 
							(!_ppbd.m_bEnabled)
								? TS_DISABLED
								: ( _ppbd.m_bPushed && (!_ppbd.m_bChecked) )
									? TS_PRESSED
									: ( _ppbd.m_bHover || _ppbd.m_bPushedDropDown )
										? ( _ppbd.m_bChecked ? TS_HOTCHECKED : TS_HOT )
										: ( _ppbd.m_bChecked ? TS_CHECKED : TS_NORMAL );

						VERIFY( 
							g_PaintManager.m_UxTheme.DrawBackground(
								hWnd,
								dc.GetSafeHdc(), 
								TP_SPLITBUTTON, 
								nStateID, 
								&rectCaption, 
								&rectCaption
								) == S_OK
							);

						nStateID = 
							(!_ppbd.m_bEnabled)
								? TS_DISABLED
								: _ppbd.m_bPushedDropDown
									? TS_PRESSED
									: _ppbd.m_bHover
										? ( _ppbd.m_bChecked ? TS_HOTCHECKED : TS_HOT )
										: ( _ppbd.m_bChecked ? TS_CHECKED : TS_NORMAL );
						VERIFY( 
							g_PaintManager.m_UxTheme.DrawBackground(
								hWnd,
								dc.GetSafeHdc(), 
								TP_SPLITBUTTONDROPDOWN, 
								nStateID, 
								&rectDropDown, 
								&rectDropDown
								) == S_OK
							);
					}
					else
					{
						INT nStateID = 
							(!_ppbd.m_bEnabled)
								? TS_DISABLED
								: ( _ppbd.m_bPushed && (!_ppbd.m_bChecked) )
									? TS_PRESSED
									: _ppbd.m_bHover
										? ( _ppbd.m_bChecked ? TS_HOTCHECKED : TS_HOT )
										: ( _ppbd.m_bChecked ? TS_CHECKED : TS_NORMAL );
						VERIFY( 
							g_PaintManager.m_UxTheme.DrawBackground(
								hWnd,
								dc.GetSafeHdc(), 
								TP_DROPDOWNBUTTON, 
								nStateID, 
								&rectClient, 
								&rectClient
								) == S_OK
							);
						VERIFY( 
							g_PaintManager.m_UxTheme.DrawBackground(
								hWnd,
								dc.GetSafeHdc(), 
								TP_SPLITBUTTONDROPDOWN, 
								_ppbd.m_bEnabled ? TS_NORMAL : TS_DISABLED, 
								&rectDropDown, 
								&rectDropDown
								) == S_OK
							);

					} // if( _ppbd.m_bSeparatedDropDown )
				} // if(! _ppbd.m_bNoDropDownArrow )
			}
			else
			{
				INT nStateID = 
					(!_ppbd.m_bEnabled)
						? TS_DISABLED
						: ( _ppbd.m_bPushed && (!_ppbd.m_bChecked) )
							? TS_PRESSED
							: _ppbd.m_bHover
								? ( _ppbd.m_bChecked ? TS_HOTCHECKED : TS_HOT )
								: ( _ppbd.m_bChecked ? TS_CHECKED : TS_NORMAL );
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWnd,
						dc.GetSafeHdc(), 
						TP_BUTTON, 
						nStateID, 
						&rectClient, 
						&rectClient
						) == S_OK
					);
			} // if( _ppbd.m_bDropDown )

			g_PaintManager.m_UxTheme.CloseThemeData();
		}			
	}
	else if(	aDrawingMode == eModeControl 
			||	aDrawingMode == eModeDatePicker
			||	aDrawingMode == eModeToolBox
			)
	{
		if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_BUTTON ) != NULL )
		{
			INT nPartID = BP_PUSHBUTTON;
			INT nStateID = 
				(!_ppbd.m_bEnabled)
					? PBS_DISABLED
					: ( _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )
						? PBS_PRESSED
						: _ppbd.m_bHover
							? PBS_HOT
							: ( _ppbd.m_bDefaultPushButton || _ppbd.m_bDrawFocusRect )
								? PBS_DEFAULTED
								: PBS_NORMAL;		
			if( ! g_PaintManager.m_UxTheme.DrawBackground(
					hWnd,
					dc.GetSafeHdc(), 
					nPartID, 
					nStateID, 
					&rectClient, 
					&rectClient
					) == S_OK
				)
				CExtPaintManager::PaintPushButton( dc, _ppbd );

			if( _ppbd.m_bDropDown )
			{
				CRect rcGlyph( rectDropDown );
				rcGlyph.OffsetRect( 
					_ppbd.m_bHorz ? -1 : 0, 
					_ppbd.m_bHorz ?  0 : -1
					);

				COLORREF ColorValues[2] = { RGB(0,0,0), ::GetSysColor( _ppbd.m_bEnabled ? COLOR_BTNTEXT : COLOR_GRAYTEXT ) };
				if( bRTL && (rcGlyph.Width()&1) != 0 )
					rcGlyph.right++;
				PaintGlyphCentered(
					dc,
					rcGlyph,
					_ppbd.m_bHorz ? g_glyph_btn_expand_bottom : g_glyph_btn_expand_right,
					ColorValues
					);

				if( _ppbd.m_bSeparatedDropDown )
				{
					CRect rcSeparator( rectDropDown );
					if( _ppbd.m_bHorz )
						rcSeparator.right = rcSeparator.left + 2;
					else
						rcSeparator.bottom = rcSeparator.top + 2;
					rcSeparator.OffsetRect( 
						_ppbd.m_bHorz ? -1 : 0, 
						_ppbd.m_bHorz ?  0 : -1
						);
					rcSeparator.DeflateRect(
						_ppbd.m_bHorz ? 0 : 4, 
						_ppbd.m_bHorz ? 4 : 0
						);
					dc.Draw3dRect( &rcSeparator, ::GetSysColor( COLOR_3DSHADOW ), ::GetSysColor( COLOR_WINDOW ) );
				}
			}

			g_PaintManager.m_UxTheme.CloseThemeData();
		}			
	} 
	else if( aDrawingMode == eModeMenuBar )
	{
		if(		_ppbd.m_bEnabled
			&&	( _ppbd.m_bPushed || _ppbd.m_bHover )
			)
			dc.FillSolidRect( &rectClient, ::GetSysColor( COLOR_HIGHLIGHT ) );
	}
	else 
	{
		ASSERT( FALSE );
		return;
	}

COLORREF clrOldText = dc.GetTextColor();
COLORREF clrOldBk = dc.GetBkColor();
int nOldBkMode = dc.SetBkMode( TRANSPARENT );

	rectCaption.DeflateRect( _ppbd.m_rcBorderSizes );
	rectClient = rectCaption;
CRect rcFocus( rectCaption );

	// Draw icon
	if(		rectClient.bottom > rectClient.top
		&&	rectClient.right > rectClient.left
		)
		PaintPushButtonIcon( dc, rectClient, rectCaption, rcFocus, _ppbd );

CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;

	// Draw text
	if(		rectCaption.bottom > rectCaption.top
		&&	rectCaption.right > rectCaption.left
		&&	(!sTitle.IsEmpty())
		)
		PaintPushButtonText( dc, rectCaption, _ppbd );

	// Draw focus rectangle
	if(		_ppbd.m_bDrawFocusRect 
		&&	( ( !sTitle.IsEmpty() ) || _ppbd.m_nFocusMode == __EBFM_CLIENT_AREA )
		&&	rcFocus.bottom > rcFocus.top 
		&&	rcFocus.right > rcFocus.left
		)
	{
		rcFocus.DeflateRect( 2, 2 );
		dc.DrawFocusRect( &rcFocus );
	}

	dc.SetBkMode( nOldBkMode );
	dc.SetBkColor( clrOldBk );
	dc.SetTextColor( clrOldText );
}

void CExtPaintManagerNativeXP::PaintPushButtonText(
	CDC & dc,
	CRect & rcCaption,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintPushButtonText( dc, rcCaption, _ppbd );
		return;
	}
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
bool bMenuBar = false;
	if( _ppbd.m_pHelperSrc != NULL  )
	{
		if(		_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) ) 
			&&	(! (_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarSliderButton ) )
				&&	_ppbd.m_lParam == CExtBarSliderButton::__ESA_THUMB) )
			)
		{
			CExtBarButton * pBarButton = (CExtBarButton*)_ppbd.m_pHelperSrc;
			CExtToolControlBar * pToolBar = DYNAMIC_DOWNCAST( CExtToolControlBar, pBarButton->GetBar() );
			ASSERT( pToolBar != NULL );
			if( pToolBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar)) )
				bMenuBar = true;
		}
	}
CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;
bool bRTL = _ppbd.IsRTL();
	if(		rcCaption.bottom > rcCaption.top
		&&	rcCaption.right > rcCaption.left
		&&	(!sTitle.IsEmpty())
		)
	{
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		if( _ppbd.m_bPushed )
		{
			CSize sizePushedOffset = GetPushedOffset();
			rcCaption.OffsetRect( sizePushedOffset );
		}
		if( _ppbd.m_bEnabled )
		{
			if( _ppbd.m_bHover || _ppbd.m_bPushed )
			{
				if(		_ppbd.m_bPushed
					&&	_ppbd.m_clrForceTextPressed != ((COLORREF)-1L)
					)
					dc.SetTextColor( _ppbd.m_clrForceTextPressed );
				else if(	_ppbd.m_bHover
						&&	_ppbd.m_clrForceTextHover != ((COLORREF)-1L)
						)
						dc.SetTextColor( _ppbd.m_clrForceTextHover );
				else if( _ppbd.m_clrForceTextNormal != ((COLORREF)-1L) ) 
						dc.SetTextColor( _ppbd.m_clrForceTextNormal );
				else
					dc.SetTextColor( 
						bMenuBar 
							? ::GetSysColor( COLOR_HIGHLIGHTTEXT ) 
							: ::GetSysColor( COLOR_BTNTEXT ) 
						);
			}
			else 
				dc.SetTextColor( 
					( _ppbd.m_clrForceTextNormal == ((COLORREF)-1L) )
						? ::GetSysColor( COLOR_BTNTEXT )
						: _ppbd.m_clrForceTextNormal
					);
		}
		else
			dc.SetTextColor(
				( _ppbd.m_clrForceTextDisabled == ((COLORREF)-1L) )
					? ::GetSysColor( COLOR_3DFACE )
					: _ppbd.m_clrForceTextDisabled
				);
		CFont * pOldBtnFont = NULL;
		CFont * pCurrFont = NULL;
		if( _ppbd.m_hFont != NULL )
			pCurrFont = CFont::FromHandle(_ppbd.m_hFont);
		else
		{
			if( _ppbd.m_bDefaultPushButton )
				pCurrFont = &m_FontBold;
			else
				pCurrFont = &m_FontNormal;
		} // else from if( _ppbd.m_hFont != NULL )

		ASSERT( pCurrFont != NULL );
		pOldBtnFont = dc.SelectObject( pCurrFont );
		ASSERT( pOldBtnFont != NULL );

		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( ! _ppbd.m_bHorz )
			eLO = CExtRichContentLayout::__ELOT_90_CW;
		CRect rcTextLocation( 0, 0, 0, 0);
		UINT nDtMeasureFlags = DT_LEFT | DT_TOP | DT_CALCRECT | ((bRTL || _ppbd.m_bForceRtlText) ? DT_RTLREADING : 0);
		if( _ppbd.m_bWordBreak )
		{
			rcTextLocation = rcCaption;
			rcTextLocation.OffsetRect( -rcTextLocation.TopLeft() );
			rcTextLocation.bottom = rcTextLocation.top;
			nDtMeasureFlags |= DT_WORDBREAK;
		}
		else
			nDtMeasureFlags |= DT_SINGLELINE;

		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, LPCTSTR(sTitle), rcTextLocation, nDtMeasureFlags, 0
			);
		if(		( bRTL || _ppbd.m_bForceRtlText )
			&&	eLO == CExtRichContentLayout::__ELOT_NORMAL
			&&	_ppbd.m_pHelperSrc != NULL
			&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtButton) )
			)
			rcTextLocation.InflateRect( 0, 0, 2, 0 ); // TO-FIX: incorrect horizontally-oriented text position on RTL buttons
		rcTextLocation.OffsetRect( rcCaption.TopLeft() - rcTextLocation.TopLeft() );
			
		UINT nDtDrawFlags = 0;
		if( (_ppbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			nDtDrawFlags |= DT_RIGHT;
			rcTextLocation.OffsetRect(
				rcCaption.Width() - rcTextLocation.Width(),
				0
				);
		}
		else if( (_ppbd.m_nTextAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			nDtDrawFlags |= DT_CENTER;
			rcTextLocation.OffsetRect(
				( rcCaption.Width() - rcTextLocation.Width() ) / 2,
				0
				);
		}
		else
			nDtDrawFlags |= DT_LEFT;
		
		if( (_ppbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			nDtDrawFlags |= DT_BOTTOM;
			rcTextLocation.OffsetRect(
				0,
				rcCaption.Height() - rcTextLocation.Height()
				);
		}
		else if( (_ppbd.m_nTextAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
		{
			nDtDrawFlags |= DT_TOP;
		}
		else
		{
			nDtDrawFlags |= DT_VCENTER;
			rcTextLocation.OffsetRect(
				0,
				( rcCaption.Height() - rcTextLocation.Height() ) / 2
				);
		}

		if( _ppbd.m_bWordBreak )
			nDtDrawFlags |= DT_WORDBREAK;
		else
			nDtDrawFlags |= DT_SINGLELINE;

		if( _ppbd.m_bPushed )
		{
			CSize szPushedOffset = GetPushedOffset();
			rcTextLocation.OffsetRect( szPushedOffset );
		}

		if( _ppbd.m_bForceUseDrawTextApiH )
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC, LPCTSTR(sTitle), &rcTextLocation, nDtDrawFlags, 0
				);
		else
		{
			if(		_ppbd.m_bEnabled 
				||	_ppbd.m_clrForceTextDisabled != ((COLORREF)-1L)
				)
				CExtRichContentLayout::stat_DrawText(
					CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
					dc.m_hDC, LPCTSTR(sTitle), &rcTextLocation, nDtDrawFlags, 0
					);
			else
			{
				CRect rcDrawTextOffs = rcTextLocation;
				rcDrawTextOffs.OffsetRect( 1, 1 );
				COLORREF clrTextRestore = dc.SetTextColor( GetColor( COLOR_3DHILIGHT, _ppbd.m_pHelperSrc, _ppbd.m_lParam ) );
				CExtRichContentLayout::stat_DrawText(
					CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
					dc.m_hDC, LPCTSTR(sTitle), &rcDrawTextOffs, nDtDrawFlags, 0
					);
				dc.SetTextColor( GetColor( COLOR_3DSHADOW, _ppbd.m_pHelperSrc, _ppbd.m_lParam ) );
				CExtRichContentLayout::stat_DrawText(
					CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
					dc.m_hDC, LPCTSTR(sTitle), rcTextLocation, nDtDrawFlags, 0
					);
				dc.SetTextColor( clrTextRestore );
			} // else from if( _ppbd.m_bEnabled )
		} // else from if( _ppbd.m_bForceUseDrawTextApiH )
		dc.SelectObject(pOldBtnFont);
		dc.SetBkMode( nOldBkMode );
	}
}

void CExtPaintManagerNativeXP::PaintPushButtonIcon(
	CDC & dc,
	CRect & rcClient,
	CRect & rcCaption,
	CRect & rcFocus,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintPushButtonIcon(
			dc,
			rcClient,
			rcCaption,
			rcFocus,
			_ppbd
			);
		return;
	}

	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;

bool bRTL = _ppbd.IsRTL();
bool bDrawIcon = true;

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
bool bRibbonMode = false;
	if(		_ppbd.m_pHelperSrc != NULL
		&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtRibbonButton) )
		)
	{ // ribbon button
		bRibbonMode = true;
		CExtRibbonButton * pTBB = STATIC_DOWNCAST( CExtRibbonButton, _ppbd.m_pHelperSrc );
		INT nILV = pTBB->RibbonILV_Get();
		if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
		{
			bDrawIcon = false;
			INT nTextToIconDistance = Ribbon_GetTextToIconDistance( dc, nILV, pTBB, _ppbd.m_lParam );
//			CSize _sizeIcon = _ppbd.m_pIcon->GetSize();
			CSize _sizeIcon = Ribbon_GetIconSize( pTBB, nILV, _ppbd.m_lParam );
			CRect rcIconPaint = rcCaption;
			CRect rcCP = pTBB->OnRibbonGetContentPadding();
			rcIconPaint.bottom = rcIconPaint.top + _sizeIcon.cx + rcCP.bottom + nTextToIconDistance;
			rcIconPaint.DeflateRect( rcCP.left, rcCP.top, rcCP.right, 0 );
			rcCaption.top += _sizeIcon.cy + nTextToIconDistance + rcCP.top + rcCP.bottom;
			rcCaption.DeflateRect( rcCP.left, 0, rcCP.right, rcCP.bottom );
			if( _ppbd.m_pIcon != NULL && (! _ppbd.m_pIcon->IsEmpty()) )
			{
				PaintIcon(
					dc,
					_ppbd.m_bHorz,
					_ppbd.m_pIcon,
					rcIconPaint,
					_ppbd.m_bPushed,
					_ppbd.m_bEnabled,
					_ppbd.m_bHover,
					_ppbd.m_nIconAlignment,
					_ppbd.m_bForceRtlLayout && _ppbd.m_bHorz,
					NULL,
					NULL,
					&_ppbd.m_rcIconMargins,
					_ppbd.m_clrCustomAccentEffectForIcon
					);
			}
		} // if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
	} // ribbon button
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

	// Draw the icon
	if(		bDrawIcon
		&&	rcClient.bottom > rcClient.top
		&&	rcClient.right > rcClient.left
		)
	{
		if(		_ppbd.m_pIcon != NULL 
			&&	(! _ppbd.m_pIcon->IsEmpty()) 
			)
		{
			PaintIcon(
				dc,
				_ppbd.m_bHorz,
				_ppbd.m_pIcon,
				rcClient,
				_ppbd.m_bPushed,
				_ppbd.m_bEnabled,
				_ppbd.m_bHover,
				_ppbd.m_nIconAlignment,
				_ppbd.m_bForceRtlLayout && _ppbd.m_bHorz,
				NULL,
				&rcCaption,
				&_ppbd.m_rcIconMargins,
				_ppbd.m_clrCustomAccentEffectForIcon
				);
			
			if( _ppbd.m_nFocusMode == __EBFM_CAPTION_AREA )
				rcFocus = rcCaption;

			if(		_ppbd.m_bHorz
				&&	_ppbd.m_pHelperSrc != NULL
				&&	_ppbd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtPopupMenuWnd))
				)
			{	
				// if painting tool button with icon in popup menu
				if( bRTL )
					rcCaption.right -= 3;
				else
					rcCaption.left += 3;
			}

			if( ! rcCaption.IsRectEmpty() )
			{
				if( _ppbd.m_bHorz )
				{
					rcCaption.DeflateRect( 
						_ppbd.m_rcTextMargins.left,
						_ppbd.m_rcTextMargins.top,
						_ppbd.m_rcTextMargins.right,
						_ppbd.m_rcTextMargins.bottom
						);
				}
				else
				{
					rcCaption.DeflateRect( 
						_ppbd.m_rcTextMargins.top,
						_ppbd.m_rcTextMargins.right,
						_ppbd.m_rcTextMargins.bottom,
						_ppbd.m_rcTextMargins.left
						);			
				}
			}
		}
		else
		{
			if(		_ppbd.m_pHelperSrc != NULL
				&&	_ppbd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtPopupMenuWnd))
				)
			{
				if( _ppbd.m_bHorz )
					rcCaption.DeflateRect( 3, 0 );
				else
					rcCaption.DeflateRect( 0, 3 );
			}
			PaintSysCmdGlyph(
				dc,
				_ppbd.m_nHelperSysCmdID,
				rcClient,
				false,
				_ppbd.m_bPushed,
				_ppbd.m_bEnabled
				);
		}
	}
}

void CExtPaintManagerXP::PaintIcon(
	CDC & dc,
	bool bHorz,
	CExtCmdIcon * pIcon,
	const CRect & rcClient,
	bool bPushed,
	bool bEnabled,
	bool bHover, // = false
	INT nIconAlignment, // = 0
	bool bRTL, // = false
	CRect * prcIcon, // = NULL
	CRect * prcText, // = NULL
	CRect * prcIconMargins, // = NULL
	COLORREF clrCustomAccentEffectForIcon // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	
	if( pIcon == NULL || pIcon->IsEmpty() )
	{
		if( prcIcon != NULL )
			*prcIcon = CRect( 0, 0, 0, 0 );
		if( prcText != NULL )
			*prcText = rcClient;
		return;
	}

CSize _sizeIcon = pIcon->GetSize();
	ASSERT( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 );

CRect rcIconMargins( 0, 0, 0, 0 );
	if( prcIconMargins != NULL )
		rcIconMargins = *prcIconMargins;

CRect rcTextLocation( rcClient );
CRect rcIconLocation( 0, 0, _sizeIcon.cx, _sizeIcon.cy );

	if( bHorz )
	{
		rcIconLocation.OffsetRect( 
			rcClient.left, 
			rcClient.top 
			);

		if(	( _sizeIcon.cx + rcIconMargins.left + rcIconMargins.right ) > rcClient.Width() )
		{
			nIconAlignment &= ~__ALIGN_HORIZ_MASK;
			nIconAlignment |= __ALIGN_HORIZ_CENTER;
		}

		if(	( _sizeIcon.cy + rcIconMargins.top + rcIconMargins.bottom ) > rcClient.Height() )
		{
			nIconAlignment &= ~__ALIGN_VERT_MASK;
			nIconAlignment |= __ALIGN_VERT_CENTER;
		}

		if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			rcIconLocation.OffsetRect( rcClient.right - rcIconLocation.right - rcIconMargins.right, 0 );
			rcTextLocation.right = rcIconLocation.left - rcIconMargins.left;
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			rcIconLocation.OffsetRect( ( rcClient.right - rcIconLocation.right ) / 2 + rcIconMargins.left - rcIconMargins.right, 0 );
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_LEFT )
		{
			rcIconLocation.OffsetRect( rcIconMargins.left, 0 );
			rcTextLocation.left = rcIconLocation.right + rcIconMargins.right;
		}

		if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
		{
			rcIconLocation.OffsetRect( 0, rcIconMargins.top );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.top = rcIconLocation.bottom + rcIconMargins.bottom;
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_CENTER )
		{
			rcIconLocation.OffsetRect( 0, ( rcClient.bottom - rcIconLocation.bottom ) / 2 + rcIconMargins.top - rcIconMargins.bottom );
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			rcIconLocation.OffsetRect( 0, rcClient.bottom - rcIconLocation.bottom - rcIconMargins.bottom );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.bottom = rcIconLocation.top - rcIconMargins.top;
		}
	}
	else
	{
		rcIconLocation.OffsetRect( 
			rcClient.right - rcIconLocation.Width(), 
			rcClient.top 
			);

		if(	( _sizeIcon.cy + rcIconMargins.top + rcIconMargins.bottom ) > rcClient.Height() )
		{
			nIconAlignment &= ~__ALIGN_HORIZ_MASK;
			nIconAlignment |= __ALIGN_HORIZ_CENTER;
		}

		if(	( _sizeIcon.cx + rcIconMargins.left + rcIconMargins.right ) > rcClient.Width() )
		{
			nIconAlignment &= ~__ALIGN_VERT_MASK;
			nIconAlignment |= __ALIGN_VERT_CENTER;
		}

		if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_RIGHT )
		{
			rcIconLocation.OffsetRect( 0, rcClient.bottom - rcIconLocation.bottom - rcIconMargins.bottom );
			rcTextLocation.bottom = rcIconLocation.top - rcIconMargins.top;
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
		{
			rcIconLocation.OffsetRect( 0, ( rcClient.bottom - rcIconLocation.bottom ) / 2 + rcIconMargins.top - rcIconMargins.bottom );
		}
		else if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_LEFT )
		{
			rcIconLocation.OffsetRect( 0, rcIconMargins.top );
			rcTextLocation.top = rcIconLocation.bottom;
		}
		
		if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_TOP )
		{
			rcIconLocation.OffsetRect( rcIconMargins.right, 0 );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.right = rcIconLocation.left;
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_CENTER )
		{
			rcIconLocation.OffsetRect( ( rcClient.left - rcIconLocation.left ) / 2 + rcIconMargins.right - rcIconMargins.left, 0 );
		}
		else if( (nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_BOTTOM )
		{
			rcIconLocation.OffsetRect( rcClient.left - rcIconLocation.left - rcIconMargins.left, 0 );
			if( (nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER )
				rcTextLocation.left = rcIconLocation.right;
		}
	}

	if(		(nIconAlignment&__ALIGN_HORIZ_MASK) == __ALIGN_HORIZ_CENTER 
		&&	(nIconAlignment&__ALIGN_VERT_MASK) == __ALIGN_VERT_CENTER
		)
		rcTextLocation.SetRectEmpty();

	if(		rcTextLocation.top >= rcTextLocation.bottom
		||	rcTextLocation.left >= rcTextLocation.right
		)
		rcTextLocation.SetRectEmpty();
    
	// if button is pressed then press the icon also
	if( bPushed )
	{
		CSize sizePushedOffset = GetPushedOffset();
		rcIconLocation.OffsetRect( sizePushedOffset.cx, sizePushedOffset.cy );
	}

CPoint ptTopLeft = rcIconLocation.TopLeft();
	if( m_bEnabledHoverIconShadows )
		ptTopLeft += bRTL ? CSize( -1 ,1 ) : CSize( 1, 1 );
	if( bEnabled )
	{ 
		CPoint ptOffs( 0, 0 );
		if(		m_bEnabledHoverIconShadows 
			&&	bHover 
			&& (!bPushed) 
			)
		{
			CPoint ptPaint = ptTopLeft + ptOffs;
			if( (pIcon->m_dwFlags&(__EXT_ICON_PERSISTENT_BITMAP_DISABLED|__EXT_ICON_PERSISTENT_BITMAP_HOVER|__EXT_ICON_PERSISTENT_BITMAP_PRESSED)) == 0 )
				pIcon->PaintAccentMono(
					this,
					dc,
					clrCustomAccentEffectForIcon,
					ptPaint.x,
					ptPaint.y
					);
			ptOffs.x = ptOffs.y = -2;
		}
		pIcon->Paint(
			this,
			dc,
			ptTopLeft.x + ptOffs.x,
			ptTopLeft.y + ptOffs.y,
			-1,
			-1,
			bPushed
				? CExtCmdIcon::__PAINT_PRESSED
				: bHover
					? CExtCmdIcon::__PAINT_HOVER
					: CExtCmdIcon::__PAINT_NORMAL
			);
	}
	else
	{ 
		if( clrCustomAccentEffectForIcon != COLORREF(-1L) )
			pIcon->PaintAccentColorized(
				this,
				dc.GetSafeHdc(),
				clrCustomAccentEffectForIcon,
				rcIconLocation.left,
				rcIconLocation.top
				-1,
				-1
				);
		else
			pIcon->Paint(
				this,
				dc.GetSafeHdc(),
				rcIconLocation.left,
				rcIconLocation.top,
				-1,
				-1,
				CExtCmdIcon::__PAINT_DISABLED
				);
	}

	if( prcIcon != NULL )
		*prcIcon = rcIconLocation;
	if( prcText != NULL )
		*prcText = rcTextLocation;
}

void CExtPaintManagerXP::PaintComboFrame(
	CDC & dc,
	CExtPaintManager::PAINTCOMBOFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
CExtComboBoxBase * pWndCombo = NULL;
	if(		_pcfd.m_pHelperSrc != NULL 
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtComboBoxBase ) )
		)
	{
		pWndCombo = STATIC_DOWNCAST( CExtComboBoxBase, _pcfd.m_pHelperSrc );
		ASSERT_VALID( pWndCombo );
	}
COLORREF clrWindow = COLORREF( -1L );
	if(		_pcfd.m_clrForceNABorder == COLORREF(-1L) 
		||	_pcfd.m_bPushed 
		|| _pcfd.m_bHover 
		)
	{
		if( pWndCombo != NULL )
			clrWindow = pWndCombo->GetBkColor();
		if( clrWindow == COLORREF(-1L) )
		{
			COLORREF clrSysBk = GetColor( _pcfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			clrWindow = clrSysBk;
		}
	}
	else
		clrWindow = _pcfd.m_clrForceNABorder;
COLORREF clrFaceOut =
		( _pcfd.m_clrForceNAContent == COLORREF(-1L) || _pcfd.m_bHover || _pcfd.m_bPushed )
			?	dc.GetNearestColor(
					stat_HLS_Adjust(
						GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam ),
						0.0, ( _pcfd.m_bHover || _pcfd.m_bPushed || ( ! _pcfd.m_bEnabled ) ) ? 0.0 : -0.1, 0.0
						)
					)
			: _pcfd.m_clrForceNAContent
			;
COLORREF clrHilight =
		( _pcfd.m_clrForceNABorder == COLORREF(-1L) || _pcfd.m_bHover || _pcfd.m_bPushed )
			? GetColor( XPCLR_3DFACE_NORMAL, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
			: _pcfd.m_clrForceNABorder
			;
COLORREF clrBorder =
		( _pcfd.m_clrForceNABorder == COLORREF(-1L) || _pcfd.m_bHover || _pcfd.m_bPushed )
			? GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam )
			: _pcfd.m_clrForceNABorder
			;
CRect rectClient( _pcfd.m_rcClient );
COLORREF clrOuterBorder =
		(_pcfd.m_clrForceActiveOuterBorder != COLORREF(-1L) && (_pcfd.m_bHover || _pcfd.m_bPushed) )
			? _pcfd.m_clrForceActiveOuterBorder
			: clrFaceOut
			;
bool bPopupMenuComboFieldMode = false;
	if(		_pcfd.m_pHelperSrc != NULL
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
		)
		bPopupMenuComboFieldMode = true;
	if(		(! _pcfd.m_bNoTopOuterBorder )
		&&	(! bPopupMenuComboFieldMode )
		)
		dc.Draw3dRect( rectClient, clrOuterBorder, clrOuterBorder  );
	if( ! bPopupMenuComboFieldMode )
		rectClient.DeflateRect( 1, 1 );
	dc.Draw3dRect( rectClient, clrHilight, clrHilight );
	if( _pcfd.m_bHover || _pcfd.m_bPushed )
		dc.Draw3dRect( rectClient, clrBorder, clrBorder );
INT nDD = GetDropDownButtonWidth( _pcfd.m_pHelperSrc, _pcfd.m_lParam );
CRect rcDDButton( rectClient );
	if( _pcfd.m_bRightText )
		rcDDButton.right = rcDDButton.left + nDD;
	else
		rcDDButton.left = rcDDButton.right - nDD;

	if( ! _pcfd.m_bEnabled )
		rcDDButton.DeflateRect(1,1);
	if( bPopupMenuComboFieldMode && (! (_pcfd.m_bHover || _pcfd.m_bPushed) ) )
		rcDDButton.DeflateRect(0,1,1,1);
PAINTPUSHBUTTONDATA _ppbd(
		_pcfd.m_pHelperSrc,
		true,
		rcDDButton,
		NULL,
		NULL,
		true,
		_pcfd.m_bHover,
		_pcfd.m_bPushed,
		false,
		_pcfd.m_bEnabled,
		true,
		false,
		false,
		0,
		NULL,
		false,
		0,
		( _pcfd.m_bEnabled && _pcfd.m_pHelperSrc != NULL &&( ! _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CListBox) ) ) ) ? false : true // bTransparentBackground
		);
	PaintPushButton( dc, _ppbd );
	if( !(_pcfd.m_bHover || _pcfd.m_bPushed) )
		dc.Draw3dRect( &rcDDButton, clrWindow, clrWindow );
	if( bPopupMenuComboFieldMode && (! (_pcfd.m_bHover || _pcfd.m_bPushed) ) )
		rcDDButton.InflateRect(0,1,1,1);
	// paint arrow down
glyph_t* pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
	ASSERT( pGlyph != NULL );
COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			_pcfd.m_bEnabled 
				? GetColor( 
					_pcfd.m_bPushed  ? COLOR_3DDKSHADOW  : COLOR_BTNTEXT,
					_pcfd.m_pHelperSrc, 
					_pcfd.m_lParam 
					)
				: ::GetSysColor( COLOR_GRAYTEXT )
		};
	PaintGlyphCentered( dc, rcDDButton, *pGlyph, ColorValues );
}

void CExtPaintManagerOffice2003::PaintComboFrame(
	CDC & dc,
	CExtPaintManager::PAINTCOMBOFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintComboFrame( dc, _pcfd );
		return;
	}
CExtComboBoxBase * pWndCombo = NULL;
	if(		_pcfd.m_pHelperSrc != NULL 
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtComboBoxBase ) )
		)
	{
		pWndCombo = STATIC_DOWNCAST( CExtComboBoxBase, _pcfd.m_pHelperSrc );
		ASSERT_VALID( pWndCombo );
	}
	if(		_pcfd.m_pHelperSrc == NULL
		||	(! _pcfd.m_bEnabled )
		||	_pcfd.m_clrForceNABorder != COLORREF(-1L)
		||	_pcfd.m_clrForceNAContent != COLORREF(-1L)
		||	_pcfd.m_clrForceActiveOuterBorder != COLORREF(-1L)
		||	(!	(	_pcfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CComboBox))
				||	_pcfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtBarButton))
				||	_pcfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtPopupMenuWnd))
				)
			)
		||	(! GetCb2DbTransparentMode(_pcfd.m_pHelperSrc) )
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerXP::PaintComboFrame( dc, _pcfd );
		if( (!_pcfd.m_bEnabled) && pWndCombo != NULL )
		{
			ASSERT_VALID( pWndCombo );
			CRect rcClip( _pcfd.m_rcClient );
			rcClip.DeflateRect(1,1);
			dc.ExcludeClipRect( &rcClip );
			PaintDockerBkgnd( true, dc, pWndCombo );
			dc.SelectClipRgn( NULL );
		}
		return;
	}
bool bPopupMenuComboFieldMode = false;
	if(		_pcfd.m_pHelperSrc != NULL
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
		)
		bPopupMenuComboFieldMode = true;
INT nDD = GetDropDownButtonWidth( _pcfd.m_pHelperSrc, _pcfd.m_lParam );
CRect rcClient( _pcfd.m_rcClient );
CRect rcEraser( rcClient );
	if( ! bPopupMenuComboFieldMode )
	rcEraser.DeflateRect(1,1);
CRect rcHoverFrame( rcEraser );
CRect rcDDButton( rcEraser );
	if( _pcfd.m_bRightText )
		rcDDButton.right = rcDDButton.left + nDD;
	else
		rcDDButton.left = rcDDButton.right - nDD;
CRect rcClientItem( rcEraser );
	rcClientItem.DeflateRect( 1, 1, 2, 1 );
	if( _pcfd.m_bRightText )
		rcClientItem.left += rcDDButton.Width();
	else
		rcClientItem.right -= rcDDButton.Width();
	if( bPopupMenuComboFieldMode )
		rcClientItem.InflateRect( 1, 1 );
CRgn rgnClip, rgnClientItem;
	if(		(! bPopupMenuComboFieldMode )
		&&	rgnClip.CreateRectRgnIndirect(&rcClient)
		&&	rgnClientItem.CreateRectRgnIndirect(&rcClientItem)
		&&	rgnClip.CombineRgn(
				&rgnClip,
				&rgnClientItem, 
				RGN_DIFF
				) != ERROR
		)
		dc.SelectClipRgn( &rgnClip );
	if( pWndCombo != NULL )
	{
		ASSERT_VALID( pWndCombo );
		if( ! PaintDockerBkgnd( true, dc, pWndCombo ) )
		{
			if( rgnClip.GetSafeHandle() != NULL )
				dc.SelectClipRgn( NULL );
			CExtPaintManagerXP::PaintComboFrame( dc, _pcfd );
			return;
		}
	} // if( pWndCombo != NULL )
COLORREF clrWindow = COLORREF(-1L);
	if( pWndCombo != NULL )
		clrWindow = pWndCombo->GetBkColor();
	if( clrWindow == COLORREF(-1L) )
	{
		COLORREF clrSysBk = GetColor( _pcfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
		clrWindow = clrSysBk;
	}
	if( ! bPopupMenuComboFieldMode )
	{
		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );

		if( _pcfd.m_bRightText )
			rcEraser.left += nDD;
		else
			rcEraser.right -= nDD;

		INT nLeftDX = _pcfd.m_bRightText ? 1 : 0;
		INT nRightDX = _pcfd.m_bRightText ? 0 : 1;

		rcEraser.DeflateRect( _pcfd.m_bRightText ? -1 : 0, 1, _pcfd.m_bRightText ? 0 : -1, 1 );
 		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );
 
 		rcEraser.DeflateRect( 1, 0, 1, 0 );
 		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );

		rcEraser.DeflateRect( nLeftDX, 0, nRightDX, 0 );
		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );

		rcEraser.DeflateRect( nLeftDX, 0, nRightDX, 0 );
		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );
	}
	if( _pcfd.m_bHover || _pcfd.m_bPushed )
	{
		COLORREF clrBorder = GetColor( XPCLR_HILIGHT_BORDER, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
		dc.Draw3dRect( rcHoverFrame, clrBorder, clrBorder );
	}
	else 
	{
		if( bPopupMenuComboFieldMode )
		{
			COLORREF clrInactiveButton =
				GetColor(
					_pcfd.m_bEnabled ? XPCLR_TEXT_FIELD_BORDER_NORMAL : XPCLR_TEXT_FIELD_BORDER_DISABLED,
					_pcfd.m_pHelperSrc,
					_pcfd.m_lParam
					);
			CRect rcFillButton = rcDDButton;
			rcFillButton.DeflateRect( 1, 2, 2, 2 );
			dc.FillSolidRect( &rcFillButton, clrInactiveButton );
		}
		else if( _pcfd.m_bEnabled )
		{
			COLORREF clrFaceOut =
				( _pcfd.m_clrForceNAContent == COLORREF(-1L) || _pcfd.m_bHover || _pcfd.m_bPushed )
					?	dc.GetNearestColor(
							stat_HLS_Adjust(
								GetColor( CLR_3DFACE_OUT, _pcfd.m_pHelperSrc, _pcfd.m_lParam ),
								0.0, -0.1, 0.0
								)
							)
					: _pcfd.m_clrForceNAContent
					;
			CRect rcNopmalFrame = rcHoverFrame;
			rcNopmalFrame.InflateRect( 1, 1 );
			dc.Draw3dRect( rcNopmalFrame, clrFaceOut, clrFaceOut );
		}
	}
PAINTPUSHBUTTONDATA _ppbd(
		_pcfd.m_pHelperSrc,
		true,
		rcDDButton,
		NULL,
		NULL,
		true,
		(_pcfd.m_bHover||_pcfd.m_bPushed) ? true : false,
		_pcfd.m_bPushed ? true : false,
		false,
		_pcfd.m_bEnabled,
		true,
		false,
		false,
		0,
		NULL,
		false,
		0,
		( _pcfd.m_bHover || _pcfd.m_bPushed ) ? false : true
		);
	PaintPushButton( dc, _ppbd );
	// paint arrow down
glyph_t* pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
	ASSERT( pGlyph != NULL );
COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			_pcfd.m_bEnabled 
				? GetColor( 
					_pcfd.m_bPushed ? XPCLR_PUSHEDHOVERTEXT : COLOR_BTNTEXT,
					_pcfd.m_pHelperSrc, 
					_pcfd.m_lParam 
					)
				: ::GetSysColor( COLOR_GRAYTEXT )
		};
	PaintGlyphCentered( dc, rcDDButton, *pGlyph, ColorValues );
	if(		(! bPopupMenuComboFieldMode )
		&&	rgnClip.GetSafeHandle() != NULL
		)
		dc.SelectClipRgn( NULL );
}

void CExtPaintManagerNativeXP::PaintComboFrame(
	CDC & dc,
	CExtPaintManager::PAINTCOMBOFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintComboFrame(
			dc,
			_pcfd
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

HWND hWnd = NULL;
CWnd * pWnd =
		DYNAMIC_DOWNCAST(
			CWnd,
			_pcfd.m_pHelperSrc
			);
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_COMBOBOX ) != NULL )
	{
		INT nStateID = 
			(!_pcfd.m_bEnabled)
				? CBXS_DISABLED
				: _pcfd.m_bPushed
					? CBXS_PRESSED
					: _pcfd.m_bHover
						? CBXS_HOT
						: CBXS_NORMAL;
		CSize szPart(0,0);
		if( g_PaintManager.m_UxTheme.GetThemePartSize(
				dc.GetSafeHdc(), 
				0, 
				nStateID, 
				NULL, 
				CExtUxTheme::__EXT_UX_TS_TRUE,
				&szPart
				) == S_OK
			)
		{
 			CRect rcDDButton( _pcfd.m_rcClient );
			if( ! g_PaintManager.m_bIsWinVistaOrLater )
				rcDDButton.DeflateRect(1,1);
			INT nDD = GetDropDownButtonWidth( _pcfd.m_pHelperSrc, _pcfd.m_lParam );
			if( _pcfd.m_bRightText )
				rcDDButton.right = rcDDButton.left + nDD;
			else
				rcDDButton.left = rcDDButton.right - nDD;

			CRect rcClip( _pcfd.m_rcClient );
			rcClip.DeflateRect( 3, 3, 3, 3 );
			if( _pcfd.m_bRightText )
				rcClip.left += rcDDButton.Width();
			else
				rcClip.right -= rcDDButton.Width();
 			dc.ExcludeClipRect( &rcClip );

			// border
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd,
					dc.GetSafeHdc(), 
					0, 
					nStateID, 
					&_pcfd.m_rcClient, 
					&_pcfd.m_rcClient
					) == S_OK
				);

			dc.SelectClipRgn( NULL );

			// drop down button
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd,
					dc.GetSafeHdc(), 
					CP_DROPDOWNBUTTON, 
					nStateID, 
					&rcDDButton, 
					&rcDDButton
					) == S_OK
				);
		}
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

CRect CExtPaintManager::GetMenuBorderMetrics(
	CWnd * pWnd,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	lParam;
	if(		pWnd != NULL
		&&	pWnd->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
		&&	((CExtPopupMenuWnd*)pWnd)->_IsRibbonMode()
		&&	( ((CExtPopupMenuWnd*)pWnd)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) != 0
		)
		return CRect( 2, 2, 2, 2+28 );
	return CRect( 2, 2, 2, 2 );
}

void CExtPaintManager::AdjustMenuDC(
	CExtPopupMenuWnd * pPopup,
	CDC & dc,
	bool bMemoryDC,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pPopup );
	ASSERT( dc.GetSafeHdc() != NULL );
	pPopup;
	dc;
	bMemoryDC;
	lParam;
}

void CExtPaintManagerOffice2007_Impl::AdjustMenuDC(
	CExtPopupMenuWnd * pPopup,
	CDC & dc,
	bool bMemoryDC,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pPopup );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::AdjustMenuDC( pPopup, dc, bMemoryDC, lParam );
		return;
	}

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if(		( ! bMemoryDC )
		&&	pPopup->_IsRibbonMode()
		)
	{
		if(		pPopup->IsKindOf( RUNTIME_CLASS( CExtRibbonPopupMenuWnd ) )
			&&	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) )
			)
			return;
		CRect rcMenuClient;
		pPopup->_GetClientRect( &rcMenuClient );
		dc.ExcludeClipRect( rcMenuClient.left, rcMenuClient.top, rcMenuClient.left + 1, rcMenuClient.top + 1 );
		dc.ExcludeClipRect( rcMenuClient.left, rcMenuClient.bottom - 1, rcMenuClient.left + 1, rcMenuClient.bottom );
		dc.ExcludeClipRect( rcMenuClient.right - 1, rcMenuClient.top, rcMenuClient.right, rcMenuClient.top + 1 );
		if(		pPopup->_IsPopupWithShadows()
			||	pPopup->_IsPopupWithShadowsDynamic()
			)
		{
			INT nGrayScale = 164;
			COLORREF clrOver = dc.GetNearestColor( RGB(nGrayScale,nGrayScale,nGrayScale) );
			dc.SetPixel( rcMenuClient.right - 1, rcMenuClient.bottom - 1, clrOver );
			dc.SetPixel( rcMenuClient.right - 2, rcMenuClient.bottom - 1, clrOver );
			dc.SetPixel( rcMenuClient.right - 1, rcMenuClient.bottom - 2, clrOver );
		}
		dc.ExcludeClipRect( rcMenuClient.right - 1, rcMenuClient.bottom - 1, rcMenuClient.right, rcMenuClient.bottom );
		dc.ExcludeClipRect( rcMenuClient.right - 2, rcMenuClient.bottom - 1, rcMenuClient.right, rcMenuClient.bottom );
		dc.ExcludeClipRect( rcMenuClient.right - 1, rcMenuClient.bottom - 2, rcMenuClient.right, rcMenuClient.bottom );
	} // if( ( ! bMemoryDC ) && ....
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
}

void CExtPaintManager::PaintMenuBorder(
	CDC & dc,
	const RECT & rectClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rectClient ) )
		return;
CRect rc(rectClient);
	dc.Draw3dRect( &rc, GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam ), GetColor( CLR_3DDKSHADOW_OUT, pHelperSrc, lParam ) );
	rc.DeflateRect( 1, 1 );
	dc.Draw3dRect( &rc, GetColor( CLR_3DHILIGHT_OUT, pHelperSrc, lParam ), GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam ) );
COLORREF clrFace = GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam );
	rc.DeflateRect( 1, 1 );
	dc.Draw3dRect( &rc,clrFace,clrFace );
	rc.DeflateRect( 1, 1 );
	dc.Draw3dRect( &rc,clrFace,clrFace );
}

void CExtPaintManagerNativeXP::PaintMenuBorder(
	CDC & dc,
	const RECT & rectClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rectClient ) )
		return;

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintMenuBorder(
			dc,
			rectClient,
			pHelperSrc,
			lParam
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}
bool bThemedApproachOK = false;
	if(		hWnd != NULL
		&&	g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_MENU ) != NULL
		)
	{
		HRESULT hr =
			g_PaintManager.m_UxTheme.DrawBackground(
				pWnd->GetSafeHwnd(), 
				dc.GetSafeHdc(), 
				MENU_POPUPBACKGROUND, 
				0, 
				&rectClient, 
				&rectClient
				);
		bThemedApproachOK = ( hr == S_OK ) ? true : false;
		if( bThemedApproachOK )
		{
			hr =
				g_PaintManager.m_UxTheme.DrawBackground(
					hWnd, 
					dc.GetSafeHdc(), 
					MENU_POPUPBORDERS, 
					0, 
					&rectClient, 
					&rectClient
					);
			bThemedApproachOK = ( hr == S_OK ) ? true : false;
		}
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
	if( bThemedApproachOK )
		return;
COLORREF clr = ::GetSysColor( COLOR_3DSHADOW );
	dc.Draw3dRect(
		&rectClient,
		clr,
		clr
		);
}

COLORREF CExtPaintManager::GetMenuFrameFillColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	return GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam );
}

COLORREF CExtPaintManagerXP::GetMenuFrameFillColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	return GetColor( XPCLR_3DFACE_NORMAL, pHelperSrc, lParam );
}

COLORREF CExtPaintManagerNativeXP::GetMenuFrameFillColor(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return
			CExtPaintManager::GetMenuFrameFillColor(
				pHelperSrc,
				lParam
				);
	return ::GetSysColor( COLOR_MENU );
}

int CExtPaintManager::GetTipShadowSize() const
{
	ASSERT_VALID( this );
	return 3;
}

int CExtPaintManager::GetMenuShadowSize() const
{
	ASSERT_VALID( this );
	return 4;
}

int CExtPaintManagerXP::GetMenuShadowSize() const
{
	ASSERT_VALID( this );
	return 4;
}

int CExtPaintManager::GetMenuIconAreaWidth() const
{
	ASSERT_VALID( this );
	return -1;
}

CRect CExtPaintManagerXP::GetMenuBorderMetrics(
	CWnd * pWnd,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	lParam;
	if(		pWnd != NULL
		&&	pWnd->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
		&&	((CExtPopupMenuWnd*)pWnd)->_IsRibbonMode()
		&&	( ((CExtPopupMenuWnd*)pWnd)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) != 0
		)
		return CRect( 1, 1, 1, 1+28 );
	return CRect( 1, 1, 1, 1 );
}

CRect CExtPaintManagerNativeXP::GetMenuBorderMetrics(
	CWnd * pWnd,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return 
			CExtPaintManager::GetMenuBorderMetrics(
				pWnd,
				lParam
				);
	if(		pWnd != NULL
		&&	pWnd->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
		&&	((CExtPopupMenuWnd*)pWnd)->_IsRibbonMode()
		&&	( ((CExtPopupMenuWnd*)pWnd)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) != 0
		)
		return CRect( 1, 1, 1, 1+28 );
	return CRect( 1, 1, 1, 1 );
}

void CExtPaintManagerXP::PaintMenuBorder(
	CDC & dc,
	const RECT & rectClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rectClient ) )
		return;
CRect rc(rectClient);
COLORREF clr = GetColor( XPCLR_MENU_BORDER, pHelperSrc, lParam );
	dc.Draw3dRect(&rc,clr,clr);
//COLORREF clrFace = GetColor( XPCLR_3DFACE_NORMAL, pHelperSrc, lParam );
//	rc.DeflateRect(1,1);
//	dc.Draw3dRect(&rc,clrFace,clrFace);
//	rc.right--;
//	rc.bottom--;
//	dc.Draw3dRect(&rc,clrFace,clrFace);
}

bool CExtPaintManager::IsMenuMustCombineExcludeArea(
	const CObject * pMenuTrackerObject // = NULL
	) const
{
	ASSERT_VALID( this );
	pMenuTrackerObject;
//
// Implementadion of CExtPaintManager::PaintMenuCombinedArea()
// is provided, but office 98/2k does not combine its menu area
// with exclude area. interesting? uncomment and play with it!
//
//	return true; 
//
	return false;
}

bool CExtPaintManagerXP::IsMenuMustCombineExcludeArea(
	const CObject * pMenuTrackerObject // = NULL
	) const
{
	ASSERT_VALID( this );
	pMenuTrackerObject;
	return true;
}

bool CExtPaintManager::IsToolBarChevronMenuCombined()
{
	ASSERT_VALID( this );
	return false;
}

bool CExtPaintManagerXP::IsToolBarChevronMenuCombined()
{
	ASSERT_VALID( this );
	return true;
}

bool CExtPaintManagerOffice2003::IsToolBarChevronMenuCombined()
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::IsToolBarChevronMenuCombined();
	return false;
}

void CExtPaintManager::PaintMenuCombinedArea(
	CDC & dc,
	const RECT & rcArea,
	const RECT & rcClient,
	int eCombineAlign, // CExtPopupMenuWnd::e_combine_align_t values
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcArea ) )
		return;
	dc.SelectClipRgn( NULL );
	ASSERT( eCombineAlign != CExtPopupMenuWnd::__CMBA_NONE );
CRect rcMB =
		GetMenuBorderMetrics(
			( pHelperSrc == NULL )
				? NULL
				: ( DYNAMIC_DOWNCAST( CWnd, pHelperSrc ) )
				,
			lParam
			);
CRect _rcClient( rcClient );
CRect _rcArea( rcArea );
	_rcArea.InflateRect(
		(eCombineAlign==CExtPopupMenuWnd::__CMBA_RIGHT) ?
			rcMB.left : 0,
		(eCombineAlign==CExtPopupMenuWnd::__CMBA_BOTTOM) ?
			rcMB.top : 0,
		(eCombineAlign==CExtPopupMenuWnd::__CMBA_LEFT) ?
			rcMB.right : 0,
		(eCombineAlign==CExtPopupMenuWnd::__CMBA_TOP) ?
			rcMB.bottom : 0
		);
	dc.FillSolidRect(
		&_rcArea,
		GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam )
		);
//	_rcArea = rcArea;

COLORREF clrMenuBorderLTo =
		GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam );
COLORREF clrMenuBorderLTi =
		GetColor( CLR_3DHILIGHT_OUT, pHelperSrc, lParam );
COLORREF clrMenuBorderRBo =
		GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam );
COLORREF clrMenuBorderRBi =
		GetColor( CLR_3DDKSHADOW_OUT, pHelperSrc, lParam );

	switch( eCombineAlign )
	{
	case CExtPopupMenuWnd::__CMBA_TOP:
		_rcArea.InflateRect( 0, 0, 0, rcMB.bottom );
		_rcClient.InflateRect( -rcMB.left, 0, -rcMB.right, 0 );
	break;
	case CExtPopupMenuWnd::__CMBA_BOTTOM:
		_rcArea.InflateRect( 0, rcMB.top, 0, 0 );
		_rcClient.InflateRect( -rcMB.left, 0, -rcMB.right, 0 );
	break;
	case CExtPopupMenuWnd::__CMBA_LEFT:
		_rcArea.InflateRect( 0, 0, rcMB.right, 0 );
		_rcClient.InflateRect( 0, -rcMB.top, 0, -rcMB.bottom );
	break;
	case CExtPopupMenuWnd::__CMBA_RIGHT:
		_rcArea.InflateRect( rcMB.left, 0, 0, 0 );
		_rcClient.InflateRect( 0, -rcMB.top, 0, -rcMB.bottom );
	break;
#ifdef _DEBUG
	default:
		ASSERT(FALSE);
	break;
#endif // _DEBUG
	} // switch( eCombineAlign )

	dc.ExcludeClipRect( &_rcClient );

int cx = _rcArea.Width();
int cy = _rcArea.Height();
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_BOTTOM )
		dc.FillSolidRect(_rcArea.left, _rcArea.top, cx - 1, 1, clrMenuBorderLTo);
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_RIGHT )
		dc.FillSolidRect(_rcArea.left, _rcArea.top, 1, cy - 1, clrMenuBorderLTo);
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_LEFT )
		dc.FillSolidRect(_rcArea.left + cx, _rcArea.top, -1, cy, clrMenuBorderRBo);
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_TOP )
		dc.FillSolidRect(_rcArea.left, _rcArea.top + cy, cx, -1, clrMenuBorderRBo);
	_rcArea.DeflateRect(1,1,1,1);
	cx = _rcArea.Width();
	cy = _rcArea.Height();
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_BOTTOM )
		dc.FillSolidRect(_rcArea.left, _rcArea.top, cx - 1, 1, clrMenuBorderLTi);
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_RIGHT )
		dc.FillSolidRect(_rcArea.left, _rcArea.top, 1, cy - 1, clrMenuBorderLTi);
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_LEFT )
		dc.FillSolidRect(_rcArea.left + cx, _rcArea.top, -1, cy, clrMenuBorderRBi);
	if( eCombineAlign != CExtPopupMenuWnd::__CMBA_TOP )
		dc.FillSolidRect(_rcArea.left, _rcArea.top + cy, cx, -1, clrMenuBorderRBi);
	
/*
	dc.ExcludeClipRect( &_rcClient );
	dc.Draw3dRect(
		&_rcArea,
		clrMenuBorderLTo,
		clrMenuBorderRBo
		);
	_rcArea.DeflateRect(1,1,1,1);
	dc.Draw3dRect(
		&_rcArea,
		clrMenuBorderLTi,
		clrMenuBorderRBi
		);
*/
	dc.SelectClipRgn( NULL );
}

void CExtPaintManagerXP::PaintMenuCombinedArea(
	CDC & dc,
	const RECT & rcArea,
	const RECT & rcClient,
	int eCombineAlign, // CExtPopupMenuWnd::e_combine_align_t values
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcArea ) )
		return;
	ASSERT( eCombineAlign != CExtPopupMenuWnd::__CMBA_NONE );
CRect _rcArea( rcArea );
CRect _rcClient( rcClient );
CRect _rcExclude( rcClient );
	_rcExclude.DeflateRect( 1, 1 );
	dc.FillSolidRect( &_rcArea, GetColor( XPCLR_3DFACE_DARK, pHelperSrc, lParam ) );
	switch( eCombineAlign )
	{
	//case CExtPopupMenuWnd::__CMBA_TOP:
	//case CExtPopupMenuWnd::__CMBA_BOTTOM:
	//	_rcClient.InflateRect( -1, 0 );
	//break;
	//case CExtPopupMenuWnd::__CMBA_LEFT:
	//case CExtPopupMenuWnd::__CMBA_RIGHT:
	//	_rcClient.InflateRect( 0, -1 );
	//break;
	case CExtPopupMenuWnd::__CMBA_TOP:
		_rcArea.InflateRect( 0, 0, 0, 1 );
	break;
	case CExtPopupMenuWnd::__CMBA_BOTTOM:
		_rcArea.InflateRect( 0, 1, 0, 0 );
	break;
	case CExtPopupMenuWnd::__CMBA_LEFT:
		_rcArea.InflateRect( 0, 0, 1, 0 );
	break;
	case CExtPopupMenuWnd::__CMBA_RIGHT:
		_rcArea.InflateRect( 1, 0, 0, 0 );
	break;
#ifdef _DEBUG
	default:
		ASSERT(FALSE);
	break;
#endif // _DEBUG
	} // switch( eCombineAlign )
	dc.ExcludeClipRect( &_rcExclude );
//	dc.ExcludeClipRect( &_rcClient );
COLORREF clrMenuBorder = GetColor( XPCLR_MENU_BORDER, pHelperSrc, lParam );
	dc.Draw3dRect( &_rcArea, clrMenuBorder, clrMenuBorder );
	dc.SelectClipRgn( NULL );
}

void CExtPaintManagerOffice2003::PaintMenuCombinedArea(
	CDC & dc,
	const RECT & rcArea,
	const RECT & rcClient,
	int eCombineAlign, // CExtPopupMenuWnd::e_combine_align_t values
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rcArea ) )
		return;
	ASSERT( eCombineAlign != CExtPopupMenuWnd::__CMBA_NONE );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuCombinedArea(
			dc,
			rcArea,
			rcClient,
			eCombineAlign,
			pHelperSrc,
			lParam
			);
		return;
	}

bool bStyleOffice2003 = true;
CExtPopupMenuWnd * pPopup = NULL;
	if(		pHelperSrc == NULL
		||	(! pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) ) )
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
		bStyleOffice2003 = false;
	else
	{
		pPopup = STATIC_DOWNCAST( CExtPopupMenuWnd, pHelperSrc );
		ASSERT_VALID( pPopup );
	}
	if( ! bStyleOffice2003 )
	{
		CExtPaintManagerXP::PaintMenuCombinedArea(
			dc,
			rcArea,
			rcClient,
			eCombineAlign,
			pHelperSrc,
			lParam
			);
		return;
	}
	ASSERT_VALID( pPopup );
CObject * pObjCookie = pPopup->GetCookieAsObject();
CExtToolControlBar * pToolBar = NULL;
int nTbbMenuTrackingBtnIdx = -1;
CExtBarButton * pTBB = NULL;
	if(		pObjCookie != NULL
		&&	pObjCookie->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
		)
	{ // if menu cookie for combined content callback is a CExtToolControlBar
		pToolBar = STATIC_DOWNCAST( CExtToolControlBar, pObjCookie );
		ASSERT_VALID( pToolBar );
		if(		( pToolBar->m_pDockSite == NULL || pToolBar->m_bPresubclassDialogMode )
			&&	!pToolBar->m_bForceBalloonGradientInDialogs 
			)
		{
			CExtPaintManagerXP::PaintMenuCombinedArea(
				dc,
				rcArea,
				rcClient,
				eCombineAlign,
				pHelperSrc,
				lParam
				);
			return;
		}
		nTbbMenuTrackingBtnIdx = pToolBar->GetMenuTrackingButton();
		if( nTbbMenuTrackingBtnIdx >= 0 )
		{
			pTBB = pToolBar->GetButton(nTbbMenuTrackingBtnIdx);
			ASSERT_VALID( pTBB );
		} // if( nTbbMenuTrackingBtnIdx >= 0 )
	} // if menu cookie for combined content callback is a CExtToolControlBar

	if(		pToolBar != NULL 
		&&	pTBB != NULL
		&&	pTBB->IsKindOf( RUNTIME_CLASS(CExtBarContentExpandButton) )
		&&	(! pToolBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) ) )
		)
	{ // if toolbar content expand button
		if( !OnQueryUseThemeColors() )
		{
			const CSize _sizeRoundedAreaMerics =
				FixedBar_GetRoundedAreaMerics();
			COLORREF clrFillUpdate =
				GetColor( _2003CLR_EXPBTN_PRESSED_LIGHT, pHelperSrc, lParam );
			switch( eCombineAlign )
			{
			case CExtPopupMenuWnd::__CMBA_TOP:
				dc.FillSolidRect(
					rcArea.right - _sizeRoundedAreaMerics.cx - 2,
					rcArea.bottom - _sizeRoundedAreaMerics.cy - 1,
					_sizeRoundedAreaMerics.cx + 2,
					_sizeRoundedAreaMerics.cy,
					clrFillUpdate
					);
			break;
			case CExtPopupMenuWnd::__CMBA_BOTTOM:
				dc.FillSolidRect(
					rcArea.right - _sizeRoundedAreaMerics.cx - 2,
					rcArea.top + 1,
					_sizeRoundedAreaMerics.cx + 2,
					_sizeRoundedAreaMerics.cy,
					clrFillUpdate
					);
				dc.FillSolidRect(
					rcArea.right - _sizeRoundedAreaMerics.cx,
					rcArea.bottom - _sizeRoundedAreaMerics.cy - 1,
					_sizeRoundedAreaMerics.cx,
					_sizeRoundedAreaMerics.cy,
					clrFillUpdate
					);
			break;
			case CExtPopupMenuWnd::__CMBA_LEFT:
				dc.FillSolidRect(
					rcArea.right - _sizeRoundedAreaMerics.cx - 2,
					rcArea.bottom - _sizeRoundedAreaMerics.cy,
					_sizeRoundedAreaMerics.cx + 1,
					_sizeRoundedAreaMerics.cy,
					clrFillUpdate
					);
			break;
			case CExtPopupMenuWnd::__CMBA_RIGHT:
				dc.FillSolidRect(
					rcArea.right - _sizeRoundedAreaMerics.cx,
					rcArea.bottom - _sizeRoundedAreaMerics.cy - 1,
					_sizeRoundedAreaMerics.cx,
					_sizeRoundedAreaMerics.cy,
					clrFillUpdate
					);
			break;
#ifdef _DEBUG
			default:
				ASSERT(FALSE);
			break;
#endif // _DEBUG
			} // switch( eCombineAlign )
		}
		return;
	} // if toolbar content expand button

CRect _rcArea( rcArea );
CRect _rcExclude( rcClient );
	_rcExclude.DeflateRect( 1, 1 );
	switch( eCombineAlign )
	{
	case CExtPopupMenuWnd::__CMBA_TOP:
		_rcArea.InflateRect( 0, 0, 0, 1 );
	break;
	case CExtPopupMenuWnd::__CMBA_BOTTOM:
		_rcArea.InflateRect( 0, 1, 0, 0 );
	break;
	case CExtPopupMenuWnd::__CMBA_LEFT:
		_rcArea.InflateRect( 0, 0, 1, 0 );
	break;
	case CExtPopupMenuWnd::__CMBA_RIGHT:
		_rcArea.InflateRect( 1, 0, 0, 0 );
	break;
#ifdef _DEBUG
	default:
		ASSERT(FALSE);
	break;
#endif // _DEBUG
	} // switch( eCombineAlign )

bool b2003StyleMiddleBorder = true;
bool bNoLineOverCombineArea = false;
	if(		pToolBar != NULL && pTBB != NULL
		&&	(	pToolBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
			||	(	pTBB->GetIconPtr() != NULL
				&&	(! pTBB->GetIconPtr()->IsEmpty() )
				)
			)
		)
		b2003StyleMiddleBorder = false;
	else
	{
		if( pPopup->IsToolBtnCombinedArea() )
			bNoLineOverCombineArea = true;
		else
			b2003StyleMiddleBorder = false;
	}

bool bPreEmptyClipRgn = false;
COLORREF clrBottomFill =
		GetColor(
			bNoLineOverCombineArea
				? XPCLR_3DFACE_DARK
				: XPCLR_3DFACE_NORMAL
				,
			pHelperSrc,
			lParam 
			);
	if( !b2003StyleMiddleBorder )
	{
		//dc.FillSolidRect( &_rcArea, clrBottomFill ); // - 2.28
		dc.ExcludeClipRect( &_rcExclude );
	}
	else
	{
		if( eCombineAlign == CExtPopupMenuWnd::__CMBA_LEFT )
		{
			_rcArea.InflateRect( 0, 0, -2, 0 );
			_rcExclude.InflateRect( 0, 0, -2, 0 );
		}
		else if( eCombineAlign == CExtPopupMenuWnd::__CMBA_RIGHT )
		{
			_rcArea.InflateRect( -1, 0, 0, 0 );
			_rcExclude.InflateRect( -1, 0, 0, 0 );
		}
		//dc.ExcludeClipRect( &_rcClient );
		dc.ExcludeClipRect( &_rcExclude );
		dc.FillSolidRect( &_rcArea, clrBottomFill );
		bPreEmptyClipRgn = true;
	} // else from if( !b2003StyleMiddleBorder )

	if( ! bNoLineOverCombineArea )
		dc.FillSolidRect(
			&_rcArea,
			GetColor( XPCLR_3DFACE_NORMAL, pHelperSrc, lParam )
			);

	if( bPreEmptyClipRgn )
		dc.SelectClipRgn( NULL );
COLORREF clrMenuBorder = GetColor( XPCLR_MENU_BORDER, pHelperSrc, lParam );
	dc.Draw3dRect( &_rcArea, clrMenuBorder, clrMenuBorder );
	dc.SelectClipRgn( NULL );
}

CExtPaintManager::PAINTCONTROLBARBORDERSDATA::PAINTCONTROLBARBORDERSDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_eCBBT( CExtPaintManager::__CB_OUTER_DOCKBAR )
	, m_dwStyle( 0L )
	, m_rc( 0,0,0,0 )
{
}

CExtPaintManager::PAINTCONTROLBARBORDERSDATA::PAINTCONTROLBARBORDERSDATA(
	CObject * pHelperSrc,
	int eCBBT, // CExtPaintManager::e_control_bar_border_type_t
	DWORD dwStyle,
	const RECT & rc
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_eCBBT( eCBBT )
	, m_dwStyle( dwStyle )
	, m_rc( rc )
{
}

void CExtPaintManager::PaintControlBarBordersDefImpl(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLBARBORDERSDATA & _pcbbd,
	COLORREF clrHi,
	COLORREF clrLo
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( !(_pcbbd.m_dwStyle & CBRS_BORDER_ANY) )
		return;

	// prepare for dark lines
//	ASSERT( _pcbbd.m_rc.top == 0 && _pcbbd.m_rc.left == 0 );
CRect rc1( _pcbbd.m_rc ), rc2( _pcbbd.m_rc );
COLORREF clr = clrLo;
		GetColor(
			CExtPaintManager::CLR_3DFACE_OUT, _pcbbd.m_pHelperSrc, _pcbbd.m_lParam 
			);

	// draw dark line one pixel back/up
	if( _pcbbd.m_dwStyle & CBRS_BORDER_3D )
	{
		rc1.right -= __EXT_MFC_CX_BORDER;
		rc1.bottom -= __EXT_MFC_CY_BORDER;
	}
	if( _pcbbd.m_dwStyle & CBRS_BORDER_TOP )
		rc2.top += afxData.cyBorder2;
	if( _pcbbd.m_dwStyle & CBRS_BORDER_BOTTOM )
		rc2.bottom -= afxData.cyBorder2;

	// draw left and top
	if( _pcbbd.m_dwStyle & CBRS_BORDER_LEFT )
		dc.FillSolidRect(
			0, rc2.top, __EXT_MFC_CX_BORDER, rc2.Height(),
			clr
			);
	if( _pcbbd.m_dwStyle & CBRS_BORDER_TOP )
		dc.FillSolidRect(
			0, 0, _pcbbd.m_rc.right, __EXT_MFC_CY_BORDER,
			clr
			);

	// draw right and bottom
	if( _pcbbd.m_dwStyle & CBRS_BORDER_RIGHT )
		dc.FillSolidRect(
			rc1.right, rc2.top, -__EXT_MFC_CX_BORDER, rc2.Height(),
			clr
			);
	if( _pcbbd.m_dwStyle & CBRS_BORDER_BOTTOM )
		dc.FillSolidRect(
			0, rc1.bottom, _pcbbd.m_rc.right, -__EXT_MFC_CY_BORDER,
			clr
			);

	if( _pcbbd.m_dwStyle & CBRS_BORDER_3D )
	{
		// prepare for hilite lines
//		clr = afxData.clrBtnHilite;
		clr = clrHi;

		// draw left and top
		if( _pcbbd.m_dwStyle & CBRS_BORDER_LEFT )
			dc.FillSolidRect(
				1, rc2.top, __EXT_MFC_CX_BORDER, rc2.Height(),
				clr
				);
		if( _pcbbd.m_dwStyle & CBRS_BORDER_TOP )
			dc.FillSolidRect(
				0, 1, _pcbbd.m_rc.right, __EXT_MFC_CY_BORDER,
				clr
				);

		// draw right and bottom
		if( _pcbbd.m_dwStyle & CBRS_BORDER_RIGHT )
			dc.FillSolidRect(
				_pcbbd.m_rc.right, rc2.top, -__EXT_MFC_CX_BORDER, rc2.Height(),
				clr
				);
		if( _pcbbd.m_dwStyle & CBRS_BORDER_BOTTOM )
			dc.FillSolidRect(
				0, _pcbbd.m_rc.bottom, _pcbbd.m_rc.right, -__EXT_MFC_CY_BORDER,
				clr
				);
	}

//	if( _pcbbd.m_dwStyle & CBRS_BORDER_LEFT )
//		_pcbbd.m_rc.left += afxData.cxBorder2;
//	if( _pcbbd.m_dwStyle & CBRS_BORDER_TOP )
//		_pcbbd.m_rc.top += afxData.cyBorder2;
//	if( _pcbbd.m_dwStyle & CBRS_BORDER_RIGHT )
//		_pcbbd.m_rc.right -= afxData.cxBorder2;
//	if( _pcbbd.m_dwStyle & CBRS_BORDER_BOTTOM )
//		_pcbbd.m_rc.bottom -= afxData.cyBorder2;
}

void CExtPaintManager::PaintControlBarBorders(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLBARBORDERSDATA & _pcbbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcbbd.m_eCBBT == __CB_INNER_STATUSBAR_ITEM )
	{
		dc.Draw3dRect(
			&_pcbbd.m_rc,
			GetColor( CLR_3DSHADOW_OUT, _pcbbd.m_pHelperSrc, _pcbbd.m_lParam ),
			GetColor( CLR_3DHILIGHT_OUT, _pcbbd.m_pHelperSrc, _pcbbd.m_lParam )
			);
		return;
	} // if( _pcbbd.m_eCBBT == __CB_INNER_STATUSBAR_ITEM )
COLORREF clr = GetColor( CLR_3DFACE_OUT, _pcbbd.m_pHelperSrc, _pcbbd.m_lParam );
	PaintControlBarBordersDefImpl(
		dc, _pcbbd, clr, clr
		);
}

void CExtPaintManagerXP::PaintControlBarBorders(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLBARBORDERSDATA & _pcbbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcbbd.m_eCBBT == __CB_INNER_STATUSBAR_ITEM )
	{
		COLORREF clr = GetColor( COLOR_3DSHADOW, _pcbbd.m_pHelperSrc, _pcbbd.m_lParam );
		dc.Draw3dRect( &_pcbbd.m_rc, clr, clr );
		return;
	} // if( _pcbbd.m_eCBBT == __CB_INNER_STATUSBAR_ITEM )
COLORREF clr = GetColor( CLR_3DFACE_OUT, _pcbbd.m_pHelperSrc, _pcbbd.m_lParam );
	PaintControlBarBordersDefImpl(
		dc, _pcbbd, clr, clr
		);
}

void CExtPaintManagerOffice2003::PaintControlBarBorders(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLBARBORDERSDATA & _pcbbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintControlBarBorders( dc, _pcbbd );
		return;
	}

	if( _pcbbd.m_eCBBT == __CB_INNER_STATUSBAR_ITEM )
	{
		COLORREF clr = GetColor( _2003CLR_STATUSBAR_ITEM, _pcbbd.m_pHelperSrc, _pcbbd.m_lParam );
		dc.Draw3dRect( &_pcbbd.m_rc, clr, clr );
		return;
	}

	CExtPaintManagerXP::PaintControlBarBorders( dc, _pcbbd );
}

void CExtPaintManagerNativeXP::PaintControlBarBorders(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLBARBORDERSDATA & _pcbbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintControlBarBorders(
			dc,
			_pcbbd
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
}

void CExtPaintManager::PaintResizableBarChildNcAreaRect(
	CDC & dc,
	const RECT & rc,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

COLORREF clrTL = GetColor( CLR_WRB_FRAME, pHelperSrc, lParam );
COLORREF clrBR = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
	dc.Draw3dRect(
		&rc,
		clrTL,
		clrBR
		);

//	PaintTabNcAreaRect(
//		dc,
//		rc,
//		pHelperSrc,
//		lParam
//		);
}

void CExtPaintManagerXP::PaintResizableBarChildNcAreaRect(
	CDC & dc,
	const RECT & rc,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

COLORREF clrTL = GetColor( CLR_WRB_FRAME, pHelperSrc, lParam );
COLORREF clrBR = clrTL;
	dc.Draw3dRect(
		&rc,
		clrTL,
		clrBR
		);

//	CExtPaintManager::PaintResizableBarChildNcAreaRect(
//		dc,
//		rc,
//		pHelperSrc,
//		lParam
//		);
}

#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)

void CExtPaintManager::PaintShortcutListBkgnd(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		rcClient.left >= rcClient.right
		||	rcClient.top >= rcClient.bottom
		||	(! dc.RectVisible( &rcClient ) )
		)
		return;
bool bPaintDefaultBackground = true;
	if(		m_bShortcutListUseDockerBkgnd
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CWnd ) )
		&&	PaintDockerBkgnd( true, dc, (CWnd*)pHelperSrc )
		)
		bPaintDefaultBackground = false;
	if( bPaintDefaultBackground )
	{
		COLORREF clrBk = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
		dc.FillSolidRect( &rcClient, clrBk );
	}
}

void CExtPaintManagerXP::PaintShortcutListBkgnd(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		rcClient.left >= rcClient.right
		||	rcClient.top >= rcClient.bottom
		||	(! dc.RectVisible( &rcClient ) )
		)
		return;
bool bPaintDefaultBackground = true;
	if(		m_bShortcutListUseDockerBkgnd
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CWnd ) )
		&&	PaintDockerBkgnd( true, dc, (CWnd*)pHelperSrc )
		)
		bPaintDefaultBackground = false;
	if( bPaintDefaultBackground )
	{
		COLORREF clrBk = GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam );
		dc.FillSolidRect( &rcClient, clrBk );
	}
}

void CExtPaintManager::PaintShortcutListScrollButton(
	CDC & dc,
	bool bHorzLayout,
	const RECT & rcButton,
	bool bUpOrLeftBtn,
	bool bHover,
	bool bPressed,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		::IsRectEmpty( &rcButton )
		||	( ! dc.RectVisible( &rcButton ) )
		)
		return;
CRect rcGlyph( rcButton );
COLORREF clr3dFace = GetColor( COLOR_3DFACE, pHelperSrc, lParam );
COLORREF clrOuterLT = clr3dFace;
COLORREF clrOuterRB = clr3dFace;
COLORREF clrInnerLT = clr3dFace;
COLORREF clrInnerRB = clr3dFace;
	if( m_bShortcutListUseButtonStyleInScrollButtons )
	{
		PAINTPUSHBUTTONDATA _ppbd(
			pHelperSrc,
			true, // bHorz
			rcButton,
			NULL, // sText
			NULL, // hIcon
			false, //bool bFlat
			bHover,
			bPressed,
			false, // bIndeterminate
			true, // bEnabled
			true, // bDrawBorder
			false, // bDrawFocusRect
			false,
			__ALIGN_HORIZ_CENTER,
			NULL,
			false,
			0,
			false
			);
		CRect _rcButton = rcButton;
		CExtMemoryDC dcX( &dc, &_rcButton );
		PaintPushButton( dcX, _ppbd );
	} // if( m_bShortcutListUseButtonStyleInScrollButtons )
	else
	{
		dc.FillSolidRect( &rcButton, clr3dFace );
		if( bPressed )
		{
			rcGlyph.OffsetRect( 1, 1 );
			clrOuterLT = GetColor( COLOR_3DDKSHADOW, pHelperSrc, lParam );
			clrOuterRB = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
			clrInnerLT = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
		} // if( bPressed )
		else
		{
			if( bHover )
			{
				clrOuterRB = GetColor( COLOR_3DDKSHADOW, pHelperSrc, lParam );
				clrInnerLT = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
				clrInnerRB = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
			} // if( bHover )
			else
			{
				clrOuterLT = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
				clrOuterRB = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
			} // else from if( bHover )
		} // else from if( bPressed )
	} // else from if( m_bShortcutListUseButtonStyleInScrollButtons )

COLORREF ColorValues[2] =
{
	RGB(0,0,0),
	GetColor( COLOR_BTNTEXT, pHelperSrc, lParam )
};
	PaintGlyphCentered(
		dc,
		rcGlyph,
		* g_DockingCaptionGlyphs[
			bHorzLayout
				? ( bUpOrLeftBtn
						? __DCBT_ARROW_LEFT
						: __DCBT_ARROW_RIGHT
						)
				: ( bUpOrLeftBtn
						? __DCBT_ARROW_UP
						: __DCBT_ARROW_DOWN
						)
			],
		ColorValues
		);
	if( ! m_bShortcutListUseButtonStyleInScrollButtons )
	{
		dc.Draw3dRect( &rcButton, clrOuterLT, clrOuterRB );
		CRect rcButton2( rcButton );
		rcButton2.DeflateRect( 1, 1 );
		dc.Draw3dRect( &rcButton2, clrInnerLT, clrInnerRB );
	} // if( ! m_bShortcutListUseButtonStyleInScrollButtons )
}

CExtPaintManager::PAINTSHORTCUTLISTITEMSDATA::PAINTSHORTCUTLISTITEMSDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_dwShortcutListStyle( 0L )
	, m_hItemTextFont( (HFONT)::GetStockObject(DEFAULT_GUI_FONT) )
	, m_pIconBig( NULL )
	, m_pIconSmall( NULL )
	, m_lParamItem( 0L )
	, m_rcBoundsAll( 0,0,0,0 )
	, m_rcBoundsIcon( 0,0,0,0 )
	, m_rcBoundsText( 0,0,0,0 )
	, m_rcCtrlClient( 0,0,0,0 )
	, m_sText( _T("") )
	, m_bHover( false )
	, m_bPressed( false )
	, m_bVisible( false )
	, m_bChecked( false )
	, m_bExpandMode( false )
	, m_bHorzLayout( false )
	, m_bBigIconView( false )
	, m_bEraseQuery( false )
{
	ASSERT( m_hItemTextFont != NULL );
}

CExtPaintManager::PAINTSHORTCUTLISTITEMSDATA::PAINTSHORTCUTLISTITEMSDATA(
	CObject * pHelperSrc,
	DWORD dwShortcutListStyle,
	HFONT hItemTextFont,
	CExtCmdIcon * pIconBig,
	CExtCmdIcon * pIconSmall,
	LPARAM lParamItem,
	const RECT & rcBoundsAll,
	const RECT & rcBoundsIcon,
	const RECT & rcBoundsText,
	const RECT & rcCtrlClient,
	__EXT_MFC_SAFE_LPCTSTR sText,
	bool bHover,
	bool bPressed,
	bool bVisible,
	bool bChecked,
	bool bExpandMode,
	bool bHorzLayout,
	bool bBigIconView,
	bool bEraseQuery
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_dwShortcutListStyle( dwShortcutListStyle )
	, m_hItemTextFont( hItemTextFont )
	, m_pIconBig( pIconBig )
	, m_pIconSmall( pIconSmall )
	, m_lParamItem( lParamItem )
	, m_rcBoundsAll( rcBoundsAll )
	, m_rcBoundsIcon( rcBoundsIcon )
	, m_rcBoundsText( rcBoundsText )
	, m_rcCtrlClient( rcCtrlClient )
	, m_sText( (sText == NULL) ? _T("") : sText )
	, m_bHover( bHover )
	, m_bPressed( bPressed )
	, m_bVisible( bVisible )
	, m_bChecked( bChecked )
	, m_bExpandMode( bExpandMode )
	, m_bHorzLayout( bHorzLayout )
	, m_bBigIconView( bBigIconView )
	, m_bEraseQuery( bEraseQuery )
{
	ASSERT( m_hItemTextFont != NULL );
}

void CExtPaintManager::PaintShortcutListItem(
	CDC & dc,
	CExtPaintManager::PAINTSHORTCUTLISTITEMSDATA & _pslid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( _pslid.m_bEraseQuery )
	{
		if( !_pslid.m_bExpandMode )
			return;
		if(		_pslid.m_rcBoundsText.left < _pslid.m_rcBoundsText.right
			&&	_pslid.m_rcBoundsText.top < _pslid.m_rcBoundsText.bottom
			&&	dc.RectVisible( &_pslid.m_rcBoundsText )
			)
		{
			CRect rcExpandErase( _pslid.m_rcBoundsText );
			rcExpandErase.InflateRect(
				__EXT_SHORTCUTLISTWND_EXPANDED_TEXT_GAP_X,
				__EXT_SHORTCUTLISTWND_EXPANDED_TEXT_GAP_Y
				);
			COLORREF clrDarkBorder = GetColor( COLOR_3DDKSHADOW, _pslid.m_pHelperSrc, _pslid.m_lParam );
			COLORREF clrInfoBk = GetColor( COLOR_INFOBK, _pslid.m_pHelperSrc, _pslid.m_lParam );
			dc.FillSolidRect( &rcExpandErase, clrInfoBk );
			dc.Draw3dRect( &rcExpandErase, clrDarkBorder, clrDarkBorder );
		}
		return;
	} // if( _pslid.m_bEraseQuery )


	if(		_pslid.m_rcBoundsAll.IsRectEmpty()
		||	( ! dc.RectVisible( &_pslid.m_rcBoundsAll ) )
		)
		return;

	if(		(! _pslid.m_rcBoundsIcon.IsRectEmpty() )
		&&	dc.RectVisible( &_pslid.m_rcBoundsIcon )
		)
	{
		CExtCmdIcon * pIcon = _pslid.m_bBigIconView
			? _pslid.m_pIconBig
			: _pslid.m_pIconSmall
			;
		if( pIcon == NULL || pIcon->IsEmpty() )
		{
			pIcon = _pslid.m_pIconBig;
			if( pIcon == NULL || pIcon->IsEmpty() )
				pIcon = _pslid.m_pIconSmall;
		} // if( pIcon == NULL || pIcon->IsEmpty() )
		CRect rcUnderIcon( _pslid.m_rcBoundsIcon );
		rcUnderIcon.InflateRect(
			__EXT_SHORTCUTLISTWND_ICON_BORDER_GAP_X,
			__EXT_SHORTCUTLISTWND_ICON_BORDER_GAP_Y
			);
		if( ( _pslid.m_bPressed || _pslid.m_bHover ) && m_bShortcutListItemUseButtonStyle )
		{
			PAINTPUSHBUTTONDATA _ppbd(
				_pslid.m_pHelperSrc,
				true, // bHorz
				rcUnderIcon,
				NULL, // sText
				NULL, // hIcon
				false, // bFlat
				_pslid.m_bHover,
				_pslid.m_bPressed,
				false, // bIndeterminate
				true, // bEnabled
				true, // bDrawBorder
				false, // bDrawFocusRect
				false,
				__ALIGN_HORIZ_CENTER,
				NULL,
				false,
				0,
				false
				);
			CExtMemoryDC dcX( &dc, &rcUnderIcon );
			PaintPushButton( dcX, _ppbd );
		} // if( ( _pslid.m_bPressed || _pslid.m_bHover ) && m_bShortcutListItemUseButtonStyle )
		if( ( _pslid.m_bPressed || _pslid.m_bHover ) && (! m_bShortcutListItemUseButtonStyle ) )
			dc.FillSolidRect(
				&rcUnderIcon,
				GetColor( COLOR_3DSHADOW, _pslid.m_pHelperSrc, _pslid.m_lParam )
				);
		if( pIcon != NULL && (! pIcon->IsEmpty()) )
		{
			pIcon->Paint(
				this,
				dc.GetSafeHdc(),
				_pslid.m_rcBoundsIcon.left,
				_pslid.m_rcBoundsIcon.top,
				_pslid.m_rcBoundsIcon.Width(),
				_pslid.m_rcBoundsIcon.Height()
				);
		} // if( pIcon != NULL && (! pIcon->IsEmpty()) )
		if( ( _pslid.m_bPressed || _pslid.m_bHover ) && (! m_bShortcutListItemUseButtonStyle ) )
		{
			COLORREF clrLT =
				GetColor(
					_pslid.m_bPressed ? COLOR_3DDKSHADOW : COLOR_3DFACE,
					_pslid.m_pHelperSrc,
					_pslid.m_lParam 
					);
			COLORREF clrRB =
				GetColor(
					_pslid.m_bPressed ? COLOR_3DFACE : COLOR_3DDKSHADOW,
					_pslid.m_pHelperSrc,
					_pslid.m_lParam 
					);
			dc.Draw3dRect(
				&rcUnderIcon,
				clrLT,
				clrRB
				);
		} // if( ( _pslid.m_bPressed || _pslid.m_bHover ) && (! m_bShortcutListItemUseButtonStyle ) )
	}

CExtSafeString sItemText = _pslid.m_sText;
	if( (! _pslid.m_rcBoundsText.IsRectEmpty() )
		&& dc.RectVisible( &_pslid.m_rcBoundsText )
		&& ( ! sItemText.IsEmpty() )
		)
	{
		LONG nItemTextLen = sItemText.GetLength();
		CRect rcCaption( _pslid.m_rcBoundsText );
		ASSERT( _pslid.m_hItemTextFont != NULL );
		CFont * pItemFont = CFont::FromHandle( _pslid.m_hItemTextFont );
		ASSERT( pItemFont != NULL );
		ASSERT( pItemFont->GetSafeHandle() != NULL );
		CFont * pOldFont = dc.SelectObject( pItemFont );
		COLORREF clrText = m_clrShortcutListItemAlternativeText;
		if( clrText == COLORREF(-1L) )
			clrText =
				GetColor(
					_pslid.m_bExpandMode ? COLOR_INFOTEXT : COLOR_3DHILIGHT,
					_pslid.m_pHelperSrc,
					_pslid.m_lParam 
					);
		COLORREF clrTextOld = dc.SetTextColor( clrText );
		int nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CRect rcClient( _pslid.m_rcCtrlClient );
		CRect rcText( rcCaption );
		if( _pslid.m_bHorzLayout )
		{
			rcClient.DeflateRect( 0, 1 );
			rcText.top    = max( rcCaption.top, rcClient.top );
			rcText.bottom = min( rcCaption.bottom, rcClient.bottom );
		}
		else
		{
			rcClient.DeflateRect( 1, 0 );
			rcText.left  = max( rcCaption.left, rcClient.left );
			rcText.right = min( rcCaption.right, rcClient.right );
		}
		if( rcText.left < rcText.right && rcText.top < rcText.bottom )
		{
			CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
			if( _pslid.m_bHorzLayout )
				eLO = CExtRichContentLayout::__ELOT_270_CW;
			UINT nFormat = DT_LEFT|DT_VCENTER|DT_SINGLELINE|DT_END_ELLIPSIS;
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, LPCTSTR(sItemText), nItemTextLen, &rcText, nFormat, 0
				);
		} // if( rcText.left < rcText.right && rcText.top < rcText.bottom )
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrTextOld );
		dc.SelectObject( pOldFont );
	}
}

void CExtPaintManagerXP::PaintShortcutListItem(
	CDC & dc,
	CExtPaintManager::PAINTSHORTCUTLISTITEMSDATA & _pslid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( _pslid.m_bEraseQuery )
	{
		if( !_pslid.m_bExpandMode )
			return;
		if(		_pslid.m_rcBoundsText.left < _pslid.m_rcBoundsText.right
			&&	_pslid.m_rcBoundsText.top < _pslid.m_rcBoundsText.bottom
			&&	dc.RectVisible( &_pslid.m_rcBoundsText )
			)
		{
			CRect rcExpandErase( _pslid.m_rcBoundsText );
			rcExpandErase.InflateRect(
				__EXT_SHORTCUTLISTWND_EXPANDED_TEXT_GAP_X,
				__EXT_SHORTCUTLISTWND_EXPANDED_TEXT_GAP_Y
				);
			COLORREF clrDarkBorder = GetColor( COLOR_3DDKSHADOW, _pslid.m_pHelperSrc, _pslid.m_lParam );
			COLORREF clrInfoBk = GetColor( COLOR_INFOBK, _pslid.m_pHelperSrc, _pslid.m_lParam );
			dc.FillSolidRect( &rcExpandErase, clrInfoBk );
			dc.Draw3dRect( &rcExpandErase, clrDarkBorder, clrDarkBorder );
		}
		return;
	} // if( _pslid.m_bEraseQuery )


	if( _pslid.m_rcBoundsAll.IsRectEmpty()
		||	( ! dc.RectVisible( &_pslid.m_rcBoundsAll ) )
		)
		return;

	if( (! _pslid.m_rcBoundsIcon.IsRectEmpty() )
		&& dc.RectVisible( &_pslid.m_rcBoundsIcon )
		)
	{
		CExtCmdIcon * pIcon = _pslid.m_bBigIconView
			? _pslid.m_pIconBig
			: _pslid.m_pIconSmall
			;
		if( pIcon == NULL || pIcon->IsEmpty() )
		{
			pIcon = _pslid.m_pIconBig;
			if( pIcon == NULL || pIcon->IsEmpty() )
				pIcon = _pslid.m_pIconSmall;
		}
		CRect rcUnderIcon( _pslid.m_rcBoundsIcon );
		rcUnderIcon.InflateRect(
			__EXT_SHORTCUTLISTWND_ICON_BORDER_GAP_X,
			__EXT_SHORTCUTLISTWND_ICON_BORDER_GAP_Y
			);
		if( ( _pslid.m_bPressed || _pslid.m_bHover ) && m_bShortcutListItemUseButtonStyle )
		{
			PAINTPUSHBUTTONDATA _ppbd(
				_pslid.m_pHelperSrc,
				true, // bHorz
				rcUnderIcon,
				NULL, // sText
				NULL, // hIcon
				false, // bFlat
				_pslid.m_bHover,
				_pslid.m_bPressed,
				false, // bIndeterminate
				true, // bEnabled
				true, // bDrawBorder
				false, // bDrawFocusRect
				false,
				__ALIGN_HORIZ_CENTER,
				NULL,
				false,
				0,
				false
				);
			CExtMemoryDC dcX( &dc, &rcUnderIcon );
			PaintPushButton( dcX, _ppbd );
		} // if( ( _pslid.m_bPressed || _pslid.m_bHover ) && m_bShortcutListItemUseButtonStyle )
		if( ( _pslid.m_bPressed || _pslid.m_bHover ) && (! m_bShortcutListItemUseButtonStyle ) )
			dc.FillSolidRect(
				&rcUnderIcon,
				GetColor(
					_pslid.m_bPressed ? XPCLR_HILIGHT : CLR_3DFACE_IN,
					_pslid.m_pHelperSrc,
					_pslid.m_lParam 
					)
				);
		
		if( pIcon != NULL && (! pIcon->IsEmpty()) )
		{
			pIcon->Paint(
				this,
				dc.GetSafeHdc(),
				_pslid.m_rcBoundsIcon.left,
				_pslid.m_rcBoundsIcon.top,
				_pslid.m_rcBoundsIcon.Width(),
				_pslid.m_rcBoundsIcon.Height()
				);
		} // if( pIcon != NULL && (! pIcon->IsEmpty()) )
		if( ( _pslid.m_bPressed || _pslid.m_bHover ) && (! m_bShortcutListItemUseButtonStyle ) )
		{
			COLORREF clr = GetColor( XPCLR_HILIGHT_BORDER, _pslid.m_pHelperSrc, _pslid.m_lParam );
			dc.Draw3dRect( &rcUnderIcon, clr, clr );
		} // if( ( _pslid.m_bPressed || _pslid.m_bHover ) && (! m_bShortcutListItemUseButtonStyle ) )
	}

CExtSafeString sItemText = _pslid.m_sText;
	if( (! _pslid.m_rcBoundsText.IsRectEmpty() )
		&& dc.RectVisible( &_pslid.m_rcBoundsText )
		&& ( ! sItemText.IsEmpty() )
		)
	{
		LONG nItemTextLen = sItemText.GetLength();
		CRect rcCaption( _pslid.m_rcBoundsText );
		ASSERT( _pslid.m_hItemTextFont != NULL );
		CFont * pItemFont = CFont::FromHandle( _pslid.m_hItemTextFont );
		ASSERT( pItemFont != NULL );
		ASSERT( pItemFont->GetSafeHandle() != NULL );
		CFont * pOldFont = dc.SelectObject( pItemFont );
		COLORREF clrText = m_clrShortcutListItemAlternativeText;
		if( clrText == COLORREF(-1L) )
			GetColor(
				_pslid.m_bExpandMode ? COLOR_INFOTEXT : COLOR_BTNTEXT,
				_pslid.m_pHelperSrc,
				_pslid.m_lParam 
				);
		COLORREF clrTextOld = dc.SetTextColor( clrText );
		int nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CRect rcClient( _pslid.m_rcCtrlClient );
		CRect rcText( rcCaption );
		if( _pslid.m_bHorzLayout )
		{
			rcClient.DeflateRect( 0, 1 );
			rcText.top    = max( rcCaption.top, rcClient.top );
			rcText.bottom = min( rcCaption.bottom, rcClient.bottom );
		}
		else
		{
			rcClient.DeflateRect( 1, 0 );
			rcText.left  = max( rcCaption.left, rcClient.left );
			rcText.right = min( rcCaption.right, rcClient.right );
		}
		if( rcText.left < rcText.right && rcText.top < rcText.bottom )
		{
			CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
			if( _pslid.m_bHorzLayout )
				eLO = CExtRichContentLayout::__ELOT_270_CW;
			UINT nFormat = DT_LEFT|DT_VCENTER|DT_SINGLELINE|DT_END_ELLIPSIS;
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, LPCTSTR(sItemText), nItemTextLen, &rcText, nFormat, 0
				);
		} // if( rcText.left < rcText.right && rcText.top < rcText.bottom )
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrTextOld );
		dc.SelectObject( pOldFont );
	}
}

#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)

COLORREF CExtPaintManager::GetShadowAdjustColor()
{
	ASSERT_VALID( this );
	return ((COLORREF)(-1));
}

COLORREF CExtPaintManagerXP::GetShadowAdjustColor()
{
	ASSERT_VALID( this );
	return ((COLORREF)(-1));
}

COLORREF CExtPaintManagerOffice2003::GetShadowAdjustColor()
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::GetShadowAdjustColor();

	if(	OnQueryUseThemeColors() )
	{
		COLORREF clrFillHint;
		if( OnQueryThemeColors( &clrFillHint ) )
			return CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.0, -0.60, 0.50 );
	}

	return ((COLORREF)(-1));
}

COLORREF CExtPaintManagerStudio2005::GetShadowAdjustColor()
{
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetShadowAdjustColor();
	return CExtPaintManagerOffice2003::GetShadowAdjustColor();
}

COLORREF CExtPaintManagerOffice2007_Impl::GetShadowAdjustColor()
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::GetShadowAdjustColor();
	
	return ((COLORREF)(-1));
}

void CExtPaintManager::FixedBar_AdjustClientRect(
	const CExtControlBar * pBar,
	CRect & rcPreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	if( pBar->IsDockedVertically() )
		rcPreCalc.DeflateRect( 1, 2 );
	else
		rcPreCalc.DeflateRect( 2, 1 );
}

void CExtPaintManagerXP::FixedBar_AdjustClientRect(
	const CExtControlBar * pBar,
	CRect & rcPreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtControlBar, pBar ); pBar;
//	if( pBar->IsDockedVertically() )
//		rcPreCalc.DeflateRect( 1, 1 );
//	else
		rcPreCalc.DeflateRect( 1, 1 );
}

void CExtPaintManagerOffice2003::FixedBar_AdjustClientRect(
	const CExtControlBar * pBar,
	CRect & rcPreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::FixedBar_AdjustClientRect(
			pBar,
			rcPreCalc
			);
		return;
	}

	if( stat_GetBPP() <= 8 )
	{
		CExtPaintManagerXP::FixedBar_AdjustClientRect(
			pBar,
			rcPreCalc
			);
		return;
	}
}

void CExtPaintManagerNativeXP::FixedBar_AdjustClientRect(
	const CExtControlBar * pBar,
	CRect & rcPreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	CExtPaintManager::FixedBar_AdjustClientRect( pBar, rcPreCalc );
}

INT CExtPaintManager::FixedBar_GetRowDistance(
	const CExtToolControlBar * pBar
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	if( pBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar)) )
		return 0;
	return __EXT_TB_ROW_DISTANCE;
}

INT CExtPaintManagerXP::FixedBar_GetRowDistance(
	const CExtToolControlBar * pBar
	)
{
	ASSERT_VALID( this );
	return CExtPaintManager::FixedBar_GetRowDistance( pBar );
}

INT CExtPaintManagerOffice2003::FixedBar_GetRowDistance(
	const CExtToolControlBar * pBar
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	if( IsHighContrast() )
		return CExtPaintManagerXP::FixedBar_GetRowDistance( pBar );
	if(		(	(! pBar->IsFloating() )
//			&&	pBar->OnQueryMultiRowLayout()
			)
		||	pBar->m_bPaletteMode
		||	stat_GetBPP() <= 8
		)
		return CExtPaintManagerXP::FixedBar_GetRowDistance( pBar );
	return 0;
}

bool CExtPaintManager::FixedBar_IsPaintRowBkMode(
	const CExtToolControlBar * pBar
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	pBar;
	return false;
}

bool CExtPaintManagerXP::FixedBar_IsPaintRowBkMode(
	const CExtToolControlBar * pBar
	)
{
	ASSERT_VALID( this );
	return CExtPaintManager::FixedBar_IsPaintRowBkMode( pBar );
}

bool CExtPaintManagerOffice2003::FixedBar_IsPaintRowBkMode(
	const CExtToolControlBar * pBar
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	if( IsHighContrast() )
		return CExtPaintManagerXP::FixedBar_IsPaintRowBkMode( pBar );
	if(		pBar->m_bPaletteMode
		||	pBar->m_pDockBar == NULL
		||	pBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
		||	pBar->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) )
		||	(! pBar->IsFloating() )
		||	stat_GetBPP() <= 8
		||	(	
				( pBar->m_pDockSite == NULL || pBar->m_bPresubclassDialogMode )
			&&	(! pBar->m_bForceBalloonGradientInDialogs)
			)
		)
		return false;
	return true;
}

bool CExtPaintManagerStudio2010::FixedBar_IsPaintRowBkMode(
	const CExtToolControlBar * pBar
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
//	ASSERT( pBar->IsFixedMode() );
	if( IsHighContrast() )
		return CExtPaintManagerStudio2005::FixedBar_IsPaintRowBkMode( pBar );
	if(		pBar->m_bPaletteMode
		||	pBar->m_pDockBar == NULL
		||	(! pBar->IsFloating() )
		||	stat_GetBPP() <= 8
		||	(	
				( pBar->m_pDockSite == NULL || pBar->m_bPresubclassDialogMode )
			&&	(! pBar->m_bForceBalloonGradientInDialogs)
			)
		)
		return false;
	return true;
}

void CExtPaintManagerStudio2010::PaintToolbarExpandButton(
	CDC & dc,
	const RECT & rcButtonArea,
	bool bHorz, // if false - down
	bool bBarIsCompletelyVisible,
	bool bEnabled,
	bool bPushed,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bTransparentBackground // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::PaintToolbarExpandButton(
			dc, rcButtonArea, bHorz, bBarIsCompletelyVisible,
			bEnabled, bPushed, bHover,
			pHelperSrc, lParam, bTransparentBackground
			);
		return;
	}
CRect rect( rcButtonArea );
	rect.NormalizeRect();
	if( ! dc.RectVisible( &rect ) )
		return;
CExtToolControlBar * pToolBar = NULL;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtBarContentExpandButton))
		)
	{
		pToolBar = ((CExtBarContentExpandButton*)pHelperSrc)->GetBar();
		ASSERT_VALID( pToolBar );
		if(		pToolBar->m_bPaletteMode
			||	pToolBar->IsFloating()
			||	pToolBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar))
			||	pToolBar->IsKindOf(RUNTIME_CLASS(CExtPanelControlBar))
			||	(	
					( pToolBar->m_pDockSite == NULL || pToolBar->m_bPresubclassDialogMode )
				&&	(! pToolBar->m_bForceBalloonGradientInDialogs )
				)
			)
			pToolBar = NULL;
	}
	if( pToolBar == NULL )
	{
		CExtPaintManagerStudio2005::PaintToolbarExpandButton(
			dc, rcButtonArea, bHorz, bBarIsCompletelyVisible,
			bEnabled, bPushed, bHover,
			pHelperSrc, lParam, bTransparentBackground
			);
		return;
	}
	ASSERT_VALID( pToolBar );
CRect rcToolbarClientArea;
	pToolBar->GetClientRect( &rcToolbarClientArea );
CRect rectButton( rect );
	if( bHorz )
	{
		rectButton.OffsetRect( rcToolbarClientArea.right - rectButton.right, 0 );
		rectButton.InflateRect( 1, 0, 0, 0 );
		rectButton.top = rcToolbarClientArea.top;
		rectButton.bottom = rcToolbarClientArea.bottom - 1;
	} // if( bHorz )
	else
	{
		rectButton.OffsetRect( 0, rcToolbarClientArea.bottom - rectButton.bottom );
		rectButton.InflateRect( 0, 1, 0, 0 );
		rectButton.left = rcToolbarClientArea.left;
		rectButton.right = rcToolbarClientArea.right - 1;
		rectButton.OffsetRect( 1, 0 );
	} // else from if( bHorz )
CExtBitmap & bmpBkgnd =
		bHorz
			? ( bPushed ? m_bmpTbExpPressedH : ( bHover ? m_bmpTbExpHoverH : m_bmpTbExpNormalH ) )
			: ( bPushed ? m_bmpTbExpPressedV : ( bHover ? m_bmpTbExpHoverV : m_bmpTbExpNormalV ) )
			;
	VERIFY( bmpBkgnd.AlphaBlendSkinParts( dc.m_hDC, rectButton, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true ) );
const glyph_t * pGlyph = NULL, * pGlyph2 = NULL;
	if( bHorz )
	{
		pGlyph = m_pGlyphTbEpBtnH0;
		pGlyph2 = m_pGlyphTbEpBtnH1;
	} // if( bHorz )
	else
	{
		pGlyph = m_pGlyphTbEpBtnV0;
		pGlyph2 = m_pGlyphTbEpBtnV1;
	} // else from if( bHorz )
	ASSERT( pGlyph != NULL );
	ASSERT( pGlyph2 != NULL );
COLORREF ColorValues[] = { 0, bPushed ? m_clrTbExpGlyphPressed : ( bHover ? m_clrTbExpGlyphHover : m_clrTbExpGlyphNormal ) };
CRect rectGlyph( rectButton.TopLeft(),pGlyph->Size() );
CRect rectGlyph2( rectGlyph );
CSize sizePushedOffset = GetPushedOffset();
	if( bHorz )
	{
		int nGap = (max(sizePushedOffset.cy,1)) * 3;
		rectGlyph.OffsetRect(
			( rectButton.Size().cx - pGlyph->Size().cx ) / 2 + 1,
			rectButton.Size().cy - pGlyph->Size().cy - nGap - 1
			);
		rectGlyph2.OffsetRect(
			( rectButton.Size().cx - pGlyph2->Size().cx ) / 2 + 1,
			nGap + 1
			);
	} // if( bHorz )
	else
	{
		int nGap = (max(sizePushedOffset.cx,1)) * 3;
		rectGlyph.OffsetRect(
			nGap + 1,
			( rectButton.Size().cy - pGlyph->Size().cy )/2 + 1
			);
		rectGlyph2.OffsetRect(
			rectButton.Size().cx - pGlyph2->Size().cx - nGap - 1,
			( rectButton.Size().cy - pGlyph2->Size().cy ) / 2 + 1
			);
		ASSERT( m_bExpBtnSwapVGlyphs );
		CRect rcTmp( rectGlyph );
		rectGlyph = rectGlyph2;
		rectGlyph2 = rcTmp;
	} // else from if( bHorz )
	PaintGlyph( dc, rectGlyph.TopLeft(), *pGlyph, ColorValues );
	if( ! bBarIsCompletelyVisible )
		PaintGlyph( dc, rectGlyph2.TopLeft(), *pGlyph2, ColorValues );
	dc.SelectClipRgn( NULL );
}

void CExtPaintManager::PaintFloatToolbarRowBk(
	CDC & dc,
	const CExtToolControlBar * pBar,
	int nLastReviewBtnIdx,
	CRect & rcRowBk
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
	ASSERT( nLastReviewBtnIdx >= 0 );
	dc;
	pBar;
	nLastReviewBtnIdx;
	rcRowBk;
}

void CExtPaintManagerXP::PaintFloatToolbarRowBk(
	CDC & dc,
	const CExtToolControlBar * pBar,
	int nLastReviewBtnIdx,
	CRect & rcRowBk
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
	ASSERT( nLastReviewBtnIdx >= 0 );
	dc;
	pBar;
	nLastReviewBtnIdx;
	rcRowBk;
}

void CExtPaintManagerOffice2003::PaintFloatToolbarRowBk(
	CDC & dc,
	const CExtToolControlBar * pBar,
	int nLastReviewBtnIdx,
	CRect & rcRowBk
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
	ASSERT( nLastReviewBtnIdx >= 0 );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintFloatToolbarRowBk( dc, pBar, nLastReviewBtnIdx, rcRowBk );
		return;
	}
	OnPaintToolBarGradient( dc, rcRowBk, true, (CObject*)pBar );
}

void CExtPaintManager::OnSysColorChange()
{
	ASSERT_VALID( this );
	OnPaintSessionComplete( this );
	SyncSysColors();
	InitTranslatedColors();
	InitHelperBrushes();
}

void CExtPaintManager::OnSettingChange(
	UINT uFlags,
	__EXT_MFC_SAFE_LPCTSTR lpszSection
	)
{
	ASSERT_VALID( this );
	uFlags;
	lpszSection;
	OnPaintSessionComplete( this );
	SyncSysColors();
	InitTranslatedColors();
	InitHelperBrushes();
}

void CExtPaintManager::OnDisplayChange(
	INT nDepthBPP,
	CPoint ptSizes
	)
{
	ASSERT_VALID( this );
	nDepthBPP;
	ptSizes;
	OnPaintSessionComplete( this );
	SyncSysColors();
	InitTranslatedColors();
	InitHelperBrushes();
}

void CExtPaintManager::OnThemeChanged(
	WPARAM wParam,
	LPARAM lParam
	)
{
	ASSERT_VALID( this );
	wParam;
	lParam;
	OnPaintSessionComplete( this );
	SyncSysColors();
	InitTranslatedColors();
	InitHelperBrushes();
}

void CExtPaintManager::OnPaintSessionComplete(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
#ifdef __TRACE_PAINT_SESSIONS
		TRACE( "   PAINT_SESSION: Complete\n" );
#endif // __TRACE_PAINT_SESSIONS
	pHelperSrc;
	lParam;
}
	
bool CExtPaintManager::OnStateSerialize(
	CArchive & ar,
	bool bEnableThrowExceptions // = false
	)
{
	ar;
	bEnableThrowExceptions;
	return true;
}

CExtPaintManager::PAINTTOOLBARTEXTFIELDDATA::PAINTTOOLBARTEXTFIELDDATA()
	: m_pHelperSrc( NULL )
	, m_lParam( 0L )
	, m_nDrawTextFlags( DT_SINGLELINE|DT_LEFT|DT_TOP|DT_NOPREFIX )
	, m_sText( _T("") )
	, m_rcButton( 0, 0, 0, 0 )
	, m_rcTextField( 0, 0, 0, 0 )
	, m_bComboField( false )
	, m_bHover( false )
	, m_bPushed( false )
	, m_bEnabled( false )
{
}

CExtPaintManager::PAINTTOOLBARTEXTFIELDDATA::PAINTTOOLBARTEXTFIELDDATA(
	CObject * pHelperSrc,
	__EXT_MFC_SAFE_LPCTSTR sText,
	const RECT & rcButton,
	const RECT & rcTextField,
	bool bComboField,
	bool bHover,
	bool bPushed,
	bool bEnabled
	)
	: m_pHelperSrc( pHelperSrc )
	, m_lParam( 0L )
	, m_nDrawTextFlags( DT_SINGLELINE|DT_LEFT|DT_TOP|DT_NOPREFIX )
	, m_sText( (sText == NULL) ? _T("") : sText )
	, m_rcButton( rcButton )
	, m_rcTextField( rcTextField )
	, m_bComboField( bComboField )
	, m_bHover( bHover )
	, m_bPushed( bPushed )
	, m_bEnabled( bEnabled )
{
}

void CExtPaintManager::PaintToolbarTextField(
	CDC & dc,
	PAINTTOOLBARTEXTFIELDDATA & _ptbtfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
COLORREF clrWindow = GetColor( _ptbtfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
CRect rcTextField( _ptbtfd.m_rcButton );
	if(	!_ptbtfd.m_bEnabled )  
		rcTextField.DeflateRect( 1, 1 );
	if( _ptbtfd.m_bComboField )
	{
		if( _ptbtfd.m_bEnabled )
		{
			dc.FillSolidRect( &rcTextField, clrWindow );
			PAINTCOMBOFRAMEDATA _pcfd( _ptbtfd.m_pHelperSrc, rcTextField, _ptbtfd.m_bHover, _ptbtfd.m_bPushed, _ptbtfd.m_bEnabled );
			_pcfd.m_bNoTopOuterBorder = true;
			PaintComboFrame( dc, _pcfd );
			dc.SelectClipRgn( NULL );
		}
		else
		{
			dc.Draw3dRect(
				&rcTextField,
				GetColor( COLOR_WINDOW, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam ),
				GetColor( COLOR_WINDOW, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam )
				);
			INT nDD = GetDropDownButtonWidth( _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
			CRect rcBtn( rcTextField );
			rcBtn.left = rcBtn.right - nDD;
			// paint arrow down
			glyph_t* pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
			ASSERT( pGlyph != NULL );
			COLORREF ColorValues[2] = { RGB(0,0,0), ::GetSysColor( COLOR_WINDOWTEXT ) };
			PaintGlyphCentered( dc, rcBtn, *pGlyph, ColorValues );
		}
	} // if( _ptbtfd.m_bComboField )
	else
	{
		if( _ptbtfd.m_bEnabled )
		{
			PAINTCONTROLFRAMEDATA _pcfd( _ptbtfd.m_pHelperSrc, rcTextField, true, _ptbtfd.m_bHover, _ptbtfd.m_bEnabled, false, false );
			PaintControlFrame( dc, _pcfd );
		}
		else
		{
			COLORREF clrBorder = GetColor( COLOR_WINDOW, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
			dc.Draw3dRect( &rcTextField, clrBorder, clrBorder );
		}
	} // else from if( _ptbtfd.m_bComboField )
CRect rcBk( _ptbtfd.m_rcTextField );
	if( ! _ptbtfd.m_bEnabled )
		rcBk.DeflateRect( 0, 1 );
	dc.FillSolidRect( &rcBk, clrWindow );
	if( ! _ptbtfd.m_sText.IsEmpty() )
	{
		COLORREF clrTextOld = dc.SetTextColor( ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOWTEXT : COLOR_GRAYTEXT ) );
		CFont * pFontOld = dc.SelectObject( &m_FontNormal );
		int nBkModeOld = dc.SetBkMode( TRANSPARENT );
		CRect rcText( _ptbtfd.m_rcTextField );
		rcText.left += 5;
		rcText.top += 2;
		bool bRTL = ( (g_ResourceManager->OnQueryLangLayout()&LAYOUT_RTL) != 0 ) ? true : false;
		DWORD dwDtAlignFlags = bRTL ? (DT_RTLREADING|DT_RIGHT) : 0;
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_ptbtfd.m_sText), _ptbtfd.m_sText.GetLength(), &rcText, _ptbtfd.m_nDrawTextFlags|dwDtAlignFlags, 0 );
		dc.SetBkMode( nBkModeOld );
		dc.SelectObject( pFontOld );
		dc.SetTextColor( clrTextOld );
	} // if( !_ptbtfd.m_sText.IsEmpty() )
}

void CExtPaintManagerXP::PaintToolbarTextField(
	CDC & dc,
	PAINTTOOLBARTEXTFIELDDATA & _ptbtfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
COLORREF clrDkBorder = GetColor( XPCLR_HILIGHT_BORDER, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
CRect rcTextFieldOuter( _ptbtfd.m_rcTextField );
	if(		_ptbtfd.m_bHover 
		||	_ptbtfd.m_bPushed 
		||	(!_ptbtfd.m_bEnabled) 
		)
		rcTextFieldOuter.InflateRect( 1, 1 );
	if( _ptbtfd.m_bComboField )
	{
		// paint combo or date field
		INT nDD = GetDropDownButtonWidth( _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
		rcTextFieldOuter.right += nDD;
		CRect rcBtn( rcTextFieldOuter );
		rcBtn.left = rcBtn.right - nDD;
		if( (!(_ptbtfd.m_bHover || _ptbtfd.m_bPushed)) && _ptbtfd.m_bEnabled  ) 
		{
			rcBtn.DeflateRect( 3, 1, 1, 1 );
			dc.ExcludeClipRect( &rcBtn );
		}
		dc.FillSolidRect( &rcTextFieldOuter, ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE ) );
		dc.SelectClipRgn( NULL );
		if( _ptbtfd.m_bHover && _ptbtfd.m_bEnabled )
		{
			PAINTPUSHBUTTONDATA _ppbd(
				_ptbtfd.m_pHelperSrc,
				true,
				rcBtn,
				_T(""),
				NULL,
				true,
				_ptbtfd.m_bHover,
				_ptbtfd.m_bPushed,
				false,
				_ptbtfd.m_bEnabled,
				true,
				false,
				false,
				0
				);
			PaintPushButton( dc, _ppbd );
			dc.Draw3dRect( &rcTextFieldOuter, clrDkBorder, clrDkBorder );
		}
		else
		{
			if( ! _ptbtfd.m_bEnabled )
			{
				COLORREF clrBorder = GetColor( XPCLR_TEXT_FIELD_BORDER_DISABLED, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
				dc.Draw3dRect( &rcTextFieldOuter, clrBorder, clrBorder );
			}
		}
		// paint arrow down
		rcBtn.top++;
		if( ! _ptbtfd.m_bEnabled )
			rcBtn.left++;
		glyph_t* pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
		ASSERT( pGlyph != NULL );
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			_ptbtfd.m_bEnabled 
				? GetColor( _ptbtfd.m_bPushed ? COLOR_3DDKSHADOW : COLOR_WINDOWTEXT, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam )
				: ::GetSysColor( COLOR_GRAYTEXT )
		};
		PaintGlyphCentered( dc, rcBtn, *pGlyph, ColorValues );
		rcTextFieldOuter.right -= nDD;
	}
	else
	{
		// paint text field
		dc.FillSolidRect( &rcTextFieldOuter, ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE ) );
		if( _ptbtfd.m_bEnabled )
		{
			if( _ptbtfd.m_bHover || _ptbtfd.m_bPushed )
				dc.Draw3dRect( &rcTextFieldOuter, clrDkBorder, clrDkBorder );
		}
		else
		{
			COLORREF clrBorder = GetColor( XPCLR_TEXT_FIELD_BORDER_DISABLED, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
			dc.Draw3dRect( &rcTextFieldOuter, clrBorder, clrBorder );
		}
	}
	if( ! _ptbtfd.m_sText.IsEmpty() )
	{
		COLORREF clrTextOld = dc.SetTextColor( ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOWTEXT : COLOR_GRAYTEXT ) );
		CFont * pFontOld = dc.SelectObject( &m_FontNormal );
		int nBkModeOld = dc.SetBkMode( TRANSPARENT );
		CRect rcText( _ptbtfd.m_rcTextField );
		rcText.left += 5;
		rcText.top += 2;
		bool bRTL = ( (g_ResourceManager->OnQueryLangLayout()&LAYOUT_RTL) != 0 ) ? true : false;
		DWORD dwDtAlignFlags = bRTL ? (DT_RTLREADING|DT_RIGHT) : 0;
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_ptbtfd.m_sText), _ptbtfd.m_sText.GetLength(), &rcText, _ptbtfd.m_nDrawTextFlags|dwDtAlignFlags, 0 );
		dc.SetBkMode( nBkModeOld );
		dc.SelectObject( pFontOld );
		dc.SetTextColor( clrTextOld );
	} // if( !_ptbtfd.m_sText.IsEmpty() )
}

COLORREF CExtPaintManager::QueryObjectTextColor(
	CDC & dc,
	bool bEnabled,
	bool bFocused,
	bool bHovered,
	bool bPressed,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	dc; bEnabled; bFocused; bHovered; bPressed; pHelperSrc; lParam;
	return COLORREF(-1L);
}

COLORREF CExtPaintManager::GetIconAlphaColor() const
{
	ASSERT_VALID( this );
	return (COLORREF(-1L)); // no alpha icon effect
}

COLORREF CExtPaintManagerXP::GetIconAlphaColor() const
{
	ASSERT_VALID( this );
	return (COLORREF(-1L)); // no alpha icon effect
}

COLORREF CExtPaintManagerOffice2003::GetIconAlphaColor() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetIconAlphaColor();
COLORREF clrAlpha = ( const_cast < CExtPaintManagerOffice2003 * > ( this ) ) -> GetColor( COLOR_3DFACE, (CObject*)this );
	return clrAlpha;
}

COLORREF CExtPaintManagerStudio2005::GetIconAlphaColor() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetIconAlphaColor();
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
	if( eCurrentTheme == ThemeLunaOlive )
		return RGB(164,164,144);
	else if( eCurrentTheme != ThemeUnknown )
		return RGB(0,0,128);
	return CExtPaintManagerOffice2003::GetIconAlphaColor();
}

double CExtPaintManager::GetIconAlphaAdjustPercent() const
{
	ASSERT_VALID( this );
	return 0.0; // no alpha adjustment
}

double CExtPaintManagerXP::GetIconAlphaAdjustPercent() const
{
	ASSERT_VALID( this );
	return 0.0; // no alpha adjustment
}

double CExtPaintManagerOffice2003::GetIconAlphaAdjustPercent() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetIconAlphaAdjustPercent();
	return -0.50;
}

double CExtPaintManagerStudio2005::GetIconAlphaAdjustPercent() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetIconAlphaAdjustPercent();
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
	if( eCurrentTheme != ThemeUnknown )
		return -0.70;
	return CExtPaintManagerOffice2003::GetIconAlphaAdjustPercent();
}

bool CExtPaintManager::AdjustIcon( 
	CExtCmdIcon * pIcon
	)
{
	ASSERT_VALID( this );
	if( pIcon == NULL )
	{
		ASSERT( FALSE );
		return false;
	}

	if( (pIcon->m_dwFlags&__EXT_ICON_PERSISTENT_BITMAP_DISABLED) == 0 )
	{
		pIcon->m_bmpDisabled.Empty();
		pIcon->m_bmpDisabled = pIcon->m_bmpNormal;
		pIcon->m_bmpDisabled.Make32();

		pIcon->m_bmpDisabled.MakeMono();
		pIcon->m_bmpDisabled.AdjustAlpha( -0.75 );

		return true;
	}

	return false;
}

bool CExtPaintManagerXP::AdjustIcon( 
	CExtCmdIcon * pIcon
	)
{
	ASSERT_VALID( this );
	if( pIcon == NULL )
	{
		ASSERT( FALSE );
		return false;
	}

	if( (pIcon->m_dwFlags&__EXT_ICON_PERSISTENT_BITMAP_DISABLED) == 0 )
	{
		pIcon->m_bmpDisabled.Empty();
		pIcon->m_bmpDisabled = pIcon->m_bmpNormal;
		pIcon->m_bmpDisabled.Make32();

		COLORREF clrAccent = GetColor( XPCLR_3DFACE_NORMAL );
		double H = 0.0, S = 0.0, L = 0.0;
		CExtBitmap::stat_RGBtoHSL( clrAccent, &H, &S, &L );
		clrAccent = CExtBitmap::stat_HLStoRGB( H, L, S );
		pIcon->m_bmpDisabled.AlphaColor( RGB(255,255,255), RGB(32,32,32), 0 );
		pIcon->m_bmpDisabled.AdjustHLS( COLORREF(-1L), 0, 0.0, -1.0, -1.0 );
		pIcon->m_bmpDisabled.MakeMono( clrAccent );
		pIcon->m_bmpDisabled.AdjustHLS( COLORREF(-1L), 0, 0.0, 0.5, 0.0 );
		pIcon->m_bmpDisabled.AdjustAlpha( -0.5 );

		return true;
	}

	return false;
}

bool CExtPaintManagerOffice2003::AdjustIcon( 
	CExtCmdIcon * pIcon
	)
{
	ASSERT_VALID( this );
	if( pIcon == NULL )
	{
		ASSERT( FALSE );
		return false;
	}
	if( (pIcon->m_dwFlags&__EXT_ICON_PERSISTENT_BITMAP_DISABLED) == 0 )
	{
		pIcon->m_bmpDisabled.Empty();
		pIcon->m_bmpDisabled = pIcon->m_bmpNormal;
		pIcon->m_bmpDisabled.Make32();
		COLORREF clrAlpha = GetIconAlphaColor();
		if( clrAlpha == COLORREF(-1L) )
		{
			pIcon->m_bmpDisabled.MakeMono( GetColor( COLOR_3DFACE ) );
			pIcon->m_bmpDisabled.AdjustAlpha( -0.70 );
		}
		else
		{
			double H = 0.0, S = 0.0, L = 0.0;
			CExtBitmap::stat_RGBtoHSL( clrAlpha, &H, &S, &L );
			S = 0.3;
			clrAlpha = CExtBitmap::stat_HLStoRGB( H, L, S );
			pIcon->m_bmpDisabled.MakeMono( clrAlpha );
			double lfAlphaAdjustPercent = GetIconAlphaAdjustPercent();
			pIcon->m_bmpDisabled.AdjustAlpha( lfAlphaAdjustPercent );
		}
		return true;
	}
	return false;
}

CSize CExtPaintManager::GetResizingGriperSize(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc; lParam;
	return CSize( 16, 16 );	
}

void CExtPaintManager::PaintResizingGripper(
	CDC & dc,
	const RECT & rcGrip,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		rcGrip.left > rcGrip.right
		||	rcGrip.top > rcGrip.bottom
		||	( ! dc.RectVisible(&rcGrip) )
		)
		return;
COLORREF clrLineShadow = GetColor( COLOR_WINDOW, pHelperSrc, lParam );
COLORREF clrLineFace = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
CPen penLineShadow(PS_SOLID, 1, clrLineShadow);
CPen penLineFace(PS_SOLID, 1, clrLineFace);
CPen * pOldPen = NULL;
CPoint ptTop = CPoint( rcGrip.right, rcGrip.bottom - 3 );
CPoint ptBottom = CPoint( rcGrip.right - 2, rcGrip.bottom - 1 );
	for( int nLine = 0; nLine < 3; nLine++ )
	{
		pOldPen = dc.SelectObject( &penLineFace );
		dc.MoveTo( ptBottom );
		dc.LineTo( ptTop );
		ptBottom.Offset( -1, 0 );
		ptTop.Offset( 0, -1 );
		dc.MoveTo( ptBottom );
		dc.LineTo( ptTop );
		dc.SelectObject( pOldPen );

		pOldPen = dc.SelectObject( &penLineShadow );
		ptBottom.Offset( -1, 0 );
		ptTop.Offset( 0, -1 );
		dc.MoveTo( ptBottom );
		dc.LineTo( ptTop );
		dc.SelectObject( pOldPen );
		
		ptBottom.Offset( -2, 0 );
		ptTop.Offset( 0, -2 );
	}
}

void CExtPaintManagerOffice2003::PaintResizingGripper(
	CDC & dc,
	const RECT & rcGrip,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintResizingGripper( dc, rcGrip, pHelperSrc, lParam );
		return;
	}
	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8 )
	{
		CExtPaintManagerXP::PaintResizingGripper( dc, rcGrip, pHelperSrc, lParam );
		return;
	}
COLORREF clrDotShadow = GetColor( _2003CLR_GRIPPER_DOT_LIGHT, pHelperSrc, lParam );
COLORREF clrDotFace = GetColor( _2003CLR_GRIPPER_DOT_DARK, pHelperSrc, lParam );
static const CSize g_sizeGripDot( 2, 2 );
static const CSize g_sizeGripDist( 1, 1 );
static const CSize g_sizeGripShadowOffset( 1, 1 );
CRect rcDotFace( CPoint(rcGrip.right, rcGrip.bottom), g_sizeGripDot );
	rcDotFace.OffsetRect( -g_sizeGripDot );
CRect rcDotShadow( rcDotFace );
	rcDotFace.OffsetRect( -g_sizeGripShadowOffset );
CRect rcDotFaceSave( rcDotFace );
CRect rcDotShadowSave( rcDotShadow );
int nStepH = -(g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx);
int nStepV = -(g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy);
int nDot = 0;
	for( nDot = 0; nDot < 3; nDot++ )
	{
		dc.FillSolidRect( &rcDotShadow, clrDotShadow );
		dc.FillSolidRect( &rcDotFace, clrDotFace );
		rcDotFace.OffsetRect( 0, nStepV );
		rcDotShadow.OffsetRect( 0, nStepV );
	} // for( nDot = 0; nDot < nDotCount; nDot++ )
	
	rcDotFace = rcDotFaceSave;
	rcDotShadow = rcDotShadowSave;
	rcDotFace.OffsetRect( nStepH, 0 );
	rcDotShadow.OffsetRect( nStepH, 0 );
	for( nDot = 0; nDot < 2; nDot++ )
	{
		dc.FillSolidRect( &rcDotShadow, clrDotShadow );
		dc.FillSolidRect( &rcDotFace, clrDotFace );
		rcDotFace.OffsetRect( 0, nStepV );
		rcDotShadow.OffsetRect( 0, nStepV );
	} // for( nDot = 0; nDot < 2; nDot++ )

	rcDotFace = rcDotFaceSave;
	rcDotShadow = rcDotShadowSave;
	rcDotFace.OffsetRect( nStepH*2, 0 );
	rcDotShadow.OffsetRect( nStepH*2, 0 );
	dc.FillSolidRect( &rcDotShadow, clrDotShadow );
	dc.FillSolidRect( &rcDotFace, clrDotFace );
}

void CExtPaintManagerOffice2007_Impl::PaintResizingGripper(
	CDC & dc,
	const RECT & rcGrip,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintResizingGripper( dc, rcGrip, pHelperSrc, lParam );
		return;
	}
	if(		::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		||	m_bmpResizingGripper.IsEmpty()
		)
	{
		CExtPaintManagerOffice2003::PaintResizingGripper( dc, rcGrip, pHelperSrc, lParam );
		return;
	}
CRect _rc = rcGrip;
CSize _size = m_bmpResizingGripper.GetSize();
	_rc.left = _rc.right - _size.cx;
	_rc.top = _rc.bottom - _size.cy;
int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
	::SetStretchBltMode( dc.m_hDC, ( g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
//CExtBitmap _bmp1;
CExtBitmap * pBmp = &m_bmpResizingGripper;
//	if( dc.GetLayout() == LAYOUT_RTL )
//	{
//		_bmp1 = m_bmpResizingGripper;
//		_bmp1.FlipHorizontal();
//		pBmp = &_bmp1;
//	} // if( dc.GetLayout() == LAYOUT_RTL )
	pBmp->AlphaBlend(
		dc.m_hDC,
		_rc.left,
		_rc.top,
		_rc.Width(),
		_rc.Height(),
		0,
		0,
		_size.cx,
		_size.cy
		);
	::SetStretchBltMode(
		dc.m_hDC,
		nOldStretchBltMode
		);
}

void CExtPaintManagerNativeXP::PaintResizingGripper(
	CDC & dc,
	const RECT & rcGrip,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		rcGrip.left > rcGrip.right
		||	rcGrip.top > rcGrip.bottom
		||	( ! dc.RectVisible(&rcGrip) )
		)
		return;
	if(		(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		||	(	pHelperSrc != NULL
			&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
			)
		)
	{
		CExtPaintManager::PaintResizingGripper( dc, rcGrip, pHelperSrc, lParam );
		return;
	}
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	ASSERT( pWnd != NULL );
	ASSERT_VALID( pWnd );
	if( g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_STATUS ) != NULL )
	{
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				pWnd->GetSafeHwnd(), 
				dc.GetSafeHdc(), 
				SP_GRIPPER, 
				0, 
				&rcGrip, 
				&rcGrip
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

#if (!defined __EXT_MFC_NO_DATE_PICKER)

void CExtPaintManager::PaintDatePickerPushButton(
	CDC & dc,
	const CRect & rcButton,
	LONG nButtonType, // __EDPWH_BTN_NONE or __EDPWH_BTN_TODAY
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	bool bFlat,
	bool bDrawBorder,
	bool bPushed,
	bool bHover,
	HFONT hFont,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	lParam;
	ASSERT( strCaption != NULL );
	nButtonType;
	if( ! dc.RectVisible(&rcButton) )
		return;
CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		true, rcButton, strCaption,
		NULL, bFlat, bHover, bPushed,
		false, true,
		bDrawBorder,
		false, false, 
		__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
		hFont
		);
	PaintPushButton( dc, _ppbd );
}

void CExtPaintManager::PaintDatePickerButtonsSeparator(
	CDC & dc,
	const RECT & rcSeparator,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	pHelperSrc;
	lParam;
	if( ! dc.RectVisible(&rcSeparator) )
		return;
	dc.FillSolidRect( 
		&rcSeparator, 
		::GetSysColor( COLOR_3DSHADOW )
		);
}

void CExtPaintManager::PaintDatePickerClientArea(
	CDC & dc,
	const RECT & rcTotalClient,
	const RECT & rcUsedClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcTotalClient) )
		return;
bool bTransparent = false;
CWnd * pWnd = NULL;
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
		if( pWnd->GetSafeHwnd() != NULL )
		{
			if( GetCb2DbTransparentMode( pWnd ) )
			{
				CExtPaintManager::stat_ExcludeChildAreas(
					dc,
					pWnd->GetSafeHwnd(),
					CExtPaintManager::stat_DefExcludeChildAreaCallback
					);
				if( PaintDockerBkgnd( true, dc, pWnd ) )
					bTransparent = true;
			} // if( GetCb2DbTransparentMode( pWnd ) )
		} // if( pWnd->GetSafeHwnd() != NULL )
	} // if( pHelperSrc != NULL )
	if( ! bTransparent )
		dc.FillSolidRect(
			&rcTotalClient,
			GetColor( CExtPaintManager::CLR_3DFACE_OUT, pHelperSrc, lParam )
			);
	dc.FillSolidRect(
		&rcUsedClient,
		GetColor( COLOR_WINDOW, pHelperSrc, lParam )
		);
}

void CExtPaintManager::PaintDatePickerBorder(
	CDC & dc,
	const RECT & rcControl,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcControl) )
		return;
COLORREF clrFace = GetColor( COLOR_BTNFACE, pHelperSrc, lParam );
COLORREF clrShadow = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
COLORREF clrDkShadow = GetColor( COLOR_3DDKSHADOW, pHelperSrc, lParam );
COLORREF clrLight = RGB(255,255,255);
CRect rcBorders( rcControl );
	dc.Draw3dRect( rcBorders, clrFace, clrDkShadow );
	rcBorders.DeflateRect(1,1);
	dc.Draw3dRect( rcBorders, clrLight, clrShadow );
	rcBorders.DeflateRect(1,1);
	dc.Draw3dRect( rcBorders, clrFace, clrFace );
	rcBorders.DeflateRect(1,1);
	dc.Draw3dRect( rcBorders, clrShadow, clrLight );
}

void CExtPaintManagerXP::PaintDatePickerBorder(
	CDC & dc,
	const RECT & rcControl,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	CExtPaintManager::PaintDatePickerBorder(
		dc,
		rcControl,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerOffice2003::PaintDatePickerBorder(
	CDC & dc,
	const RECT & rcControl,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcControl) )
		return;

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDatePickerBorder(
			dc,
			rcControl,
			pHelperSrc,
			lParam
			);
		return;
	}

CBrush brBorder( GetColor( COLOR_3DSHADOW, pHelperSrc, lParam ) );
	dc.FrameRect( &rcControl, &brBorder );
}

void CExtPaintManager::PaintDatePickerHeaderBackground(
	INT nCol,
	INT nRow,
	CDC & dc,
	INT nYear,
	INT nMonth,
	const RECT & rcHeader,
	const RECT & rcHeaderWithoutBorders,
	const RECT & rcHeaderDate,
	const RECT & rcScrollBtnBackward,
	const RECT & rcScrollBtnForward,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	nCol;
	nRow;
	nYear;
	nMonth;
	rcHeaderDate;
	rcScrollBtnBackward;
	rcScrollBtnForward;
	dc.Draw3dRect(
		&rcHeader,
		RGB(255,255,255),
		GetColor( COLOR_3DSHADOW, pHelperSrc, lParam )
		);
	dc.FillSolidRect(
		&rcHeaderWithoutBorders,
		GetColor( CExtPaintManager::CLR_3DFACE_OUT, pHelperSrc, lParam )
		);
}

void CExtPaintManagerXP::PaintDatePickerHeaderBackground(
	INT nCol,
	INT nRow,
	CDC & dc,
	INT nYear,
	INT nMonth,
	const RECT & rcHeader,
	const RECT & rcHeaderWithoutBorders,
	const RECT & rcHeaderDate,
	const RECT & rcScrollBtnBackward,
	const RECT & rcScrollBtnForward,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	CExtPaintManager::PaintDatePickerHeaderBackground(
		nCol,
		nRow,
		dc,
		nYear,
		nMonth,
		rcHeader,
		rcHeaderWithoutBorders,
		rcHeaderDate,
		rcScrollBtnBackward,
		rcScrollBtnForward,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerOffice2003::PaintDatePickerHeaderBackground(
	INT nCol,
	INT nRow,
	CDC & dc,
	INT nYear,
	INT nMonth,
	const RECT & rcHeader,
	const RECT & rcHeaderWithoutBorders,
	const RECT & rcHeaderDate,
	const RECT & rcScrollBtnBackward,
	const RECT & rcScrollBtnForward,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDatePickerHeaderBackground(
			nCol,
			nRow,
			dc,
			nYear,
			nMonth,
			rcHeader,
			rcHeaderWithoutBorders,
			rcHeaderDate,
			rcScrollBtnBackward,
			rcScrollBtnForward,
			pHelperSrc,
			lParam
			);
		return;
	}
	
	dc.FillSolidRect(
		&rcHeaderWithoutBorders,
		GetColor( CExtPaintManager::CLR_3DFACE_OUT, pHelperSrc, lParam )
		);
}

#endif // (!defined __EXT_MFC_NO_DATE_PICKER)

#ifndef __EXT_MFC_NO_UNDO_REDO_POPUP

void CExtPaintManager::PaintUndoRedoCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	dc.FillSolidRect(
		&rcCaption,
		GetMenuFrameFillColor( this )
		);

	CRect rcFrame( rcCaption );
	rcFrame.DeflateRect( 3, 3 );
	rcFrame.OffsetRect( 0, 1 );
	dc.Draw3dRect( 
		&rcFrame,
		GetColor( COLOR_3DSHADOW, pHelperSrc, lParam ),
		GetColor( COLOR_WINDOW, pHelperSrc, lParam )
		);

	LOGFONT lf = { sizeof(LOGFONT) };
	VERIFY(
		::SystemParametersInfo(
		SPI_GETICONTITLELOGFONT,
		sizeof(LOGFONT), 
		&lf, 
		0 )
		);
	lf.lfWeight = FW_NORMAL;
	CFont font;
	font.CreateFontIndirect(&lf);
	
	CFont * pOldFont = dc.SelectObject( &font );
	int nOldBkMode = dc.SetBkMode( TRANSPARENT );
	COLORREF clrOldText =
		dc.SetTextColor( GetColor( COLOR_WINDOWTEXT, pHelperSrc, lParam ) );

	// text metrics
CExtSafeString sText( strCaption );
UINT nFormat = DT_LEFT|DT_TOP;
	if( sText.Find( _T('\t') ) != -1 ) // do tabs expanding
		nFormat |= DT_EXPANDTABS;
CRect rcMeasureText( rcCaption );
	CExtRichContentLayout::stat_DrawText(
		dc.m_hDC,
		LPCTSTR(sText), sText.GetLength(),
		rcMeasureText,
		nFormat|DT_CALCRECT, 0
		);
	// align text
CRect rcText( 
		rcFrame.left + ( rcFrame.Width() - rcMeasureText.Width() ) / 2,
		rcFrame.top + ( rcFrame.Height() - rcMeasureText.Height() ) / 2,
		rcFrame.right,
		rcFrame.bottom
		);
	CExtRichContentLayout::stat_DrawText(
		dc.m_hDC,
		strCaption, int(_tcslen(strCaption)),
		&rcText,
		nFormat|DT_END_ELLIPSIS, 0
		);
	dc.SetTextColor( clrOldText );
	dc.SetBkMode( nOldBkMode );
	dc.SelectObject( pOldFont );
}

void CExtPaintManagerXP::PaintUndoRedoCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	dc.FillSolidRect(
		&rcCaption,
		GetMenuFrameFillColor( this )
		);

	if( strCaption == NULL )
		return;

	LOGFONT lf = { sizeof(LOGFONT) };
	VERIFY(
		::SystemParametersInfo(
		SPI_GETICONTITLELOGFONT,
		sizeof(LOGFONT), 
		&lf, 
		0 )
		);
	lf.lfWeight = FW_NORMAL;
	CFont font;
	font.CreateFontIndirect(&lf);
	
	CFont * pOldFont = dc.SelectObject( &font );
	int nOldBkMode = dc.SetBkMode( TRANSPARENT );
	COLORREF clrOldText =
		dc.SetTextColor( GetColor( COLOR_WINDOWTEXT, pHelperSrc, lParam ) );

	// text metrics
CExtSafeString sText( strCaption );
	UINT nFormat = DT_LEFT|DT_TOP;
	if( sText.Find( _T('\t') ) != -1 ) // do tabs expanding
		nFormat |= DT_EXPANDTABS;
CRect rcMeasureText( rcCaption );
	CExtRichContentLayout::stat_DrawText(
		dc.m_hDC,
		LPCTSTR(sText), sText.GetLength(),
		rcMeasureText,
		nFormat|DT_CALCRECT, 0
		);
	// align text
CRect rcText( 
		rcCaption.left + ( rcCaption.Width() - rcMeasureText.Width() ) / 2,
		rcCaption.top + ( rcCaption.Height() - rcMeasureText.Height() ) / 2,
		rcCaption.right,
		rcCaption.bottom
		);
	CExtRichContentLayout::stat_DrawText(
		dc.m_hDC,
		strCaption, int(_tcslen(strCaption)),
		&rcText,
		nFormat|DT_END_ELLIPSIS, 0
		);
	dc.SetTextColor( clrOldText );
	dc.SetBkMode( nOldBkMode );
	dc.SelectObject( pOldFont );
}

#endif // __EXT_MFC_NO_UNDO_REDO_POPUP

#if( !defined __EXT_MFC_NO_SPIN || !defined __EXT_MFC_NO_DURATIONWND )

CRect CExtPaintManager::Spin_QueryNcAreaMargins(
	bool bSpinAlignRight,
	bool bSpinAlignLeft,
	bool bHasScrolBars
	) const
{
	ASSERT_VALID( this );
CRect rcNcAreaMargins( 0, 0, 0, 0 );
 	rcNcAreaMargins.SetRect( 0, 3, 0, 3 );
	if( bSpinAlignRight )
	{
		rcNcAreaMargins.left = bHasScrolBars ? 2 : 0;
		rcNcAreaMargins.right = 3;
	}
	else if( bSpinAlignLeft )
	{
		rcNcAreaMargins.left = 3;
		rcNcAreaMargins.right = bHasScrolBars ? 2 : 0;
	}
	return rcNcAreaMargins;
}

CRect CExtPaintManagerNativeXP::Spin_QueryNcAreaMargins(
	bool bSpinAlignRight,
	bool bSpinAlignLeft,
	bool bHasScrolBars
	) const
{
	ASSERT_VALID( this );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return 
			CExtPaintManager::Spin_QueryNcAreaMargins(
				bSpinAlignRight,
				bSpinAlignLeft,
				bHasScrolBars
				);

CRect rcNcAreaMargins( 0, 0, 0, 0 );
 	rcNcAreaMargins.SetRect( 0, 1, 0, 1 );
	if( bSpinAlignRight )
	{
		rcNcAreaMargins.left = bHasScrolBars ? 2 : 0;
		rcNcAreaMargins.right = 1;
	}
	else if( bSpinAlignLeft )
	{
		rcNcAreaMargins.left = 1;
		rcNcAreaMargins.right = bHasScrolBars ? 2 : 0;
	}
	return rcNcAreaMargins;
}

void CExtPaintManager::PaintSpinButtonArrow(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bHorz,
	bool bEnabled,
	bool bPushed,
	bool bHover,
	bool bHotTrack,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	CFont font;
	INT nPt = max( 6, ::MulDiv( min( rcButton.Width(), rcButton.Height() ), 2, 3 ) );
	INT nPPI = ::GetDeviceCaps( dc.m_hDC, LOGPIXELSX );
	INT nPointSize = ::MulDiv( nPt * 10, 96, nPPI );
	font.CreatePointFont( nPointSize, _T("Marlett") );

	INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
	CFont * pOldFont = dc.SelectObject( &font );

	CString sArrow = 
		bHorz 
			? ( bUp ? _T("3") : _T("4") )
			: ( bUp ? _T("5") : _T("6") );

UINT nFormat = DT_LEFT | DT_TOP | DT_SINGLELINE;
CRect rcTextDimension( rcButton );
	CExtRichContentLayout::stat_DrawText(
		dc.m_hDC,
		LPCTSTR(sArrow), sArrow.GetLength(),
		rcTextDimension,
		nFormat|DT_CALCRECT, 0
		);
	CRect rcText( rcButton );
	rcText.OffsetRect(
		( rcButton.Width() - rcTextDimension.Width() ) / 2,
		( rcButton.Height() - rcTextDimension.Height() ) / 2
		);
	if( ( rcTextDimension.Width() & 0x01 ) == 0 )
		rcText.left ++;
	if( bPushed )
		rcText.OffsetRect( GetPushedOffset() );
	rcText.right = rcText.left + rcTextDimension.Width();
	rcText.bottom = rcText.top + rcTextDimension.Height();

	if( !bEnabled )
	{
		COLORREF clrTextBk = GetColor( COLOR_WINDOW, pHelperSrc, lParam );
		COLORREF clrTextBkOld = dc.SetTextColor( clrTextBk );
		CRect rcTextBk( rcText );
		rcTextBk.OffsetRect(1,1);
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR(sArrow), -1,
			rcTextBk,
			nFormat, 0
			);
		dc.SetTextColor( clrTextBkOld );
	}

COLORREF clrText = 
		bEnabled 
			? ( (bHover && bHotTrack) ? RGB(0,0,128) : GetColor( COLOR_BTNTEXT, pHelperSrc, lParam ) )
			: GetColor( CLR_TEXT_DISABLED, pHelperSrc, lParam );
COLORREF clrTextOld = dc.SetTextColor( clrText );
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(sArrow), -1, rcText, nFormat, 0 );
	dc.SetTextColor( clrTextOld );
	dc.SelectObject( pOldFont );
	dc.SetBkMode( nOldBkMode );
}

void CExtPaintManager::PaintSpinButton(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bHorz,
	bool bEnabled,
	bool bFlat,
	bool bDrawBorder,
	bool bPushed,
	bool bHover,
	bool bHotTrack,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( !bEnabled )
		bHover = bPushed = false;
	dc.FillSolidRect( &rcButton, GetColor( COLOR_3DFACE, pHelperSrc, lParam ) );

	// Draw border
	if( bPushed )
	{
		if( (!bFlat) || bDrawBorder )
			dc.Draw3dRect(
				rcButton,
				GetColor( CLR_3DSHADOW_IN, pHelperSrc, lParam ),
				GetColor( CLR_3DHILIGHT_IN, pHelperSrc, lParam )
				);
	}
	else
	{
		if( (!bFlat) || (bHover && bDrawBorder) )
			dc.Draw3dRect(
				rcButton,
				GetColor( CLR_3DHILIGHT_OUT, pHelperSrc, lParam ),
				GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam )
				);
		if( (!bFlat) && bHover )
		{
			CRect rcTemp( rcButton );
			dc.Draw3dRect(
				rcTemp,
				GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam ),
				GetColor( CLR_3DDKSHADOW_OUT, pHelperSrc, lParam )
				);
			rcTemp.DeflateRect(1,1);
			dc.Draw3dRect(
				rcTemp,
				GetColor( CLR_3DHILIGHT_OUT, pHelperSrc, lParam ),
				GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam )
				);
		}
	}

	// Draw arrow
	PaintSpinButtonArrow(
		dc,
		rcButton,
		bUp,		
		bHorz,
		bEnabled,
		bPushed,
		bHover,
		bHotTrack,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerXP::PaintSpinButton(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bHorz,
	bool bEnabled,
	bool bFlat,
	bool bDrawBorder,
	bool bPushed,
	bool bHover,
	bool bHotTrack,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( !bEnabled )
		bHover = bPushed = false;

	COLORREF clrBk = GetColor( bFlat ? CLR_3DFACE_OUT : COLOR_3DFACE, pHelperSrc, lParam );
	if(	bHover )
		clrBk = GetColor( bPushed ? XPCLR_HILIGHT : CLR_3DFACE_IN, pHelperSrc, lParam );
	else if( bPushed )
		clrBk = GetColor( XPCLR_HILIGHT, pHelperSrc, lParam );
	dc.FillSolidRect( &rcButton, clrBk );

	COLORREF clrDkBorder =
		GetColor(
			( bHover || bPushed )
				? XPCLR_HILIGHT_BORDER
				: ( bFlat ? XPCLR_HILIGHT_BORDER : COLOR_3DSHADOW )
				,
			pHelperSrc,
			lParam 
			);

	// Draw border
	if( bPushed )
	{
		if( (!bFlat) || bDrawBorder )
			dc.Draw3dRect( rcButton, clrDkBorder, clrDkBorder );
	}
	else
	{
		if( (!bFlat) || ( bHover && bDrawBorder ) )
			dc.Draw3dRect( rcButton, clrDkBorder, clrDkBorder );
	}

	// Draw arrow
	PaintSpinButtonArrow(
		dc,
		rcButton,
		bUp,		
		bHorz,
		bEnabled,
		bPushed,
		bHover,
		bHotTrack,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerOffice2003::PaintSpinButton(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bHorz,
	bool bEnabled,
	bool bFlat,
	bool bDrawBorder,
	bool bPushed,
	bool bHover,
	bool bHotTrack,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintSpinButton(
			dc,
			rcButton,
			bUp,		
			bHorz,
			bEnabled,
			bFlat,
			bDrawBorder,
			bPushed,
			bHover,
			bHotTrack,
			pHelperSrc,
			lParam
			);
		return;
	}

	if( !bEnabled )
		bHover = bPushed = false;
		
	COLORREF clrBkLeft = COLORREF( -1L );
	COLORREF clrBkRight = COLORREF( -1L );
	if(	bHover )
	{
		clrBkLeft = GetColor( bPushed ? _2003CLR_BTN_HP_LEFT : _2003CLR_BTN_HOVER_LEFT, pHelperSrc, lParam );
		clrBkRight = GetColor( bPushed ? _2003CLR_BTN_HP_RIGHT : _2003CLR_BTN_HOVER_RIGHT, pHelperSrc, lParam );
	}
	else if( bPushed )
	{
		clrBkLeft = GetColor( _2003CLR_BTN_PRESSED_LEFT, pHelperSrc, lParam );
		clrBkRight = GetColor( _2003CLR_BTN_PRESSED_RIGHT, pHelperSrc, lParam );
	}
	if(		clrBkLeft != COLORREF( -1L ) 
		&&	clrBkRight != COLORREF( -1L ) 
		)
	{
		stat_PaintGradientRect(
			dc,
			rcButton,
			bHorz ? clrBkLeft : clrBkRight,
			bHorz ? clrBkRight : clrBkLeft,
			!bHorz
			);
	}
	else
	{
		dc.FillSolidRect( 
			&rcButton, 
			GetColor( bFlat ? CLR_3DFACE_OUT : COLOR_3DFACE, pHelperSrc, lParam )
			);
	}

	COLORREF clrDkBorder =
		GetColor(
			( bHover || bPushed ) ? XPCLR_HILIGHT_BORDER : COLOR_3DSHADOW,
			pHelperSrc,
			lParam 
			);

	// Draw border
	if( bPushed )
	{
		if( (!bFlat) || bDrawBorder )
			dc.Draw3dRect( rcButton, clrDkBorder, clrDkBorder );
	}
	else
	{
		if( (!bFlat) || ( bHover && bDrawBorder ) )
			dc.Draw3dRect( rcButton, clrDkBorder, clrDkBorder );
	}

	// Draw arrow
	PaintSpinButtonArrow(
		dc,
		rcButton,
		bUp,		
		bHorz,
		bEnabled,
		bPushed,
		bHover,
		bHotTrack,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerNativeXP::PaintSpinButton(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bHorz,
	bool bEnabled,
	bool bFlat,
	bool bDrawBorder,
	bool bPushed,
	bool bHover,
	bool bHotTrack,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::PaintSpinButton(
			dc,
			rcButton,
			bUp,		
			bHorz,
			bEnabled,
			bFlat,
			bDrawBorder,
			bPushed,
			bHover,
			bHotTrack,
			pHelperSrc,
			lParam
			);
		return;
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

HWND hWnd = NULL;
	if(	pHelperSrc != NULL )
	{
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CWnd ) ) )
		{
			CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
			ASSERT_VALID( pWnd );
			hWnd = pWnd->GetSafeHwnd();
		}
		else if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) ) )
		{
			CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
			ASSERT_VALID( pTBB );
			hWnd = pTBB->GetBar()->GetSafeHwnd();
		}
	}
	ASSERT( hWnd != NULL );

INT nPartID = 0;
INT nStateID = 0;

	if( bUp )
	{
		if( bHorz )
		{
			nPartID = SPNP_UPHORZ;
			nStateID = 
				(!bEnabled) 
					? UPHZS_DISABLED 
					: bPushed 
						? UPHZS_PRESSED 
						: bHover
							? UPHZS_HOT
							: UPHZS_NORMAL;
		}
		else
		{
			nPartID = SPNP_UP;
			nStateID = 
				(!bEnabled) 
					? UPS_DISABLED 
					: bPushed 
						? UPS_PRESSED 
						: bHover
							? UPS_HOT
							: UPS_NORMAL;
		}
	}
	else
	{
		if( bHorz )
		{
			nPartID = SPNP_DOWNHORZ;
			nStateID = 
				(!bEnabled) 
					? DNHZS_DISABLED 
					: bPushed 
						? DNHZS_PRESSED 
						: bHover
							? DNHZS_HOT
							: DNHZS_NORMAL;
		}
		else
		{
			nPartID = SPNP_DOWN;
			nStateID = 
				(!bEnabled) 
					? DNS_DISABLED 
					: bPushed 
						? DNS_PRESSED 
						: bHover
							? DNS_HOT
							: DNS_NORMAL;
		}
	}

	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_SPIN ) != NULL )
	{
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd, 
				dc.GetSafeHdc(), 
				nPartID, 
				nStateID, 
				&rcButton, 
				&rcButton
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

void CExtPaintManagerOffice2007_Impl::PaintSpinButton(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bHorz,
	bool bEnabled,
	bool bFlat,
	bool bDrawBorder,
	bool bPushed,
	bool bHover,
	bool bHotTrack,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintSpinButton(
			dc,
			rcButton,
			bUp,		
			bHorz,
			bEnabled,
			bFlat,
			bDrawBorder,
			bPushed,
			bHover,
			bHotTrack,
			pHelperSrc,
			lParam
			);
		return;
	}

CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd;
	_ppbd.m_pHelperSrc = pHelperSrc;
	_ppbd.m_rcClient = rcButton;
	_ppbd.m_bFlat = bFlat;
	_ppbd.m_bDrawBorder = bDrawBorder;
	_ppbd.m_bHover = bHover;
	_ppbd.m_bPushed = bPushed;
	_ppbd.m_bEnabled = bEnabled;
	_ppbd.m_bTransparentBackground = true;
	PaintPushButton( dc, _ppbd );

	// Draw arrow
	PaintSpinButtonArrow(
		dc,
		rcButton,
		bUp,		
		bHorz,
		bEnabled,
		bPushed,
		bHover,
		bHotTrack,
		pHelperSrc,
		lParam
		);
}

#endif // #if( !defined __EXT_MFC_NO_SPIN || !defined __EXT_MFC_NO_DURATIONWND )

#ifndef __EXT_MFC_NO_DURATIONWND

INT CExtPaintManager::Duration_GetSpinButtonWidth(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return 15;
}


INT CExtPaintManagerNativeXP::Duration_GetSpinButtonWidth(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return 
			CExtPaintManager::Duration_GetSpinButtonWidth(
				pHelperSrc,
				lParam
				);

HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_SPIN ) != NULL )
	{
		CWindowDC dc( NULL );
		CSize szPart(0,0);
		if( g_PaintManager.m_UxTheme.GetThemePartSize(
				dc.GetSafeHdc(), 
				SPNP_UPHORZ, 
				0, 
				NULL, 
				CExtUxTheme::__EXT_UX_TS_TRUE,
				&szPart
				) == S_OK
			)
			return szPart.cy;
	}
	
	return 15;
}
INT CExtPaintManager::Duration_GetDropDownButtonWidth(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return 15;
}

INT CExtPaintManagerNativeXP::Duration_GetDropDownButtonWidth(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return 
			CExtPaintManager::Duration_GetDropDownButtonWidth(
				pHelperSrc,
				lParam
				);

//HWND hWnd = NULL;
//CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
//	if( pWnd != NULL )
//	{
//		ASSERT_VALID( pWnd );
//		hWnd = pWnd->GetSafeHwnd();
//	}
//
//	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_COMBOBOX ) != NULL )
//	{
//		CWindowDC dc( NULL );
//		CSize szPart(0,0);
//		if( g_PaintManager.m_UxTheme.GetThemePartSize(
//				dc.GetSafeHdc(), 
//				CP_DROPDOWNBUTTON, 
//				CBXS_NORMAL, 
//				NULL, 
//				CExtUxTheme::__EXT_UX_TS_TRUE,
//				&szPart
//				) == S_OK
//			)
//			return szPart.cx;
//	}
//
//	return 15;

	return  Duration_GetSpinButtonWidth( pHelperSrc, lParam );
}

CRect CExtPaintManager::Duration_GetSpinButtonExtraSpace(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return CRect( 1, 1, 1, 1 );
}

CRect CExtPaintManagerNativeXP::Duration_GetSpinButtonExtraSpace(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return CRect( 0, 0, 0, 0 );
}

CRect CExtPaintManager::Duration_GetDropDownButtonExtraSpace(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return CRect( 1, 1, 1, 1 );
}

CRect CExtPaintManagerNativeXP::Duration_GetDropDownButtonExtraSpace(
	const CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return CRect( 1, 0, 0, 0 );
}

void CExtPaintManager::Duration_PaintSpinButton(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bEnabled,
	bool bPushed,
	bool bHovered,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible( &rcButton ) )
		return;
	PaintSpinButton(
		dc,
		rcButton,
		bUp,
		false,
		bEnabled,
		false,
		false,
		bPushed,
		bHovered,
		false,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerNativeXP::Duration_PaintSpinButton(
	CDC & dc,
	const CRect & rcButton,
	bool bUp,		
	bool bEnabled,
	bool bPushed,
	bool bHovered,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible( &rcButton ) )
		return;

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::Duration_PaintSpinButton(
			dc,
			rcButton,
			bUp,
			bEnabled,
			bPushed,
			bHovered,
			pHelperSrc,
			lParam
			);
		return;
	}

HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_SPIN ) != NULL )
	{
		INT nPartID = 0;
		INT nStateID = 0;

		if( bUp )
		{
			nPartID = SPNP_UP;
			nStateID = 
				(!bEnabled) 
					? UPS_DISABLED 
					: bPushed 
						? UPS_PRESSED 
						: bHovered
							? UPS_HOT
							: UPS_NORMAL;
		}
		else
		{
			nPartID = SPNP_DOWN;
			nStateID = 
				(!bEnabled) 
					? DNS_DISABLED 
					: bPushed 
						? DNS_PRESSED 
						: bHovered
							? DNS_HOT
							: DNS_NORMAL;
		}

		CRect rc( rcButton );
		rc.InflateRect( 1, bUp ? 1 : -1 , 1, bUp ? -1 : 1 );

		// drop spin button
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd,
				dc.GetSafeHdc(), 
				nPartID, 
				nStateID, 
				&rc, 
				&rc
				) == S_OK
			);

		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

void CExtPaintManager::Duration_PaintDropDownButton(
	CDC & dc,
	const CRect & rcButton,
	bool bEnabled,
	bool bPushed,
	bool bHovered,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible( &rcButton ) )
		return;
	PaintSpinButton(
		dc,
		rcButton,
		false,
		false,
		bEnabled,
		false,
		false,
		bPushed,
		bHovered,
		false,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerNativeXP::Duration_PaintDropDownButton(
	CDC & dc,
	const CRect & rcButton,
	bool bEnabled,
	bool bPushed,
	bool bHovered,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible( &rcButton ) )
		return;

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		CExtPaintManager::Duration_PaintDropDownButton(
			dc,
			rcButton,
			bEnabled,
			bPushed,
			bHovered,
			pHelperSrc,
			lParam
			);
		return;
	}

HWND hWnd = NULL;
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd != NULL )
	{
		ASSERT_VALID( pWnd );
		hWnd = pWnd->GetSafeHwnd();
	}

	if( g_PaintManager.m_UxTheme.OpenThemeData( hWnd, VSCLASS_COMBOBOX ) != NULL )
	{
		INT nStateID = 
			(!bEnabled)
				? CBXS_DISABLED
				: bPushed
					? CBXS_PRESSED
					: bHovered
						? CBXS_HOT
						: CBXS_NORMAL;

		CRect rc( rcButton );
		if( ! g_PaintManager.m_bIsWinVistaOrLater )
			rc.InflateRect( 1, 1 );

		// drop down button
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				hWnd,
				dc.GetSafeHdc(), 
				CP_DROPDOWNBUTTON, 
				nStateID, 
				&rc, 
				&rc
				) == S_OK
			);

		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

#endif // __EXT_MFC_NO_DURATIONWND

#ifndef __EXT_MFC_NO_SLIDER

bool CExtPaintManager::PaintSliderChannel(
	CDC & dc,
	const CRect & rcChannel,
	bool bHorz,
	bool bEnabled,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bHorz;
	bEnabled;
	if( ! dc.RectVisible( &rcChannel ) )
		return false;

	dc.FillSolidRect(
		&rcChannel,
		GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam ) 
		);
	dc.Draw3dRect(
		&rcChannel,
		GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam ), 
		GetColor( CLR_3DSHADOW_OUT, pHelperSrc, lParam )
		);

	return true;
}

bool CExtPaintManagerNativeXP::PaintSliderChannel(
	CDC & dc,
	const CRect & rcChannel,
	bool bHorz,
	bool bEnabled,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible( &rcChannel ) )
		return false;

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return 
			CExtPaintManager::PaintSliderChannel(
				dc,
				rcChannel,
				bHorz,
				bEnabled,
				pHelperSrc,
				lParam
				);

CWnd * pWnd =
		DYNAMIC_DOWNCAST(
			CWnd,
			pHelperSrc
			);
	ASSERT( pWnd != NULL );
	ASSERT_VALID( pWnd );

	if( g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_TRACKBAR ) != NULL )
	{
		INT nPartID = 
			bHorz ? TKP_TRACK : TKP_TRACKVERT;
		INT nStateID = 
			bHorz ? TKS_NORMAL : TRVS_NORMAL;
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				pWnd->GetSafeHwnd(),
				dc.GetSafeHdc(), 
				nPartID, 
				nStateID, 
				&rcChannel, 
				&rcChannel
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
		return true;
	}

	return false;
}
	
bool CExtPaintManager::PaintSliderThumb(
	CDC & dc,
	const CRect & rcThumb,
	bool bHorz,
	bool bLeft,
	bool bRight,
	bool bEnabled,
	bool bPushed,
	bool bFocused,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	lParam;
	bLeft;
	bRight;
	bFocused;
	if( ! dc.RectVisible( &rcThumb ) )
		return false;

	PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		bHorz,
		rcThumb,
		_T(""),
		NULL,	// pIcon
		false,	// bFlat
		bHover,
		bPushed,
		false,	// bIndeterminate
		bEnabled,
		false,	// bDrawBorder
		false,	// bDrawFocusRect
		false,	// bDefaultPushButton
		0,
		NULL,	// hFont
		false,	// bDropDown
		0,
		false	// bTransparentBackground
		);

	PaintPushButton( dc, _ppbd );

	return true;
}

bool CExtPaintManagerNativeXP::PaintSliderThumb(
	CDC & dc,
	const CRect & rcThumb,
	bool bHorz,
	bool bLeft,
	bool bRight,
	bool bEnabled,
	bool bPushed,
	bool bFocused,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible( &rcThumb ) )
		return false;

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return 
			CExtPaintManager::PaintSliderThumb(
				dc,
				rcThumb,
				bHorz,
				bLeft,
				bRight,
				bEnabled,
				bPushed,
				bFocused,
				bHover,
				pHelperSrc,
				lParam
				);

CWnd * pWnd =
		DYNAMIC_DOWNCAST(
			CWnd,
			pHelperSrc
			);
	ASSERT( pWnd != NULL );
	ASSERT_VALID( pWnd );

	if( g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_TRACKBAR ) != NULL )
	{
		INT nPartID = 
			bHorz 
				? (bLeft && bRight) 
					? TKP_THUMB
					: bLeft
						? TKP_THUMBTOP
						: TKP_THUMBBOTTOM
				: (bLeft && bRight) 
					? TKP_THUMBVERT
					: bLeft
						? TKP_THUMBLEFT
						: TKP_THUMBRIGHT;
		INT nStateID = 
				(!bEnabled)
					? TUS_DISABLED
					: bPushed
						? TUS_PRESSED
						: bHover
							? TUS_HOT
							: bFocused
								? TUS_FOCUSED
								: TUS_NORMAL;

 		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				pWnd->GetSafeHwnd(),
				dc.GetSafeHdc(), 
				nPartID, 
				nStateID, 
				&rcThumb, 
				&rcThumb
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
		return true;
	}

	return false;
}
	
bool CExtPaintManagerOffice2007_Impl::PaintSliderThumb(
	CDC & dc,
	const CRect & rcThumb,
	bool bHorz,
	bool bLeft,
	bool bRight,
	bool bEnabled,
	bool bPushed,
	bool bFocused,
	bool bHover,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible( &rcThumb ) )
		return false;

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::PaintSliderThumb(
				dc,
				rcThumb,
				bHorz,
				bLeft,
				bRight,
				bEnabled,
				bPushed,
				bFocused,
				bHover,
				pHelperSrc,
				lParam
				);

	PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		bHorz,
		rcThumb,
		_T(""),
		NULL,	// pIcon
		false,	// bFlat
		bHover,
		bPushed,
		false,	// bIndeterminate
		bEnabled,
		false,	// bDrawBorder
		false,	// bDrawFocusRect
		false,	// bDefaultPushButton
		0,
		NULL,	// hFont
		false,	// bDropDown
		0,
		true	// bTransparentBackground
		);

	PaintPushButton( dc, _ppbd );

	return true;
}

bool CExtPaintManager::PaintSliderTics(
	CDC & dc,
	const CRect & rcClient,
	bool bHorz,
	bool bEnabled,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bHorz;
	bEnabled;
	pHelperSrc;
	lParam;
	if( ! dc.RectVisible( &rcClient ) )
		return false;
	return false;
}

#endif // __EXT_MFC_NO_SLIDER

bool CExtPaintManager::PaintGroupBoxFrame(
	CDC & dc,
	const RECT & rcBorder,
	COLORREF clrFrame, // = COLORREF(-1L)
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

CWnd * pWnd =
		DYNAMIC_DOWNCAST(
			CWnd,
			pHelperSrc
			);
	ASSERT( pWnd != NULL );
	ASSERT_VALID( pWnd );

	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() ) 
	{
		if( clrFrame == COLORREF(-1L) )
			clrFrame = GetColor( CLR_GROUP_BOX_FRAME, pHelperSrc, lParam );
		CRect rcClient( rcBorder );
		dc.Draw3dRect(
			&rcClient,
			clrFrame,
			GetColor( COLOR_WINDOW, pHelperSrc, lParam )
			);
		rcClient.DeflateRect(1,1);
		dc.Draw3dRect(
			&rcClient,
			GetColor( COLOR_WINDOW, pHelperSrc, lParam ),
			clrFrame
			);
	} // if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
	else
	{
		if( clrFrame == COLORREF(-1L) )
		{
			if( g_PaintManager.m_UxTheme.OpenThemeData( pWnd->GetSafeHwnd(), VSCLASS_BUTTON ) != NULL )
			{
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawThemeBackground(
						dc.GetSafeHdc(), 
						BP_GROUPBOX, 
						pWnd->IsWindowEnabled() 
						? GBS_NORMAL 
						: GBS_DISABLED, 
						&rcBorder, 
						&rcBorder
						) == S_OK
					);
				g_PaintManager.m_UxTheme.CloseThemeData();
			}
		}
		else
		{
			CBrush * pBrush =
				CBrush::FromHandle( (HBRUSH)::GetStockObject(NULL_BRUSH) );
			CBrush * pOldBrush = dc.SelectObject( pBrush );
			CPen pen;
			pen.CreatePen(
				PS_SOLID,
				1,
				clrFrame				
				);
			CPen * pOldPen = dc.SelectObject( &pen );
			dc.RoundRect(
				&rcBorder,
				CPoint( 10, 10 )
				);
			dc.SelectObject( pOldPen );
			dc.SelectObject( pOldBrush );
		}	
	} // else from if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )

	return true;
}

bool CExtPaintManagerOffice2007_Impl::PaintGroupBoxFrame(
	CDC & dc,
	const RECT & rcBorder,
	COLORREF clrFrame, // = COLORREF(-1L)
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::PaintGroupBoxFrame(
				dc,
				rcBorder,
				clrFrame,
				pHelperSrc,
				lParam
				);

	if( clrFrame == COLORREF(-1L) )
		clrFrame = GetColor( CLR_GROUP_BOX_FRAME, pHelperSrc, lParam );

	CBrush * pBrush =
		CBrush::FromHandle( (HBRUSH)::GetStockObject(NULL_BRUSH) );
	CBrush * pOldBrush = dc.SelectObject( pBrush );
	CPen pen;
	pen.CreatePen(
		PS_SOLID,
		1,
		clrFrame				
		);
	CPen * pOldPen = dc.SelectObject( &pen );
	dc.RoundRect(
		&rcBorder,
		CPoint( 10, 10 )
		);
	dc.SelectObject( pOldPen );
	dc.SelectObject( pOldBrush );

	return true;
}

bool CExtPaintManagerOffice2003::OnQueryThemeColors(
	COLORREF *pclrFillHint,
	COLORREF *pclrAccentHint // = NULL
	)
{
	ASSERT_VALID( this );
	if(	OnQueryUseThemeColors() )
	{
		if( pclrFillHint == NULL && pclrAccentHint == NULL )
			return true;
		e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
		if(		eCurrentTheme == ThemeLunaRoyale       // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterUX   // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterDWM  // +2.87
			)
		{
			if( pclrFillHint != NULL )
				(*pclrFillHint) = RGB(131,175,235);
			if( pclrAccentHint != NULL )
				(*pclrAccentHint) = RGB(255,200,91);
			return true;
		}
		if( pclrFillHint != NULL )
		{
			double lfEdgeLightHue, lfEdgeLightSat, lfEdgeLightLum, lfEdgeShadowHue, lfEdgeShadowSat, lfEdgeShadowLum, lfCustFillHue, lfCustFillSat, lfCustFillLum;
			CExtBitmap::stat_RGBtoHSL( g_PaintManager.m_clrUxTaskBandEdgeLightColor, &lfEdgeLightHue, &lfEdgeLightSat, &lfEdgeLightLum );
			CExtBitmap::stat_RGBtoHSL( g_PaintManager.m_clrUxTaskBandEdgeShadowColor, &lfEdgeShadowHue, &lfEdgeShadowSat, &lfEdgeShadowLum );
			CExtBitmap::stat_RGBtoHSL( g_PaintManager.m_clrUxTaskBandFillColorHint, &lfCustFillHue, &lfCustFillSat, &lfCustFillLum );
			(*pclrFillHint) = CExtBitmap::stat_HLStoRGB( lfCustFillHue, (lfEdgeLightLum+lfEdgeShadowLum)/2.0, lfCustFillSat );
		}
		if( pclrAccentHint != NULL )
			(*pclrAccentHint) = CExtBitmap::stat_HLS_Adjust( g_PaintManager.m_clrUxTaskBandAccentColorHint, 0.01, 0.00, 0.00 );
		return true;
	}
	return false;
}

bool CExtPaintManagerOffice2003::OnQueryUseThemeColors() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::OnQueryUseThemeColors();
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
bool bUseThemedColors = (	
			g_PaintManager.m_UxTheme.IsAppThemed()
		&&	g_PaintManager.m_bUxValidColorsExtracted
		&&	(	eCurrentTheme == ThemeLunaRoyale       // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterUX   // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterDWM  // +2.87
			||	eCurrentTheme == ThemeLunaBlue
			||	eCurrentTheme == ThemeLunaOlive
			||	eCurrentTheme == ThemeLunaSilver
			)
		);
	return bUseThemedColors;
}

//////////////////////////////////////////////////////////////////////////
// CExtPaintManagerStudio2005
//////////////////////////////////////////////////////////////////////////

CExtPaintManagerStudio2005::CExtPaintManagerStudio2005()
{
}

CExtPaintManagerStudio2005::~CExtPaintManagerStudio2005()
{
}

#if (!defined __EXT_MFC_NO_TAB_CTRL)

void CExtPaintManagerStudio2005::TabWnd_MeasureItemAreaMargins(
	CExtTabWnd * pTabWnd,
	LONG & nSpaceBefore,
	LONG & nSpaceAfter,
	LONG & nSpaceOver
	)
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::TabWnd_MeasureItemAreaMargins( pTabWnd, nSpaceBefore, nSpaceAfter, nSpaceOver );
		return;
	}
	nSpaceAfter		= 2;
	nSpaceOver		= 2;
	if( (pTabWnd->GetTabWndStyle() & __ETWS_GROUPED) != 0 )
		nSpaceBefore = 3;
	else
		nSpaceBefore = 0;
}

void CExtPaintManagerStudio2005::TabWnd_UpdateItemMeasure(
	CExtTabWnd * pTabWnd,
	CExtTabWnd::TAB_ITEM_INFO * pTii,
	CDC & dcMeasure,
	CSize & sizePreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
	ASSERT_VALID( pTii );
	ASSERT( dcMeasure.GetSafeHdc() != NULL );
	ASSERT( pTii->GetTabWnd() == pTabWnd );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::TabWnd_UpdateItemMeasure( pTabWnd, pTii, dcMeasure, sizePreCalc );
		return;
	}
bool bHorz = pTabWnd->OrientationIsHorizontal();
LONG nItemIndex = pTii->GetIndexOf();
	switch( m_eStyle2005 )
	{
	case __ES2005_BETA1:
	case __ES2005_RC:
	break;
	case __ES2005_BETA2:
		if( bHorz )
		{
			if(		nItemIndex == 0 
				||	nItemIndex == pTabWnd->ItemGetCount() - 1 
				)
				sizePreCalc.cx += 6*2;
			sizePreCalc.cy = 19;
		}
		else
		{
			if(		nItemIndex == 0 
				||	nItemIndex == pTabWnd->ItemGetCount() - 1 
				)
				sizePreCalc.cy += 6*2;
			sizePreCalc.cx = 19;
		}
	break;
	default:
	{
		ASSERT( FALSE );
		AfxThrowNotSupportedException();
	}
	break;
	} // switch( m_eStyle2005 )
}


void CExtPaintManagerStudio2005::TabWnd_AdjustItemCloseButtonRect(
	CRect & rcCloseButton,
	CExtTabWnd * pTabWnd
	)
{
	ASSERT_VALID( this );
	pTabWnd;
	rcCloseButton.OffsetRect( 1, 0 );
}

void CExtPaintManagerNativeXP::TabWnd_UpdateItemMeasure(
	CExtTabWnd * pTabWnd,
	CExtTabWnd::TAB_ITEM_INFO * pTii,
	CDC & dcMeasure,
	CSize & sizePreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTii );
	ASSERT( dcMeasure.GetSafeHdc() != NULL );
	ASSERT( pTii->GetTabWnd() == pTabWnd );
bool bGroupedMode = (pTabWnd->GetTabWndStyle() & __ETWS_GROUPED) ? true : false;
	if(		bGroupedMode
		||	(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		)
	{
		CExtPaintManager::TabWnd_UpdateItemMeasure( pTabWnd, pTii, dcMeasure, sizePreCalc );
		return;
	}
CSize szPart( 18, 18 );
	if( g_PaintManager.m_UxTheme.OpenThemeData( NULL, VSCLASS_TAB ) != NULL )
	{
		VERIFY(
			g_PaintManager.m_UxTheme.GetThemePartSize(
				dcMeasure.GetSafeHdc(), 
				TABP_TABITEM, 
				TIS_NORMAL, 
				NULL, 
				CExtUxTheme::__EXT_UX_TS_TRUE,
				&szPart
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
INT nPartHeight = szPart.cy;
	if( pTabWnd->OrientationIsHorizontal() )
	{
		sizePreCalc.cy = max( sizePreCalc.cy, nPartHeight );
		sizePreCalc.cx += 2*2;
	}
	else
	{
		sizePreCalc.cx = max( sizePreCalc.cx, nPartHeight );
		sizePreCalc.cy += 2*2;
	}
}

void CExtPaintManagerStudio2005::GetThemeAccentTabColors(
	COLORREF * pClrSetectedTabItemText,
	COLORREF * pClrSetectedTabItemFace, // = NULL
	COLORREF * pClrSetectedTabItemBorderLight, // = NULL
	COLORREF * pClrSetectedTabItemBorderDark, // = NULL
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::GetThemeAccentTabColors(
			pClrSetectedTabItemText,
			pClrSetectedTabItemFace,
			pClrSetectedTabItemBorderLight,
			pClrSetectedTabItemBorderDark,
			pHelperSrc,
			lParam
			);
		return;
	}

	if( pClrSetectedTabItemText != NULL )
		(*pClrSetectedTabItemText) = GetColor( COLOR_BTNTEXT, pHelperSrc, lParam );
	if( pClrSetectedTabItemFace != NULL )
		(*pClrSetectedTabItemFace) = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
	if( pClrSetectedTabItemBorderLight != NULL )
		(*pClrSetectedTabItemBorderLight) = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
	if( pClrSetectedTabItemBorderDark != NULL )
		(*pClrSetectedTabItemBorderDark) = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
}

void CExtPaintManagerStudio2005::PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
		return;
	}

CExtTabWnd * pExtTabWnd = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
bool bFrameBackground = false;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtTabWnd))
		&&	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8
		)
	{
		if(		pExtTabWnd != NULL
			&&	(	pExtTabWnd->m_bReflectParentSizing
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
				||	pExtTabWnd->_IsMdiTabCtrl()
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
				)
			)
			bFrameBackground = true;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
		else if(	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtDynTabWnd))
				||	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtDynAutoHideArea))
			)
			bFrameBackground = true;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
	}
	if( bFrameBackground )
	{
		CRect rcTabNearMargin( rcTabNearBorderArea ); // prepare tab border margin rect
		switch( dwOrientation )
		{
		case __ETWS_ORIENT_TOP:
			rcTabNearMargin.bottom = rcTabNearMargin.top + 1;
		break;
		case __ETWS_ORIENT_BOTTOM:
			rcTabNearMargin.top = rcTabNearMargin.bottom - 1;
		break;
		case __ETWS_ORIENT_LEFT:
			rcTabNearMargin.right = rcTabNearMargin.left + 1;
		break;
		case __ETWS_ORIENT_RIGHT:
			rcTabNearMargin.left = rcTabNearMargin.right - 1;
		break;
#ifdef _DEBUG
		default:
			ASSERT( FALSE );
		break;
#endif // _DEBUG
		} // switch( dwOrientation )
		CWnd * pWnd = STATIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( ! PaintDockerBkgnd( true, dc, pWnd ) )
		{
			CWnd * pFrame = pWnd->GetParentFrame();
			if( pFrame == NULL )
				pFrame = pWnd->GetParent();
			ASSERT_VALID( pFrame );
			CRect rcPaintGradient;
			pFrame->GetClientRect( &rcPaintGradient );
			pFrame->ClientToScreen( &rcPaintGradient );
			((CExtTabWnd*)pHelperSrc)->ScreenToClient( &rcPaintGradient );
			PaintDockerBkgnd( true, dc, rcPaintGradient, rcClient );
		}
		
		if( ! bGroupedMode )
		{
			COLORREF clrTabNearMargin = 
				GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
			COLORREF clrTabNearBorderAreaBk = 
				(pExtTabWnd->SelectionGet() >= 0)
					? RGB(252,252,254)
					: GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam );
			// fill tab border area
			dc.FillSolidRect(
				&rcTabNearBorderArea,
				clrTabNearBorderAreaBk
				);
			// paint tab border margin
			dc.FillSolidRect(
				&rcTabNearMargin,
				clrTabNearMargin
				);
		} // if( !bGroupedMode )
		return;
	} // if( bFrameBackground )
	CExtPaintManagerXP::PaintTabClientArea(
		dc,
		rcClient,
		rcTabItemsArea,
		rcTabNearBorderArea,
		dwOrientation,
		bGroupedMode,
		pHelperSrc,
		lParam
		);
}

void CExtPaintManagerNativeXP::PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		bGroupedMode
		||	pHelperSrc == NULL
		||	(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		)
	{
		CExtPaintManager::PaintTabClientArea( dc, rcClient, rcTabItemsArea, rcTabNearBorderArea, dwOrientation, bGroupedMode, pHelperSrc, lParam );
		return;
	}
CWnd * pGenWnd = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
//CExtTabWnd * pWndTabs = NULL;
	if( pGenWnd != NULL )
	{
		ASSERT_VALID( pGenWnd );
		PaintDockerBkgnd( true, dc, pGenWnd );
//		pWndTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pGenWnd );
	}
CRect rcTabNearMargin( rcTabNearBorderArea ); // prepare tab border margin rect
	switch( dwOrientation )
	{
	case __ETWS_ORIENT_TOP:
		rcTabNearMargin.bottom = rcTabNearMargin.top + 1;
	break;
	case __ETWS_ORIENT_BOTTOM:
		rcTabNearMargin.top = rcTabNearMargin.bottom - 1;
	break;
	case __ETWS_ORIENT_LEFT:
		rcTabNearMargin.right = rcTabNearMargin.left + 1;
	break;
	case __ETWS_ORIENT_RIGHT:
		rcTabNearMargin.left = rcTabNearMargin.right - 1;
	break;
#ifdef _DEBUG
	default:
		ASSERT( FALSE );
	break;
#endif // _DEBUG
	} // switch( dwOrientation )
	if( g_PaintManager.m_UxTheme.OpenThemeData( pGenWnd->GetSafeHwnd(), VSCLASS_EDIT ) != NULL )
	{
		COLORREF clrBorder = COLORREF(-1L);
		VERIFY( g_PaintManager.m_UxTheme.GetThemeColor( EP_EDITTEXT, 0, TMT_BORDERCOLOR, &clrBorder ) == S_OK );
		g_PaintManager.m_UxTheme.CloseThemeData();
		dc.FillSolidRect( &rcTabNearMargin, clrBorder );
	}
}

void CExtPaintManagerStudio2005::PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bTopLeft,
	bool bHorz,
	bool bSelected,
	bool bCenteredText,
	bool bGroupedMode,
	bool bInGroupActive,
	bool bInvertedVerticalMode,
	const CRect & rcEntireItem,
	CSize sizeTextMeasured,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator, // = COLORREF(-1L)
	bool bDwmMode // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabItem(
			dc,
			rcTabItemsArea,
			bTopLeft,
			bHorz,
			bSelected,
			bCenteredText,
			bGroupedMode,
			bInGroupActive,
			bInvertedVerticalMode,
			rcEntireItem,
			sizeTextMeasured,
			pFont,
			sText,
			pIcon,
			pHelperSrc,
			lParam,
			clrForceText,
			clrForceTabBk,
			clrForceTabBorderLT,
			clrForceTabBorderRB,
			clrForceTabSeparator,
			bDwmMode
			);
		return;
	}

CExtCmdIcon * pIconTabItemCloseButton = NULL;
CExtCmdIcon::e_paint_type_t ePaintStateITICB =
		(CExtCmdIcon::e_paint_type_t) CExtCmdIcon::__PAINT_INVISIBLE;
CRect rcTabItemCloseButton( 0, 0, 0, 0 );
INT nItemIndex = 1;
CExtBarButton * pTBB = NULL;
CExtTabWnd * pTabs = NULL;
CExtTabWnd::TAB_ITEM_INFO * pTII = NULL;
bool bNoPrefix = false;
	if( pHelperSrc != NULL )
	{
		pTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( pTabs != NULL )
		{
			ASSERT_VALID( pTabs );
			pTII = pTabs->ItemGet( LONG( lParam ) );
			ASSERT( pTII != NULL );
			ASSERT_VALID( pTII );
			nItemIndex = INT(lParam);
			pIconTabItemCloseButton =
				pTabs->OnTabWndQueryItemCloseButtonShape( pTII );
			if( pIconTabItemCloseButton != NULL )
			{
				rcTabItemCloseButton = pTII->CloseButtonRectGet();
				ePaintStateITICB = (CExtCmdIcon::e_paint_type_t)
					pTabs->OnTabWndQueryItemCloseButtonPaintState( pTII );
			} // if( pIconTabItemCloseButton != NULL )
			bNoPrefix = ( ( pTabs->GetTabWndStyleEx() & __ETWS_EX_NO_PREFIX ) != 0 ) ? true : false;
		} // if( pTabs != NULL )
		else
		{
			pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
#ifdef _DEBUG
			if( pTBB != NULL )
			{
				ASSERT_VALID( pTBB );
			} // if( pTBB != NULL )
#endif // _DEBUG
		} // else from if( pTabs != NULL )
	} // if( pHelperSrc != NULL )

bool bEnabled = true;
	if( pTII != NULL )
		bEnabled = pTII->EnabledGet();
	else if( pTBB != NULL )
		bEnabled = pTBB->IsEnabled();

LONG nSelectionIndex = -1;
	if( pTabs != NULL )
		nSelectionIndex = pTabs->SelectionGet();

bool bDetectedDynTPC = false;
	bDetectedDynTPC;
#if (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)
	if( pTII != NULL )
	{
		CObject * pObject = pTII->EventProviderGet();
		if( pObject != NULL )
		{
			CExtDynamicControlBar * pBar = DYNAMIC_DOWNCAST( CExtDynamicControlBar, pObject );
			if( pBar != NULL )
			{
				bool bFlashCaptionHighlightedState = false;
				if( pBar->FlashCaptionIsInProgress( &bFlashCaptionHighlightedState ) )
				{
					if( bFlashCaptionHighlightedState )
					{
						clrForceText = pBar->m_clrFlashCaptionText;
						clrForceTabBk = pBar->m_clrFlashCaptionBackground;
						bSelected = true;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
						bDetectedDynTPC = true;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
					}
				}
			}
		}
	}
#endif// (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)

COLORREF clrText = clrForceText;
	if( clrText == COLORREF(-1L) )
		clrText = GetColor( bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED, pHelperSrc, lParam );
COLORREF clrTabBorderLT = clrForceTabBorderLT;
	if( clrTabBorderLT == COLORREF(-1L) )
		clrTabBorderLT = GetColor( bGroupedMode ? COLOR_3DSHADOW : COLOR_3DHILIGHT, pHelperSrc, lParam  );
COLORREF clrTabBorderRB = clrForceTabBorderRB;
	if( clrTabBorderRB == COLORREF(-1L) )
		clrTabBorderRB = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
COLORREF clrBkLight = clrForceTabBk;
	if( clrBkLight == COLORREF(-1L) )
		clrBkLight = GetColor( COLOR_3DHILIGHT, this );
COLORREF clrBkDark = clrForceTabBk;
	if( clrBkDark == COLORREF(-1L) )
		clrBkDark = GetColor( COLOR_3DLIGHT, this );
bool bInGroupFirst = false;
bool bInGroupLast = false;
	if( bGroupedMode && pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		CExtTabWnd::TAB_ITEM_INFO * pTiiFirst = pTII->GetInGroupFirst();
		CExtTabWnd::TAB_ITEM_INFO * pTiiLast = pTII->GetInGroupLast();
		ASSERT_VALID( pTiiFirst );
		ASSERT_VALID( pTiiLast );
		bInGroupFirst = ( nItemIndex == pTabs->ItemGetIndexOf( pTiiFirst ) );
		bInGroupLast = ( nItemIndex == pTabs->ItemGetIndexOf( pTiiLast ) );
	}
bool bFirstItem = false, bLastItem = false;
	if( pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		bFirstItem =
			(	nItemIndex == 0
			||	(	bInGroupFirst
				&&	nItemIndex != nSelectionIndex
				)
			);
		bLastItem = 
			(	nItemIndex == pTabs->ItemGetCount() - 1
			||	(	bInGroupLast
				&&	nItemIndex != nSelectionIndex
				)
			);
	}

	CRect rcItem( rcEntireItem );

	if( m_eStyle2005 == __ES2005_BETA2 )
	{
		POINT arrPointsBorders[10] =
				{	{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
					{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
					{ 0, 0 }, { 0, 0 },
				};
		POINT arrPointsClipArea[10] =
				{	{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
					{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
					{ 0, 0 }, { 0, 0 },
				};
		POINT arrPointsInnerArea[10] =
				{	{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
					{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
					{ 0, 0 }, { 0, 0 },
				};
		POINT arrPointsSelectedLine[2] =
				{	{ 0, 0 }, { 0, 0 },
				};

		if( bHorz )
		{
			if( (bTopLeft && !bGroupedMode) || (!bTopLeft && bGroupedMode) )
			{
				// BORDERS

				// right side
				arrPointsBorders[0] = CPoint( rcItem.right + 6,	rcItem.bottom );
				arrPointsBorders[1] = CPoint( rcItem.right,		rcItem.top + 6 );
				arrPointsBorders[2] = CPoint( rcItem.right - 5,	rcItem.top + 1 );
				arrPointsBorders[3] = CPoint( rcItem.right - 6,	rcItem.top + 1 );
				arrPointsBorders[4] = CPoint( rcItem.right - 7,	rcItem.top );

				// left side
				arrPointsBorders[5] = CPoint( rcItem.left + 7,	rcItem.top );
				arrPointsBorders[6] = CPoint( rcItem.left + 6,	rcItem.top + 1 );
				arrPointsBorders[7] = CPoint( rcItem.left + 5,	rcItem.top + 1 );
				arrPointsBorders[8] = CPoint( rcItem.left,		rcItem.top + 6 );
				arrPointsBorders[9] = CPoint( rcItem.left - 6,	rcItem.bottom );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsBorders[0] = CPoint( rcItem.right - 6,	rcItem.bottom );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsBorders[9] = CPoint( rcItem.left + 6, rcItem.bottom );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsBorders)/sizeof(arrPointsBorders[0]); i++ )
						arrPointsBorders[i].x += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsBorders[i].x -= 6;
				}

				// CLIP REGION

				// right side
				arrPointsClipArea[0] = CPoint( rcItem.right + 5,	rcItem.bottom + 1 );
				arrPointsClipArea[1] = CPoint( rcItem.right - 1,	rcItem.top + 7 );
				arrPointsClipArea[2] = CPoint( rcItem.right - 4,	rcItem.top + 3 );
				arrPointsClipArea[3] = CPoint( rcItem.right - 5,	rcItem.top + 3 );
				arrPointsClipArea[4] = CPoint( rcItem.right - 6,	rcItem.top + 2 );

				// left side
				arrPointsClipArea[5] = CPoint( rcItem.left + 7,	rcItem.top + 2 );
				arrPointsClipArea[6] = CPoint( rcItem.left + 6,	rcItem.top + 3 );
				arrPointsClipArea[7] = CPoint( rcItem.left + 5,	rcItem.top + 3 );
				arrPointsClipArea[8] = CPoint( rcItem.left + 1,	rcItem.top + 7 );
				arrPointsClipArea[9] = CPoint( rcItem.left - 5,	rcItem.bottom + 1);

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
					{
						arrPointsClipArea[0] = CPoint( rcItem.right - 6, rcItem.bottom );
						arrPointsClipArea[1] = CPoint( rcItem.right - 1, rcItem.top + 7 );
					}
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
					{
						arrPointsClipArea[8] = CPoint( rcItem.left + 1,	rcItem.top + 7 );
						arrPointsClipArea[9] = CPoint( rcItem.left + 7, rcItem.bottom );
					}
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsClipArea)/sizeof(arrPointsClipArea[0]); i++ )
						arrPointsClipArea[i].x += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsClipArea[i].x -= 6;
				}

				// INNER AREA

				// right side
				arrPointsInnerArea[0] = CPoint( rcItem.right + 5,	rcItem.bottom );
				arrPointsInnerArea[1] = CPoint( rcItem.right - 1,	rcItem.top + 6 );
				arrPointsInnerArea[2] = CPoint( rcItem.right - 5,	rcItem.top + 2 );
				arrPointsInnerArea[3] = CPoint( rcItem.right - 6,	rcItem.top + 2 );
				arrPointsInnerArea[4] = CPoint( rcItem.right - 7,	rcItem.top + 1 );

				// left side
				arrPointsInnerArea[5] = CPoint( rcItem.left + 7,	rcItem.top + 1 );
				arrPointsInnerArea[6] = CPoint( rcItem.left + 6,	rcItem.top + 2 );
				arrPointsInnerArea[7] = CPoint( rcItem.left + 5,	rcItem.top + 2 );
				arrPointsInnerArea[8] = CPoint( rcItem.left + 1,	rcItem.top + 6 );
				arrPointsInnerArea[9] = CPoint( rcItem.left - 5,	rcItem.bottom );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsInnerArea[0] = CPoint( rcItem.right - 1, rcItem.top + 7 );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsInnerArea[9] = CPoint( rcItem.left + 1, rcItem.top + 7 );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsInnerArea)/sizeof(arrPointsInnerArea[0]); i++ )
						arrPointsInnerArea[i].x += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsInnerArea[i].x -= 6;
				}

				arrPointsSelectedLine[0] = CPoint( arrPointsBorders[0].x, arrPointsBorders[0].y + 1 );
				arrPointsSelectedLine[1] = CPoint( arrPointsBorders[9].x - 1, arrPointsBorders[9].y + 1 );

			}
			else
			{
				// BORDERS

				// right side
				arrPointsBorders[0] = CPoint( rcItem.right + 6,	rcItem.top );
				arrPointsBorders[1] = CPoint( rcItem.right,		rcItem.bottom - 6 );
				arrPointsBorders[2] = CPoint( rcItem.right - 5,	rcItem.bottom - 1 );
				arrPointsBorders[3] = CPoint( rcItem.right - 6,	rcItem.bottom - 1 );
				arrPointsBorders[4] = CPoint( rcItem.right - 7,	rcItem.bottom );

				// left side
				arrPointsBorders[5] = CPoint( rcItem.left + 7,	rcItem.bottom );
				arrPointsBorders[6] = CPoint( rcItem.left + 6,	rcItem.bottom - 1 );
				arrPointsBorders[7] = CPoint( rcItem.left + 5,	rcItem.bottom - 1 );
				arrPointsBorders[8] = CPoint( rcItem.left,		rcItem.bottom - 6 );
				arrPointsBorders[9] = CPoint( rcItem.left - 6,	rcItem.top );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsBorders[0] = CPoint( rcItem.right - 6,	rcItem.top );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsBorders[9] = CPoint( rcItem.left + 6, rcItem.top );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsBorders)/sizeof(arrPointsBorders[0]); i++ )
						arrPointsBorders[i].x += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsBorders[i].x -= 6;
				}
	
				// CLIP REGION

				// right side
				arrPointsClipArea[0] = CPoint( rcItem.right + 5,	rcItem.top );
				arrPointsClipArea[1] = CPoint( rcItem.right - 2,	rcItem.bottom - 5 );
				arrPointsClipArea[2] = CPoint( rcItem.right - 5,	rcItem.bottom - 2 );
				arrPointsClipArea[3] = CPoint( rcItem.right - 6,	rcItem.bottom - 2 );
				arrPointsClipArea[4] = CPoint( rcItem.right - 7,	rcItem.bottom - 1 );

				// left side
				arrPointsClipArea[5] = CPoint( rcItem.left + 7,	rcItem.bottom - 1 );
				arrPointsClipArea[6] = CPoint( rcItem.left + 6,	rcItem.bottom - 2 );
				arrPointsClipArea[7] = CPoint( rcItem.left + 5,	rcItem.bottom - 2 );
				arrPointsClipArea[8] = CPoint( rcItem.left + 2,	rcItem.bottom - 6 );
				arrPointsClipArea[9] = CPoint( rcItem.left - 5,	rcItem.top );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
					{
						arrPointsClipArea[0] = CPoint( rcItem.right - 6, rcItem.top );
						arrPointsClipArea[1] = CPoint( rcItem.right, rcItem.bottom - 7 );
					}
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
					{
						arrPointsClipArea[8] = CPoint( rcItem.left + 1,	rcItem.bottom - 7 );
						arrPointsClipArea[9] = CPoint( rcItem.left + 7, rcItem.top );
					}
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsClipArea)/sizeof(arrPointsClipArea[0]); i++ )
						arrPointsClipArea[i].x += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsClipArea[i].x -= 6;
				}

				// INNER AREA

				// right side
				arrPointsInnerArea[0] = CPoint( rcItem.right + 5,	rcItem.top );
				arrPointsInnerArea[1] = CPoint( rcItem.right - 1,	rcItem.bottom - 6 );
				arrPointsInnerArea[2] = CPoint( rcItem.right - 5,	rcItem.bottom - 2 );
				arrPointsInnerArea[3] = CPoint( rcItem.right - 6,	rcItem.bottom - 2 );
				arrPointsInnerArea[4] = CPoint( rcItem.right - 7,	rcItem.bottom - 1 );

				// left side
				arrPointsInnerArea[5] = CPoint( rcItem.left + 7,	rcItem.bottom - 1 );
				arrPointsInnerArea[6] = CPoint( rcItem.left + 6,	rcItem.bottom - 2 );
				arrPointsInnerArea[7] = CPoint( rcItem.left + 5,	rcItem.bottom - 2 );
				arrPointsInnerArea[8] = CPoint( rcItem.left + 1,	rcItem.bottom - 6 );
				arrPointsInnerArea[9] = CPoint( rcItem.left - 5,	rcItem.top );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsInnerArea[0] = CPoint( rcItem.right - 1, rcItem.bottom - 7 );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsInnerArea[9] = CPoint( rcItem.left + 1, rcItem.bottom - 7 );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsInnerArea)/sizeof(arrPointsInnerArea[0]); i++ )
						arrPointsInnerArea[i].x += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsInnerArea[i].x -= 6;
				}
				
				arrPointsSelectedLine[0] = CPoint( arrPointsBorders[0].x, arrPointsBorders[0].y - 1 );
				arrPointsSelectedLine[1] = CPoint( arrPointsBorders[9].x - 1, arrPointsBorders[9].y - 1 );

			}
		} // if( bHorz )
		else
		{
			if( (bTopLeft && !bGroupedMode) || (!bTopLeft && bGroupedMode) )
			{
				// BORDERS

				// right side
				arrPointsBorders[0] = CPoint( rcItem.right,		rcItem.bottom + 6 );
				arrPointsBorders[1] = CPoint( rcItem.left + 6,	rcItem.bottom );
				arrPointsBorders[2] = CPoint( rcItem.left + 1,	rcItem.bottom - 5 );
				arrPointsBorders[3] = CPoint( rcItem.left + 1,	rcItem.bottom - 6 );
				arrPointsBorders[4] = CPoint( rcItem.left,		rcItem.bottom - 7 );

				// left side
				arrPointsBorders[5] = CPoint( rcItem.left,		rcItem.top + 7 );
				arrPointsBorders[6] = CPoint( rcItem.left + 1,	rcItem.top + 6 );	 
				arrPointsBorders[7] = CPoint( rcItem.left + 1,	rcItem.top + 5 );
				arrPointsBorders[8] = CPoint( rcItem.left + 6,	rcItem.top );
				arrPointsBorders[9] = CPoint( rcItem.right,		rcItem.top - 6 );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsBorders[0] = CPoint( rcItem.right,	rcItem.bottom - 6 );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsBorders[9] = CPoint( rcItem.right, rcItem.top + 6 );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsBorders)/sizeof(arrPointsBorders[0]); i++ )
						arrPointsBorders[i].y += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsBorders[i].y -= 6;
				}

				// CLIP REGION

				// right side
				arrPointsClipArea[0] = CPoint( rcItem.right + 1,rcItem.bottom + 5 );
				arrPointsClipArea[1] = CPoint( rcItem.left + 6,	rcItem.bottom - 2 );
				arrPointsClipArea[2] = CPoint( rcItem.left + 3,	rcItem.bottom - 5 );
				arrPointsClipArea[3] = CPoint( rcItem.left + 3,	rcItem.bottom - 6 );
				arrPointsClipArea[4] = CPoint( rcItem.left + 2,	rcItem.bottom - 7 );

				// left side
				arrPointsClipArea[5] = CPoint( rcItem.left + 2,	rcItem.top + 7 );
				arrPointsClipArea[6] = CPoint( rcItem.left + 3,	rcItem.top + 6 );	 
				arrPointsClipArea[7] = CPoint( rcItem.left + 3,	rcItem.top + 5 );
				arrPointsClipArea[8] = CPoint( rcItem.left + 6,	rcItem.top + 2 );
				arrPointsClipArea[9] = CPoint( rcItem.right + 1,rcItem.top - 5 );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
					{
						arrPointsClipArea[0] = CPoint( rcItem.right + 1,rcItem.bottom - 7 );
						arrPointsClipArea[1] = CPoint( rcItem.left + 7,	rcItem.bottom - 1 );
					}
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
					{
						arrPointsClipArea[8] = CPoint( rcItem.left + 7,	rcItem.top + 1 );
						arrPointsClipArea[9] = CPoint( rcItem.right + 1,rcItem.top + 7 );
					}
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsClipArea)/sizeof(arrPointsClipArea[0]); i++ )
						arrPointsClipArea[i].y += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsClipArea[i].y -= 6;
				}

				// INNER AREA
				
				// right side
				arrPointsInnerArea[0] = CPoint( rcItem.right,		rcItem.bottom + 5 );
				arrPointsInnerArea[1] = CPoint( rcItem.left + 6,	rcItem.bottom - 1 );
				arrPointsInnerArea[2] = CPoint( rcItem.left + 2,	rcItem.bottom - 5 );
				arrPointsInnerArea[3] = CPoint( rcItem.left + 2,	rcItem.bottom - 6 );
				arrPointsInnerArea[4] = CPoint( rcItem.left + 1,	rcItem.bottom - 7 );

				// left side
				arrPointsInnerArea[5] = CPoint( rcItem.left + 1,	rcItem.top + 7 );
				arrPointsInnerArea[6] = CPoint( rcItem.left + 2,	rcItem.top + 6 );	 
				arrPointsInnerArea[7] = CPoint( rcItem.left + 2,	rcItem.top + 5 );
				arrPointsInnerArea[8] = CPoint( rcItem.left + 6,	rcItem.top + 1 );
				arrPointsInnerArea[9] = CPoint( rcItem.right,		rcItem.top - 5 );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsInnerArea[0] = CPoint( rcItem.right,	rcItem.bottom - 5 );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsInnerArea[9] = CPoint( rcItem.right, rcItem.top + 7 );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsInnerArea)/sizeof(arrPointsInnerArea[0]); i++ )
						arrPointsInnerArea[i].y += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsInnerArea[i].y -= 6;
				}
				
				arrPointsSelectedLine[0] = CPoint( arrPointsInnerArea[0].x + 1, arrPointsInnerArea[0].y + 1 );
				arrPointsSelectedLine[1] = CPoint( arrPointsInnerArea[9].x + 1, arrPointsInnerArea[9].y - 2 );
			}
			else
			{
				// BORDERS

				// right side
				arrPointsBorders[0] = CPoint( rcItem.left,		rcItem.bottom + 6 );
				arrPointsBorders[1] = CPoint( rcItem.right - 6,	rcItem.bottom );
				arrPointsBorders[2] = CPoint( rcItem.right - 1,	rcItem.bottom - 5 );
				arrPointsBorders[3] = CPoint( rcItem.right - 1,	rcItem.bottom - 6 );
				arrPointsBorders[4] = CPoint( rcItem.right,		rcItem.bottom - 7 );

				// left side
				arrPointsBorders[5] = CPoint( rcItem.right,		rcItem.top + 7 );
				arrPointsBorders[6] = CPoint( rcItem.right - 1,	rcItem.top + 6 );	 
				arrPointsBorders[7] = CPoint( rcItem.right - 1,	rcItem.top + 5 );
				arrPointsBorders[8] = CPoint( rcItem.right - 6,	rcItem.top );
				arrPointsBorders[9] = CPoint( rcItem.left,		rcItem.top - 6 );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsBorders[0] = CPoint( rcItem.left,	rcItem.bottom - 6 );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsBorders[9] = CPoint( rcItem.left, rcItem.top + 6 );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsBorders)/sizeof(arrPointsBorders[0]); i++ )
						arrPointsBorders[i].y += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsBorders[i].y -= 6;
				}

				// CLIP REGION

				// right side
				arrPointsClipArea[0] = CPoint( rcItem.left - 0,		rcItem.bottom + 5 );
				arrPointsClipArea[1] = CPoint( rcItem.right - 5,	rcItem.bottom - 2 );
				arrPointsClipArea[2] = CPoint( rcItem.right - 2,	rcItem.bottom - 5 );
				arrPointsClipArea[3] = CPoint( rcItem.right - 2,	rcItem.bottom - 6 );
				arrPointsClipArea[4] = CPoint( rcItem.right - 1,	rcItem.bottom - 7 );

				// left side
				arrPointsClipArea[5] = CPoint( rcItem.right - 1,	rcItem.top + 7 );
				arrPointsClipArea[6] = CPoint( rcItem.right - 2,	rcItem.top + 6 );	 
				arrPointsClipArea[7] = CPoint( rcItem.right - 2,	rcItem.top + 5 );
				arrPointsClipArea[8] = CPoint( rcItem.right - 5,	rcItem.top + 2 );
				arrPointsClipArea[9] = CPoint( rcItem.left - 0,		rcItem.top - 5 );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
					{
						arrPointsClipArea[0] = CPoint( rcItem.left - 0,rcItem.bottom - 7 );
						arrPointsClipArea[1] = CPoint( rcItem.right - 7,	rcItem.bottom - 1 );
					}
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
					{
						arrPointsClipArea[8] = CPoint( rcItem.right - 7,	rcItem.top + 1 );
						arrPointsClipArea[9] = CPoint( rcItem.left - 0,rcItem.top + 7 );
					}
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsClipArea)/sizeof(arrPointsClipArea[0]); i++ )
						arrPointsClipArea[i].y += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsClipArea[i].y -= 6;
				}

				// INNER AREA
				
				// right side
				arrPointsInnerArea[0] = CPoint( rcItem.left,		rcItem.bottom + 5 );
				arrPointsInnerArea[1] = CPoint( rcItem.right - 6,	rcItem.bottom - 1 );
				arrPointsInnerArea[2] = CPoint( rcItem.right - 2,	rcItem.bottom - 5 );
				arrPointsInnerArea[3] = CPoint( rcItem.right - 2,	rcItem.bottom - 6 );
				arrPointsInnerArea[4] = CPoint( rcItem.right - 1,	rcItem.bottom - 7 );

				// left side
				arrPointsInnerArea[5] = CPoint( rcItem.right - 1,	rcItem.top + 7 );
				arrPointsInnerArea[6] = CPoint( rcItem.right - 2,	rcItem.top + 6 );	 
				arrPointsInnerArea[7] = CPoint( rcItem.right - 2,	rcItem.top + 5 );
				arrPointsInnerArea[8] = CPoint( rcItem.right - 6,	rcItem.top + 1 );
				arrPointsInnerArea[9] = CPoint( rcItem.left,		rcItem.top - 5 );

				if( nSelectionIndex > nItemIndex && !bGroupedMode )
				{
					if(	!bLastItem )
						arrPointsInnerArea[0] = CPoint( rcItem.left,	rcItem.bottom - 5 );
				}
				else if( nSelectionIndex < nItemIndex || bGroupedMode )
				{
					if( !bFirstItem && !bInGroupFirst )
						arrPointsInnerArea[9] = CPoint( rcItem.left, rcItem.top + 7 );
				}

				if( nItemIndex == 0 )
				{
					// first item in tab window
					for( int i = 5; i < sizeof(arrPointsInnerArea)/sizeof(arrPointsInnerArea[0]); i++ )
						arrPointsInnerArea[i].y += 6;
				}
				else if( pTabs != NULL && nItemIndex == ( pTabs->ItemGetCount() - 1 ) ) 
				{
					// last item in tab window
					for( int i = 0; i < 5; i++ )
						arrPointsInnerArea[i].y -= 6;
				}				
		
				arrPointsSelectedLine[0] = CPoint( arrPointsBorders[0].x - 1, arrPointsBorders[0].y );
				arrPointsSelectedLine[1] = CPoint( arrPointsBorders[9].x - 1, arrPointsBorders[9].y - 1 );
			}
		} // else if( bHorz )

		// draw item borders
		CPen pen( PS_SOLID, 1, clrTabBorderRB );
		CPen * pOldPen = dc.SelectObject( &pen );
		INT nPointsBordersCount = sizeof(arrPointsBorders)/sizeof(arrPointsBorders[0]);
		int i = 0;
		for( i = 0; i < nPointsBordersCount - 1; i++ )
		{
			dc.MoveTo( arrPointsBorders[i] );
			dc.LineTo( arrPointsBorders[i + 1] );
		}
		dc.MoveTo( arrPointsBorders[ nPointsBordersCount - 1 ] );
		dc.LineTo( arrPointsBorders[ nPointsBordersCount - 2 ] );
		dc.SelectObject( pOldPen );
		pen.DeleteObject();

		// draw inner item borders
		COLORREF clrInnerDark = GetColor( COLOR_3DFACE, this );
		COLORREF clrInnerLight = RGB(252,252,254);
		if( nItemIndex == nSelectionIndex && !bGroupedMode )
			clrInnerDark = clrInnerLight;
		pen.CreatePen( PS_SOLID, 1, clrInnerDark );
		pOldPen = dc.SelectObject( &pen );
		int nLastDarkPoint = bGroupedMode && bTopLeft ? 5 : 4;
		for( i = 0; i <= nLastDarkPoint; i++ )
		{
			dc.MoveTo( arrPointsInnerArea[i] );
			dc.LineTo( arrPointsInnerArea[i + 1] );
		}
		dc.SelectObject( pOldPen );
		pen.DeleteObject();
		
		pen.CreatePen( PS_SOLID, 1, clrInnerLight );
		pOldPen = dc.SelectObject( &pen );
		int nFirstLightPoint = bGroupedMode && bTopLeft ? 6 : 4;
		for( i = nFirstLightPoint; i <= 8; i++ )
		{
			dc.MoveTo( arrPointsInnerArea[i] );
			dc.LineTo( arrPointsInnerArea[i + 1] );
		}
		dc.SelectObject( pOldPen );
		pen.DeleteObject();

		// selected item
		if( nItemIndex == nSelectionIndex && !bGroupedMode )
		{
			pen.CreatePen( PS_SOLID, 1, RGB(252,252,254) ); 
			pOldPen = dc.SelectObject( &pen );
			dc.MoveTo( arrPointsSelectedLine[0] );
			dc.LineTo( arrPointsSelectedLine[1] );
			dc.SelectObject( pOldPen );
			pen.DeleteObject();
		}
		
		CRgn rgnClipArea;
		VERIFY( rgnClipArea.CreatePolygonRgn( arrPointsClipArea, 10, ALTERNATE ) );
		
		// fill item background 
		CRect rcFill( rcTabItemsArea );
		dc.SelectClipRgn( &rgnClipArea, RGN_AND );
		if(		!(nItemIndex == nSelectionIndex && !bGroupedMode) 
			&&	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 
			)
		{
			COLORREF clr1 =
				bHorz
					? ( bTopLeft && !bGroupedMode ? clrBkDark : clrBkLight ) 
					: ( bTopLeft && !bGroupedMode ? clrBkLight : clrBkDark )
					;
			COLORREF clr2 =
				bHorz
					? ( bTopLeft && !bGroupedMode ? clrBkLight : clrBkDark ) 
					: ( bTopLeft && !bGroupedMode ? clrBkDark : clrBkLight )
					;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
			if(		pHelperSrc != NULL
				&&	clrForceTabBk != COLORREF(-1L)
				&&	(	bDetectedDynTPC
					||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
					||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
					)
				)
				clr1 = clr2 = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
			if(		pHelperSrc != NULL
				&&	clrForceTabBk != COLORREF(-1L)
				&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
				&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
				)
				clr1 = clr2 = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
			stat_PaintGradientRect(
				dc,
				&rcFill,
				clr1,
				clr2,
				bHorz
				);
		}
		else 
		{
			COLORREF clrFill =
				( nItemIndex == nSelectionIndex )
					? RGB(252,252,254)
					: GetColor( COLOR_3DFACE, this )
					;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
			if(		pHelperSrc != NULL
				&&	clrForceTabBk != COLORREF(-1L)
				&&	(	bDetectedDynTPC
					||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
					||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
					)
				)
				clrFill = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
			if(		pHelperSrc != NULL
				&&	clrForceTabBk != COLORREF(-1L)
				&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
				&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
				)
				clrFill = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
			dc.FillSolidRect( &rcFill, clrFill );
		}
		
#define __EXTTAB_BETA2_INDENT_TOP		2
#define __EXTTAB_BETA2_INDENT_BOTTOM	2
#define __EXTTAB_BETA2_INDENT_LEFT		3
#define __EXTTAB_BETA2_INDENT_RIGHT		1

		rcItem.DeflateRect(
			bHorz 
				? __EXTTAB_BETA2_INDENT_LEFT 
				: __EXTTAB_BETA2_INDENT_TOP,
			bHorz 
				? __EXTTAB_BETA2_INDENT_TOP 
				: __EXTTAB_BETA2_INDENT_LEFT,
			bHorz 
				? __EXTTAB_BETA2_INDENT_RIGHT 
				: __EXTTAB_BETA2_INDENT_TOP,
			bHorz 
				? __EXTTAB_BETA2_INDENT_BOTTOM 
				: __EXTTAB_BETA2_INDENT_RIGHT
			);
		
		// first item indent
		if( nItemIndex == 0 )
			rcItem.DeflateRect(
			bHorz ? 6 : 0,
			!bHorz ? 6 : 0,
			bHorz ? 6 : 0,
			!bHorz ? 6 : 0
			);

	}
	else if(	m_eStyle2005 == __ES2005_BETA1 
			||	m_eStyle2005 == __ES2005_RC
		)
	{
		POINT arrPointsBorders[6]	= { {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} };
		POINT arrPointsInnerArea[6] = { {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0} };
		POINT arrPointsItemsSeparator[2] = { {0,0}, {0,0} };

		if( bHorz )
		{
			bool bNewTopLeft = bGroupedMode ? !bTopLeft : bTopLeft;
			if( bNewTopLeft )
			{
				arrPointsBorders[0] = CPoint(rcItem.left,		rcItem.bottom - 1 );
				arrPointsBorders[1] = CPoint(rcItem.left,		rcItem.top + 2 );
				arrPointsBorders[2] = CPoint(rcItem.left + 2,	rcItem.top );
				arrPointsBorders[3] = CPoint(rcItem.right - 2,	rcItem.top );
				arrPointsBorders[4] = CPoint(rcItem.right,		rcItem.top + 2 );
				arrPointsBorders[5] = CPoint(rcItem.right,		rcItem.bottom );

				arrPointsInnerArea[0] = CPoint(rcItem.left + 1,	rcItem.bottom + 1 );
				arrPointsInnerArea[1] = CPoint(rcItem.left + 1,	rcItem.top + 2 );
				arrPointsInnerArea[2] = CPoint(rcItem.left + 2,	rcItem.top + 1 );
				arrPointsInnerArea[3] = CPoint(rcItem.right - 1,rcItem.top + 1 );
				arrPointsInnerArea[4] = CPoint(rcItem.right,	rcItem.top + 2 );
				arrPointsInnerArea[5] = CPoint(rcItem.right,	rcItem.bottom + 1 );

				arrPointsItemsSeparator[0] = CPoint(rcItem.right,	rcItem.top + 3 );
				arrPointsItemsSeparator[1] = CPoint(rcItem.right,	rcItem.bottom - 2 );
			} // if( bNewTopLeft )
			else
			{
				rcItem.bottom--;
				arrPointsBorders[0] = CPoint(rcItem.left,		rcItem.top );
				arrPointsBorders[1] = CPoint(rcItem.left,		rcItem.bottom - 2 );
				arrPointsBorders[2] = CPoint(rcItem.left + 2,	rcItem.bottom );
				arrPointsBorders[3] = CPoint(rcItem.right - 2,	rcItem.bottom );
				arrPointsBorders[4] = CPoint(rcItem.right,		rcItem.bottom - 2 );
				arrPointsBorders[5] = CPoint(rcItem.right,		rcItem.top - 1 );

				arrPointsInnerArea[0] = CPoint(rcItem.left + 1,	rcItem.top - 1);
				arrPointsInnerArea[1] = CPoint(rcItem.left + 1,	rcItem.bottom - 2 );
				arrPointsInnerArea[2] = CPoint(rcItem.left + 2,	rcItem.bottom );
				arrPointsInnerArea[3] = CPoint(rcItem.right - 2,rcItem.bottom );
				arrPointsInnerArea[4] = CPoint(rcItem.right,	rcItem.bottom - 2 );
				arrPointsInnerArea[5] = CPoint(rcItem.right,	rcItem.top - 1 );
			
				arrPointsItemsSeparator[0] = CPoint(rcItem.right,	rcItem.bottom - 3 );
				arrPointsItemsSeparator[1] = CPoint(rcItem.right,	rcItem.top + 1 );
			}
		} 
		else
		{
			bool bNewTopLeft = bGroupedMode ? !bTopLeft : bTopLeft;
			if( bNewTopLeft )
			{
				arrPointsBorders[0] = CPoint(rcItem.right - 1,	rcItem.top );
				arrPointsBorders[1] = CPoint(rcItem.left + 2,	rcItem.top );
				arrPointsBorders[2] = CPoint(rcItem.left,		rcItem.top + 2 );
				arrPointsBorders[3] = CPoint(rcItem.left,		rcItem.bottom - 2 );
				arrPointsBorders[4] = CPoint(rcItem.left + 2,	rcItem.bottom );
				arrPointsBorders[5] = CPoint(rcItem.right,		rcItem.bottom );

				arrPointsInnerArea[0] = CPoint(rcItem.right + 1,rcItem.top + 1 );
				arrPointsInnerArea[1] = CPoint(rcItem.left + 2,	rcItem.top + 1 );
				arrPointsInnerArea[2] = CPoint(rcItem.left + 1,	rcItem.top + 2 );
				arrPointsInnerArea[3] = CPoint(rcItem.left + 1,	rcItem.bottom - 2 );
				arrPointsInnerArea[4] = CPoint(rcItem.left + 2,	rcItem.bottom );
				arrPointsInnerArea[5] = CPoint(rcItem.right + 1,rcItem.bottom );

				arrPointsItemsSeparator[0] = CPoint(rcItem.left + 3,	rcItem.bottom );
				arrPointsItemsSeparator[1] = CPoint(rcItem.right - 2,	rcItem.bottom );
			} // if( bNewTopLeft )
			else
			{
				rcItem.right--;
				arrPointsBorders[0] = CPoint(rcItem.left,		rcItem.top );
				arrPointsBorders[1] = CPoint(rcItem.right - 2,	rcItem.top );
				arrPointsBorders[2] = CPoint(rcItem.right,		rcItem.top + 2 );
				arrPointsBorders[3] = CPoint(rcItem.right,		rcItem.bottom - 2 );
				arrPointsBorders[4] = CPoint(rcItem.right - 2,	rcItem.bottom );
				arrPointsBorders[5] = CPoint(rcItem.left - 1,	rcItem.bottom );

				arrPointsInnerArea[0] = CPoint(rcItem.left - 1,	rcItem.top + 1 );
				arrPointsInnerArea[1] = CPoint(rcItem.right - 2,rcItem.top );
				arrPointsInnerArea[2] = CPoint(rcItem.right,	rcItem.top + 2 );
				arrPointsInnerArea[3] = CPoint(rcItem.right,	rcItem.bottom - 2 );
				arrPointsInnerArea[4] = CPoint(rcItem.right - 2,rcItem.bottom );
				arrPointsInnerArea[5] = CPoint(rcItem.left - 1,	rcItem.bottom );

				arrPointsItemsSeparator[0] = CPoint(rcItem.right - 3,	rcItem.bottom );
				arrPointsItemsSeparator[1] = CPoint(rcItem.left + 1,	rcItem.bottom );
			}
		}

		// draw item border 
		CPen pen(PS_SOLID, 1, GetColor( COLOR_3DSHADOW, this ) );
		CPen * pOldPen = dc.SelectObject( &pen );
		if(		m_eStyle2005 != __ES2005_RC 
			||	bSelected
			||	bGroupedMode
			)
		{
			for( int i = 0 ; i < sizeof(arrPointsBorders)/sizeof(arrPointsBorders[0]) - 1; i++ )
			{
				dc.MoveTo( arrPointsBorders[i] );
				dc.LineTo( arrPointsBorders[i + 1] );
			}
		}
		else if( pTabs != NULL && nItemIndex < pTabs->ItemGetCount() - 1 )
		{
			dc.MoveTo( arrPointsItemsSeparator[0] );
			dc.LineTo( arrPointsItemsSeparator[1] );
		}
		dc.SelectObject( pOldPen );

		CRgn rgnBk;
		VERIFY( rgnBk.CreatePolygonRgn( arrPointsInnerArea, 6, ALTERNATE ) );
		if( m_eStyle2005 != __ES2005_RC )
		{
			if(		(!bSelected || bGroupedMode ) 
				&&	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8
				)
			{
				dc.SelectClipRgn( &rgnBk, RGN_AND );
				CRect rcFill( rcTabItemsArea );
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
				if(		pHelperSrc != NULL
					&&	clrForceTabBk != COLORREF(-1L)
					&&	(	bDetectedDynTPC
						||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
						||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
						)
					)
					clrBkLight = clrBkDark = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
				if(		pHelperSrc != NULL
					&&	clrForceTabBk != COLORREF(-1L)
					&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
					&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
					)
					clrBkLight = clrBkDark = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
				stat_PaintGradientRect(
					dc,
					&rcFill,
					clrBkLight,
					clrBkDark,
					bHorz
					);
			}
			else 
			{
				COLORREF clrBrushBk = 
					(bSelected && !bGroupedMode)
						? clrTabBorderLT
						: GetColor( COLOR_BTNFACE, this )
						;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
				if(		pHelperSrc != NULL
					&&	clrForceTabBk != COLORREF(-1L)
					&&	(	bDetectedDynTPC
						||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
						||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
						)
					)
					clrBrushBk = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
				if(		pHelperSrc != NULL
					&&	clrForceTabBk != COLORREF(-1L)
					&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
					&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
					)
					clrBrushBk = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
				CBrush brushBk( clrBrushBk );
				dc.FillRgn( &rgnBk, &brushBk );
			}
		}
		else if( bSelected && !bGroupedMode )
		{
			COLORREF clrBrushBk = RGB(252,252,254);
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
		if(		pHelperSrc != NULL
			&&	clrForceTabBk != COLORREF(-1L)
			&&	(	bDetectedDynTPC
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
				)
			)
			clrBrushBk = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
			if(		pHelperSrc != NULL
				&&	clrForceTabBk != COLORREF(-1L)
				&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
				&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
				)
				clrBrushBk = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
			CBrush brushBk( clrBrushBk );
			dc.FillRgn( &rgnBk, &brushBk );
		}

		rcItem.DeflateRect(
			__EXTTAB_MARGIN_BORDER_HX+1,
			bHorz ? __EXTTAB_MARGIN_BORDER_VY : __EXTTAB_MARGIN_BORDER_VY+1,
			__EXTTAB_MARGIN_BORDER_HX,
			__EXTTAB_MARGIN_BORDER_VY
			);

	} // else if( m_eStyle2005 == __ES2005_BETA1 ...
	else
	{
		ASSERT( FALSE );
		AfxThrowNotSupportedException();
	}

CSize _sizeIcon( 0, 0 );
	bool bDrawIcon = (		
		  pIcon != NULL 
		  &&	(!pIcon->IsEmpty()) 
		  &&	( pTabs == NULL || (pTabs->GetTabWndStyle()&__ETWS_HIDE_ICONS) == 0  ) 
		  );
	if( bDrawIcon )
	{
		_sizeIcon = pIcon->GetSize();
		ASSERT( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 );
	}

CExtSafeString sItemText( (sText == NULL) ? _T("") : sText );

// IMPORTANT:  the rcText calculation fixed by Genka
CRect rcText(
		rcItem.left
			+	(	bHorz
					? (_sizeIcon.cx +
						((_sizeIcon.cx > 0) ? __EXTTAB_MARGIN_ICON2TEXT_X : 0)
						)
					: 0
				),
		rcItem.top
			+	(	bHorz
					? 0
					: (_sizeIcon.cy +
						((_sizeIcon.cy > 0) ? __EXTTAB_MARGIN_ICON2TEXT_Y : 0)
						)
				),
		rcItem.right,
		rcItem.bottom
		);

bool bDrawText = ( ( ! sItemText.IsEmpty() ) && rcText.Width() > 0 && rcText.Height() > 0 ) ? true : false;

	if( bDrawIcon )
	{
		INT nIconAlignment = __ALIGN_VERT_TOP;
		if( (!bDrawText) && !( bGroupedMode && (!bInGroupActive) ) )
		{
			if( bCenteredText )
				nIconAlignment = __ALIGN_HORIZ_CENTER|__ALIGN_VERT_CENTER;
			else
				nIconAlignment |= __ALIGN_HORIZ_CENTER;
		}

		if(		(bHorz && rcItem.Width() >= _sizeIcon.cx )
			||	(!bHorz && rcItem.Height() >= _sizeIcon.cy)
			)
		{
			PaintIcon(
				dc,
				bHorz,
				pIcon,
				rcItem,
				false,
				bEnabled,
				false,
				nIconAlignment
				);
		}
	} // if( bDrawIcon )

	if( bDrawText )
	{ // if we have sense to paint text on tab item
		ASSERT( pFont != NULL );
		ASSERT( pFont->GetSafeHandle() != NULL );
		COLORREF clrOldText = dc.SetTextColor( clrText );
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CFont * pOldFont = dc.SelectObject( pFont );
		if( pIconTabItemCloseButton != NULL )
		{
			if( bHorz )
				rcText.right = min( rcText.right, rcTabItemCloseButton.left );
			else
				rcText.bottom = min( rcText.bottom, rcTabItemCloseButton.top );
		}
		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( ! bHorz )
			eLO = bInvertedVerticalMode ? CExtRichContentLayout::__ELOT_270_CW : CExtRichContentLayout::__ELOT_90_CW;
		UINT nFormat = DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS;
		if( bCenteredText )
			nFormat |= DT_CENTER;
		else
			nFormat |= DT_LEFT;
		if( bNoPrefix )
			nFormat |= DT_NOPREFIX;
		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, LPCTSTR(sItemText), sItemText.GetLength(), rcText, nFormat, 0
			);
		dc.SelectObject( pOldFont );
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
	} // if we have sense to paint text on tab item

	if( pIconTabItemCloseButton != NULL )
	{
		ASSERT( ! pIconTabItemCloseButton->IsEmpty() );
		if( dc.RectVisible( &rcTabItemCloseButton ) )
			pIconTabItemCloseButton->Paint(
				g_PaintManager.GetPM(),
				dc.m_hDC,
				rcTabItemCloseButton,
				ePaintStateITICB
				);
	} // if( pIconTabItemCloseButton != NULL )
}

void CExtPaintManagerNativeXP::PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bTopLeft,
	bool bHorz,
	bool bSelected,
	bool bCenteredText,
	bool bGroupedMode,
	bool bInGroupActive,
	bool bInvertedVerticalMode,
	const CRect & rcEntireItem,
	CSize sizeTextMeasured,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator, // = COLORREF(-1L)
	bool bDwmMode // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if(		bGroupedMode
		||	(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		)
	{
		CExtPaintManager::PaintTabItem(
			dc,
			rcTabItemsArea,
			bTopLeft,
			bHorz,
			bSelected,
			bCenteredText,
			bGroupedMode,
			bInGroupActive,
			bInvertedVerticalMode,
			rcEntireItem,
			sizeTextMeasured,
			pFont,
			sText,
			pIcon,
			pHelperSrc,
			lParam,
			clrForceText,
			clrForceTabBk,
			clrForceTabBorderLT,
			clrForceTabBorderRB,
			clrForceTabSeparator,
			bDwmMode
			);
		return;
	}

LONG nItemIndex = 1;

CExtCmdIcon * pIconTabItemCloseButton = NULL;
CExtCmdIcon::e_paint_type_t ePaintStateITICB =
		(CExtCmdIcon::e_paint_type_t) CExtCmdIcon::__PAINT_INVISIBLE;
CRect rcTabItemCloseButton( 0, 0, 0, 0 );
CExtBarButton * pTBB = NULL;
CExtTabWnd * pTabs = NULL;
CExtTabWnd::TAB_ITEM_INFO * pTII = NULL;
bool bNoPrefix = false;
	if( pHelperSrc != NULL )
	{
		pTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( pTabs != NULL )
		{
			ASSERT_VALID( pTabs );
			pTII = pTabs->ItemGet( LONG( lParam ) );
			ASSERT( pTII != NULL );
			ASSERT_VALID( pTII );
			nItemIndex = (LONG)lParam;
			pIconTabItemCloseButton =
				pTabs->OnTabWndQueryItemCloseButtonShape( pTII );
			if( pIconTabItemCloseButton != NULL )
			{
				rcTabItemCloseButton = pTII->CloseButtonRectGet();
				ePaintStateITICB = (CExtCmdIcon::e_paint_type_t)
					pTabs->OnTabWndQueryItemCloseButtonPaintState( pTII );
			} // if( pIconTabItemCloseButton != NULL )
			bNoPrefix = ( ( pTabs->GetTabWndStyleEx() & __ETWS_EX_NO_PREFIX ) != 0 ) ? true : false;
		} // if( pTabs != NULL )
		else
		{
			pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
#ifdef _DEBUG
			if( pTBB != NULL )
			{
				ASSERT_VALID( pTBB );
			} // if( pTBB != NULL )
#endif // _DEBUG
		} // else from if( pTabs != NULL )
	} // if( pHelperSrc != NULL )

LONG nSelectionIndex = -1;
	if( pTabs != NULL )
		nSelectionIndex = pTabs->SelectionGet();

bool bInGroupFirst = false;
bool bInGroupLast = false;
	if( bGroupedMode && pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		CExtTabWnd::TAB_ITEM_INFO * pTiiFirst = pTII->GetInGroupFirst();
		CExtTabWnd::TAB_ITEM_INFO * pTiiLast = pTII->GetInGroupLast();
		ASSERT_VALID( pTiiFirst );
		ASSERT_VALID( pTiiLast );
		bInGroupFirst = ( nItemIndex == pTabs->ItemGetIndexOf( pTiiFirst ) );
		bInGroupLast = ( nItemIndex == pTabs->ItemGetIndexOf( pTiiLast ) );
	}

bool bFirstItem = false, bLastItem = false;
	if( pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		bFirstItem =
			(	nItemIndex == 0
			||	(	bInGroupFirst
				&&	nItemIndex != nSelectionIndex
				)
			);
		bLastItem = 
			(	nItemIndex == pTabs->ItemGetCount() - 1
			||	(	bInGroupLast
				&&	nItemIndex != nSelectionIndex
				)
			);
	}

bool bHover = false;
bool bPressed = false;
bool bEnabled = true;
	if( pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		bEnabled = pTII->EnabledGet();
		bHover = ( pTabs->GetHoverTrackingItem() == nItemIndex ) ? true : false;
		bPressed = ( pTabs->GetPushedTrackingItem() == nItemIndex ) ? true : false;
	}
	else if( pTBB != NULL )
	{
		bEnabled = pTBB->IsEnabled();
		bHover = pTBB->IsHover();
		bPressed = pTBB->IsPressed();
	}

CRect rcItem( rcEntireItem );

HWND hWndOpenTheme = pTabs->GetSafeHwnd();
	if( hWndOpenTheme == NULL )
		hWndOpenTheme = ::GetDesktopWindow();
	if( g_PaintManager.m_UxTheme.OpenThemeData( hWndOpenTheme, VSCLASS_TAB ) != NULL )
	{
		INT nPartID = TABP_TABITEM;
		INT nStateID = 
				(!bEnabled)
					? TIS_DISABLED
					: bSelected
						? TIS_SELECTED
						: bPressed
							? TIS_FOCUSED
							: bHover
								? TIS_HOT
								: TIS_NORMAL;
		CExtBitmap _bmp1, _bmp2;
		COLORREF * pClrSurface = NULL;
		CBitmap _bmp;
		CBitmap * pOldBmp = NULL;
		CDC dcX;

bool bDetectedDynTPC = false;
	bDetectedDynTPC;
#if (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)
		if( pTII != NULL )
		{
			CObject * pObject = pTII->EventProviderGet();
			if( pObject != NULL )
			{
				CExtDynamicControlBar * pBar = DYNAMIC_DOWNCAST( CExtDynamicControlBar, pObject );
				if( pBar != NULL )
				{
					bool bFlashCaptionHighlightedState = false;
					if( pBar->FlashCaptionIsInProgress( &bFlashCaptionHighlightedState ) )
					{
						if( bFlashCaptionHighlightedState )
						{
							clrForceText = pBar->m_clrFlashCaptionText;
							clrForceTabBk = pBar->m_clrFlashCaptionBackground;
							bSelected = true;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
							bDetectedDynTPC = true;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
						}
					}
				}
			}
		}
#endif// (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)

COLORREF clrColorizeTabShape = COLORREF(-1L);
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
		if(		pHelperSrc != NULL
			&&	clrForceTabBk != COLORREF(-1L)
			&&	(	bDetectedDynTPC
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
				)
			)
			clrColorizeTabShape = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
		if(		pHelperSrc != NULL
			&&	clrForceTabBk != COLORREF(-1L)
			&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
			&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
			)
			clrColorizeTabShape = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
		if( bHorz )
		{
			if( bTopLeft && clrColorizeTabShape == COLORREF(-1L) )
			{
				rcItem.OffsetRect( 0, 2 );
				if( bSelected )
					rcItem.InflateRect( bFirstItem ? 0 : 2, 2, bLastItem ? 0 : 2, 2 );
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWndOpenTheme,
						dc.GetSafeHdc(), 
						nPartID, 
						nStateID, 
						&rcItem, 
						&rcItem
						) == S_OK
					);
			}
			else
			{
				if( bSelected )
					rcItem.InflateRect( bFirstItem ? 0 : 2, 2, bLastItem ? 0 : 2, 2 );
				VERIFY( _bmp1.FromSurface( dc.m_hDC, rcItem ) );
				if( ! bTopLeft )
				{
					VERIFY(
						_bmp2.CreateRotated9xStack(
							_bmp1,
							180,
							1,
							rcItem.Width(),
							rcItem.Height(),
							false,
							false
							)
						);
				}
				else
					_bmp2 = _bmp1;
				HBITMAP hBmp = _bmp2.CreateBitmap( &pClrSurface );
				ASSERT( hBmp != NULL && pClrSurface != NULL );
				_bmp.Attach( hBmp );
				VERIFY( dcX.CreateCompatibleDC( NULL ) );
				pOldBmp = dcX.SelectObject( &_bmp );
				CRect rcItemX( 0, 0, rcItem.Width(), rcItem.Height() );
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWndOpenTheme,
						dcX.GetSafeHdc(), 
						nPartID, 
						nStateID, 
						&rcItemX, 
						&rcItemX
						) == S_OK
					);
				dcX.SelectObject( pOldBmp );
				_bmp2.Empty();
				VERIFY( _bmp2.FromBitmap( hBmp ) );
				_bmp1.Empty();
				if( ! bTopLeft )
				{
					VERIFY(
						_bmp1.CreateRotated9xStack(
							_bmp2,
							180,
							1,
							rcItem.Width(),
							rcItem.Height(),
							false,
							false
							)
						);
				}
				else
					_bmp1 = _bmp2;
				if( clrColorizeTabShape != COLORREF(-1L) )
				{
					_bmp1.Make32();
					_bmp1.AdjustHLS( COLORREF(-1L), COLORREF(-1L), 0.0, -0.5 );
					_bmp1.MakeMono( clrColorizeTabShape );
					_bmp1.AlphaBlend( dc.m_hDC, rcItem, 64 );
				}
				else
					_bmp1.Draw( dc.m_hDC, rcItem );
			}
		} // if( bHorz )
		else
		{
			if( bTopLeft && clrColorizeTabShape == COLORREF(-1L) )
			{
				rcItem.OffsetRect( 2, 0 );
				if( bSelected )
					rcItem.InflateRect( 2, bFirstItem ? 0 : 2, 2, bLastItem ? 0 : 2 );
				VERIFY( _bmp1.FromSurface( dc.m_hDC, rcItem ) );
				VERIFY(
					_bmp2.CreateRotated9xStack(
						_bmp1,
						90,
						1,
						rcItem.Width(),
						rcItem.Height(),
						false,
						false
						)
					);
				HBITMAP hBmp = _bmp2.CreateBitmap( &pClrSurface );
				ASSERT( hBmp != NULL && pClrSurface != NULL );
				_bmp.Attach( hBmp );
				VERIFY( dcX.CreateCompatibleDC( NULL ) );
				pOldBmp = dcX.SelectObject( &_bmp );
				CRect rcItemX( 0, 0, rcItem.Height(), rcItem.Width() );
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWndOpenTheme,
						dcX.GetSafeHdc(), 
						nPartID, 
						nStateID, 
						&rcItemX, 
						&rcItemX
						) == S_OK
					);
				dcX.SelectObject( pOldBmp );
				_bmp2.Empty();
				VERIFY( _bmp2.FromBitmap( hBmp ) );
				_bmp1.Empty();
				VERIFY(
					_bmp1.CreateRotated9xStack(
						_bmp2,
						270,
						1,
						rcItem.Height(),
						rcItem.Width(),
						false,
						false
						)
					);
				_bmp1.Draw( dc.m_hDC, rcItem );
			}
			else
			{
				if( bSelected )
					rcItem.InflateRect( 2, bFirstItem ? 0 : 2, 2, bLastItem ? 0 : 2 );
				VERIFY( _bmp1.FromSurface( dc.m_hDC, rcItem ) );
				if( ! bTopLeft )
				{
					VERIFY(
						_bmp2.CreateRotated9xStack(
							_bmp1,
							270,
							1,
							rcItem.Width(),
							rcItem.Height(),
							false,
							false
							)
						);
				}
				else
					_bmp2 = _bmp1;
				HBITMAP hBmp = _bmp2.CreateBitmap( &pClrSurface );
				ASSERT( hBmp != NULL && pClrSurface != NULL );
				_bmp.Attach( hBmp );
				VERIFY( dcX.CreateCompatibleDC( NULL ) );
				pOldBmp = dcX.SelectObject( &_bmp );
				CRect rcItemX( 0, 0, rcItem.Height(), rcItem.Width() );
				VERIFY( 
					g_PaintManager.m_UxTheme.DrawBackground(
						hWndOpenTheme,
						dcX.GetSafeHdc(), 
						nPartID, 
						nStateID, 
						&rcItemX, 
						&rcItemX
						) == S_OK
					);
				dcX.SelectObject( pOldBmp );
				_bmp2.Empty();
				VERIFY( _bmp2.FromBitmap( hBmp ) );
				_bmp1.Empty();
				if( ! bTopLeft )
				{
					VERIFY(
						_bmp1.CreateRotated9xStack(
							_bmp2,
							90,
							1,
							rcItem.Height(),
							rcItem.Width(),
							false,
							false
							)
						);
				}
				else
					_bmp1 = _bmp2;
				if( clrColorizeTabShape != COLORREF(-1L) )
				{
					_bmp1.Make32();
					_bmp1.AdjustHLS( COLORREF(-1L), COLORREF(-1L), 0.0, -0.5 );
					_bmp1.MakeMono( clrColorizeTabShape );
					_bmp1.AlphaBlend( dc.m_hDC, rcItem, 64 );
				}
				else
					_bmp1.Draw( dc.m_hDC, rcItem );
			}
		} // else if( bHorz )
		
		if( _bmp.GetSafeHandle() != NULL )
			_bmp.DeleteObject();
		
		if( dcX.GetSafeHdc() != NULL )
			dcX.DeleteDC();

		g_PaintManager.m_UxTheme.CloseThemeData();

	} // if( g_PaintManager.m_UxTheme.OpenThemeData( ...


COLORREF clrText = clrForceText;
	if( clrText == COLORREF(-1L) )
		clrText = 
			::GetSysColor( bEnabled ? COLOR_BTNTEXT : COLOR_GRAYTEXT );

#define __EXTTAB_INDENT_TOP		2
#define __EXTTAB_INDENT_BOTTOM	2
#define __EXTTAB_INDENT_LEFT	2
#define __EXTTAB_INDENT_RIGHT	2

	rcItem.DeflateRect(
		bHorz 
			? __EXTTAB_INDENT_LEFT 
			: __EXTTAB_INDENT_TOP,
		bHorz 
			? __EXTTAB_INDENT_TOP 
			: __EXTTAB_INDENT_LEFT,
		bHorz 
			? __EXTTAB_INDENT_RIGHT 
			: __EXTTAB_INDENT_TOP,
		bHorz 
			? __EXTTAB_INDENT_BOTTOM 
			: __EXTTAB_INDENT_RIGHT
		);
		
CSize _sizeIcon( 0, 0 );
	bool bDrawIcon = (		
		  pIcon != NULL 
		  &&	(!pIcon->IsEmpty()) 
		  &&	( pTabs == NULL || (pTabs->GetTabWndStyle()&__ETWS_HIDE_ICONS) == 0  ) 
		  );
	if( bDrawIcon )
	{
		_sizeIcon = pIcon->GetSize();
		ASSERT( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 );
	}

CRect rcItemForIcon( rcItem );
	if(		bDrawIcon
		&&	_sizeIcon.cx > 0
		&&	_sizeIcon.cy > 0
		)
	{
//		rcItemForIcon.DeflateRect(
//			bHorz ? 0 : ( rcItem.Width() - _sizeIcon.cx),
//			bHorz ? ( rcItem.Height() - _sizeIcon.cy) : 0
//			);
		rcItemForIcon.right = rcItemForIcon.left + _sizeIcon.cx;
		rcItemForIcon.bottom = rcItemForIcon.top + _sizeIcon.cy;
		rcItemForIcon.OffsetRect(
			bHorz ? 0 : ((rcItem.Width() - _sizeIcon.cx) / 2),
			bHorz ? ((rcItem.Height() - _sizeIcon.cy) / 2) : 0
			);
		if( rcItemForIcon.left < (rcItem.left+1) )
			rcItemForIcon.left = (rcItem.left+1);
		if( rcItemForIcon.right < (rcItem.right-1) )
			rcItemForIcon.right = (rcItem.right-1);
		if( rcItemForIcon.top < (rcItem.top+1) )
			rcItemForIcon.top = (rcItem.top+1);
		if( rcItemForIcon.bottom < (rcItem.bottom-1) )
			rcItemForIcon.bottom = (rcItem.bottom-1);
	}

CExtSafeString sItemText( (sText == NULL) ? _T("") : sText );

// IMPORTANT:  the rcText calculation fixed by Genka
CRect rcText(
		rcItem.left // rcItemForIcon.left
			+	(	bHorz
					? (_sizeIcon.cx +
						((_sizeIcon.cx > 0) ? __EXTTAB_MARGIN_ICON2TEXT_X : 0)
						)
					: 0
				),
		rcItem.top // rcItemForIcon.left
			+	(	bHorz
					? 0
					: (_sizeIcon.cy +
						((_sizeIcon.cy > 0) ? __EXTTAB_MARGIN_ICON2TEXT_Y : 0)
						)
				),
		rcItem.right,
		rcItem.bottom
		);
	if( !bHorz )
	{
		if( pIconTabItemCloseButton != NULL )
			rcText.bottom = min( rcText.bottom, rcTabItemCloseButton.top );
	} // if( !bHorz )
	else
	{
		if( pIconTabItemCloseButton != NULL )
			rcText.right = min( rcText.right, rcTabItemCloseButton.left );
	}

bool bDrawText = ( ( ! sItemText.IsEmpty() ) && rcText.Width() > 0 && rcText.Height() > 0 ) ? true : false;

INT nIconAlignment = __ALIGN_HORIZ_LEFT | __ALIGN_VERT_TOP;
	if( (!bDrawText) && !( bGroupedMode && (!bInGroupActive) ) )
	{
		if( bCenteredText )
			nIconAlignment = __ALIGN_HORIZ_CENTER|__ALIGN_VERT_CENTER;
		else
			rcItemForIcon.OffsetRect(
				bHorz ? (rcItem.Width() - _sizeIcon.cx)/2 : 0,
				bHorz ? 0 : (rcItem.Height() - _sizeIcon.cy)/2
				);
	}

	if( bDrawIcon )
	{
		if(		(bHorz && rcItemForIcon.Width() >= _sizeIcon.cx )
			||	(!bHorz && rcItemForIcon.Height() >= _sizeIcon.cy)
			)
		{
			PaintIcon(
				dc,
				true,
				pIcon,
				rcItemForIcon,
				false,
				bEnabled,
				false,
				nIconAlignment
				);
		}
	} // if( bDrawIcon )

	if( bDrawText )
	{ // if we have sense to paint text on tab item
		ASSERT( pFont != NULL );
		ASSERT( pFont->GetSafeHandle() != NULL );
		COLORREF clrOldText = dc.SetTextColor( clrText );
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );		
		CFont * pOldFont = dc.SelectObject( pFont );
		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( ! bHorz )
			eLO = bInvertedVerticalMode ? CExtRichContentLayout::__ELOT_270_CW : CExtRichContentLayout::__ELOT_90_CW;
		UINT nFormat = DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS;
		if( bCenteredText )
			nFormat |= DT_CENTER;
		else
			nFormat |= DT_LEFT;
		if( bNoPrefix )
			nFormat |= DT_NOPREFIX;
		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, LPCTSTR(sItemText), sItemText.GetLength(), rcText, nFormat, 0
			);
		dc.SelectObject( pOldFont );
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
	} // if we have sense to paint text on tab item

	if( pIconTabItemCloseButton != NULL )
	{
		ASSERT( ! pIconTabItemCloseButton->IsEmpty() );
		if( dc.RectVisible( &rcTabItemCloseButton ) )
		{
			CRect _rcTabItemCloseButton = rcTabItemCloseButton;
			if( bHorz )
			{
				if( bTopLeft )
					_rcTabItemCloseButton.OffsetRect( 0, 2 );
			}
			else
			{
				if( bTopLeft )
					_rcTabItemCloseButton.OffsetRect( 2, 0 );
			}
			pIconTabItemCloseButton->Paint(
				g_PaintManager.GetPM(),
				dc.m_hDC,
				_rcTabItemCloseButton,
				ePaintStateITICB
				);
		}
	} // if( pIconTabItemCloseButton != NULL )
}

#endif // #if (!defined __EXT_MFC_NO_TAB_CTRL)

void CExtPaintManagerStudio2005::InitTranslatedColors()
{
	ASSERT_VALID( this );

	CExtPaintManagerOffice2003::InitTranslatedColors();

	if( stat_GetBPP() > 8 )
	{
		e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
		if( OnQueryUseThemeColors() )
		{
			// if use WinXP themed colors
			COLORREF clrFillHint, clrAccentHint;
			OnQueryThemeColors( &clrFillHint, &clrAccentHint );

			// re-install XP colors
			// xp - menu area light ver, menu items background color
			COLORREF xpclr_MenuLight = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.95, -0.05 );
			xpclr_MenuLight = RGB(
				GetRValue(xpclr_MenuLight) + ::MulDiv( 255 - GetRValue(xpclr_MenuLight), 40, 100 ),
				GetGValue(xpclr_MenuLight) + ::MulDiv( 255 - GetGValue(xpclr_MenuLight), 20, 100 ),
				GetBValue(xpclr_MenuLight) );

			// 2003 - float light
			COLORREF xpclr_FloatFace = clrFillHint;

			// xp - rarely used item left side
			COLORREF xpclr_RarelyUsedMenuLeft = RGB(
				( 999L*long(GetRValue(clrFillHint)) ) / 1000L,
				( 995L*long(GetGValue(clrFillHint)) ) / 1000L,
				( 995L*long(GetBValue(clrFillHint)) ) / 1000L );

			// xp - control bar background
			COLORREF xpclr_ControlBarBk = clrFillHint;
			
			// xp - blue like light ver
			COLORREF xpclr_Highlight = CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.00, 0.70, 0.00 );
			// xp - blue like dark ver
			COLORREF xpclr_HighlightDarked = CExtBitmap::stat_HLS_Adjust( clrAccentHint, 0.00, 0.50, 0.00 );
			// xp - blue dark selected border
			COLORREF xpclr_HighlightBorder = clrAccentHint;
		
			// xp - dark gray separator
			COLORREF xpclr_Separator = RGB(
					( 857L*long(GetRValue(clrFillHint)) ) / 1000L,
					( 857L*long(GetGValue(clrFillHint)) ) / 1000L,
					( 857L*long(GetBValue(clrFillHint)) ) / 1000L );
		
			// xp - dark panel border (for floating controlbars)
			COLORREF xpclr_PanelBorder = xpclr_MenuLight;

			if(	eCurrentTheme != ThemeLunaSilver )
			{
				m_mapColorTranslate[CLR_3DFACE_OUT]				= InstallColor( xpclr_ControlBarBk );
				m_mapColorTranslate[CLR_3DFACE_IN]				= InstallColor( xpclr_Highlight );
				m_mapColorTranslate[CLR_3DFACE_DISABLED]		= COLOR_3DFACE;

				int idxClrDark = InstallColor( xpclr_PanelBorder );

				m_mapColorTranslate[CLR_3DLIGHT_OUT]			= idxClrDark;
				m_mapColorTranslate[CLR_3DLIGHT_IN]				= idxClrDark;
				m_mapColorTranslate[CLR_3DLIGHT_DISABLED]		= idxClrDark;

				m_mapColorTranslate[CLR_3DHILIGHT_OUT]			= idxClrDark;
				m_mapColorTranslate[CLR_3DHILIGHT_IN]			= idxClrDark;
				m_mapColorTranslate[CLR_3DHILIGHT_DISABLED]		= idxClrDark;
// - 2.55
// 				m_mapColorTranslate[CLR_3DSHADOW_OUT]			= idxClrDark;
// 				m_mapColorTranslate[CLR_3DSHADOW_IN]			= idxClrDark;
// 				m_mapColorTranslate[CLR_3DSHADOW_DISABLED]		= idxClrDark;

				m_mapColorTranslate[CLR_3DDKSHADOW_OUT]			= idxClrDark;
				m_mapColorTranslate[CLR_3DDKSHADOW_IN]			= idxClrDark;
				m_mapColorTranslate[CLR_3DDKSHADOW_DISABLED]	= idxClrDark;
				
				m_mapColorTranslate[CLR_TEXT_OUT]				= COLOR_WINDOWTEXT;
				m_mapColorTranslate[CLR_TEXT_IN]				= COLOR_WINDOWTEXT;
				m_mapColorTranslate[CLR_TEXT_DISABLED]			= COLOR_GRAYTEXT;
			
				m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL]	  = COLOR_3DFACE;
				m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( xpclr_Separator );

				m_mapColorTranslate[XPCLR_PUSHEDHOVERTEXT]          = COLOR_BTNTEXT;

				m_mapColorTranslate[XPCLR_3DFACE_DARK]              = InstallColor( xpclr_ControlBarBk );
				m_mapColorTranslate[XPCLR_3DFACE_NORMAL]            = InstallColor( xpclr_MenuLight );
				m_mapColorTranslate[XPCLR_SEPARATOR]                = InstallColor( xpclr_Separator ); 
				m_mapColorTranslate[XPCLR_HILIGHT]                  = InstallColor( xpclr_HighlightDarked ); 
				m_mapColorTranslate[XPCLR_HILIGHT_BORDER]           = InstallColor( xpclr_HighlightBorder ); 
				m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]  = InstallColor( xpclr_HighlightBorder ); 
				m_mapColorTranslate[XPCLR_RARELY_BORDER]            = InstallColor( xpclr_RarelyUsedMenuLeft );
				m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F]           = InstallColor( xpclr_FloatFace );
				
				// install new colors
				m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT]        = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.80, 0.00 ) );
				m_mapColorTranslate[_2003CLR_GRADIENT_DARK]	        = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.15, 0.00 ) );
				m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT]       = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.98, 0.00 ) );
				m_mapColorTranslate[_2003CLR_SEPARATOR_DARK]        = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.40, 0.00 ) );
				m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK]      = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.20, 0.00 ) );
				m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT]     = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.95, 0.00 ) );
				m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT]          = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.60, 0.00 ) );
				m_mapColorTranslate[_2003CLR_EXPBTN_DARK]           = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.40, -0.40 ) );
				m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_LIGHT]    = InstallColor( xpclr_Highlight );
				m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_DARK]     = InstallColor( xpclr_Highlight );
				m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_LIGHT]  = InstallColor( xpclr_HighlightDarked );
				m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_DARK]   = InstallColor( xpclr_HighlightDarked );
				m_mapColorTranslate[_2003CLR_EXPGLYPH_LIGHT]        = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.97, 0.00 ) );
				m_mapColorTranslate[_2003CLR_EXPGLYPH_DARK]         = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.97, 0.00 ) );
				m_mapColorTranslate[_2003CLR_STATUSBAR_ITEM] = COLOR_3DSHADOW;

				COLORREF clrTbGradientLight  = (COLORREF)(-1L);
				COLORREF clrTbGradientMiddle = (COLORREF)(-1L);
				COLORREF clrTbGradientDark   = (COLORREF)(-1L);
				COLORREF clrTbBottomLine     = (COLORREF)(-1L);
				COLORREF clrMlaNormLeft      = (COLORREF)(-1L);
				COLORREF clrMlaNormMiddle    = (COLORREF)(-1L);
				COLORREF clrMlaNormRight     = (COLORREF)(-1L);
				COLORREF clrMlaRarelyLeft    = (COLORREF)(-1L);
				COLORREF clrMlaRarelyMiddle  = (COLORREF)(-1L);
				COLORREF clrMlaRarelyRight   = (COLORREF)(-1L);
				COLORREF clrMenuBorder       = (COLORREF)(-1L);
				COLORREF clrTbbBkTop         = (COLORREF)(-1L);
				COLORREF clrTbbBkBottom      = (COLORREF)(-1L);

				switch( eCurrentTheme ) 
				{
				case ThemeLunaRoyale:       // +2.87
			//	case ThemeVistaOrLaterUX:   // +2.87 -2.88
			//	case ThemeVistaOrLaterDWM:  // +2.87 -2.88
				case ThemeLunaBlue:
				case ThemeLunaOlive:
					clrTbGradientLight  = RGB(250, 249, 245);
					clrTbGradientMiddle = RGB(235, 231, 224);
					clrTbGradientDark   = RGB(180, 182, 153);
					clrTbBottomLine     = RGB(163, 163, 124);
					clrMlaNormLeft      = RGB(252, 252, 249);
					clrMlaNormMiddle    = RGB(246, 244, 236);
					clrMlaNormRight     = RGB(186, 186, 160);
					clrMlaRarelyLeft    = RGB(245, 245, 241);
					clrMlaRarelyMiddle  = RGB(222, 222, 209);
					clrMlaRarelyRight   = RGB(165, 165, 127);
					clrMenuBorder       = RGB(138, 134, 122);
					clrTbbBkTop         = RGB(251, 251, 249);
					clrTbbBkBottom      = RGB(247, 245, 239);
				break;
				case ThemeLunaSilver:
					ASSERT( FALSE );
				break;
				case ThemeVistaOrLaterUX:   // +2.88
				case ThemeVistaOrLaterDWM:  // +2.88
					m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT]   = InstallColor( RGB(236, 236, 236) );
					m_mapColorTranslate[_2003CLR_EXPBTN_DARK]    = InstallColor( RGB(160, 160, 160) );
					m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = InstallColor( RGB(251, 251, 251) );
					m_mapColorTranslate[_2003CLR_GRADIENT_DARK]	 = InstallColor( RGB(240, 240, 240) );
					clrTbGradientLight  = RGB(251, 251, 251);
					clrTbGradientMiddle = RGB(244, 244, 244);
					clrTbGradientDark   = RGB(242, 242, 242);
					clrTbBottomLine     = RGB(242, 242, 242);
					clrMlaNormLeft      = RGB(252, 252, 252);
					clrMlaNormRight     = RGB(241, 241, 241);
					clrMlaNormMiddle    = RGB(248, 248, 248);
					clrMlaRarelyLeft    = CExtBitmap::stat_HLS_Adjust( clrMlaNormLeft,   0.00, -0.10, 0.00 );
					clrMlaRarelyRight   = CExtBitmap::stat_HLS_Adjust( clrMlaNormRight,  0.00, -0.10, 0.00 );
					clrMlaRarelyMiddle  = CExtBitmap::stat_HLS_Adjust( clrMlaNormMiddle, 0.00, -0.10, 0.00 );
					clrMenuBorder       = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.50, 0.00 );
					clrTbbBkTop         = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.98, 0.00 );
					clrTbbBkBottom      = CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, -0.20, -0.10 );
				break;
				default:
					clrTbGradientLight  = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.75, 0.15 );
					clrTbGradientMiddle = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.65, 0.15 );
					clrTbGradientDark   = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00,-0.22,-0.25 );
					clrTbBottomLine     = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.60, 0.00 );
					clrMlaNormLeft      = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.98, 0.00 );
					clrMlaNormRight     = CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, -0.20, -0.10 );
					clrMlaNormMiddle    = CExtBitmap::stat_HLS_Adjust( clrMlaNormRight, 0.00, 0.55, 0.00 );
					clrMlaRarelyLeft    = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.98, 0.00 );
					clrMlaRarelyRight   = CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, -0.40, -0.10 );
					clrMlaRarelyMiddle  = CExtBitmap::stat_HLS_Adjust( clrMlaRarelyRight, 0.00, 0.55, 0.00 );
					clrMenuBorder       = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.50, 0.00 );
					clrTbbBkTop         = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.98, 0.00 );
					clrTbbBkBottom      = CExtBitmap::stat_HLS_Adjust( GetColor( XPCLR_3DFACE_DARK, this ), 0.00, -0.20, -0.10 );
				break;
				} // switch( eCurrentTheme ) 

				m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP]      = InstallColor( clrTbbBkTop );
				m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM]   = InstallColor( clrTbbBkBottom );

				m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT]   = InstallColor( clrTbGradientLight );
				m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE]  = InstallColor( clrTbGradientMiddle );
				m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK]    = InstallColor( clrTbGradientDark );
				m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE]      = InstallColor( clrTbBottomLine );

				m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT]            = InstallColor( clrMlaNormLeft );
				m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE]          = InstallColor( clrMlaNormMiddle );
				m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT]           = InstallColor( clrMlaNormRight );
				
				m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT]          = InstallColor( clrMlaRarelyLeft );
				m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE]        = InstallColor( clrMlaRarelyMiddle );
				m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT]         = InstallColor( clrMlaRarelyRight );

				m_mapColorTranslate[XPCLR_MENU_BORDER]                 = InstallColor( clrMenuBorder );

				m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT]           =  InstallColor( xpclr_Highlight );
				m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT]          = InstallColor( xpclr_Highlight );

				m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT]         = InstallColor( xpclr_HighlightDarked );
				m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT]        = InstallColor( xpclr_HighlightDarked );
				
				m_mapColorTranslate[_2003CLR_BTN_HP_LEFT]              = InstallColor( xpclr_HighlightDarked );
				m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT]             = InstallColor( xpclr_HighlightDarked );

				// page navigator colors
				m_mapColorTranslate[_2003CLR_PN_BORDER]                = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.10, -0.55, 0.00 ) );
				m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT]         = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.02, -0.23, -0.25 ) );
				m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK]          = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.05, -0.60, 0.00 ) );
				m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]    = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.45, 0.00 ) );
				m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]     = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.00, 0.00 ) );
				m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT];
				m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]  = m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK];
				m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = m_mapColorTranslate[_2003CLR_PN_BORDER];
				m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT]            = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.55, 0.20 ) );
				m_mapColorTranslate[_2003CLR_PN_ITEM_DARK]             = InstallColor( CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.13, -0.15 ) );
			
				// Popup menu Expand Button
				m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT]      = InstallColor( GetColor( _2003CLR_MLA_NORM_LEFT, this ) );
				m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK]       = InstallColor( GetColor( _2003CLR_MLA_NORM_RIGHT, this ) );
				
				m_nIdxClrBtnHoverLeft    = _2003CLR_BTN_HOVER_LEFT;
				m_nIdxClrBtnHoverRight   = _2003CLR_BTN_HOVER_RIGHT;
				m_nIdxClrBtnPressedLeft  = _2003CLR_BTN_PRESSED_LEFT;
				m_nIdxClrBtnPressedRight = _2003CLR_BTN_PRESSED_RIGHT;
				m_nIdxClrBtnHovPresLeft  = _2003CLR_BTN_HP_LEFT;
				m_nIdxClrBtnHovPresRight = _2003CLR_BTN_HP_RIGHT;
				m_nIdxClrTbFillMargin    = _2003CLR_EXPBTN_DARK;

				m_colors[COLOR_3DFACE]      = clrFillHint;
				m_colors[COLOR_3DLIGHT]     = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.10, 0.00 );
				m_colors[COLOR_3DHIGHLIGHT] = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.95, 0.00 );
				m_colors[COLOR_3DSHADOW]    = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.30, -0.50 );
				m_colors[COLOR_3DDKSHADOW]  = CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, -0.70, -0.50 );
		
			} // if( eCurrentTheme != ThemeLunaSilver ....
	
			COLORREF clrBarCaptionInactive     = (COLORREF)(-1L);
			COLORREF clrBarCaptionActiveTop    = (COLORREF)(-1L);
			COLORREF clrBarCaptionActiveBottom = (COLORREF)(-1L);
			switch( eCurrentTheme ) 
			{
			case ThemeLunaRoyale:       // +2.87
		//	case ThemeVistaOrLaterUX:   // +2.87 -2.88
		//	case ThemeVistaOrLaterDWM:  // +2.87 -2.88
			case ThemeLunaBlue:
				clrBarCaptionInactive		= RGB( 204, 199, 186 );
				clrBarCaptionActiveTop		= RGB(  59, 128, 237 );
				clrBarCaptionActiveBottom	= RGB(  49, 106, 197 );
			break;
			case ThemeLunaOlive:
				clrBarCaptionInactive		= RGB( 204, 199, 186 );
				clrBarCaptionActiveTop		= RGB( 182, 195, 146 );
				clrBarCaptionActiveBottom	= RGB( 145, 160, 117 );
			break;
			case ThemeLunaSilver:
				clrBarCaptionInactive		= RGB( 240, 240, 245 );
				clrBarCaptionActiveTop		= RGB( 211, 212, 221 );
				clrBarCaptionActiveBottom	= RGB( 166, 165, 191 );
			break;
			case ThemeVistaOrLaterUX:   // +2.88
			case ThemeVistaOrLaterDWM:  // +2.88
			default:
				clrBarCaptionInactive		= CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.80, 0.00 );
				clrBarCaptionActiveTop		= CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00, 0.40, 0.00 );
				clrBarCaptionActiveBottom	= CExtBitmap::stat_HLS_Adjust( clrFillHint, 0.00,-0.15, 0.00 );
			break;
			} // switch( eCurrentTheme ) 
			m_mapColorTranslate[_STUDIO_2005CLR_BAR_CAPTION_INACTIVE]      = InstallColor( clrBarCaptionInactive );
			m_mapColorTranslate[_STUDIO_2005CLR_BAR_CAPTION_ACTIVE_TOP]    = InstallColor( clrBarCaptionActiveTop );
			m_mapColorTranslate[_STUDIO_2005CLR_BAR_CAPTION_ACTIVE_BOTTOM] = InstallColor( clrBarCaptionActiveBottom );

		} // if use WinXP themed colors
		else
		{
			m_mapColorTranslate[_STUDIO_2005CLR_BAR_CAPTION_INACTIVE]      = COLOR_INACTIVECAPTION;
			m_mapColorTranslate[_STUDIO_2005CLR_BAR_CAPTION_ACTIVE_TOP]    = COLOR_ACTIVECAPTION;
			m_mapColorTranslate[_STUDIO_2005CLR_BAR_CAPTION_ACTIVE_BOTTOM] = COLOR_ACTIVECAPTION;
		}

		// Task Pane Colors
		m_mapColorTranslate[ CLR_TASK_PANE_BK_TOP ]    = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ), GetColor( COLOR_WINDOW, this ), 50 ) );			
		m_mapColorTranslate[ CLR_TASK_PANE_BK_BOTTOM ] = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DSHADOW, this ), GetColor( COLOR_WINDOW, this ), 60 ) );			
		m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL ]         = InstallColor( GetColor( COLOR_WINDOWTEXT, this ) );
		m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED ] = InstallColor(  GetColor( COLOR_WINDOWTEXT, this ) );
		m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED ]    = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL ];
		m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED_HOVERED ] = m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED ];
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_NORMAL]	       = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DFACE, this ), GetColor( COLOR_WINDOW, this ), 39 ) );
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_NORMAL]       = InstallColor( CExtBitmap::stat_RGB_Enlight( GetColor( COLOR_3DSHADOW, this ), GetColor( COLOR_WINDOW, this ), 60 ) );
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_HIGHLIGHTED]   = m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_NORMAL];
		m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_HIGHLIGHTED]  =  m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_NORMAL];
	} // if( stat_GetBPP() > 8 )
}

int CExtPaintManager::GetThemeDockingType() const
{
	ASSERT_VALID( this );
	return int(CExtControlBar::__RESIZABLE_DOCKING_TYPE_STUDIO_2003);
}

int CExtPaintManagerStudio2005::GetThemeDockingType() const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::GetThemeDockingType();

#if (!defined __EXT_MFC_NO_DOCK_MARKERS)
	return int(CExtControlBar::__RESIZABLE_DOCKING_TYPE_STUDIO_2005);
#else
	return CExtPaintManagerOffice2003::GetThemeDockingType();
#endif // (!defined __EXT_MFC_NO_DOCK_MARKERS)
}

int CExtPaintManagerOffice2007_Impl::GetThemeDockingType() const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::GetThemeDockingType();

#if (!defined __EXT_MFC_NO_DOCK_MARKERS)
	return int(CExtControlBar::__RESIZABLE_DOCKING_TYPE_STUDIO_2005);
#else
	return CExtPaintManagerOffice2003::GetThemeDockingType();
#endif // (!defined __EXT_MFC_NO_DOCK_MARKERS)
}

#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)

int CExtPaintManager::GetAutoHideTabsType() const
{
	ASSERT_VALID( this );
	return int(CExtControlBar::__AUTOHIDE_TABS_TYPE_STUDIO_2003);
}

int CExtPaintManagerStudio2005::GetAutoHideTabsType() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetAutoHideTabsType();
	return int(CExtControlBar::__AUTOHIDE_TABS_TYPE_STUDIO_2005);
}

int CExtPaintManagerOffice2007_Impl::GetAutoHideTabsType() const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::GetAutoHideTabsType();

	return int(CExtControlBar::__AUTOHIDE_TABS_TYPE_STUDIO_2005);
}

#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)

bool CExtPaintManagerStudio2005::OnQueryThemeColors(
	COLORREF *pclrFillHint,
	COLORREF *pclrAccentHint // = NULL
	)
{
	ASSERT_VALID( this );
bool bRet = CExtPaintManagerOffice2003::OnQueryThemeColors( pclrFillHint, pclrAccentHint );
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
	if(		OnQueryUseThemeColors()
		&&	(	eCurrentTheme == ThemeLunaRoyale       // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterUX   // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterDWM  // +2.87
			||	eCurrentTheme == ThemeLunaBlue
			||	eCurrentTheme == ThemeLunaOlive
			)
		)
	{
		if( pclrFillHint == NULL && pclrAccentHint == NULL )
			return true;
		if( pclrFillHint != NULL )
			*pclrFillHint = RGB(225, 225, 210);
		if( pclrAccentHint != NULL )
		{
			switch( eCurrentTheme )
			{
			case ThemeLunaOlive:    (*pclrAccentHint) = RGB(147, 160, 112);   break;
			default:                (*pclrAccentHint) = RGB( 49, 106, 197);   break;
			} // switch( eCurrentTheme )
		} // if( pclrAccentHint != NULL )
		return true;
	}
	return bRet;
}
	
bool CExtPaintManagerXP::OnQueryUseThemeColors() const
{
	ASSERT_VALID( this );
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
bool bUseThemedColors = ( g_PaintManager.m_UxTheme.IsAppThemed() &&	eCurrentTheme != ThemeUnknown );
	return bUseThemedColors;
}

bool CExtPaintManager::OnQueryUseThemeColors() const
{
	ASSERT_VALID( this );
	return false;
}

CExtPaintManager::e_system_theme_t CExtPaintManager::OnQuerySystemTheme() const
{
	if( g_PaintManager.m_eCurrentTheme == ThemeUnknown )
	{
		if( g_PaintManager.m_bIsWinVistaOrLater )
		{
			if( g_PaintManager.m_DWM.IsCompositionEnabled() )
				return ThemeVistaOrLaterDWM;
			if( g_PaintManager.m_UxTheme.IsAppThemed() )
				return ThemeVistaOrLaterUX;
		}
	}
	return g_PaintManager.m_eCurrentTheme;
}

bool CExtPaintManager::IsHighContrast() const
{
COLORREF clr3DFace = ::GetSysColor( COLOR_3DFACE );

	if(		clr3DFace == RGB(255,255,255) 
		||	clr3DFace == RGB(0,0,0)
		)
		return true;
	return false;
}

void CExtPaintManager::PaintBarButtonCombinedArea(
	CDC & dc,
	CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pTBB );
	ASSERT_VALID( pTBB->GetBar() );
	dc;
	pTBB;
	lParam;
}

void CExtPaintManagerOffice2003::PaintBarButtonCombinedArea(
	CDC & dc,
	CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pTBB );
	ASSERT_VALID( pTBB->GetBar() );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintBarButtonCombinedArea( dc, pTBB, lParam );
		return;
	}
	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8 )
	{
		CExtPaintManagerXP::PaintBarButtonCombinedArea( dc, pTBB, lParam );
		return;
	}
CExtToolControlBar * pBar = pTBB->GetBar();
	ASSERT_VALID( pBar );
bool bHorz = pBar->IsDockedVertically() ? false : true;
bool bMenuBar = pBar->IsKindOf( RUNTIME_CLASS( CExtMenuControlBar ) ) ? true : false;
CRect rcTBB = pTBB->Rect();
CRect rcPaintGradient = rcTBB;
	rcPaintGradient.DeflateRect( 1, 1 );
INT nGradientHeight = 21;
	if( bHorz )
		nGradientHeight = max( nGradientHeight, rcTBB.Height() );
	else
		nGradientHeight = max( nGradientHeight, rcTBB.Width() );
	rcPaintGradient.bottom = rcPaintGradient.top + nGradientHeight;
COLORREF clrTbbBkTop = GetColor( _2003CLR_TBB_BK_COMBINED_TOP, pTBB, lParam );
COLORREF clrTbbBkBottom = GetColor( _2003CLR_TBB_BK_COMBINED_BOTTOM, pTBB, lParam );
	if( bHorz )
	{
		if( bMenuBar )
		{
			CRect rcBk( rcTBB );
			rcBk.DeflateRect( 1, 1, 1, 0 );
			dc.FillSolidRect( &rcBk, GetColor( XPCLR_3DFACE_NORMAL, pTBB, lParam ) );
			CRect rcExclude( rcPaintGradient );	
			rcExclude.top = rcTBB.bottom - 1;
			dc.ExcludeClipRect( &rcExclude );
			stat_PaintGradientRect( dc, rcPaintGradient, clrTbbBkBottom, clrTbbBkTop, true );	
			dc.SelectClipRgn( NULL );
		}
		else
		{
			CRect rc = rcTBB;
			rc.DeflateRect( 1, 1 );
			stat_PaintGradientRect( dc, rc, clrTbbBkBottom, clrTbbBkTop, true );	
		}
	}
	else
	{
		stat_PaintGradientRect( dc, rcPaintGradient, clrTbbBkBottom, clrTbbBkTop, true );	
		if( rcTBB.bottom > rcPaintGradient.bottom )
		{
			CRect rcRest( rcPaintGradient.left, rcPaintGradient.bottom, rcPaintGradient.right, rcTBB.bottom );
			dc.FillSolidRect( &rcRest, clrTbbBkBottom );
		}	
	}
	if(		(! bHorz )
		&&	(! pTBB->IsKindOf( RUNTIME_CLASS(CExtBarColorButton) ) )
		&&	(! pTBB->GetSeparatedDropDown() )
		)
	{
		COLORREF clrDkBorder = GetColor( XPCLR_MENU_BORDER, pTBB, lParam );
		dc.Draw3dRect( pTBB->Rect(), clrDkBorder, clrDkBorder );
	}
}

void CExtPaintManagerStudio2005::PaintGripper(
	CDC & dc,
	CExtPaintManager::PAINTGRIPPERDATA & _pgd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintGripper( dc, _pgd );
		return;
	}
	switch( m_eStyle2005 )
	{
	case __ES2005_BETA1:
		if( _pgd.m_bSideBar )
			CExtPaintManager::PaintGripper( dc, _pgd );
		else
			CExtPaintManagerOffice2003::PaintGripper( dc, _pgd );
	break;
	case __ES2005_BETA2:
	case __ES2005_RC:
		if( _pgd.m_bSideBar )
		{
			CWnd * pBar = STATIC_DOWNCAST( CWnd, _pgd.m_pHelperSrc );
			ASSERT( pBar != NULL );
			ASSERT_VALID( pBar );
			CRect rcBarWnd, rcBarClient;
			pBar->GetWindowRect( &rcBarWnd );
			pBar->GetClientRect( &rcBarClient );
			pBar->ClientToScreen( &rcBarClient );
			CRect rcHelper( rcBarClient );
			rcHelper.OffsetRect( -rcBarWnd.TopLeft() );
			CRect rcGripper( _pgd.m_rcGripper );
			if( _pgd.m_bFlashCaptionHighlightedState )
			{
				ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
				ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
				dc.FillSolidRect( rcGripper, _pgd.m_clrFlashCaptionBackground );
			} // if( _pgd.m_bFlashCaptionHighlightedState )
			else
			{
				if( stat_GetBPP() > 8 )
				{
					if( _pgd.m_bActive )
						stat_PaintGradientRect(
							dc,
							rcGripper,
							GetColor( _STUDIO_2005CLR_BAR_CAPTION_ACTIVE_BOTTOM ),
							GetColor( _STUDIO_2005CLR_BAR_CAPTION_ACTIVE_TOP ),
							!_pgd.m_bHorz
							);
					else
						dc.FillSolidRect( &rcGripper, GetColor( _STUDIO_2005CLR_BAR_CAPTION_INACTIVE ) );
				}
				else
					dc.FillSolidRect( &rcGripper, GetColor( _pgd.m_bActive ? COLOR_ACTIVECAPTION : COLOR_INACTIVECAPTION ) );
			} // else from if( _pgd.m_bFlashCaptionHighlightedState )
			_pgd.m_bHelperNoFill = _pgd.m_bHelperNoRect = true;
			if( OnQueryUseThemeColors() )
				CExtPaintManagerXP::PaintGripper( dc, _pgd );
			else
				CExtPaintManager::PaintGripper( dc, _pgd );
		}
		else
			CExtPaintManagerOffice2003::PaintGripper( dc, _pgd );
	break;
	default:
		{
			ASSERT( FALSE );
			AfxThrowNotSupportedException();
		}
	break;
	} // switch( m_eStyle2005 )
}

void CExtPaintManagerStudio2005::PaintDockingFrame(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGFRAMEDATA & _pdfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDockingFrame( dc, _pdfd );
		return;
	}
	if(	(		_pdfd.m_pHelperSrc != NULL 
			&& (	_pdfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtToolControlBar))
				||	_pdfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar))
				)
		)
		||	_pdfd.m_bExtBar == false
		||	_pdfd.m_bFloating == false
		||	_pdfd.m_rcWindow.IsRectEmpty()
		)
	{
		CExtPaintManagerOffice2003::PaintDockingFrame( dc, _pdfd );
		return;
	}
	dc.ExcludeClipRect( _pdfd.m_rcClient );
CRect rcWnd( _pdfd.m_rcWindow );
COLORREF clr3dFace = GetColor( CLR_3DFACE_OUT, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clr3dHilight = GetColor( COLOR_WINDOW, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clr3dShadow = GetColor( COLOR_3DSHADOW, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clr3dDkShadow = GetColor( COLOR_3DDKSHADOW, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
	dc.FillSolidRect( &rcWnd, clr3dFace );
	if( _pdfd.m_bFloating )
	{
		dc.Draw3dRect( &rcWnd, clr3dFace, clr3dDkShadow);
		rcWnd.DeflateRect( 1, 1 );
		dc.Draw3dRect( &rcWnd, clr3dHilight, clr3dShadow);
	}
	else
	{
		if( ! _pdfd.m_bExtBar )
			dc.Draw3dRect( &rcWnd, clr3dHilight, clr3dShadow);
	}
	dc.IntersectClipRect( _pdfd.m_rcWindow );
}

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

INT CExtPaintManager::PageNavigator_GetSplitterHeight() const
{
	ASSERT_VALID( this );
	return UiScalingDo( 6, __EUIST_Y );
}

INT CExtPaintManagerOffice2007_Impl::PageNavigator_GetSplitterHeight() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PageNavigator_GetSplitterHeight();
	return UiScalingDo( 8, __EUIST_Y );
}

INT CExtPaintManager::PageNavigator_GetItemCaptionHeight() const
{
	ASSERT_VALID( this );
	return UiScalingDo( 24, __EUIST_Y );
}

INT CExtPaintManagerOffice2007_Impl::PageNavigator_GetItemCaptionHeight() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PageNavigator_GetItemCaptionHeight();
	return UiScalingDo( 27, __EUIST_Y );
}

INT CExtPaintManager::PageNavigator_GetItemPaneCaptionHeight() const
{
	ASSERT_VALID( this );
	return UiScalingDo( 19, __EUIST_Y );
}

INT CExtPaintManagerOffice2007_Impl::PageNavigator_GetItemPaneCaptionHeight() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PageNavigator_GetItemPaneCaptionHeight();
	return UiScalingDo( 20, __EUIST_Y );
}

void CExtPaintManager::PaintPageNavigatorClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcClient) )
		return;
	dc.FillSolidRect( &rcClient, GetColor( COLOR_WINDOW, pHelperSrc ) );
}

void CExtPaintManager::PaintPageNavigatorBorder(
	CDC & dc,
	const RECT & rcControl
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcControl) )
		return;
	dc.Draw3dRect( &rcControl, GetColor( COLOR_3DSHADOW, this ), GetColor( COLOR_WINDOW, this ) );
}

void CExtPaintManagerXP::PaintPageNavigatorBorder(
	CDC & dc,
	const RECT & rcControl
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcControl) )
		return;
	CBrush brBorder( GetColor( COLOR_3DSHADOW, this ) );
	dc.FrameRect( &rcControl, &brBorder );
}

void CExtPaintManagerOffice2003::PaintPageNavigatorBorder(
	CDC & dc,
	const RECT & rcControl
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcControl) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorBorder( dc, rcControl );
		return;
	}
CBrush brBorder( GetColor( _2003CLR_PN_BORDER, this ) );
	dc.FrameRect( &rcControl, &brBorder );
}

void CExtPaintManager::PaintPageNavigatorItemCaptionText(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( strCaption == NULL )
		return;
	// caption text
	LOGFONT lf = { sizeof(LOGFONT) };
	VERIFY( ::SystemParametersInfo( SPI_GETICONTITLELOGFONT, sizeof(LOGFONT), &lf, 0 ) );
	__EXT_MFC_STRCPY( lf.lfFaceName, LF_FACESIZE, _T("Arial") );
	lf.lfWeight = FW_BOLD;
	lf.lfHeight = 20;
CFont font;
	font.CreateFontIndirect(&lf);
	CFont * pOldFont = dc.SelectObject( &font );
	COLORREF clrOldText = dc.SetTextColor( GetColor( CLR_PN_CAPTION_TEXT, this ) );
int nOldBkMode = dc.SetBkMode( TRANSPARENT );
	// text metrics
	CExtSafeString sText( strCaption );
	UINT nFormat = DT_LEFT | DT_TOP | DT_END_ELLIPSIS;
	if( sText.Find( _T('\t') ) != -1 ) // do tabs expanding
		nFormat |= DT_EXPANDTABS;
CRect rcMeasureText( rcCaption );
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(sText), sText.GetLength(), rcMeasureText, nFormat|DT_CALCRECT, 0 );
	// align text vertically
INT nLeftMargin = 4;
	CRect rcDrawText(
		rcCaption.left + nLeftMargin,
		rcCaption.top + ( ( rcCaption.Height() - rcMeasureText.Height() ) / 2 ),
		rcCaption.left + nLeftMargin + rcMeasureText.Width(),
		rcCaption.top + ( ( rcCaption.Height() + rcMeasureText.Height() ) / 2 )
		);
	rcDrawText.IntersectRect( rcCaption, rcDrawText );
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(strCaption), int(_tcslen(strCaption)), &rcDrawText, nFormat, 0 );
	dc.SetBkMode( nOldBkMode );
	dc.SetTextColor( clrOldText );
	dc.SelectObject( pOldFont );
}

void CExtPaintManager::PaintPageNavigatorItemCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	dc.FillSolidRect( &rcCaption, GetColor( COLOR_3DSHADOW, this ) );
	PaintPageNavigatorItemCaptionText( dc, rcCaption, strCaption );
}

void CExtPaintManager::PaintPageNavigatorCaptionTextImpl(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
int nOldBkMode = dc.SetBkMode( TRANSPARENT );
	// text metrics
CExtSafeString sText( strCaption );
UINT nFormat = DT_LEFT|DT_TOP|DT_WORDBREAK;
	if( sText.Find( _T('\t') ) != -1 ) // do tabs expanding
		nFormat |= DT_EXPANDTABS;
CRect rcMeasureText( rcItem );
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(sText),  sText.GetLength(), rcMeasureText, nFormat|DT_CALCRECT, 0 );
	// align text vertically
CRect rcDrawText(
		rcItem.left,
		rcItem.top + ( ( rcItem.Height() - rcMeasureText.Height() ) / 2 ),
		rcItem.left + rcMeasureText.Width(),
		rcItem.top + ( ( rcItem.Height() + rcMeasureText.Height() ) / 2 )
		);
	rcDrawText.IntersectRect( rcItem, rcDrawText );
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, strCaption, int(_tcslen(strCaption)), &rcDrawText, nFormat|DT_END_ELLIPSIS, 0 );
	dc.SetBkMode( nOldBkMode );
}

void CExtPaintManager::PaintPageNavigatorCaptionText(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	bool bSelected,
	bool bPushed,
	bool bHover,
	bool bAllowInvertTextColor, // = true
	COLORREF clrForceText // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
LOGFONT lf = { sizeof(LOGFONT) };
	VERIFY( ::SystemParametersInfo( SPI_GETICONTITLELOGFONT, sizeof(LOGFONT), &lf, 0 ) );
	__EXT_MFC_STRCPY( lf.lfFaceName, LF_FACESIZE, _T("Arial") );
	lf.lfWeight = FW_BOLD;
CFont font;
	font.CreateFontIndirect(&lf);
CFont * pOldFont = dc.SelectObject( &font );
COLORREF clrOldText =
		dc.SetTextColor( 
			( clrForceText != COLORREF(-1L) )
				? clrForceText
				: GetColor( ( ( bPushed || bSelected ) && bHover && bAllowInvertTextColor ) ? COLOR_WINDOW : COLOR_BTNTEXT, this ) 
			);
	PaintPageNavigatorCaptionTextImpl( dc, rcItem, strCaption );
	dc.SetTextColor( clrOldText );
	dc.SelectObject( pOldFont );
}

void CExtPaintManager::PaintPageNavigatorCaption(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CExtCmdIcon * pIcon,
	bool bExpanded,
	bool bSelected,
	bool bPushed,
	bool bHover,
	bool bAllowInvertTextColor, // = true
	COLORREF clrForceText // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
CSize rcIconSize = CSize(0,0);
	if( pIcon != NULL )
		rcIconSize = pIcon->GetSize();
INT nIconAreaWidth = rcIconSize.cx + ::MulDiv( rcIconSize.cx, 1, 2 );
	// caption text
	if( bExpanded && strCaption != NULL )
	{
		CRect rcText( rcItem );
		rcText.left += nIconAreaWidth;
		PaintPageNavigatorCaptionText( dc, rcText, strCaption, bSelected, bPushed, bHover, bAllowInvertTextColor, clrForceText );
	}
	// caption icon
	if( pIcon != NULL )
	{
		CRect rcIcon;
		if(	bExpanded )
			rcIcon.SetRect( 
				rcItem.left + (rcItem.left + nIconAreaWidth - rcIconSize.cx) / 2,
				rcItem.top  + (rcItem.Height() - rcIconSize.cy) / 2,
				rcItem.left + (rcItem.left + nIconAreaWidth + rcIconSize.cx) / 2,
				rcItem.top  + (rcItem.Height() + rcIconSize.cy) / 2
				);
		else
			rcIcon.SetRect( 
				rcItem.left + (rcItem.Width() - rcIconSize.cx ) / 2,
				rcItem.top  + (rcItem.Height() - rcIconSize.cy) / 2,
				rcItem.left + (rcItem.Width() + rcIconSize.cx ) / 2,
				rcItem.top  + (rcItem.Height() + rcIconSize.cy) / 2
				);
		PaintIcon( dc, true, pIcon, rcIcon, bPushed, true, bHover, __ALIGN_HORIZ_LEFT|__ALIGN_VERT_TOP );
	}
}

void CExtPaintManager::PaintPageNavigatorItemPaneCaptionTextImpl(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( strCaption == NULL )
		return;
int nOldBkMode = dc.SetBkMode( TRANSPARENT );
	// text metrics
CExtSafeString sText( strCaption );
UINT nFormat = DT_LEFT | DT_TOP;
	if( sText.Find( _T('\t') ) != -1 ) // do tabs expanding
		nFormat |= DT_EXPANDTABS;
CRect rcMeasureText( rcCaption );
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(sText), sText.GetLength(), rcMeasureText, nFormat|DT_CALCRECT, 0 );
	// align text vertically
INT nLeftMargin = 7;
	CRect rcDrawText(
		rcCaption.left + nLeftMargin,
		rcCaption.top + ( ( rcCaption.Height() - rcMeasureText.Height() ) / 2 ),
		rcCaption.left + nLeftMargin + rcMeasureText.Width(),
		rcCaption.top + ( ( rcCaption.Height() + rcMeasureText.Height() ) / 2 )
		);
	rcDrawText.IntersectRect( rcCaption, rcDrawText );
	CExtRichContentLayout::stat_DrawText( dc.m_hDC, strCaption, int(_tcslen(strCaption)), &rcDrawText, nFormat|DT_END_ELLIPSIS, 0 );
	dc.SetBkMode( nOldBkMode );
}

void CExtPaintManager::PaintPageNavigatorItemPaneCaptionText(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( strCaption == NULL )
		return;
LOGFONT lf = { sizeof(LOGFONT) };
	VERIFY( ::SystemParametersInfo( SPI_GETICONTITLELOGFONT, sizeof(LOGFONT), &lf, 0 ) );
CFont font;
	font.CreateFontIndirect(&lf);
CFont * pOldFont = dc.SelectObject( &font );
COLORREF clrOldText = dc.SetTextColor( GetColor( COLOR_WINDOWTEXT, this ) );
	PaintPageNavigatorItemPaneCaptionTextImpl( dc, rcCaption, strCaption );
	dc.SetTextColor( clrOldText );
	dc.SelectObject( pOldFont );
}

void CExtPaintManager::PaintPageNavigatorItemPaneCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	bool bHover,
	bool bPressed,
	bool bExpandable,
	bool bExpanded,
	bool bDrawTopLine // = true
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bHover; bPressed; bDrawTopLine;
	if( ! dc.RectVisible(&rcCaption) )
		return;
	dc.FillSolidRect( &rcCaption, GetColor( COLOR_3DFACE, this ) );
CRect rcBottomLine( rcCaption );
	rcBottomLine.top = rcBottomLine.bottom - 1;
	dc.FillSolidRect( &rcBottomLine, GetColor( COLOR_3DSHADOW, this ) );
CRect rcText( rcCaption );
	if( bExpandable )
	{
		CExtPaintManager::glyph_t * pGlyph = 
			CExtPaintManager::g_DockingCaptionGlyphs[
				bExpanded ? CExtPaintManager::__DCBT_PN_CAPTION_EXPANDED : CExtPaintManager::__DCBT_PN_CAPTION_COLLAPSED
				];
		ASSERT( pGlyph != NULL );
		COLORREF ColorValues[2] = {  RGB(0,0,0),  GetColor( COLOR_3DDKSHADOW, this )  };
		CRect rcExpandButton( rcText );
		rcExpandButton.right -= 6;
		rcExpandButton.left = rcExpandButton.right - pGlyph->Size().cx - 1*2;
		PaintGlyphCentered( dc, rcExpandButton, *pGlyph, ColorValues );
		rcText.right = rcExpandButton.left;
	}
	PaintPageNavigatorItemPaneCaptionText( dc, rcText, strCaption );
}

void CExtPaintManagerOffice2003::PaintPageNavigatorItemPaneCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	bool bHover,
	bool bPressed,
	bool bExpandable,
	bool bExpanded,
	bool bDrawTopLine // = true
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorItemPaneCaption( dc, rcCaption, strCaption, bHover, bPressed, bExpandable, bExpanded, bDrawTopLine );
		return;
	}
	if(	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
		stat_PaintGradientRect(
			dc,
			&rcCaption,
			GetColor( bHover ? _2003CLR_PN_PANE_CAPTION_HOVER_DARK : _2003CLR_PN_PANE_CAPTION_DARK, this ),
			GetColor( bHover ? _2003CLR_PN_PANE_CAPTION_HOVER_LIGHT : _2003CLR_PN_PANE_CAPTION_LIGHT, this ),
			true
			);
	else
		dc.FillSolidRect( &rcCaption, GetColor( COLOR_3DSHADOW, this ) );
CRect rcBottomLine( rcCaption );
	rcBottomLine.top = rcBottomLine.bottom - 1;
	dc.FillSolidRect( &rcBottomLine, GetColor( _2003CLR_PN_PANE_CAPTION_BOTTOM_LINE, this ) );
CRect rcTopLine( rcCaption );
	rcTopLine.bottom = rcTopLine.top + 1;
	dc.FillSolidRect( &rcTopLine, GetColor( _2003CLR_PN_PANE_CAPTION_DARK, this ) );
CRect rcText( rcCaption );
	if( bExpandable )
	{
		CExtPaintManager::glyph_t * pGlyph = 
			CExtPaintManager::g_DockingCaptionGlyphs[
				bExpanded ? CExtPaintManager::__DCBT_PN_CAPTION_EXPANDED : CExtPaintManager::__DCBT_PN_CAPTION_COLLAPSED
				];
		ASSERT( pGlyph != NULL );
		COLORREF ColorValues[2] = {  RGB(0,0,0),  GetColor( COLOR_3DDKSHADOW, this )  };
		CRect rcExpandButton( rcText );
		rcExpandButton.right -= 6;
		rcExpandButton.left = rcExpandButton.right - pGlyph->Size().cx - 1*2;
		PaintGlyphCentered( dc, rcExpandButton, *pGlyph, ColorValues );
		rcText.right = rcExpandButton.left;
	}
	PaintPageNavigatorItemPaneCaptionText( dc, rcText, strCaption );
}

void CExtPaintManager::PaintPageNavigatorConfigButton(
	CDC & dc,
	const CRect & rcItem,
	bool bPushed,
	bool bHover
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	bHover; bPushed;
	if( ! dc.RectVisible(&rcItem) )
		return;
CExtPaintManager::glyph_t * pGlyph =  CExtPaintManager::g_DockingCaptionGlyphs[ CExtPaintManager::__DCBT_PN_CONFIG_BUTTON ];
	ASSERT( pGlyph != NULL );
COLORREF ColorValues[2] = {  RGB(0,0,0),  GetColor( COLOR_BTNTEXT, this )  };
	PaintGlyphCentered( dc, rcItem, *pGlyph, ColorValues );
}

void CExtPaintManager::PaintPageNavigatorItem(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CExtCmdIcon * pIcon,
	bool bExpanded,
	bool bSelected,
	bool bPushed,
	bool bHover
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
CRect rcItemInner( rcItem );
	if( bExpanded )
		rcItemInner.DeflateRect( 1, 0, 1, 1 );
	dc.FillSolidRect( &rcItemInner, GetColor( ( bHover || bSelected || bPushed ) ? COLOR_3DSHADOW : COLOR_3DFACE, this ) );
	if( bExpanded )
	{
		CRect rcTopLine( rcItemInner );
		rcTopLine.bottom = rcTopLine.top + 1;
		dc.FillSolidRect( &rcTopLine, GetColor( COLOR_3DDKSHADOW, this ) );
	}
	if( bHover && (! ( bPushed || bSelected ) ) )
		dc.Draw3dRect( &rcItemInner, GetColor( COLOR_WINDOW, this ), GetColor( COLOR_3DDKSHADOW, this ) );
	else if( bPushed || bSelected ) 
		dc.Draw3dRect( &rcItemInner, GetColor( COLOR_3DDKSHADOW, this ), GetColor( COLOR_WINDOW, this ) );
	PaintPageNavigatorCaption( dc, rcItem, strCaption, pIcon, bExpanded, bSelected, bPushed, bHover, true );
}

void CExtPaintManagerXP::PaintPageNavigatorItem(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CExtCmdIcon * pIcon,
	bool bExpanded,
	bool bSelected,
	bool bPushed,
	bool bHover
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
	// border
	if( bExpanded )
	{
		CBrush brBorder( GetColor( COLOR_3DSHADOW, this ) );
		dc.FrameRect( &rcItem, &brBorder );
	}
CRect rcItemInner( rcItem );
	if( bExpanded )
		rcItemInner.DeflateRect(1,1);
	if( bHover || bPushed || bSelected )
	{
		PAINTPUSHBUTTONDATA _ppbd(
			this,	// pHelperSrc
			true,	// bHorz
			rcItemInner,
			_T(""),
			NULL,	// pIcon
			true,	// bFlat
			bHover  || bSelected,	// bHover
			bPushed || bSelected,
			false,	// bIndeterminate
			true,	// bEnabled
			false,	// bDrawBorder
			false,	// bDrawFocusRect
			bSelected, // false,	// bDefaultPushButton
			0,		// eAlign
			NULL,	// hFont
			false	// bDropDown
			);
		PaintPushButton( dc, _ppbd );
	}
	else
		dc.FillSolidRect(
			&rcItemInner,
			( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 ) ? GetColor( CLR_3DFACE_OUT, this ) : GetColor( XPCLR_3DFACE_NORMAL, this )
			);
	PaintPageNavigatorCaption( dc, rcItem, strCaption, pIcon, bExpanded, bSelected, bPushed, bHover, true );
}

void CExtPaintManagerOffice2003::PaintPageNavigatorItemCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorItemCaption( dc, rcCaption, strCaption );
		return;
	}
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
	if(		::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 
		&&	(		eCurrentTheme == ThemeLunaRoyale       // +2.87
				||	eCurrentTheme == ThemeVistaOrLaterUX   // +2.87
				||	eCurrentTheme == ThemeVistaOrLaterDWM  // +2.87
				||	eCurrentTheme == ThemeLunaBlue
				||	eCurrentTheme == ThemeLunaOlive
				||	eCurrentTheme == ThemeLunaSilver
			)
		)
		stat_PaintGradientRect( dc, &rcCaption, GetColor( _2003CLR_PN_GRIPPER_DARK, this ), GetColor( _2003CLR_PN_GRIPPER_LIGHT, this ), true );
	else
		dc.FillSolidRect( &rcCaption, GetColor( COLOR_3DSHADOW, this ) );
	PaintPageNavigatorItemCaptionText( dc, rcCaption, strCaption );
}

void CExtPaintManagerOffice2003::PaintPageNavigatorItem(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CExtCmdIcon * pIcon,
	bool bExpanded,
	bool bSelected,
	bool bPushed,
	bool bHover
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorItem( dc, rcItem, strCaption, pIcon, bExpanded, bSelected, bPushed, bHover );
		return;
	}
	// border
	if( bExpanded )
	{
		CBrush brBorder( GetColor( _2003CLR_PN_BORDER, this ) );
		dc.FrameRect( &rcItem, &brBorder );
	}
CRect rcItemInner( rcItem );
	if( bExpanded )
		rcItemInner.DeflateRect(1,1);
	if( bHover || bPushed || bSelected )
	{
		PAINTPUSHBUTTONDATA _ppbd(
			this,	// pHelperSrc
			true,	// bHorz
			rcItemInner,
			_T(""),
			NULL,	// pIcon
			true,	// bFlat
			bHover  || bSelected,	// bHover
			bPushed || bSelected,
			false,	// bIndeterminate
			true,	// bEnabled
			false,	// bDrawBorder
			false,	// bDrawFocusRect
			bSelected, // false,	// bDefaultPushButton
			0,		// eAlign
			NULL,	// hFont
			false	// bDropDown
			);
		PaintPushButton( dc, _ppbd );
	}
	else
		if( ::GetDeviceCaps(  dc.m_hDC, BITSPIXEL ) > 8 )
			stat_PaintGradientRect(
				dc,
				&rcItemInner,
				GetColor( _2003CLR_PN_ITEM_DARK, this ), 
				GetColor( _2003CLR_PN_ITEM_LIGHT, this ), 
				true
				);
		else
			dc.FillSolidRect( &rcItemInner, GetColor( XPCLR_3DFACE_NORMAL, this ) );
	PaintPageNavigatorCaption( dc, rcItem, strCaption, pIcon, bExpanded, bSelected, bPushed, bHover, false );
}

void CExtPaintManager::PaintPageNavigatorSplitterDotsImpl(
	CDC & dc,
	const CRect & rcSplitter,
	COLORREF clrDark,
	COLORREF clrLight,
	INT nOffsetV, // = 0
	INT nDotCount // = 9
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
const CSize szGripDot( 2, 2 ), szGripDist( 1, 1 ), szGripShadowOffset( 1, 1 );
INT nDotsAreaHeight = szGripDot.cy + szGripShadowOffset.cy;
INT nDotsAreaWidth = nDotCount * ( szGripDot.cx + szGripDist.cx + szGripShadowOffset.cx );
CRect rcDotArea( rcSplitter );
	rcDotArea.DeflateRect( ( rcSplitter.Width() - nDotsAreaWidth ) / 2, ( rcSplitter.Height() - nDotsAreaHeight ) / 2 + 1 );
	if( nOffsetV != 0 )
		rcDotArea.OffsetRect(0, nOffsetV );
	for( INT nDot = 0; nDot < nDotCount; nDot++ )
	{
		INT nOffsetX = nDot * (szGripDot.cx + szGripShadowOffset.cx + szGripDist.cx);
		CRect rcDot( 
			rcDotArea.left + nOffsetX,
			rcDotArea.top,
			rcDotArea.left + nOffsetX + szGripDot.cx,
			rcDotArea.top + szGripDot.cy
			);
		CRect rcShadow( rcDot );
		rcShadow.OffsetRect( szGripShadowOffset );
		dc.FillSolidRect( &rcShadow, clrLight );
		dc.FillSolidRect( &rcDot, clrDark );
	} // for( INT nDot = 0; nDot < nDotCount; nDot++ )
}

void CExtPaintManager::PaintPageNavigatorSplitterDots(
	CDC & dc,
	const CRect & rcSplitter,
	INT nOffsetV // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	PaintPageNavigatorSplitterDotsImpl( dc, rcSplitter, GetColor( COLOR_3DDKSHADOW, this ), GetColor( COLOR_WINDOW, this ), nOffsetV, 9 );
}

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorSplitterDots(
	CDC & dc,
	const CRect & rcSplitter,
	INT nOffsetV // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorSplitterDots( dc, rcSplitter, nOffsetV );
		return;
	}
	PaintPageNavigatorSplitterDotsImpl( dc, rcSplitter, m_clrPnSplitterDots, GetColor( COLOR_WINDOW, this ), nOffsetV, 5 );
}

void CExtPaintManagerOffice2010_Impl::PaintPageNavigatorSplitterDots(
	CDC & dc,
	const CRect & rcSplitter,
	INT nOffsetV // = 0
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerOffice2007_Impl::PaintPageNavigatorSplitterDots( dc, rcSplitter, nOffsetV );
		return;
	}
	// do not paint dots in 2010 themes
}

void CExtPaintManager::PaintPageNavigatorSplitter(
	CDC & dc,
	const CRect & rcSplitter,
	bool bDrawDots // = true
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc.FillSolidRect( &rcSplitter, GetColor( CExtPaintManager::CLR_3DFACE_OUT, this ) );
CRect rcLine( rcSplitter );
	rcLine.bottom = rcLine.top + 1;
	dc.FillSolidRect( &rcLine, GetColor( COLOR_3DSHADOW, this ) );
	rcLine.OffsetRect(0,1);
	dc.FillSolidRect( &rcLine, GetColor( COLOR_WINDOW, this ) );
	rcLine.SetRect(
		rcSplitter.left,
		rcSplitter.top + 1,
		rcSplitter.left + 1,
		rcSplitter.bottom
		);
	dc.FillSolidRect( &rcLine, GetColor( COLOR_WINDOW, this ) );
	if( bDrawDots )
		PaintPageNavigatorSplitterDots( dc, rcSplitter );
}

void CExtPaintManagerXP::PaintPageNavigatorSplitter(
	CDC & dc,
	const CRect & rcSplitter,
	bool bDrawDots // = true
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc.FillSolidRect( &rcSplitter, GetColor( CExtPaintManager::CLR_3DFACE_OUT, this ) );
CRect rcLine( rcSplitter );
	rcLine.bottom = rcLine.top + 1;
	dc.FillSolidRect( &rcLine, GetColor( COLOR_3DSHADOW, this ) );
	rcLine.OffsetRect(0,1);
	dc.FillSolidRect( &rcLine, GetColor( COLOR_WINDOW, this ) );
	rcLine.SetRect(
		rcSplitter.left,
		rcSplitter.top + 1,
		rcSplitter.left + 1,
		rcSplitter.bottom
		);
	dc.FillSolidRect( &rcLine, GetColor( COLOR_WINDOW, this ) );
	if( bDrawDots )
		PaintPageNavigatorSplitterDots( dc, rcSplitter );
}

void CExtPaintManagerOffice2003::PaintPageNavigatorSplitter(
	CDC & dc,
	const CRect & rcSplitter,
	bool bDrawDots // = true
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorSplitter( dc, rcSplitter, true );
		return;
	}
	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
	{
		stat_PaintGradientRect( dc, &rcSplitter,   GetColor( _2003CLR_PN_GRIPPER_DARK, this ),  GetColor( _2003CLR_PN_GRIPPER_LIGHT, this ),  true );
		if( bDrawDots )
			PaintPageNavigatorSplitterDots( dc, rcSplitter, -1 );
	}
	else
		CExtPaintManagerXP::PaintPageNavigatorSplitter( dc, rcSplitter, true );
}

#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

#ifndef __EXT_MFC_NO_TAB_ONENOTE_CTRL

void CExtPaintManager::TabOneNoteWnd_DrawClientArea(
	CDC & dc,
	CRect & rcClient,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	dc.FillSolidRect(
		&rcClient, 
		GetColor( COLOR_3DFACE, pHelperSrc, lParam ) 
		);
}

void CExtPaintManagerOffice2003::TabOneNoteWnd_DrawClientArea(
	CDC & dc,
	CRect & rcClient,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::TabOneNoteWnd_DrawClientArea(
			dc,
			rcClient,
			pHelperSrc,
			lParam
			);
		return;
	}

	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
	{
		bool bHorz = true;
		bool bTopLeft = true;
		if(		pHelperSrc != NULL 
			&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
			)
		{
			CExtTabWnd * pWnd = STATIC_DOWNCAST( CExtTabWnd, pHelperSrc );
			ASSERT_VALID( pWnd );
			bHorz = pWnd->OrientationIsHorizontal();
			bTopLeft = pWnd->OrientationIsTopLeft();
		}

		COLORREF clrDark = GetColor( COLOR_3DLIGHT, pHelperSrc, lParam );
		COLORREF clrLight = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );

		stat_PaintGradientRect(
			dc,
			&rcClient,
			bHorz 
				? ( bTopLeft ? clrLight : clrDark )
				: ( bTopLeft ? clrDark : clrLight ),
			bHorz
				? ( bTopLeft ? clrDark : clrLight )
				: ( bTopLeft ? clrLight : clrDark ),
			bHorz
		);
	}
	else 
	{
		dc.FillSolidRect(
			&rcClient, 
			GetColor( COLOR_3DFACE, pHelperSrc, lParam ) 
			);
	}
}

void CExtPaintManager::GetTabOneNoteItemColors(
	bool bSelected,
	bool bHover,
	bool bEnabled,
	COLORREF &clrBorderLight,
	COLORREF &clrBorderDark,
	COLORREF &clrBkLight,
	COLORREF &clrBkDark,
	COLORREF &clrText
	)
{
	ASSERT_VALID( this );
	if( bHover && bEnabled )
	{
		clrText = clrBorderLight = clrBorderDark = RGB(0, 0, 128);
		clrBkDark = RGB(179, 179, 217);
		clrBkLight = RGB(233, 233, 244);
	}
	else
	{
		clrText =  GetColor( bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED, this );
		clrBorderLight = GetColor( bSelected ? COLOR_WINDOW : COLOR_3DFACE, this );
		clrBorderDark = GetColor( COLOR_3DSHADOW, this );
		clrBkDark = clrBkLight = GetColor( COLOR_3DFACE, this );
	}
}

void CExtPaintManagerOffice2003::GetTabOneNoteItemColors(
	bool bSelected,
	bool bHover,
	bool bEnabled,
	COLORREF &clrBorderLight,
	COLORREF &clrBorderDark,
	COLORREF &clrBkLight,
	COLORREF &clrBkDark,
	COLORREF &clrText
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::GetTabOneNoteItemColors(
			bSelected,
			bHover,
			bEnabled,
			clrBorderLight,
			clrBorderDark,
			clrBkLight,
			clrBkDark,
			clrText
			);
		return;
	}
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
	if( bHover && bEnabled )
	{
		switch( eCurrentTheme ) 
		{
		case ThemeLunaRoyale:       // +2.87
		case ThemeVistaOrLaterUX:   // +2.87
		case ThemeVistaOrLaterDWM:  // +2.87
		case ThemeLunaBlue:
			clrText = RGB(0,0,0);
			clrBorderLight = 
			clrBorderDark = RGB(0, 0, 128);
		break;
		case ThemeLunaOlive:
			clrText = RGB(0,0,0);
			clrBorderLight = clrBorderDark = RGB(63, 93, 56);
		break;
		case ThemeLunaSilver:
			clrText = RGB(0,0,0);
			clrBorderLight = clrBorderDark = RGB(75, 75, 111);
		break;
		default:
			clrText = clrBorderLight = clrBorderDark = RGB(0, 0, 128);
		break;
		} // switch( eCurrentTheme ) 
		if( eCurrentTheme != ThemeUnknown )
		{
			clrBkDark  = RGB(255, 238, 194);
			clrBkLight = RGB(255, 249, 237);
		}
		else
		{
			clrBkDark  = RGB(179, 179, 217);
			clrBkLight = RGB(233, 233, 244);
		}
	}
	else
	{
		clrText = GetColor( bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED, this );
		clrBorderLight = GetColor( ( bSelected || eCurrentTheme != ThemeUnknown ) ? COLOR_WINDOW : COLOR_3DFACE, this  );
		clrBkDark = clrBkLight = GetColor( COLOR_3DFACE, this );
		switch( eCurrentTheme ) 
		{
		case ThemeLunaRoyale:       // +2.87
		case ThemeVistaOrLaterUX:   // +2.87
		case ThemeVistaOrLaterDWM:  // +2.87
		case ThemeLunaBlue:
			clrBorderDark = RGB(0, 53, 154);
		break;
		case ThemeLunaOlive:
			clrBorderDark = RGB(96, 119, 107);
		break;
		case ThemeLunaSilver:
			clrBorderDark = RGB(118, 116, 146);
		break;
		default:
			clrBorderDark = GetColor( COLOR_3DSHADOW, this );
		break;
		} // switch( eCurrentTheme ) 
	}
}

void CExtPaintManagerStudio2005::GetTabOneNoteItemColors(
	bool bSelected,
	bool bHover,
	bool bEnabled,
	COLORREF &clrBorderLight,
	COLORREF &clrBorderDark,
	COLORREF &clrBkLight,
	COLORREF &clrBkDark,
	COLORREF &clrText
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::GetTabOneNoteItemColors(
			bSelected,
			bHover,
			bEnabled,
			clrBorderLight,
			clrBorderDark,
			clrBkLight,
			clrBkDark,
			clrText
			);
		return;
	}

	CExtPaintManager::GetTabOneNoteItemColors(
		bSelected,
		bHover,
		bEnabled,
		clrBorderLight,
		clrBorderDark,
		clrBkLight,
		clrBkDark,
		clrText
		);
}

#endif // __EXT_MFC_NO_TAB_ONENOTE_CTRL

#ifndef __EXT_MFC_NO_TAB_WHIDBEY_CTRL

void CExtPaintManager::GetTabWhidbeyItemColors(
	bool bSelected,
	bool bHover,
	bool bEnabled,
	COLORREF &clrBorder,
	COLORREF &clrBkLight,
	COLORREF &clrBkDark,
	COLORREF &clrText
	)
{
	ASSERT_VALID( this );
	bHover;
	clrText = GetColor(  bEnabled ? ( bSelected ? COLOR_WINDOWTEXT : COLOR_BTNTEXT ) : CLR_TEXT_DISABLED, this );
	clrBorder = GetColor( COLOR_3DSHADOW, this );
	clrBkDark = GetColor( bSelected ? COLOR_WINDOW : COLOR_3DLIGHT, this );
	clrBkLight = GetColor( bSelected ? COLOR_WINDOW : COLOR_3DLIGHT, this );
}

void CExtPaintManagerOffice2003::GetTabWhidbeyItemColors(
	bool bSelected,
	bool bHover,
	bool bEnabled,
	COLORREF &clrBorder,
	COLORREF &clrBkLight,
	COLORREF &clrBkDark,
	COLORREF &clrText
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::GetTabWhidbeyItemColors( bSelected, bHover, bEnabled, clrBorder, clrBkLight, clrBkDark, clrText );
		return;
	}
e_system_theme_t eCurrentTheme = OnQuerySystemTheme();	
	clrText = GetColor( bEnabled ? ( bSelected ? COLOR_WINDOWTEXT : COLOR_BTNTEXT ) : CLR_TEXT_DISABLED, this );
	clrBorder = GetColor( COLOR_3DSHADOW, this );
	clrBkDark = GetColor( bSelected ? COLOR_WINDOW : COLOR_3DLIGHT, this );
	if( eCurrentTheme != ThemeUnknown)
		clrBkLight = GetColor( bSelected ? COLOR_WINDOW : COLOR_3DHILIGHT, this );
	else
		clrBkLight = GetColor( bSelected ? COLOR_WINDOW : COLOR_3DLIGHT, this );
}

#endif // __EXT_MFC_NO_TAB_WHIDBEY_CTRL


//////////////////////////////////////////////////////////////////////////
// CExtPaintManagerNativeXP
//////////////////////////////////////////////////////////////////////////

CExtPaintManagerNativeXP::CExtPaintManagerNativeXP()
{
#if (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
	m_bPageContainerUseButtonStyle = true;
	m_bPageContainerUseGroupBoxStyle = true;
	m_bPageContainerNoEmbossDisabledText = true;
#endif // (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)
#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	m_bShortcutListUseButtonStyleInScrollButtons = true;
	m_bShortcutListUseDockerBkgnd = true;
	m_bShortcutListItemUseButtonStyle = true;
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
}

CExtPaintManagerNativeXP::~CExtPaintManagerNativeXP()
{
}

bool CExtPaintManagerNativeXP::OnQueryUseThemeColors() const
{
	ASSERT_VALID( this );
	e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
bool bUseThemedColors = (	
			g_PaintManager.m_UxTheme.IsAppThemed()
		&&	eCurrentTheme != ThemeUnknown
		);
	return bUseThemedColors;
}

void CExtPaintManagerNativeXP::InitTranslatedColors()
{
	ASSERT_VALID( this );
	CExtPaintManager::InitTranslatedColors();

	if(	stat_GetBPP() > 8 )
	{
		if( OnQueryUseThemeColors() )
		{
			e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
			// Task Pane Colors
			COLORREF clrTPBkTop    = (COLORREF)(-1L);
			COLORREF clrTPBkBottom = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionTextNormal           = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionTextNormalHover      = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionTextHighlighted      = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionTextHighlightedHover = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionBkLeftNormal         = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionBkRightNormal        = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionBkLeftHighlighted    = (COLORREF)(-1L);
			COLORREF clrTPGroupCaptionBkRightHighlighted   = (COLORREF)(-1L);
			switch( eCurrentTheme ) 
			{
			case ThemeLunaRoyale:       // +2.87
			case ThemeVistaOrLaterUX:   // +2.87
			case ThemeVistaOrLaterDWM:  // +2.87
			case ThemeLunaBlue:
				clrTPBkTop		= RGB(123, 162, 231);
				clrTPBkBottom	= RGB(99, 117, 214);
				clrTPGroupCaptionTextNormal				= RGB( 33,  93, 198);
				clrTPGroupCaptionTextNormalHover		= RGB( 66, 142, 255);
				clrTPGroupCaptionTextHighlighted		= RGB(255, 255, 255);
				clrTPGroupCaptionTextHighlightedHover	= RGB( 66, 142, 255);
				clrTPGroupCaptionBkLeftNormal		= RGB(255, 255, 255);
				clrTPGroupCaptionBkRightNormal		= RGB(198, 211, 247);
				clrTPGroupCaptionBkLeftHighlighted	= RGB(0, 73, 181);
				clrTPGroupCaptionBkRightHighlighted	= RGB(41, 93, 206);
			break;
			case ThemeLunaOlive:
				clrTPBkTop		= RGB(204, 217, 173);
				clrTPBkBottom	= RGB(165, 189, 132);
				clrTPGroupCaptionTextNormal				= RGB( 86, 102,  45);
				clrTPGroupCaptionTextNormalHover		= RGB(114, 146, 29);
				clrTPGroupCaptionTextHighlighted		= RGB(255, 255, 255);
				clrTPGroupCaptionTextHighlightedHover	= RGB(224, 231, 184);
				clrTPGroupCaptionBkLeftNormal		= RGB(255, 252, 236);
				clrTPGroupCaptionBkRightNormal		= RGB(224, 231, 184);
				clrTPGroupCaptionBkLeftHighlighted	= RGB(119, 140, 64);
				clrTPGroupCaptionBkRightHighlighted	= RGB(150, 168, 103);
			break;
			case ThemeLunaSilver:
				clrTPBkTop		= RGB(196, 200, 212);
				clrTPBkBottom	= RGB(177, 179, 200);
				clrTPGroupCaptionTextNormal				= RGB( 63,  61, 61);
				clrTPGroupCaptionTextNormalHover		= RGB(126, 124, 124);
				clrTPGroupCaptionTextHighlighted		= RGB(255, 255, 255);
				clrTPGroupCaptionTextHighlightedHover	= RGB(230, 230, 230);
				clrTPGroupCaptionBkLeftNormal		= RGB(255, 255, 255);
				clrTPGroupCaptionBkRightNormal		= RGB(214, 215, 224);
				clrTPGroupCaptionBkLeftHighlighted	= RGB(119, 119, 146);
				clrTPGroupCaptionBkRightHighlighted	= RGB(180, 182, 199);
			break;
			default:
				clrTPBkTop = CExtBitmap::stat_RGB_Blend( GetColor( COLOR_INACTIVECAPTION, this ), GetColor( COLOR_WINDOW, this ), 128 );
				clrTPBkBottom = CExtBitmap::stat_RGB_Blend( GetColor( COLOR_ACTIVECAPTION, this ), GetColor( COLOR_WINDOW, this ), 192 );
				clrTPGroupCaptionTextNormal = CExtBitmap::stat_RGB_Blend( GetColor( COLOR_HIGHLIGHT, this ), GetColor( COLOR_WINDOWTEXT, this ), 192 );
				clrTPGroupCaptionTextNormalHover = CExtBitmap::stat_RGB_Blend( GetColor( COLOR_HIGHLIGHT, this ), GetColor( COLOR_WINDOWTEXT, this ), 240 );
				clrTPGroupCaptionTextHighlighted = GetColor( COLOR_HIGHLIGHTTEXT, this );
				clrTPGroupCaptionTextHighlightedHover = CExtBitmap::stat_RGB_Blend( GetColor( COLOR_HIGHLIGHTTEXT, this ), GetColor( COLOR_HIGHLIGHT, this ), 128 );
				clrTPGroupCaptionBkLeftNormal = GetColor( COLOR_WINDOW, this );
				clrTPGroupCaptionBkRightNormal = CExtBitmap::stat_RGB_Blend( GetColor( COLOR_INACTIVECAPTION, this ), GetColor( COLOR_WINDOW, this ), 92 );
				clrTPGroupCaptionBkLeftHighlighted = GetColor( COLOR_ACTIVECAPTION, this );
				clrTPGroupCaptionBkRightHighlighted	= CExtBitmap::stat_RGB_Blend( GetColor( COLOR_ACTIVECAPTION, this ), GetColor( COLOR_WINDOW, this ), 92 );
			break;
			} // switch( eCurrentTheme ) 
			m_mapColorTranslate[ CLR_TASK_PANE_BK_TOP ]    = InstallColor( clrTPBkTop );
			m_mapColorTranslate[ CLR_TASK_PANE_BK_BOTTOM ] = InstallColor( clrTPBkBottom );
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL ]              = InstallColor( clrTPGroupCaptionTextNormal );
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_NORMAL_HOVERED ]      = InstallColor( clrTPGroupCaptionTextNormalHover );
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED ]         = InstallColor( clrTPGroupCaptionTextHighlighted );
			m_mapColorTranslate[ CLR_TASK_PANE_GROUP_CAPTION_TEXT_HIGHLIGHTED_HOVERED ] = InstallColor( clrTPGroupCaptionTextHighlightedHover );
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_NORMAL]	      = InstallColor( clrTPGroupCaptionBkLeftNormal );
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_LEFT_HIGHLIGHTED]  = InstallColor( clrTPGroupCaptionBkLeftHighlighted );
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_NORMAL]      = InstallColor( clrTPGroupCaptionBkRightNormal );
			m_mapColorTranslate[CLR_TASK_PANE_GROUP_CAPTION_BK_RIGHT_HIGHLIGHTED] = InstallColor( clrTPGroupCaptionBkRightHighlighted );
		} // if( OnQueryUseThemeColors() )
	} // if( stat_GetBPP() > 8 )

#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	m_clrShortcutListItemAlternativeText = GetColor( COLOR_BTNTEXT );
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
}

//////////////////////////////////////////////////////////////////////////
// CExtPaintManagerOffice2003NoThemes
//////////////////////////////////////////////////////////////////////////

CExtPaintManagerOffice2003NoThemes::CExtPaintManagerOffice2003NoThemes()
{
}

CExtPaintManagerOffice2003NoThemes::~CExtPaintManagerOffice2003NoThemes()
{
}

bool CExtPaintManagerOffice2003NoThemes::OnQueryUseThemeColors() const
{
	ASSERT_VALID( this );
	return false;
}

double CExtPaintManagerOffice2003NoThemes::GetIconAlphaAdjustPercent() const
{
	ASSERT_VALID( this );
	return -0.70;
}

COLORREF CExtPaintManagerOffice2003NoThemes::GetIconAlphaColor() const
{
COLORREF clrAlpha = ( const_cast < CExtPaintManagerOffice2003NoThemes * > ( this ) ) -> GetColor( COLOR_3DFACE, (CObject*)this );
	return clrAlpha;
}
	
//////////////////////////////////////////////////////////////////////////
// CExtPaintManagerOffice2007_Impl
//////////////////////////////////////////////////////////////////////////

COLORREF CExtPaintManagerOffice2007_Impl::GetIconAlphaColor() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetIconAlphaColor();
	return m_clrIconAlphaColor;
}

double CExtPaintManagerOffice2007_Impl::GetIconAlphaAdjustPercent() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetIconAlphaAdjustPercent();
	return m_lfIconAlphaAdjustPercent;
}

CExtPaintManagerOffice2007_Impl::CExtPaintManagerOffice2007_Impl()
	: m_bThemedMenuItemsEverywhere( false )
	, m_clrFillHint( RGB(0,0,0) )
	, m_clrAccentHint( RGB(255,255,255) )
	, m_clrDockingFrameDark( RGB(0,0,0) )
	, m_clrFloatingToolbarGripperSolid( COLORREF(-1L) )
	, m_clrDockingFrameCaptionTextActive( RGB(0,0,0) )
	, m_clrDockingFrameCaptionTextInactive( RGB(255,255,255) )
	, m_clrDockingFrameCaptionTextFloatingFixed( RGB(255,255,255) )
	, m_clrDockingCaptionShapeFixedPushed( RGB(0,0,0) )
	, m_clrDockingCaptionShapeResizablePushed( RGB(0,0,0) )
	, m_clrDockingCaptionShapeFixedHover( RGB(0,0,0) )
	, m_clrDockingCaptionShapeResizableHover( RGB(0,0,0) )
	, m_clrDockingCaptionShapeFixedNormal( RGB(0,0,0) )
	, m_clrDockingCaptionShapeResizableNormal( RGB(0,0,0) )
#ifdef __FREIWALD_ORIGINAL__
#else
	// the following items remain unitialized in the original code:

	, m_clrDockingCaptionShapeFixedDisabled(RGB(160, 160, 160))
	, m_clrDockingCaptionShapeResizableDisabled(RGB(160, 160, 160))
#endif
	, m_clrTransparentNcFrameActive( RGB(1,1,1) )
	, m_clrTransparentNcFrameInactive( RGB(255,0,255) )
	, m_rcNcFrameBordersActive( 0, 0, 0, 0 )
	, m_rcNcFrameBordersInactive( 0, 0, 0, 0 )
	, m_nCaptionHeightActive( 0 )
	, m_nCaptionHeightInactive( 0 )
	, m_bUseNcFrameBmpForDockerBkgnd( false )
	, m_clrNcFrameTextActive( COLORREF(-1L) )
	, m_clrNcFrameTextInactive( COLORREF(-1L) )
	, m_rcNcButtonBkPadding( 3, 3, 3, 3 )
	, m_sizeNcButtonShapeInArr( 17, 16 )
	, m_nNcBtnIdxDisabled( 3 )
	, m_nNcBtnIdxNormalActive( 0 )
	, m_nNcBtnIdxNormalInactive( 4 )
	, m_nNcBtnIdxHover( 1 )
	, m_nNcBtnIdxPressed( 2 )
#if (!defined __EXT_MFC_NO_STATUSBAR)
	, m_rcStatusBkPadding( 0, 0, 0, 0 )
	, m_rcStatusSeparatorPadding( 0, 0, 0, 0 )
	, m_clrStatusPaneTextColorDisabled( RGB(128,128,128) )
	, m_clrStatusPaneTextColorNormal( RGB(0,0,0) )
#endif // (!defined __EXT_MFC_NO_STATUSBAR)
#if (!defined __EXT_MFC_NO_TAB_CTRL)
	, m_nIdxTabShapeDisabled( -1 )
	, m_nIdxTabShapeNormal( -1 )
	, m_nIdxTabShapeHover( -1 )
	, m_nIdxTabShapePressed( -1 )
	, m_nIdxTabShapeSelected( -1 )
	, m_nIdxTabShapeSelectedHover( -1 )
	, m_clrTabTextNormal( RGB(0,0,0) )
	, m_clrTabTextSelected( RGB(0,0,0) )
	, m_clrTabTextNormalDWM( COLORREF(-1L) )
	, m_clrTabTextSelectedDWM( COLORREF(-1L) )
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)
	, m_clrMenuItemLeftAreaMarginL( COLORREF(-1L) )
	, m_clrMenuItemLeftAreaMarginR( COLORREF(-1L) )
	, m_nMenuGlyphItemHeightSmall( 22 )
	, m_nMenuGlyphItemHeightLarge( 44 )
	, m_rcMenuItemPaddingLargeLeft(  3, 2, 3, 2 )
	, m_rcMenuItemPaddingLargeRight( 1, 2, 3, 2 )
	, m_rcMenuItemPaddingSmallLeft(  3, 2, 3, 2 )
	, m_rcMenuItemPaddingSmallRight( 1, 2, 3, 2 )
	, m_clrDCA1( COLORREF(-1) )
	, m_clrDCA2( COLORREF(-1) )
	, m_clrDCA3( COLORREF(-1) )
	, m_bDocumentClientAreaBkgndR2( false )
	, m_clrDCA_Solid( COLORREF(-1L) )
	, m_sizeComboBoxDropDown( 15, 19 )
	, m_rcPaddingComboBoxDropDown( 3, 3, 3, 3 )
	, m_lfIconAlphaAdjustPercent( -0.50 )
	, m_clrIconAlphaColor( COLORREF(-1L) )

// 	, m_nTbbLightWeightSimpleGlyphHeightH( 22 )
// 	, m_nTbbLightWeightSimpleGlyphHeightV( 22 )
// 	, m_nTbbLightWeightSDDLeftGlyphHeightH( 22 )
// 	, m_nTbbLightWeightSDDLeftGlyphHeightV( 22 )
// 	, m_nTbbLightWeightSDDRightGlyphHeightH( 22 )
// 	, m_nTbbLightWeightSDDRightGlyphHeightV( 9 )
// 	, m_rcTbbLightWeightSimplePaddingH( 3, 3, 3, 3 )
// 	, m_rcTbbLightWeightSimplePaddingV( 3, 3, 3, 3 )
// 	, m_rcTbbLightWeightSDDLeftPaddingH( 3, 3, 3, 3 )
// 	, m_rcTbbLightWeightSDDLeftPaddingV( 3, 3, 3, 3 )
// 	, m_rcTbbLightWeightSDDRightPaddingH( 3, 3, 3, 3 )
// 	, m_rcTbbLightWeightSDDRightPaddingV( 3, 3, 3, 3 )

	, m_nPushBtnSimpleGlyphHeightH( 22 )
	, m_nPushBtnSimpleGlyphHeightV( 22 )
	, m_nPushBtnSDDLeftGlyphHeightH( 22 )
	, m_nPushBtnSDDLeftGlyphHeightV( 22 )
	, m_nPushBtnSDDRightGlyphHeightH( 22 )
	, m_nPushBtnSDDRightGlyphHeightV( 9 )
	, m_rcPushBtnSimplePaddingH( 3, 3, 3, 3 )
	, m_rcPushBtnSimplePaddingV( 3, 3, 3, 3 )
	, m_rcPushBtnSDDLeftPaddingH( 3, 3, 3, 3 )
	, m_rcPushBtnSDDLeftPaddingV( 3, 3, 3, 3 )
	, m_rcPushBtnSDDRightPaddingH( 3, 3, 3, 3 )
	, m_rcPushBtnSDDRightPaddingV( 3, 3, 3, 3 )

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	, m_rcRibbonTabAreaBlurPadding( 0, 0, 0, 0 )
	, m_clrRibbonTabClientAreaActive( COLORREF(-1L) )
	, m_clrRibbonTabClientAreaInactive( COLORREF(-1L) )
	, m_nQatbAdditionalSpaceAtRight( 0 )
	, m_nQatbAdditionalSpaceAtRightDWM( 0 )
	, m_clrContractedMargin1( COLORREF(-1L) )
	, m_clrContractedMargin2( COLORREF(-1L) )
	, m_nContractedMarginHeight( 0 )
	, m_rcRibbonPageOuterContentPadding( 4, 3, 3, 4 )
	, m_nRibbonGroupIconBkVertOffset( 0 )
	, m_nRibbonCaptionPartHeight( 0 )
	, m_nRibbonGroupCaptionAreaHeightExpanded( 0 )
	, m_nRibbonGroupCaptionAreaHeightCollapsed( 0 )
	, m_rcRibbonPageBkPadding( 0, 0, 0, 0 )
	, m_rcRibbonGroupPaddingBkExpanded( 0, 0, 0, 0 )
	, m_rcRibbonGroupPaddingBkCollapsed( 0, 0, 0, 0 )
	, m_bRibbonGroupCaptionAtTop( false )
	, m_bRibbonGroupCaptionAreaHasPadding( false )
	, m_rcRibbonSeparatorPaddingH( 0, 0, 0, 0 )
	, m_rcRibbonSeparatorPaddingV( 0, 0, 0, 0 )
	, m_nRibbonSeparatorDrawModeH( 0 )
	, m_nRibbonSeparatorDrawModeV( 0 )
	, m_clrRibbonGroupCaptionTextExpanded( RGB( 255, 255, 255 ) )
	, m_clrRibbonGroupCaptionTextShadowExpanded( COLORREF(-1L) )
	, m_clrRibbonGroupCaptionTextCollapsed( RGB(0,0,0) )
	, m_clrRibbonButtonNormal( RGB(0,0,0) )
	, m_clrRibbonButtonDisabled( RGB(0,0,0) )
	, m_sizeRibbonGroupCaptionTextOffset( 0, 0 )
	, m_nRibbonGroupCaptionTextDF( DT_SINGLELINE|DT_LEFT|DT_VCENTER|DT_END_ELLIPSIS )
	, m_nRibbonGroupCaptionTextShadowDF( DT_SINGLELINE|DT_LEFT|DT_VCENTER|DT_END_ELLIPSIS )
	, m_nRibbonQuickAccessBarButtonsAlignment( -1 )
	, m_rcPaddingRibbonQuickAccessBarBkAtTheBottom( 0, 0, 0, 0 )
	, m_nRibbonTabIntersectionHeight( 0 )
	, m_rcRibbonNcCornerLeftCP( 0, 0, 0, 0 )
	, m_rcRibbonNcCornerRightCP( 0, 0, 0, 0 )
	, m_nRibbonFileButtonHeight( 45 )
	, m_clrRibbon_EmbeddedCaptionTextLeft( RGB(80,80,80) )
	, m_clrRibbon_EmbeddedCaptionTextRight( RGB(128,128,128) )
	, m_nRibbonEmbeddedCaptionTextAlignmentFlags( DT_SINGLELINE|DT_CENTER|DT_VCENTER )
	, m_bRibbonFileButtonItegrationSupported( true )
	, m_rcRibbonPaddingQACEB( 2, 2, 2, 2 )
	, m_nRibbonHeightOfQACEB( 18 )
	, m_nIdxRibbonQACEB_Normal( 0 )
	, m_nIdxRibbonQACEB_Hover( 1 )
	, m_nIdxRibbonQACEB_Pressed( 2 )
	, m_nIdxRibbonQACEB_Selected( 0 )
	, m_nRibbonHeightOfOneDLB( -1 )
	, m_nDlbIdxDisabled( -1 )
	, m_nDlbIdxNormal( -1 )
	, m_nDlbIdxHover( -1 )
	, m_nDlbIdxPressed( -1 )
	, rcRibbonContentPaddingDLB( 0, 0, 0, 0 )

	, m_clrRibbonGalleryInplaceBorderNormal( COLORREF( -1L ) )
	, m_clrRibbonGalleryInplaceBorderHover( COLORREF( -1L ) )
	, m_clrRibbonGalleryInplaceBkgndNormal( COLORREF( -1L ) )
	, m_clrRibbonGalleryInplaceBkgndHover( COLORREF( -1L ) )

	, m_rcRibbonGalleryScrollFill( COLORREF( -1L ) )
	, m_rcRibbonGalleryScrollButtonPadding( 0, 0, 0, 0 )
	, m_nHeightRibbonGalleryScrollButton( -1 )
	, m_nIndexRibbonGalleryScrollButtonDisabled( -1 )
	, m_nIndexRibbonGalleryScrollButtonNormal( -1 )
	, m_nIndexRibbonGalleryScrollButtonHover( -1 )
	, m_nIndexRibbonGalleryScrollButtonPressed( -1 )

	, m_sizeAboveTheRibbonShiftQACEB( 0, 0 )

	, m_nRibbonFileButtonMenuIntersectionHeight( 0 )

	, m_clrRibbonComboBackGroundNormal( COLORREF(-1L) )
	, m_clrRibbonComboBackGroundDisabled( COLORREF(-1L) )

#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	, m_sizeRibbonComboBoxDropDown( 15, 20 )
	, m_rcRibbonPaddingComboBoxDropDown( 1, 1, 1, 1 )

	, m_clrRibbonModeMenuTextNormal( COLORREF( -1L ) )
	, m_rcRibbonModeMenuBorderPadding( 3, 3, 3, 3 )
	, m_rcRibbonModeMenuMetrics( 1, 1, 1, 1 )

	, m_rcPaddingRibbonMenuResizingMarginHV( 0, 0, 0, 0 )
	, m_rcPaddingRibbonMenuResizingMarginV( 0, 0, 0, 0 )

	// tool buttons 2007
	, m_rcPaddingOfButtonTS( 3, 3, 3, 3 )
	, m_rcPaddingOfButtonSS( 3, 3, 3, 3 )
	, m_rcPaddingOfButtonLSM( 3, 3, 3, 3 )
	//, m_rcPaddingOfButtonLSB( 3, 3, 3, 3 )
	, m_rcPaddingOfButtonLSXM( 3, 3, 3, 3 )
	, m_rcPaddingOfButtonLSXB( 3, 3, 3, 3 )
	, m_rcPaddingOfToolButtonSeparator( 0, 3, 0, 3 )
	, m_rcPaddingOfLargeButtonSeparator( 2, 0, 2, 0 )
	, m_nHeightOfButtonTS( 22 )
	, m_nHeightOfButtonSS( 22 )
	, m_nHeightOfButtonLSM( 56 )
	//, m_nHeightOfButtonLSB( 26 )
	, m_nHeightOfButtonLSXM( 39 )
	, m_nHeightOfButtonLSXB( 27 )

	, m_rcAdvTipPaddingBorder( 3, 3, 3, 3 )
	, m_rcAdvTipPaddingGradient( 1, 1, 1, 1 )
	, m_clrAdvTipGradientTop( RGB(255,255,255) )
	, m_clrAdvTipGradientBottom( RGB(204,219,240) )
	, m_clrAdvTipText( RGB(64,64,64) )
	, m_bAdvTipOnePxExcludeMode( true )

	, m_clrMenuCaptionText( RGB(0,0,0) )
	, m_rcMenuCaptionBmpPadding( 0, 0, 0, 0 )

	, m_rcPaddingRibbonFileMenuBigBorder( 0, 0, 0, 0 )
	, m_rcPaddingRibbonFileMenuOptionsButton( 0, 0, 0, 0 )

//	, m_clrZsLineLightEnabled( RGB(0,0,0) )
//	, m_clrZsLineLightDisabled( RGB(0,0,0) )
//	, m_clrZsLineDarkEnabled( RGB(0,0,0) )
//	, m_clrZsLineDarkDisabled( RGB(0,0,0) )

	, m_rcProgressBarPartH( 0, 0, 92, 8 )
	, m_rcProgressBarPartV( 0, 92, 8, 182 )
	, m_rcProgressBackgroundPartH( 92, 0, 182, 8 )
	, m_rcProgressBackgroundPartV( 0, 0, 8, 92 )
	, m_rcProgressBarPaddingH( 1, 1, 10, 1 )
	, m_rcProgressBarPaddingV( 1, 10, 1, 1 )
	, m_rcProgressBackgroundPaddingH( 0, 0, 0, 0 )
	, m_rcProgressBackgroundPaddingV( 0, 0, 0, 0 )
	, m_rcProgressBorderPaddingH( 2, 2, 2, 2 )
	, m_rcProgressBorderPaddingV( 2, 2, 2, 2 )
{
	m_bUseTahomaFont = false;
#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_bPnPaneCaptFontBold = true;
	m_strPnPaneCaptCustomFontFaceName = _T("Arial");
	// simple/gradient version of page navigator
	m_arrClrPnCaptNormal[0]  = RGB(248,248,249);
	m_arrClrPnCaptNormal[1]  = RGB(223,226,229);
	m_arrClrPnCaptNormal[2]  = RGB(199,203,209);
	m_arrClrPnCaptNormal[3]  = RGB(220,223,226);
	m_arrClrPnCaptActive[0]  = RGB(255,217,170);
	m_arrClrPnCaptActive[1]  = RGB(255,188,111);
	m_arrClrPnCaptActive[2]  = RGB(255,171, 63);
	m_arrClrPnCaptActive[3]  = RGB(254,225,123);
	m_arrClrPnCaptHover[0]   = RGB(255,254,228);
	m_arrClrPnCaptHover[1]   = RGB(255,233,168);
	m_arrClrPnCaptHover[2]   = RGB(255,215,103);
	m_arrClrPnCaptHover[3]   = RGB(255,230,159);
	m_arrClrPnCaptPressed[0] = RGB(255,189,105);
	m_arrClrPnCaptPressed[1] = RGB(255,173, 67);
	m_arrClrPnCaptPressed[2] = RGB(251,140, 60);
	m_arrClrPnCaptPressed[3] = RGB(255,187,103);
	m_arrClrPnSplitter[0]    = RGB(255,255,255);
	m_arrClrPnSplitter[1]    = RGB(196,200,206);
	m_clrPnSplitterDots		 = RGB(124,124,124);
	m_clrPnCaptText			 = RGB(0,0,0); 
	m_arrClrPnItemText[0]    = RGB(0,0,0);
	m_arrClrPnItemText[1]    = RGB(55,60,67);
	m_clrPnConfigButton		 = RGB(49,52,49); 
	// bitmap based version of page navigator
INT nPnIndex, nPnCount = INT(ePn_Count);
	for( nPnIndex = 0; nPnIndex < nPnCount; nPnIndex ++ )
	{
		m_arrClrPnItemTextBmpVer[nPnIndex] = m_arrClrPnPaneTextBmpVer[nPnIndex] = COLORREF(-1L);
		m_arrRcPnItemPaddingExpanded[nPnIndex].SetRect( 0, 0, 0, 0 );
		m_arrRcPnItemPaddingCollapsed[nPnIndex].SetRect( 0, 0, 0, 0 );
		m_arrRcPnPanePadding[nPnIndex].SetRect( 0, 0, 0, 0 );
	}
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	// tool buttons 2007
INT nInitIndex, nInitCount;
	nInitCount = sizeof(m_arrIndicesButtonTS)/sizeof(m_arrIndicesButtonTS[0]);
	for( nInitIndex = 0; nInitIndex < nInitCount; nInitIndex++ )
		m_arrIndicesButtonTS[nInitIndex] = -1;
	nInitCount = sizeof(m_arrIndicesButtonSS_Left)/sizeof(m_arrIndicesButtonSS_Left[0]);
	for( nInitIndex = 0; nInitIndex < nInitCount; nInitIndex++ )
		m_arrIndicesButtonSS_Left[nInitIndex] = -1;
	nInitCount = sizeof(m_arrIndicesButtonSS_Right)/sizeof(m_arrIndicesButtonSS_Right[0]);
	for( nInitIndex = 0; nInitIndex < nInitCount; nInitIndex++ )
		m_arrIndicesButtonSS_Right[nInitIndex] = -1;
	nInitCount = sizeof(m_arrIndicesButtonLSM)/sizeof(m_arrIndicesButtonLSM[0]);
	for( nInitIndex = 0; nInitIndex < nInitCount; nInitIndex++ )
		m_arrIndicesButtonLSM[nInitIndex] = -1;
//	nInitCount = sizeof(m_arrIndicesButtonLSB)/sizeof(m_arrIndicesButtonLSB[0]);
//	for( nInitIndex = 0; nInitIndex < nInitCount; nInitIndex++ )
//		m_arrIndicesButtonLSB[nInitIndex] = -1;
	nInitCount = sizeof(m_arrIndicesButtonLSXM)/sizeof(m_arrIndicesButtonLSXM[0]);
	for( nInitIndex = 0; nInitIndex < nInitCount; nInitIndex++ )
		m_arrIndicesButtonLSXM[nInitIndex] = -1;
	nInitCount = sizeof(m_arrIndicesButtonLSXB)/sizeof(m_arrIndicesButtonLSXB[0]);
	for( nInitIndex = 0; nInitIndex < nInitCount; nInitIndex++ )
		m_arrIndicesButtonLSXB[nInitIndex] = -1;

	VERIFY(
		m_bmpAdvTipBorder.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_ADV_TIP_BORDER )
			)
		);
	m_bmpAdvTipBorder.Make32();
	m_bmpAdvTipBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpAdvTipBorder.PreMultiplyRGBChannels();
	m_bmpAdvTipBorder.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpProgressMainH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_PROGRESS_MAIN )
			)
		);
	VERIFY(
		m_bmpProgressMainV.CreateRotated9xStack(
			m_bmpProgressMainH,
			270,
			1,
			m_bmpProgressMainH.GetSize().cx,
			m_bmpProgressMainH.GetSize().cy,
			true,
			true
			)
		);
	VERIFY(
		m_bmpProgressBorderH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_PROGRESS_BORDER )
			)
		);
	VERIFY(
		m_bmpProgressBorderV.CreateRotated9xStack(
			m_bmpProgressBorderH,
			270,
			1,
			m_bmpProgressBorderH.GetSize().cx,
			m_bmpProgressBorderH.GetSize().cy,
			true,
			true
			)
		);
}

CExtPaintManagerOffice2007_Impl::~CExtPaintManagerOffice2007_Impl()
{
}

void CExtPaintManagerOffice2007_Impl::PaintComboFrame(
	CDC & dc,
	CExtPaintManager::PAINTCOMBOFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintComboFrame(
			dc,
			_pcfd
			);
		return;
	}

	if(		_pcfd.m_pHelperSrc != NULL
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
		&&	( ((CExtPopupMenuWnd*)_pcfd.m_pHelperSrc)->TrackFlagsGet() & TPMX_RIBBON_MODE ) == 0
		)
	{
		CExtPaintManagerOffice2003::PaintComboFrame( dc, _pcfd );
		return;
	}

CExtComboBoxBase * pWndCombo = NULL;
	if(		_pcfd.m_pHelperSrc != NULL 
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtComboBoxBase ) )
		)
	{
		pWndCombo = STATIC_DOWNCAST( CExtComboBoxBase, _pcfd.m_pHelperSrc );
		ASSERT_VALID( pWndCombo );
	}

	if(		m_bmpArrComboBoxDropDown.IsEmpty()
		||	_pcfd.m_pHelperSrc == NULL
		||	_pcfd.m_clrForceNABorder != COLORREF(-1L)
		||	_pcfd.m_clrForceNAContent != COLORREF(-1L)
		||	_pcfd.m_clrForceActiveOuterBorder != COLORREF(-1L)
		||	(!	(	_pcfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CComboBox))
				||	_pcfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtBarButton))
				||	_pcfd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtPopupMenuWnd))
				)
			)
		||	(! GetCb2DbTransparentMode(_pcfd.m_pHelperSrc) )
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerOffice2003::PaintComboFrame( dc, _pcfd );
		if( (!_pcfd.m_bEnabled) && pWndCombo != NULL )
		{
			ASSERT_VALID( pWndCombo );
			CRect rcClip( _pcfd.m_rcClient );
			rcClip.DeflateRect(1,1);
			dc.ExcludeClipRect( &rcClip );
			CExtPaintManagerOffice2003::PaintDockerBkgnd( true, dc, pWndCombo );
			dc.SelectClipRgn( NULL );
		}
		return;
	}
bool bPopupMenuComboFieldMode = false;
	if(		_pcfd.m_pHelperSrc != NULL
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
		)
		bPopupMenuComboFieldMode = true;

INT nDD = GetDropDownButtonWidth( _pcfd.m_pHelperSrc, _pcfd.m_lParam );
CRect rcClient( _pcfd.m_rcClient );
CRect rcEraser( rcClient );
	if( ! bPopupMenuComboFieldMode )
		rcEraser.DeflateRect(1,1);
CRect rcHoverFrame( rcEraser );
CRect rcDDButton( rcEraser );
	if( _pcfd.m_bRightText )
		rcDDButton.right = rcDDButton.left + nDD;
	else
		rcDDButton.left = rcDDButton.right - nDD;
	if( bPopupMenuComboFieldMode )
	{
		rcDDButton.DeflateRect( 1, 1 );
		if( _pcfd.m_bRightText )
			rcDDButton.right -= 2;
		else
			rcDDButton.left += 2;
	}
CRect rcClientItem( rcEraser );
	rcClientItem.DeflateRect( 1, 1, 3, 1 );
	if( _pcfd.m_bRightText )
		rcClientItem.left += rcDDButton.Width();
	else
		rcClientItem.right -= rcDDButton.Width();
	if( bPopupMenuComboFieldMode )
		rcClientItem.InflateRect(1,1);

CRgn rgnClip, rgnClientItem;
	if(		(! bPopupMenuComboFieldMode )
		&&	rgnClip.CreateRectRgnIndirect(&rcClient)
		&&	rgnClientItem.CreateRectRgnIndirect(&rcClientItem)
		&&	rgnClip.CombineRgn( &rgnClip, &rgnClientItem,  RGN_DIFF ) != ERROR
		)
		dc.SelectClipRgn( &rgnClip );

	if( pWndCombo != NULL )
	{
		ASSERT_VALID( pWndCombo );
		if( ! CExtPaintManagerOffice2003::PaintDockerBkgnd( true, dc, pWndCombo ) )
		{
			if( rgnClip.GetSafeHandle() != NULL )
				dc.SelectClipRgn( NULL );
			CExtPaintManagerXP::PaintComboFrame( dc, _pcfd );
			return;
		}
	} // if( pWndCombo != NULL )

COLORREF clrWindow = COLORREF(-1L);
	if( pWndCombo != NULL )
		clrWindow = pWndCombo->GetBkColor();
	if( clrWindow == COLORREF(-1L) )
	{
		COLORREF clrSysBk = GetColor( _pcfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE, _pcfd.m_pHelperSrc,  _pcfd.m_lParam  );
		clrWindow = clrSysBk;
	}
	if( ! bPopupMenuComboFieldMode )
	{
		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );

		if( _pcfd.m_bRightText )
			rcEraser.left += nDD;
		else
			rcEraser.right -= nDD;

		INT nLeftDX = _pcfd.m_bRightText ? 1 : 0;
		INT nRightDX = _pcfd.m_bRightText ? 0 : 1;

		rcEraser.DeflateRect( _pcfd.m_bRightText ? -1 : 0, 1, _pcfd.m_bRightText ? 0 : -1, 1 );
 		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );
 
 		rcEraser.DeflateRect( 1, 0, 1, 0 );
 		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );

		rcEraser.DeflateRect( nLeftDX, 0, nRightDX, 0 );
		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );

		rcEraser.DeflateRect( nLeftDX, 0, nRightDX, 0 );
		dc.Draw3dRect( rcEraser, clrWindow, clrWindow );
	}
// normal=0, hover=1, pressed=2, disabled=3
int nIdx = 3;
	if( _pcfd.m_bEnabled )
	{
		if( _pcfd.m_bPushed )
			nIdx = 2;
		else if( _pcfd.m_bHover )
			nIdx = 1;
		else
			nIdx = 0;
	} // if( _pcfd.m_bEnabled )
CRect rcSrc( 0, 0, m_sizeComboBoxDropDown.cx, m_sizeComboBoxDropDown.cy );
	rcSrc.OffsetRect( 0, m_sizeComboBoxDropDown.cy * nIdx );
	m_bmpArrComboBoxDropDown.AlphaBlendSkinParts(
		dc.m_hDC,
		rcDDButton,
		rcSrc,
		m_rcPaddingComboBoxDropDown,
		CExtBitmap::__EDM_STRETCH,
		true
		);
COLORREF clrBorder = m_arrClrComboBoxBorder[nIdx];
	dc.Draw3dRect( rcHoverFrame, clrBorder, clrBorder );
	if(		(! bPopupMenuComboFieldMode )
		&&	rgnClip.GetSafeHandle() != NULL
		)
		dc.SelectClipRgn( NULL );
}

void CExtPaintManagerOffice2007_Impl::PaintControlFrame(
	CDC & dc,
	CExtPaintManager::PAINTCONTROLFRAMEDATA & _pcfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintControlFrame( dc, _pcfd );
		return;
	}
	if(		_pcfd.m_pHelperSrc != NULL
		&&	_pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
		&&	( ((CExtPopupMenuWnd*)_pcfd.m_pHelperSrc)->TrackFlagsGet() & TPMX_RIBBON_MODE ) == 0
		)
	{
		CExtPaintManagerOffice2003::PaintControlFrame( dc, _pcfd );
		return;
	}

COLORREF clrForceInner = COLORREF( -1L );
COLORREF clrForceOuter = COLORREF( -1L );
	if( _pcfd.m_pHelperSrc != NULL )
	{
#ifndef __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDurationWnd ) ) )
		{
			CExtDurationWnd * pWnd =
				DYNAMIC_DOWNCAST( CExtDurationWnd, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
			}
		}
#endif // __EXT_MFC_NO_DURATIONWND
		if( _pcfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtEdit ) ) )
		{
			CExtEdit * pWnd = DYNAMIC_DOWNCAST( CExtEdit, _pcfd.m_pHelperSrc );
			if( pWnd != NULL )
			{
				ASSERT_VALID( pWnd );
				clrForceInner = pWnd->GetBkColor();
				CWnd * pWndParent = pWnd->GetParent();
				if( pWndParent != NULL )
				{
					ASSERT_VALID( pWndParent );
					if( pWndParent->IsKindOf( RUNTIME_CLASS( CExtResizableDialog ) ) )
					{
						CExtResizableDialog * pDlg =
							DYNAMIC_DOWNCAST( CExtResizableDialog, pWndParent );
						if( pDlg != NULL )
							clrForceOuter = pDlg->GetBkColor();
					}
					else if( pWndParent->IsKindOf( RUNTIME_CLASS( CDialog ) ) )
					{
						clrForceOuter = ::GetSysColor( COLOR_3DFACE );
					}
				}
			}
		}
	} // if( _pcfd.m_pHelperSrc != NULL )

COLORREF clrInner =
	( clrForceInner != COLORREF( -1L ) ) 
		? clrForceInner 
		: GetColor( 
			( ! _pcfd.m_bEnabled ) 
				? COLOR_3DFACE 
				: COLOR_WINDOW, 
			_pcfd.m_pHelperSrc, 
			_pcfd.m_lParam 
			);

COLORREF clrIn = GetColor( COLOR_WINDOW, _pcfd.m_pHelperSrc, _pcfd.m_lParam );
COLORREF clrOut = clrForceOuter;
	if( _pcfd.m_bEnabled )
	{
		clrIn = m_arrClrComboBoxBorder[1];
		if( _pcfd.m_bHover && _pcfd.m_bFocus )
			clrOut = m_arrClrComboBoxBorder[1];
	}

CRect rcItem( _pcfd.m_rcClient );
	if( clrOut != COLORREF(-1L) )
		dc.Draw3dRect( rcItem, clrOut, clrOut );

	rcItem.DeflateRect(1,1);
	dc.Draw3dRect( rcItem, clrIn, clrIn );
	
	rcItem.DeflateRect(1,1);
	dc.Draw3dRect( rcItem, clrInner, clrInner );

	if( clrOut == COLORREF(-1L) )
	{
		CRect rcClip( _pcfd.m_rcClient );
		rcClip.DeflateRect(1,1);
		CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, _pcfd.m_pHelperSrc );
		if( pWnd != NULL )
		{
			ASSERT_VALID( pWnd );
			dc.ExcludeClipRect( &rcClip );
			CExtPaintManagerOffice2003::PaintDockerBkgnd( true, dc, pWnd );
			dc.SelectClipRgn( NULL );
		}
	}
}

void CExtPaintManagerOffice2007_Impl::PaintToolbarTextField(
	CDC & dc,
	CExtPaintManager::PAINTTOOLBARTEXTFIELDDATA & _ptbtfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintToolbarTextField( dc, _ptbtfd );
		return;
	}
COLORREF clrDkBorder = GetColor( XPCLR_HILIGHT_BORDER, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
COLORREF clrForceBk = COLORREF(-1L);
CRect rcTextFieldOuter( _ptbtfd.m_rcTextField );
bool bRibbonMode = false;
CExtBarButton * pTBB = NULL;
	if( _ptbtfd.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _ptbtfd.m_pHelperSrc );
		pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ptbtfd.m_pHelperSrc );
		if( pTBB != NULL )
		{
			ASSERT_VALID( pTBB );
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
			CExtToolControlBar * pBar = pTBB->GetBar();
			if( pBar != NULL )
			{
				ASSERT_VALID( pBar );
				if( pBar->IsKindOf( RUNTIME_CLASS(CExtRibbonPage) ) )
				{
					bRibbonMode = true;
					rcTextFieldOuter.OffsetRect( 0, -1 );
					rcTextFieldOuter.InflateRect( 3, 1, 2, 4 );
#ifndef __EXT_MFC_NO_BUILTIN_TEXTFIELD
					if(		pTBB != NULL
						&&	CExtBarTextFieldButton::g_pBtnEditing != pTBB 
						)
					{
						if(	 _ptbtfd.m_bEnabled  )
						{
							if( ! ( _ptbtfd.m_bPushed || _ptbtfd.m_bHover ) ) 
								clrForceBk = m_clrRibbonComboBackGroundNormal;
						}
						else
								clrForceBk = m_clrRibbonComboBackGroundDisabled;
					}
#endif // __EXT_MFC_NO_BUILTIN_TEXTFIELD
				}
			}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		}
	}
	if( (!bRibbonMode) && ( _ptbtfd.m_bHover || _ptbtfd.m_bPushed || (!_ptbtfd.m_bEnabled) ) )
			rcTextFieldOuter.InflateRect( 1, 1 );
	if( _ptbtfd.m_bComboField )
	{
		if( bRibbonMode )
		{
			int nIdx = -1; // 4; +288
			int nIdxBorder = 3;
			if( _ptbtfd.m_bEnabled )
			{
				if( _ptbtfd.m_bPushed )
				{
					nIdx = 3;
					nIdxBorder = 2;
				} // if( _ptbtfd.m_bPushed )
				else if( _ptbtfd.m_bHover )
				{
					nIdx = 2;
					nIdxBorder = 1;
#ifndef __EXT_MFC_NO_BUILTIN_TEXTFIELD
					if(		pTBB != NULL
						&&	CExtBarTextFieldButton::g_pBtnEditing != pTBB
						&&	( ! pTBB->GetBar()->m_bLastDropDownHT )
						)
					{
						nIdx = 1;
						nIdxBorder = 2;
					}
#endif // __EXT_MFC_NO_BUILTIN_TEXTFIELD
				} // else if( _ptbtfd.m_bHover )
				else
				{
					nIdx = 0;
					nIdxBorder = 0;
					if( pTBB != NULL )
					{
						bool bForceHoverMode = false;
						CExtToolControlBar * pBar = pTBB->GetBar();
						if( pBar != NULL )
						{
							ASSERT_VALID( pBar );
							if( pBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) ) )
							{
								INT nFTI = ((CExtMenuControlBar*)pBar)->_FlatTrackingIndexGet();
								if(		nFTI >= 0
									&&	nFTI == pBar->_GetIndexOf( pTBB )
									)
									bForceHoverMode = true;
							} // if( pBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) ) )
						} // if( pBar != NULL )
#ifndef __EXT_MFC_NO_BUILTIN_TEXTFIELD
						if( ( ! bForceHoverMode ) && CExtBarTextFieldButton::g_pBtnEditing == pTBB )
							bForceHoverMode = true;
#endif // __EXT_MFC_NO_BUILTIN_TEXTFIELD
						if( bForceHoverMode )
						{
							nIdx = 2;
							nIdxBorder = 1;
						} // if( bForceHoverMode )
					} // if( pTBB != NULL )
				} // else from else if( _ptbtfd.m_bHover )
			} // if( _ptbtfd.m_bEnabled )
			// paint combo or date field
			INT nDD = GetDropDownButtonWidth( _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
			rcTextFieldOuter.right += nDD;
			dc.FillSolidRect(
				&rcTextFieldOuter,
				( clrForceBk != COLORREF(-1L) ) ? clrForceBk : ( ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE ) )
				);
			COLORREF clrBorder = m_arrClrComboBoxBorder[ nIdxBorder ];
			dc.Draw3dRect( rcTextFieldOuter, clrBorder, clrBorder );
			CRect rcBtn( rcTextFieldOuter );
			rcBtn.left = rcBtn.right - nDD;
			if( nIdx >= 0 )
			{
				CRect rcSrc( 0, 0, m_sizeRibbonComboBoxDropDown.cx, m_sizeRibbonComboBoxDropDown.cy );
				rcSrc.OffsetRect( 0, m_sizeRibbonComboBoxDropDown.cy * nIdx );
				m_bmpArrRibbonComboBoxDropDown.AlphaBlendSkinParts(
					dc.m_hDC,
					rcBtn,
					rcSrc,
					m_rcRibbonPaddingComboBoxDropDown,
					CExtBitmap::__EDM_STRETCH,
					true
					);
			} // if( nIdx >= 0 )
			// paint arrow down
			CSize szBmpDDA = m_bmpRibbonDDA.GetSize();
			CRect rcSrcDDA( 0, 0, szBmpDDA.cx, szBmpDDA.cy );
			CRect rcDstDDA( rcBtn.left, rcBtn.top, rcBtn.left + szBmpDDA.cx, rcBtn.top + szBmpDDA.cy );
			rcDstDDA.OffsetRect( ( rcBtn.Width() - szBmpDDA.cx ) / 2, ( rcBtn.Height() - szBmpDDA.cy ) / 2 );
			m_bmpRibbonDDA.AlphaBlendSkinParts(
				dc.m_hDC,
				rcDstDDA,
				rcSrcDDA,
				CRect( 0, 0, 0, 0 ),
				CExtBitmap::__EDM_STRETCH,
				true,
				true,
				_ptbtfd.m_bEnabled ? BYTE(255) : BYTE(128)
				);
			rcTextFieldOuter.right -= nDD;
		}
		else
		{
			// paint combo or date field
			INT nDD = CExtPaintManagerOffice2003::GetDropDownButtonWidth( _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
			rcTextFieldOuter.right += nDD;
			CRect rcBtn( rcTextFieldOuter );
			rcBtn.left = rcBtn.right - nDD;
			if(		(!(_ptbtfd.m_bHover || _ptbtfd.m_bPushed))
				&&	_ptbtfd.m_bEnabled 
				) 
			{
				rcBtn.DeflateRect( 3, 1, 1, 1 );
				dc.ExcludeClipRect( &rcBtn );
			}
			dc.FillSolidRect( &rcTextFieldOuter, ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE ) );
			dc.SelectClipRgn( NULL );
			if( _ptbtfd.m_bHover && _ptbtfd.m_bEnabled )
			{
				PAINTPUSHBUTTONDATA _ppbd(
					_ptbtfd.m_pHelperSrc,
					true,
					rcBtn,
					_T(""),
					NULL,
					true,
					_ptbtfd.m_bHover,
					_ptbtfd.m_bPushed,
					false,
					_ptbtfd.m_bEnabled,
					true,
					false,
					false,
					0
					);
				CExtPaintManagerOffice2003::PaintPushButton( dc, _ppbd );
				dc.Draw3dRect( &rcTextFieldOuter, clrDkBorder, clrDkBorder );
			}
			else
			{
				if( ! _ptbtfd.m_bEnabled )
				{
					COLORREF clrBorder = GetColor( XPCLR_TEXT_FIELD_BORDER_DISABLED, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
					dc.Draw3dRect( &rcTextFieldOuter, clrBorder, clrBorder );
				}
			}
			// paint arrow down
			rcBtn.top++;
			if( !_ptbtfd.m_bEnabled )
				rcBtn.left++;
			glyph_t* pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_SMALL_DOWN ];
			ASSERT( pGlyph != NULL );
			COLORREF ColorValues[2] =
			{
				RGB(0,0,0),
				_ptbtfd.m_bEnabled 
					? GetColor( _ptbtfd.m_bPushed ? COLOR_3DDKSHADOW : COLOR_WINDOWTEXT, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam )
					: ::GetSysColor( COLOR_GRAYTEXT )
			};
			PaintGlyphCentered( dc, rcBtn, *pGlyph, ColorValues );
			rcTextFieldOuter.right -= nDD;
		}
	} // if( _ptbtfd.m_bComboField )
	else
	{
		// paint text field
		dc.FillSolidRect(
			&rcTextFieldOuter,
			( clrForceBk != COLORREF(-1L) )
				? clrForceBk
				: ( ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOW : COLOR_3DFACE ) )
			);
		if( _ptbtfd.m_bEnabled )
		{
			if( _ptbtfd.m_bHover || _ptbtfd.m_bPushed )
				dc.Draw3dRect( &rcTextFieldOuter, clrDkBorder, clrDkBorder );
		}
		else
		{
			COLORREF clrBorder = GetColor( XPCLR_TEXT_FIELD_BORDER_DISABLED, _ptbtfd.m_pHelperSrc, _ptbtfd.m_lParam );
			dc.Draw3dRect( &rcTextFieldOuter, clrBorder, clrBorder );
		}
	} // else from if( _ptbtfd.m_bComboField )
	if( ! _ptbtfd.m_sText.IsEmpty() )
	{
		COLORREF clrTextOld = dc.SetTextColor( ::GetSysColor( _ptbtfd.m_bEnabled ? COLOR_WINDOWTEXT : COLOR_GRAYTEXT ) );
		CFont * pFontOld = dc.SelectObject( &m_FontNormal );
		int nBkModeOld = dc.SetBkMode( TRANSPARENT );
		CRect rcText( _ptbtfd.m_rcTextField );
		rcText.left += 5;
		rcText.top += 2;
		bool bRTL = ( (g_ResourceManager->OnQueryLangLayout()&LAYOUT_RTL) != 0 ) ? true : false;
		DWORD dwDtAlignFlags = bRTL ? (DT_RTLREADING|DT_RIGHT) : 0;
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(_ptbtfd.m_sText), _ptbtfd.m_sText.GetLength(), &rcText, _ptbtfd.m_nDrawTextFlags|dwDtAlignFlags, 0 );
		dc.SetBkMode( nBkModeOld );
		dc.SelectObject( pFontOld );
		dc.SetTextColor( clrTextOld );
	} // if( ! _ptbtfd.m_sText.IsEmpty() )
}

#if (!defined __EXT_MFC_NO_TAB_CTRL)

bool CExtPaintManagerOffice2007_Impl::QueryTabWndHoverChangingRedraw(
	const CExtTabWnd * pWndTab,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pWndTab );
	if( IsHighContrast() )
		return CExtPaintManagerXP::QueryTabWndHoverChangingRedraw( pWndTab, lParam  );	
	return true;
}

void CExtPaintManagerOffice2007_Impl::PaintTabbedTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this);
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabbedTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
		return;
	}
	if(		pHelperSrc == NULL
		||	(! pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) ) )
		)
		CExtPaintManager::PaintTabbedTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
	CExtPaintManagerOffice2003::PaintDockerBkgnd( true, dc, (CWnd*)pHelperSrc );
}

void CExtPaintManagerOffice2007_Impl::PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this);
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
		return;
	}
	if(		pHelperSrc == NULL
		||	(! pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) ) )
		)
		CExtPaintManager::PaintTabbedTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
	CExtPaintManagerOffice2003::PaintDockerBkgnd( true, dc, (CWnd*)pHelperSrc );
//DWORD dwOrientation = ((CExtTabWnd*)pHelperSrc)->OrientationGet();
e_TabShapeOrientationIndex_t eTSOI = __ETSOI_TOP;
CRect rcPaint( 0, 0, 0, 0 );
 	if( bGroupedMode )
 		return;
// 	if( bGroupedMode )
// 	{
// 		switch( dwOrientation )
// 		{
// 		case __ETWS_ORIENT_TOP:
// 			dwOrientation = __ETWS_ORIENT_BOTTOM;
// 			break;
// 		case __ETWS_ORIENT_BOTTOM:
// 			dwOrientation = __ETWS_ORIENT_TOP;
// 			break;
// 		case __ETWS_ORIENT_LEFT:
// 			dwOrientation = __ETWS_ORIENT_RIGHT;
// 			break;
// 		case __ETWS_ORIENT_RIGHT:
// 			dwOrientation = __ETWS_ORIENT_LEFT;
// 			break;
// 		}
// 	}
 	switch( dwOrientation )
	{
	case __ETWS_ORIENT_TOP:
		eTSOI = __ETSOI_TOP;
		rcPaint.SetRect(
			rcClient.left,
			rcTabItemsArea.bottom - m_arrTabAreaMargins[eTSOI],
			rcClient.right,
			rcClient.bottom
			);
		break;
	case __ETWS_ORIENT_BOTTOM:
		eTSOI = __ETSOI_BOTTOM;
		rcPaint.SetRect(
			rcClient.left,
			rcClient.top,
			rcClient.right,
			rcTabItemsArea.top + m_arrTabAreaMargins[eTSOI]
			);
		break;
	case __ETWS_ORIENT_LEFT:
		eTSOI = __ETSOI_LEFT;
		rcPaint.SetRect(
			rcTabItemsArea.right - m_arrTabAreaMargins[eTSOI],
			rcClient.top,
			rcClient.right,
			rcClient.bottom
			);
		break;
	case __ETWS_ORIENT_RIGHT:
		eTSOI = __ETSOI_RIGHT;
		rcPaint.SetRect(
			rcClient.left,
			rcClient.top,
			rcTabItemsArea.left + m_arrTabAreaMargins[eTSOI],
			rcClient.bottom
			);
		break;
	}
const CExtBitmap & bmp = m_arrBmpTabArea[ eTSOI ];
	if( bmp.IsEmpty() )
		return;
CSize _sizeBmp = bmp.GetSize();
	switch( eTSOI )
	{
	case __ETSOI_TOP:
		rcPaint.bottom = rcPaint.top + _sizeBmp.cy;
		break;
	case __ETSOI_BOTTOM:
		rcPaint.top = rcPaint.bottom - _sizeBmp.cy;
		break;
	case __ETSOI_LEFT:
		rcPaint.right = rcPaint.left + _sizeBmp.cx;
		break;
	case __ETSOI_RIGHT:
		rcPaint.left = rcPaint.right - _sizeBmp.cx;
		break;
	}
	bmp.AlphaBlendSkinParts(
		dc.m_hDC,
		rcPaint,
		m_arrRectTabAreaPadding[eTSOI],
		CExtBitmap::__EDM_STRETCH,
		true,
		true
		);
}

void CExtPaintManagerOffice2007_Impl::PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bTopLeft,
	bool bHorz,
	bool bSelected,
	bool bCenteredText,
	bool bGroupedMode,
	bool bInGroupActive,
	bool bInvertedVerticalMode,
	const CRect & rcEntireItem,
	CSize sizeTextMeasured,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator, // = COLORREF(-1L)
	bool bDwmMode // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabItem(
			dc,
			rcTabItemsArea,
			bTopLeft,
			bHorz,
			bSelected,
			bCenteredText,
			bGroupedMode,
			bInGroupActive,
			bInvertedVerticalMode,
			rcEntireItem,
			sizeTextMeasured,
			pFont,
			sText,
			pIcon,
			pHelperSrc,
			lParam,
			clrForceText,
			clrForceTabBk,
			clrForceTabBorderLT,
			clrForceTabBorderRB,
			clrForceTabSeparator,
			bDwmMode
			);
		return;
	}

CExtCmdIcon * pIconTabItemCloseButton = NULL;
CExtCmdIcon::e_paint_type_t ePaintStateITICB =
		(CExtCmdIcon::e_paint_type_t) CExtCmdIcon::__PAINT_INVISIBLE;
CRect rcTabItemCloseButton( 0, 0, 0, 0 );
CExtBarButton * pTBB = NULL;
CExtTabWnd * pTabs = NULL;
CExtTabWnd::TAB_ITEM_INFO * pTII = NULL;
bool bNoPrefix = false;
	if( pHelperSrc != NULL )
	{
		pTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( pTabs != NULL )
		{
			ASSERT_VALID( pTabs );
			pTII = pTabs->ItemGet( LONG( lParam ) );
			ASSERT( pTII != NULL );
			ASSERT_VALID( pTII );
			pIconTabItemCloseButton =
				pTabs->OnTabWndQueryItemCloseButtonShape( pTII );
			if( pIconTabItemCloseButton != NULL )
			{
				rcTabItemCloseButton = pTII->CloseButtonRectGet();
				ePaintStateITICB = (CExtCmdIcon::e_paint_type_t)
					pTabs->OnTabWndQueryItemCloseButtonPaintState( pTII );
			} // if( pIconTabItemCloseButton != NULL )
			bNoPrefix = ( ( pTabs->GetTabWndStyleEx() & __ETWS_EX_NO_PREFIX ) != 0 ) ? true : false;
		} // if( pTabs != NULL )
		else
		{
			pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
#ifdef _DEBUG
			if( pTBB != NULL )
			{
				ASSERT_VALID( pTBB );
			} // if( pTBB != NULL )
#endif // _DEBUG
		} // else from if( pTabs != NULL )
	} // if( pHelperSrc != NULL )

LPCTSTR _sText = LPCTSTR(sText);

bool bDrawIcon = (		
			pIcon != NULL 
		&&	(! pIcon->IsEmpty() ) 
		&&	( pTabs == NULL || (pTabs->GetTabWndStyle()&__ETWS_HIDE_ICONS) == 0  ) 
		);
	if( bGroupedMode )
		bSelected = false;

bool bEnabled = true;
	if( pTII != NULL )
		bEnabled = pTII->EnabledGet();
	else if( pTBB != NULL )
		bEnabled = pTBB->IsEnabled();

bool bHover = false, bPressed = false;
INT nIdxTabShape = m_nIdxTabShapeDisabled; // for disabled state
	if( pTabs != NULL && pTabs->ItemGet( LONG(lParam) )->EnabledGet() )
	{
		bHover = ( pTabs->GetHoverTrackingItem() == lParam ) ? true : false;
		bPressed = ( pTabs->GetPushedTrackingItem() == lParam ) ? true : false;
	} // if( pTabs != NULL && pTabs->ItemGet( LONG(lParam) )->EnabledGet() )
	else if( pTBB != NULL )
	{
		bHover = pTBB->IsHover();
		bPressed = pTBB->IsPressed();
	} // else if( pTBB != NULL )

bool bDetectedDynTPC = false;
	bDetectedDynTPC;
#if (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)
	if( pTII != NULL )
	{
		CObject * pObject = pTII->EventProviderGet();
		if( pObject != NULL )
		{
			CExtDynamicControlBar * pBar = DYNAMIC_DOWNCAST( CExtDynamicControlBar, pObject );
			if( pBar != NULL )
			{
				bool bFlashCaptionHighlightedState = false;
				if( pBar->FlashCaptionIsInProgress( &bFlashCaptionHighlightedState ) )
				{
					if( bFlashCaptionHighlightedState )
					{
						clrForceText = pBar->m_clrFlashCaptionText;
						clrForceTabBk = pBar->m_clrFlashCaptionBackground;
						bSelected = true;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
						bDetectedDynTPC = true;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
					}
				}
			}
		}
	}
#endif// (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)

COLORREF clrText = COLORREF(-1L);
	if( bDwmMode )
		clrText = bSelected ? m_clrTabTextSelectedDWM : m_clrTabTextNormalDWM;
	if( clrText == COLORREF(-1L) )
		clrText = QueryObjectTextColor( dc, bEnabled, false, bHover, bPressed, pHelperSrc, lParam );
	if( clrText == COLORREF(-1L) )
		clrText = bEnabled ? m_clrTabTextNormal : GetColor( CLR_TEXT_DISABLED, pHelperSrc, lParam );

	nIdxTabShape = m_nIdxTabShapeNormal;
	if( bSelected )
	{
		if( bEnabled && ( (! bDwmMode ) || clrText == COLORREF(-1L) ) )
			clrText = m_clrTabTextSelected;
		nIdxTabShape = m_nIdxTabShapeSelected;
		if( bHover && (!bPressed) )
			nIdxTabShape = m_nIdxTabShapeSelectedHover;
	}
	else
	{
		if( bPressed )
			nIdxTabShape = m_nIdxTabShapePressed;
		else if( bHover )
			nIdxTabShape = m_nIdxTabShapeHover;
	}

e_TabShapeOrientationIndex_t eTSOI = __ETSOI_TOP;
	if( bTopLeft )
	{
		if( bHorz )
			eTSOI = __ETSOI_TOP;
		else
			eTSOI = __ETSOI_LEFT;
	}
	else
	{
		if( bHorz )
			eTSOI = __ETSOI_BOTTOM;
		else
			eTSOI = __ETSOI_RIGHT;
	}
	if( bGroupedMode )
	{
		switch( eTSOI )
		{
		case __ETSOI_TOP:
			eTSOI = __ETSOI_BOTTOM;
			break;
		case __ETSOI_BOTTOM:
			eTSOI = __ETSOI_TOP;
			break;
		case __ETSOI_LEFT:
			eTSOI = __ETSOI_RIGHT;
			break;
		case __ETSOI_RIGHT:
			eTSOI = __ETSOI_LEFT;
			break;
		}
	}
COLORREF clrColorizeTabShape = COLORREF(-1L);
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
	if(		pHelperSrc != NULL
		&&	clrForceTabBk != COLORREF(-1L)
		&&	(	bDetectedDynTPC
			||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
			||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
			)
		)
	{
		if( clrForceText != COLORREF(-1L) )
			clrText = clrForceText;
		clrColorizeTabShape = clrForceTabBk;
	}
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
	if(		pHelperSrc != NULL
		&&	clrForceTabBk != COLORREF(-1L)
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
		&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
		)
	{
		if( clrForceText != COLORREF(-1L) )
			clrText = clrForceText;
		clrColorizeTabShape = clrForceTabBk;
	}
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
	if( nIdxTabShape >= 0 )
	{
		bool bSelTrackingMode = false;
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if(		pTBB != NULL
			&&	pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonTabPage ) )
			&&	((CExtRibbonButtonTabPage*)pTBB)->IsSelectedRibbonPage()
			)
		{
			CExtToolControlBar * pToolBar = pTBB->GetBar();
			if( pToolBar != NULL )
			{
				CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
				if(		pMenuBar != NULL
					&&	pMenuBar->IsMenuBarTracking()
					)
				{
					int nFlatTrackingIndex = pMenuBar->_FlatTrackingIndexGet();
					if( nFlatTrackingIndex >= 0 )
					{
						int nIndexOfTBB = pMenuBar->_GetIndexOf( pTBB );
						if( nFlatTrackingIndex == nIndexOfTBB )
						{
							if(! m_arrBmpTabShapeSelArea[0].IsEmpty() )
								bSelTrackingMode = true;
							else
								nIdxTabShape = m_nIdxTabShapeHover;
						}
					}
				}
			}
		}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		const CExtBitmap & _bmpTabShape =
			bSelTrackingMode
				? m_arrBmpTabShapeSelArea[ int(eTSOI) ]
				: m_arrBmpTabShapeNormal[ int(eTSOI) ]
				;
		if( ! _bmpTabShape.IsEmpty() )
		{
			DWORD dwDcLayout = dc.GetLayout();
			if( bDwmMode )
				dc.SetLayout( LAYOUT_LTR );
			CRect rcPadding = m_arrRectTabShapePadding[ int(eTSOI) ];
			CRect rcSrc( 0, 0, m_arrSizeTabShape[int(eTSOI)].cx, m_arrSizeTabShape[int(eTSOI)].cy );
			rcSrc.OffsetRect(
				0,
				m_arrSizeTabShape[int(eTSOI)].cy * nIdxTabShape
				);
			CRect rcPaintTabShape = rcEntireItem;
			switch( eTSOI )
			{
			case __ETSOI_TOP:
			case __ETSOI_BOTTOM:
				rcPaintTabShape.right --;
				break;
			case __ETSOI_LEFT:
			case __ETSOI_RIGHT:
				rcPaintTabShape.bottom --;
				break;
			}
			if( clrColorizeTabShape != COLORREF(-1L) )
			{
				CExtBitmap _bmpTabShape2 = _bmpTabShape;
				_bmpTabShape2.Make32();
				_bmpTabShape2.AdjustHLS( COLORREF(-1L), COLORREF(-1L), 0.0, -0.5, -1.0 );
				_bmpTabShape2.MakeMono( clrColorizeTabShape );
				_bmpTabShape2.AlphaBlendSkinParts(
					dc.m_hDC,
					rcPaintTabShape,
					rcSrc,
					rcPadding,
					CExtBitmap::__EDM_STRETCH,
					true,
					true
					);
			}
			else
				_bmpTabShape.AlphaBlendSkinParts(
					dc.m_hDC,
					rcPaintTabShape,
					rcSrc,
					rcPadding,
					CExtBitmap::__EDM_STRETCH,
					true,
					true
					);
			dc.SetLayout( dwDcLayout );
		}
	}
CRect rcEntireItemX = rcEntireItem;
	rcEntireItemX.DeflateRect( 3, 3 );

	CExtPaintManager::stat_PaintTabItemImpl(
		dc,
		rcTabItemsArea,
		bTopLeft,
		bHorz,
		bSelected,
		bEnabled,
		bCenteredText,
		bGroupedMode,
		bInGroupActive,
		bInvertedVerticalMode,
		bDrawIcon,
		rcEntireItemX,
		sizeTextMeasured,
		pFont,
		_sText,
		bNoPrefix,
		pIcon,
			//		bTopLeft
			//			? ( bSelected ? RGB(255,255,255) : RGB(0,0,0) )
			//			: ( bSelected ? RGB(0,0,0) : RGB(255,255,255) )
		pIconTabItemCloseButton,
		INT(ePaintStateITICB),
		rcTabItemCloseButton,
		clrText,
		COLORREF(-1L), // clrTabBk,
		COLORREF(-1L), // clrTabBorderLT,
		COLORREF(-1L), // clrTabBorderRB,
		COLORREF(-1L),  // clrTabSeparator
		( pTBB != NULL ) ? false : true,
		pHelperSrc,
		bDwmMode
		);

const CExtBitmap & _bmpTabSeparator = m_arrBmpTabSeparator[ int(eTSOI) ];
	if( ! _bmpTabSeparator.IsEmpty() )
	{
		CRect rcPaintSeparator = rcEntireItem;
		CRect rcPadding = m_arrRectTabSeparatorPadding[ int(eTSOI) ];
		CRect rcSrc( 0, 0, m_arrSizeTabSeparator[int(eTSOI)].cx, m_arrSizeTabSeparator[int(eTSOI)].cy );
		e_paint_manager_name_t ePMN = OnQueryPaintManagerName();
		switch( eTSOI )
		{
		case __ETSOI_TOP:
			rcPaintSeparator.left = rcPaintSeparator.right - m_arrSizeTabSeparator[int(eTSOI)].cx;
			rcPaintSeparator.bottom --;
			if( ePMN == Office2007_R2_Obsidian )
				rcPaintSeparator.bottom -= 2;
			break;
		case __ETSOI_BOTTOM:
			rcPaintSeparator.left = rcPaintSeparator.right - m_arrSizeTabSeparator[int(eTSOI)].cx;
			rcPaintSeparator.top ++;
			break;
		case __ETSOI_LEFT:
			rcPaintSeparator.top = rcPaintSeparator.bottom - m_arrSizeTabSeparator[int(eTSOI)].cy;
			rcPaintSeparator.right --;
			break;
		case __ETSOI_RIGHT:
			rcPaintSeparator.top = rcPaintSeparator.bottom - m_arrSizeTabSeparator[int(eTSOI)].cy;
//			rcPaintSeparator.top ++;
			rcPaintSeparator.left ++;
			break;
		}
		BYTE nSCA = BYTE(0x0FF);
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if( pTBB != NULL )
		{
			CExtRibbonButtonTabPage * pRibbonButtonTabPage =
				DYNAMIC_DOWNCAST( CExtRibbonButtonTabPage, pTBB );
			if( pRibbonButtonTabPage != NULL )
				nSCA = pRibbonButtonTabPage->Get2007SeparatorAlpha();
		} // if( pTBB != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		DWORD dwDcLayout = dc.GetLayout();
		if( bDwmMode )
			dc.SetLayout( LAYOUT_LTR );
		_bmpTabSeparator.AlphaBlendSkinParts(
			dc.m_hDC,
			rcPaintSeparator,
			rcSrc,
			rcPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true,
			nSCA
			);
		dc.SetLayout( dwDcLayout );
	} // if( ! _bmpTabSeparator.IsEmpty() )
}

void CExtPaintManagerOffice2007_Impl::PaintTabButton(
	CDC & dc,
	CRect & rcButton,
	LONG nHitTest,
	bool bTopLeft,
	bool bHorz,
	bool bEnabled,
	bool bHover,
	bool bPushed,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bFlat // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabButton(
			dc,
			rcButton,
			nHitTest,
			bTopLeft,
			bHorz,
			bEnabled,
			bHover,
			bPushed,
			bGroupedMode,
			pHelperSrc,
			lParam,
			bFlat
			);
		return;
	}

// 	bTopLeft;
// 	bHorz;
// 	lParam;
// 	if(		pHelperSrc == NULL
// 		||	(! pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) ) )
// 		)
// 	{
		CExtPaintManager::PaintTabButton(
			dc,
			rcButton,
			nHitTest,
			bTopLeft,
			bHorz,
			bEnabled,
			bHover,
			bPushed,
			bGroupedMode,
			pHelperSrc,
			lParam,
			bFlat
			);
// 		return;
// 	}
// LPCTSTR strButtonType = _T("Close");
// 	switch( nHitTest )
// 	{
// 	case __ETWH_BUTTON_LEFTUP:
// 		strButtonType = _T("Up");
// 	break;
// 	case __ETWH_BUTTON_RIGHTDOWN:
// 		strButtonType = _T("Down");
// 	break;
// 	case __ETWH_BUTTON_HELP:
// 		strButtonType = _T("Help");
// 	break;
// 	case __ETWH_BUTTON_CLOSE:
// 		strButtonType = _T("Close");
// 	break;
// 	case __ETWH_BUTTON_TAB_LIST:
// 		strButtonType = _T("TabList");
// 	break;
// 	case __ETWH_BUTTON_SCROLL_HOME:
// 		strButtonType = _T("Home");
// 	break;
// 	case __ETWH_BUTTON_SCROLL_END:
// 		strButtonType = _T("End");
// 	break;
// 	default:
// 		CExtPaintManager::PaintTabButton(
// 			dc,
// 			rcButton,
// 			nHitTest,
// 			bTopLeft,
// 			bHorz,
// 			bEnabled,
// 			bHover,
// 			bPushed,
// 			bGroupedMode,
// 			pHelperSrc,
// 			lParam,
//			bFlat
// 			);
// 	return;
// 	} // switch( nHitTest )
// CExtTabWnd * pWndTab = STATIC_DOWNCAST( CExtTabWnd, pHelperSrc );
// 
// LPCTSTR strGroupped = _T("Simple"); // bGroupedMode ? _T("Groupped") : _T("Simple");
// 
// LPCTSTR strState =
// 		bEnabled
// 		?	(	bPushed
// 					? _T("Pressed")
// 					: bHover ? _T("Hover") : _T("Normal")
// 			)
// 		: _T("Disabled")
// 		;
// //LPCTSTR strSkinnedTabControlType = GetSkinnedTabControlType( pWndTab );
// LPCTSTR strSkinnedTabControlOrientation = GetSkinnedTabControlOrientation( pWndTab );
// CExtSkinGlyph & tabItem = 
// 	m_Skin[_T("TabButton")][strGroupped][strButtonType][strState]
// 		[strSkinnedTabControlOrientation] //[strSkinnedTabControlType]
// 		.Glyph( _T("Area") );
// 	tabItem.Draw( dc.m_hDC, rcButton );
}

void CExtPaintManagerOffice2007_Impl::PaintTabNcAreaRect(
	CDC & dc,
	const RECT & rc,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabNcAreaRect( dc, rc, pHelperSrc, lParam );
		return;
	}
	if(		pHelperSrc == NULL
		||	(! pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) ) )
		||	((CExtTabWnd*)pHelperSrc)->_IsCustomLayoutTabWnd()
		)
	{
		CExtPaintManager::PaintTabNcAreaRect(
			dc,
			rc,
			pHelperSrc,
			lParam
			);
		return;
	}
//	CExtPaintManagerOffice2003::PaintDockerBkgnd( false, dc, (CWnd*)pHelperSrc, lParam );
	dc.FillSolidRect( &rc, GetColor( _2003CLR_GRADIENT_DARK, NULL ) );
}

void CExtPaintManagerOffice2007_Impl::TabWnd_MeasureItemAreaMargins(
	CExtTabWnd * pTabWnd,
	LONG & nSpaceBefore,
	LONG & nSpaceAfter,
	LONG & nSpaceOver
	)
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::TabWnd_MeasureItemAreaMargins( pTabWnd, nSpaceBefore, nSpaceAfter, nSpaceOver );
		return;
	}
	CExtPaintManager::TabWnd_MeasureItemAreaMargins( pTabWnd, nSpaceBefore, nSpaceAfter, nSpaceOver );
}

void CExtPaintManagerOffice2007_Impl::TabWnd_UpdateItemMeasure(
	CExtTabWnd * pTabWnd,
	CExtTabWnd::TAB_ITEM_INFO * pTii,
	CDC & dcMeasure,
	CSize & sizePreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTii );
	ASSERT( dcMeasure.GetSafeHdc() != NULL );
	ASSERT( pTii->GetTabWnd() == pTabWnd );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::TabWnd_UpdateItemMeasure( pTabWnd, pTii, dcMeasure, sizePreCalc );
		return;
	}
	CExtPaintManager::TabWnd_UpdateItemMeasure( pTabWnd, pTii, dcMeasure, sizePreCalc );
	sizePreCalc.cx += 6;
	sizePreCalc.cy += 6;
}

void CExtPaintManagerOffice2007_Impl::TabWnd_AdjustItemCloseButtonRect(
	CRect & rcCloseButton,
	CExtTabWnd * pTabWnd
	)
{
	ASSERT_VALID( this );
	pTabWnd; rcCloseButton;
	//rcCloseButton.OffsetRect( -3, 0 );
}

bool CExtPaintManagerOffice2007_R1::TabWnd_GetParentSizingMargin(
	INT & nMargin,
	DWORD dwOrientation,
	CExtTabWnd * pTabWnd
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTabWnd );
	if( IsHighContrast() )
		return CExtPaintManagerXP::TabWnd_GetParentSizingMargin( nMargin, dwOrientation, pTabWnd );
	if( pTabWnd->_IsCustomLayoutTabWnd() )
		return CExtPaintManagerOffice2007_Impl::TabWnd_GetParentSizingMargin( nMargin, dwOrientation, pTabWnd );
	nMargin = 0;
	return true;
}

void CExtPaintManagerOffice2007_Impl::GetThemeAccentTabColors(
	COLORREF * pClrSetectedTabItemText,
	COLORREF * pClrSetectedTabItemFace, // = NULL
	COLORREF * pClrSetectedTabItemBorderLight, // = NULL
	COLORREF * pClrSetectedTabItemBorderDark, // = NULL
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::GetThemeAccentTabColors(
			pClrSetectedTabItemText,
			pClrSetectedTabItemFace,
			pClrSetectedTabItemBorderLight,
			pClrSetectedTabItemBorderDark,
			pHelperSrc,
			lParam
			);
		return;
	}
	CExtPaintManager::GetThemeAccentTabColors(
		pClrSetectedTabItemText,
		pClrSetectedTabItemFace,
		pClrSetectedTabItemBorderLight,
		pClrSetectedTabItemBorderDark,
		pHelperSrc,
		lParam
		);
}

#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

#if (!defined __EXT_MFC_NO_STATUSBAR)

bool CExtPaintManagerOffice2007_Impl::StatusBar_EraseBackground(
	CDC & dc,
	const RECT & rcClient,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pStatusBar );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::StatusBar_EraseBackground(
				dc,
				rcClient,
				pStatusBar,
				lParam
				);	
	
	if(		m_bmpStatusBkLight.IsEmpty()
		||	m_bmpStatusBkDark.IsEmpty()
		)
		return false;
bool bLastIsDark = true;
INT nPaneIdx, nPaneCount = pStatusBar->GetPaneCount();
	if( nPaneCount > 0 )
	{
		CExtStatusControlBar::e_StatusPaneBackgroundAccent_t eSPBA =
			pStatusBar->OnQueryPaneBackgroundAccent( nPaneCount - 1 );
		if( eSPBA == CExtStatusControlBar::__ESPBA_LIGHT )
			bLastIsDark = false;
	} // if( nPaneCount > 0 )
	if( bLastIsDark )
		m_bmpStatusBkDark.DrawSkinParts(
			dc.m_hDC,
			rcClient,
			m_rcStatusBkPadding,
			CExtBitmap::__EDM_STRETCH
			);
	else
		m_bmpStatusBkLight.DrawSkinParts(
			dc.m_hDC,
			rcClient,
			m_rcStatusBkPadding,
			CExtBitmap::__EDM_STRETCH
			);
	for( nPaneIdx = 0; nPaneIdx < nPaneCount; nPaneIdx++ )
	{
		CExtStatusControlBar::e_StatusPaneBackgroundAccent_t eSPBA =
			pStatusBar->OnQueryPaneBackgroundAccent( nPaneIdx );
		if( bLastIsDark )
		{
			if( eSPBA == CExtStatusControlBar::__ESPBA_LIGHT )
			{
				CRect rcPane;
				pStatusBar->GetItemRect( nPaneIdx, &rcPane );
				rcPane.top = rcClient.top;
				rcPane.bottom = rcClient.bottom;
				if( rcPane.IsRectEmpty() || (! dc.RectVisible( &rcPane ) ) )
					continue;
				m_bmpStatusBkLight.DrawSkinParts(
					dc.m_hDC,
					rcPane,
					m_rcStatusBkPadding,
					CExtBitmap::__EDM_STRETCH
					);
				continue;
			} // if( eSPBA == CExtStatusControlBar::__ESPBA_LIGHT )
		} // if( bLastIsDark )
		else
		{
			if( eSPBA == CExtStatusControlBar::__ESPBA_DARK )
			{
				CRect rcPane;
				pStatusBar->GetItemRect( nPaneIdx, &rcPane );
				rcPane.top = rcClient.top;
				rcPane.bottom = rcClient.bottom;
				if( rcPane.IsRectEmpty() || (! dc.RectVisible( &rcPane ) ) )
					continue;
				m_bmpStatusBkDark.DrawSkinParts(
					dc.m_hDC,
					rcPane,
					m_rcStatusBkPadding,
					CExtBitmap::__EDM_STRETCH
					);
				continue;
			} // if( eSPBA == CExtStatusControlBar::__ESPBA_DARK )
		} // else from if( bLastIsDark )
	} // for( nPaneIdx = 0; nPaneIdx < nPaneCount; nPaneIdx++ )
	return true;
}

bool CExtPaintManagerOffice2007_Impl::StatusBar_PaintSeparator(
	CDC & dc,
	int nPaneIdxAfterSep,
	const RECT & rcPaneBefore,
	const RECT & rcPaneAfter,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::StatusBar_PaintSeparator(
				dc,
				nPaneIdxAfterSep,
				rcPaneBefore,
				rcPaneAfter,
				pStatusBar,
				lParam
				);	
	
	if( m_bmpStatusSeparator.IsEmpty() )
		return false;
CRect rcClient;
	pStatusBar->GetClientRect( &rcClient );
int iWidth = 0;
UINT nIndex = 0, nPaneStyle = 0;
	pStatusBar->GetPaneInfo( nPaneIdxAfterSep, nIndex, nPaneStyle, iWidth );
CRect rcSeparator(
		rcPaneBefore.right,
		rcClient.top,
		rcPaneAfter.left,
		rcClient.bottom
		);
//bool bDisabled = ( ( nPaneStyle & SBPS_DISABLED ) != 0 ) ? true : false;
CSize _size = m_bmpStatusSeparator.GetSize();
int nWidth = rcSeparator.Width();
	if( nWidth != _size.cx )
	{
		rcSeparator.left += ( nWidth - _size.cx ) / 2;
		rcSeparator.right = rcSeparator.left + _size.cx;
	}
	m_bmpStatusSeparator.AlphaBlendSkinParts(
		dc.m_hDC,
		rcSeparator,
		m_rcStatusBkPadding,
		CExtBitmap::__EDM_STRETCH
		);
	return true;
}

bool CExtPaintManagerOffice2007_Impl::StatusBar_PaintPane(
	CDC & dc,
	int nPaneIdx,
	const RECT & rcPane,
	DWORD dwPaneStyle,
	HICON hIcon,
	__EXT_MFC_SAFE_LPCTSTR sPaneText,
	UINT nDrawTextFlags,
	COLORREF clrText,
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pStatusBar );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::StatusBar_PaintPane(
				dc,
				nPaneIdx,
				rcPane,
				dwPaneStyle,
				hIcon,
				sPaneText,
				nDrawTextFlags,
				clrText,
				pStatusBar,
				lParam
				);

bool bDisabled = ( ( dwPaneStyle & SBPS_DISABLED ) != 0 ) ? true : false;
CRect rectPane( rcPane );
	rectPane.DeflateRect( 1, 1 );
CRect rcText( rectPane );
	if( hIcon != NULL )
	{
		CExtCmdIcon _icon;
		_icon.AssignFromHICON( hIcon, true );
		CSize sizeIcon = _icon.GetSize();
		rcText.left += sizeIcon.cx + 1;
		_icon.Paint(
			const_cast < CExtPaintManagerOffice2007_Impl * > ( this ),
			dc,
			rectPane.left,
			rectPane.top + ( rectPane.Height() - sizeIcon.cy ) / 2,
			-1,
			-1
			);
	} // if( hIcon != NULL )
	
int nPaneTextLen = (sPaneText == NULL) ? int(0) : int(_tcslen(sPaneText));
	if(		( !bDisabled )
		||  ( bDisabled && ( !pStatusBar->m_bHideTextOnDisabledPanes ) )
		&&	nPaneTextLen > 0
		)
	{ // if text painting is allowed
		if( rcText.right > rcText.left )
		{
			COLORREF clrStatusPaneTextColor =
				( clrText != COLORREF(-1L) )
					? clrText
					: bDisabled
						? m_clrStatusPaneTextColorDisabled
						: m_clrStatusPaneTextColorNormal;
			if( clrStatusPaneTextColor != COLORREF(-1L) )
			{
				COLORREF clrTextRestore = dc.SetTextColor( clrStatusPaneTextColor );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(sPaneText), nPaneTextLen,
					&rcText,
					nDrawTextFlags, 0
					);
				if( clrTextRestore != COLORREF(-1L) )
					dc.SetTextColor( clrTextRestore );
			} // if( clrStatusPaneTextColor != COLORREF(-1L) )
		} // if( rcText.right > rcText.left )
	} // if text painting is allowed

	return true;
}


bool CExtPaintManagerOffice2007_Impl::StatusBar_QuerySkinSupport(
	const CExtStatusControlBar * pStatusBar,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pStatusBar );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::StatusBar_QuerySkinSupport(
				pStatusBar,
				lParam
				);
	
	return true;
}

#endif // (!defined __EXT_MFC_NO_STATUSBAR)

bool CExtPaintManagerOffice2007_Impl::NcFrame_IsSupported(
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	lParam;
	if( pWnd == NULL )
		return false;
	//ASSERT_VALID( pWnd );
	if( pWnd->GetSafeHwnd() == NULL )
		return false;

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::NcFrame_IsSupported(
				pWnd,
				lParam
				);

//DWORD dwStyle = pWnd->GetStyle();
//	if( (dwStyle&WS_CHILD) != 0 )
//		return false;
	return true;
}

HRGN CExtPaintManagerOffice2007_Impl::NcFrame_GenerateSkinFrameRGN(
	const RECT & rcWnd,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pWnd );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::NcFrame_GenerateSkinFrameRGN(
				rcWnd,
				pWnd,
				lParam
				);
	
	if(		pWnd->GetSafeHwnd() != NULL
		&&	(pWnd->GetStyle()&WS_CHILD) == 0
		&&	pWnd->IsZoomed()
		)
		return ( (HRGN)NULL );
CRect rcThemePadding = m_rcNcFrameBordersActive;
	rcThemePadding.top += m_nCaptionHeightActive;
bool bRTL = false; //( (pWnd->GetExStyle()&WS_EX_LAYOUTRTL) != 0 ) ? true : false;
HRGN hRgn =
		m_bmpNcFrameActive.GenerateSkinFrameAlphaRGN(
			bRTL,
			rcWnd,
			rcThemePadding
			);
	return hRgn;
}

void CExtPaintManagerOffice2007_Impl::NcFrame_GetMetrics(
	RECT & rcNcBorders,
	RECT & rcThemePadding,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( NcFrame_IsSupported( pWnd ) );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::NcFrame_GetMetrics( rcNcBorders, rcThemePadding, pWnd, lParam );
		return;
	}
	if(		pWnd->GetSafeHwnd() != NULL
		&&	(pWnd->GetStyle()&WS_CHILD) == 0
		&&	pWnd->IsZoomed()
		&&	( ! g_PaintManager.m_DWM.IsCompositionEnabled() )
		)
	{
		::SetRect( &rcNcBorders, 0, 0, 0, 0 );
		::SetRect( &rcThemePadding, 0, 0, 0, 0 );
	}
	else
	{
		rcNcBorders = m_rcNcFrameBordersActive;
		rcThemePadding = m_rcNcFrameBordersActive;
	}
INT nCaptionHeightActive = m_nCaptionHeightActive;
	nCaptionHeightActive = UiScalingDo( nCaptionHeightActive, __EUIST_Y );
	rcThemePadding.top += nCaptionHeightActive;
//DWORD dwStyleEx = pWnd->GetExStyle();
//bool bRTL = ( (dwStyleEx&WS_EX_LAYOUTRTL) != 0 ) ? true : false;
//	if( bRTL )
//	{
//		__EXT_MFC_SwapLeftRight( &rcNcBorders );
//		__EXT_MFC_SwapLeftRight( &rcThemePadding );
//	}
}

CRect CExtPaintManagerOffice2007_Impl::NcFrame_GetHtRect(
	UINT nHT,
	bool bScreenMapping,
	bool bLayoutBordersH,
	bool bLayoutBordersV,
	const CExtCmdIcon * pIcon,
	const CWnd * pWnd,
	LPMINMAXINFO pMinMaxInfo, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( NcFrame_IsSupported( pWnd ) );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::NcFrame_GetHtRect(
				nHT,
				bScreenMapping,
				bLayoutBordersH,
				bLayoutBordersV,
				pIcon,
				pWnd,
				pMinMaxInfo,
				lParam
				);

CRect rcNcBorders, rcThemePadding;
	NcFrame_GetMetrics(
		rcNcBorders,
		rcThemePadding,
		pWnd,
		lParam
		);
CRect rcWnd;
	pWnd->GetWindowRect( &rcWnd );
	if( ! bScreenMapping )
		rcWnd.OffsetRect( -rcWnd.TopLeft() );
bool bMaximizedMode = false;
	if(		( ! g_PaintManager.m_DWM.IsCompositionEnabled() )
		&&	(pWnd->GetStyle()&WS_CHILD) == 0
		&&	pWnd->IsZoomed()
		)
		bMaximizedMode = true;
// 		rcWnd.InflateRect(
// 			rcNcBorders.left,
// 			rcNcBorders.top,
// 			rcNcBorders.right,
// 			rcNcBorders.bottom
// 			);
bool bZoomed = pWnd->IsZoomed()? true : false;
bool bSupportsResizingH = bLayoutBordersH;
bool bSupportsResizingV = bLayoutBordersV;
DWORD dwWndStyle = pWnd->GetStyle();
	if(		(dwWndStyle&WS_THICKFRAME) != 0
		&&	(	(! bSupportsResizingH )
			||	(! bSupportsResizingV )
			)
		)
	{
		bool bHaveMinMaxInfo = false;
		MINMAXINFO _mmi;
		if( pMinMaxInfo != NULL )
		{
			bHaveMinMaxInfo = true;
			__EXT_MFC_MEMCPY( 
				&_mmi,
				sizeof(MINMAXINFO),
				pMinMaxInfo, 
				sizeof(MINMAXINFO) 
				);
		} // if( pMinMaxInfo != NULL )
		else
		{
			::memset( &_mmi, 0, sizeof(MINMAXINFO) );
			monitor_parms_t _mp;
			stat_GetMonitorParms( _mp, (CWnd*)pWnd );
			_mmi.ptMaxPosition.x = _mp.m_rcWorkArea.left;
			_mmi.ptMaxPosition.y = _mp.m_rcWorkArea.top;
			_mmi.ptMaxTrackSize.x = _mp.m_rcWorkArea.Width(); // ::GetSystemMetrics( SM_CXMAXTRACK );
			_mmi.ptMaxTrackSize.y = _mp.m_rcWorkArea.Height(); // ::GetSystemMetrics( SM_CYMAXTRACK );
			_mmi.ptMinTrackSize.x = ::GetSystemMetrics( SM_CXMINTRACK );
			_mmi.ptMinTrackSize.y = ::GetSystemMetrics( SM_CYMINTRACK );
			_mmi.ptMaxSize.x = _mmi.ptMaxTrackSize.x;
			_mmi.ptMaxSize.y = _mmi.ptMaxTrackSize.y;
			if( ((CWnd*)pWnd)->SendMessage( WM_GETMINMAXINFO, 0, LPARAM(&_mmi) ) == 0 )
				bHaveMinMaxInfo = true;
		} // else from if( pMinMaxInfo != NULL )
		if( bHaveMinMaxInfo )
		{
			if( _mmi.ptMinTrackSize.x < _mmi.ptMaxTrackSize.x )
				bSupportsResizingH = true;
			if( _mmi.ptMinTrackSize.y < _mmi.ptMaxTrackSize.y )
				bSupportsResizingV = true;
		} // if( bHaveMinMaxInfo )
	} // if( (dwWndStyle&WS_THICKFRAME) != 0 ...
CRect rcPart( 0, 0, 0, 0 );
bool bRtlEnabledHT = false;
	switch( nHT )
	{
	case HTSYSMENU:
		{
		if( (dwWndStyle&WS_SYSMENU) == 0 )
			break;
		int nIconAreaWidth = 0;
		if( pIcon != NULL && (! pIcon->IsEmpty() ) )
			nIconAreaWidth = UiScalingDo( pIcon->GetSize().cx + 2, __EUIST_Y );
		bRtlEnabledHT = true;
		rcPart.SetRect(
				rcWnd.left + (bZoomed ? 0 : ( bSupportsResizingH ? rcNcBorders.left : 0 ) ),
				rcWnd.top + (bZoomed ? 0 : ( bSupportsResizingV ? rcNcBorders.top : 0 ) ),
				rcWnd.left + (bZoomed ? 0 : ( bSupportsResizingH ? rcNcBorders.left : 0 ) )
					+ nIconAreaWidth,
				rcWnd.top + (bZoomed ? 0 : ( bSupportsResizingV ? rcNcBorders.top : 0 ) )
					+ rcThemePadding.top
				);
		if( bMaximizedMode )
			rcPart.OffsetRect( 0, -m_rcNcFrameBordersActive.top );
		}
		break;
	case HTCAPTION:
//		if( (dwWndStyle&WS_CAPTION) == 0 )
//			break;
		rcPart.SetRect(
				rcWnd.left + (bZoomed ? 0 : ( bSupportsResizingH ? rcNcBorders.left : 0 ) ),
				rcWnd.top + (bZoomed ? 0 : ( bSupportsResizingV ? rcNcBorders.top : 0 ) ),
				rcWnd.right - (bZoomed ? 0 : ( bSupportsResizingH ? rcNcBorders.right : 0 ) ),
				rcWnd.top + rcThemePadding.top
				);
		if( bMaximizedMode )
			rcPart.OffsetRect( 0, -m_rcNcFrameBordersActive.top );
		break;
	case HTTOP:
		if( bZoomed || (! bSupportsResizingV ) )
			break;
		rcPart.SetRect(
				rcWnd.left + ( bSupportsResizingH ? rcNcBorders.left : 0 ),
				rcWnd.top,
				rcWnd.right - ( bSupportsResizingH ? rcNcBorders.right : 0 ),
				rcWnd.top + rcNcBorders.top
				);
		break;
	case HTBOTTOM:
		if( bZoomed || (! bSupportsResizingV ) )
			break;
		rcPart.SetRect(
				rcWnd.left + ( bSupportsResizingH ? rcNcBorders.left : 0 ),
				rcWnd.bottom - rcNcBorders.bottom,
				rcWnd.right - ( bSupportsResizingH ? rcNcBorders.right : 0 ),
				rcWnd.bottom
				);
		break;
	case HTLEFT:
		if( bZoomed || (! bSupportsResizingH ) )
			break;
		rcPart.SetRect(
				rcWnd.left,
				rcWnd.top + ( bSupportsResizingV ? rcNcBorders.top : 0 ),
				rcWnd.left + rcNcBorders.left,
				rcWnd.bottom - ( bSupportsResizingV ? rcNcBorders.bottom : 0 )
				);
		break;
	case HTRIGHT:
		if( bZoomed || (! bSupportsResizingH ) )
			break;
		rcPart.SetRect(
				rcWnd.right - rcNcBorders.right,
				rcWnd.top + ( bSupportsResizingV ? rcNcBorders.top : 0 ),
				rcWnd.right,
				rcWnd.bottom - ( bSupportsResizingV ? rcNcBorders.bottom : 0 )
				);
		break;
	case HTTOPLEFT:
		if( bZoomed || (! bSupportsResizingH ) || (! bSupportsResizingV ) )
			break;
		rcPart.SetRect(
				rcWnd.left,
				rcWnd.top,
				rcWnd.left + rcNcBorders.left,
				rcWnd.top + rcNcBorders.top
				);
		break;
	case HTTOPRIGHT:
		if( bZoomed || (! bSupportsResizingH ) || (! bSupportsResizingV ) )
			break;
		rcPart.SetRect(
				rcWnd.right - rcNcBorders.right,
				rcWnd.top,
				rcWnd.right,
				rcWnd.top + rcNcBorders.top
				);
		break;
	case HTBOTTOMLEFT:
		if( bZoomed || (! bSupportsResizingH ) || (! bSupportsResizingV ) )
			break;
		rcPart.SetRect(
				rcWnd.left,
				rcWnd.bottom - rcNcBorders.bottom,
				rcWnd.left + rcNcBorders.left,
				rcWnd.bottom
				);
		break;
	case HTBOTTOMRIGHT:
		if( bZoomed || (! bSupportsResizingH ) || (! bSupportsResizingV ) )
			break;
		rcPart.SetRect(
				rcWnd.right - rcNcBorders.right,
				rcWnd.bottom - rcNcBorders.bottom,
				rcWnd.right,
				rcWnd.bottom
				);
		break;
	} // switch( nHT )
	if( bRtlEnabledHT && ( ! rcPart.IsRectEmpty() ) )
	{
		bool bRTL = ( (pWnd->GetExStyle()&WS_EX_LAYOUTRTL) != 0 ) ? true : false;
		if( bRTL )
		{
			CRect rcWnd;
			pWnd->GetWindowRect( &rcWnd );
			rcWnd.OffsetRect( -rcWnd.TopLeft() );
			::SetRect(
				&rcPart,
				rcWnd.right - 1 - rcPart.right,
				rcPart.top,
				rcWnd.right - 1 - rcPart.left,
				rcPart.bottom
				);
		} // if( bRTL )
	} // if( bRtlEnabledHT && ( ! rcPart.IsRectEmpty() ) )
	return rcPart;
}

void CExtPaintManagerOffice2007_Impl::NcFrame_Paint(
	CDC & dc,
	const CExtCmdIcon * pIcon,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	UINT nDrawTextAlignFlags,
	const RECT & rcFrame,
	const RECT & rcClient,
	const RECT & rcIcon,
	const RECT & rcText,
	const RECT & rcHelp,
	const RECT & rcMinimize,
	const RECT & rcMaximizeRestore,
	const RECT & rcClose,
	bool bFrameActive,
	bool bFrameEnabled,
	bool bFrameMaximized,
	CExtPaintManager::e_nc_button_state_t eStateButtonHelp,
	CExtPaintManager::e_nc_button_state_t eStateButtonMinimize,
	CExtPaintManager::e_nc_button_state_t eStateButtonMaximizeRestore,
	CExtPaintManager::e_nc_button_state_t eStateButtonClose,
	const CWnd * pWnd,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::NcFrame_Paint(
			dc, pIcon, strCaption, nDrawTextAlignFlags, rcFrame, rcClient, rcIcon, rcText,
			rcHelp, rcMinimize, rcMaximizeRestore, rcClose, bFrameActive, bFrameEnabled, bFrameMaximized,
			eStateButtonHelp, eStateButtonMinimize, eStateButtonMaximizeRestore, eStateButtonClose,
			pWnd, lParam
			);
		return;
	}
int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
	::SetStretchBltMode( dc.m_hDC, ( g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
const CExtBitmap & _bmpNcFrame = bFrameActive ? m_bmpNcFrameActive : m_bmpNcFrameInactive;
const CRect & rcPadding = bFrameActive ? m_rcNcFrameBordersActive : m_rcNcFrameBordersInactive;
//const CRect & rcBorders = bFrameActive ? m_rcNcFrameBordersActive : m_rcNcFrameBordersInactive;
const INT nCaptionHeightSrc = bFrameActive ? m_nCaptionHeightActive : m_nCaptionHeightInactive;
const INT nCaptionHeightDst = UiScalingDo( nCaptionHeightSrc, __EUIST_Y );
CRect _rcFrame = rcFrame;
CRect _rcText = rcText;
bool bZoomed = pWnd->IsZoomed()? true : false;
	if( bZoomed && ( ! g_PaintManager.m_DWM.IsCompositionEnabled() ) )
	{
		_rcText.top += rcPadding.top;
		_rcText.bottom += rcPadding.top;
		_rcFrame.top -= rcPadding.top;
		_rcFrame.left -= rcPadding.left;
		_rcFrame.right += rcPadding.right;
	}
//	if( bZoomed )
//		_rcFrame.InflateRect( rcBorders.left, rcBorders.top, rcBorders.right, rcBorders.bottom );
	_bmpNcFrame.DrawNcFrame( dc.m_hDC, _rcFrame, rcPadding, nCaptionHeightDst, nCaptionHeightSrc );
	if(		pIcon != NULL
		&&	(! pIcon->IsEmpty() )
		&&	( ! ::IsRectEmpty( &rcIcon ) )
		&&	dc.RectVisible( &rcIcon )
		)
	{
		CSize _sizeIconArea( rcIcon.right - rcIcon.left, rcIcon.bottom - rcIcon.top );
		CSize _sizeIconSurface = pIcon->GetSize();
		bool bDrawDefaultIconSize = true;
		if( _sizeIconSurface != _sizeIconArea )
		{
			CExtCmdIcon _icon;
			_icon = *pIcon;
			if( ! _icon.IsEmpty() )
			{
				_icon.Scale( _sizeIconArea );
				if( ! _icon.IsEmpty() )
				{
					bDrawDefaultIconSize = false;
					_icon.Paint(
						const_cast < CExtPaintManagerOffice2007_Impl * > ( this ),
						dc.m_hDC,
						rcIcon.left,
						rcIcon.top,
						_sizeIconArea.cx,
						_sizeIconArea.cy
						);
				} // if( ! _icon.IsEmpty() )
			} // if( ! _icon.IsEmpty() )
		} // if( _sizeIconSurface != _sizeIconArea )
		if( bDrawDefaultIconSize )
			pIcon->Paint(
				const_cast < CExtPaintManagerOffice2007_Impl * > ( this ),
				dc.m_hDC,
				rcIcon.left,
				rcIcon.top,
				-1,
				-1
				);
	}

COLORREF colorFrameText = bFrameActive ? m_clrNcFrameTextActive : m_clrNcFrameTextInactive;
	if( colorFrameText != COLORREF(-1L) )
	{
		int nLenCaption = int( ( strCaption == NULL ) ? 0 : _tcslen( strCaption ) );
		if(		nLenCaption > 0
			&&	( ! ::IsRectEmpty( &_rcText ) )
			&&	dc.RectVisible( &rcText )
			)
		{
			UINT _nDrawTextAlignFlags = nDrawTextAlignFlags;
			if(		pWnd->GetSafeHwnd() != NULL
				&&	(pWnd->GetExStyle()&WS_EX_LAYOUT_RTL) != 0
				&&	(nDrawTextAlignFlags&DT_CENTER) == 0
				)
			{
				_nDrawTextAlignFlags &= ~(DT_LEFT|DT_CENTER|DT_RIGHT);
				if( (nDrawTextAlignFlags&DT_RIGHT) != 0 )
					_nDrawTextAlignFlags |= DT_LEFT;
				else
					_nDrawTextAlignFlags |= DT_RIGHT;
				_nDrawTextAlignFlags |= DT_RTLREADING;
			}
			COLORREF clrOldText = dc.SetTextColor( colorFrameText );
			CFont * pOldFont = dc.SelectObject( (CFont*)&m_FontCaption );
			int nOldBkMode = dc.SetBkMode( TRANSPARENT );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				strCaption, nLenCaption,
				(LPRECT)&_rcText,
				_nDrawTextAlignFlags|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX, 0
				);
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
			dc.SetTextColor( clrOldText );
		}
	} // if( colorFrameText != COLORREF(-1L) )

static const RECT rcZeroPadding = { 0, 0, 0, 0 };
	if(		( ! ::IsRectEmpty( &rcHelp ) )
		&&	dc.RectVisible( &rcHelp )
		)
	{
//LPCTSTR strGlyph = stat_NcFrameButton_NameFromState( eStateButtonHelp );
//const CExtSkinGlyph & glyph = m_Skin[_T("Button")][_T("FrameNcButton")][_T("Help")][strFrameActive].Glyph(strGlyph);
//glyph.Draw( dc.m_hDC, rcHelp );
		INT nIndexInArray = bFrameActive ? m_nNcBtnIdxNormalActive : m_nNcBtnIdxNormalInactive;
		if( eStateButtonHelp == __ENCBS_HOVER )
		{
			m_bmpNcButtonBkHover.AlphaBlendSkinParts( dc.m_hDC, rcHelp, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxHover;
		}
		else if( eStateButtonHelp == __ENCBS_PRESSED )
		{
			m_bmpNcButtonBkPressed.AlphaBlendSkinParts( dc.m_hDC, rcHelp, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxPressed;
		}
		else if( eStateButtonHelp == __ENCBS_DISABLED )
			nIndexInArray = m_nNcBtnIdxDisabled;
		CRect rcSrc( 0, 0, m_sizeNcButtonShapeInArr.cx, m_sizeNcButtonShapeInArr.cy );
		rcSrc.OffsetRect( 0, m_sizeNcButtonShapeInArr.cy * nIndexInArray );
		m_bmpArrNcButtonsHelp.AlphaBlendSkinParts(
				dc.m_hDC,
				rcHelp,
				rcSrc,
				rcZeroPadding,
				( g_PaintManager.m_nLPZ == 96 ) ? ( CExtBitmap::__EDM_CENTER ) : ( CExtBitmap::__EDM_STRETCH ),
				true,
				true
				);
	}
	if(		( ! ::IsRectEmpty( &rcMinimize ) )
		&&	dc.RectVisible( &rcMinimize )
		)
	{
		//LPCTSTR strGlyph = stat_NcFrameButton_NameFromState( eStateButtonMinimize );
		//const CExtSkinGlyph & glyph = m_Skin[_T("Button")][_T("FrameNcButton")][_T("Minimize")][strFrameActive].Glyph(strGlyph);
		//glyph.Draw( dc.m_hDC, rcMinimize );
		INT nIndexInArray = bFrameActive ? m_nNcBtnIdxNormalActive : m_nNcBtnIdxNormalInactive;
		if( eStateButtonMinimize == __ENCBS_HOVER )
		{
			m_bmpNcButtonBkHover.AlphaBlendSkinParts( dc.m_hDC, rcMinimize, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxHover;
		}
		else if( eStateButtonMinimize == __ENCBS_PRESSED )
		{
			m_bmpNcButtonBkPressed.AlphaBlendSkinParts( dc.m_hDC, rcMinimize, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxPressed;
		}
		else if( eStateButtonMinimize == __ENCBS_DISABLED )
			nIndexInArray = m_nNcBtnIdxDisabled;
		CRect rcSrc( 0, 0, m_sizeNcButtonShapeInArr.cx, m_sizeNcButtonShapeInArr.cy );
		rcSrc.OffsetRect( 0, m_sizeNcButtonShapeInArr.cy * nIndexInArray );
		const CExtBitmap & _bmpMin = ( pWnd != NULL && pWnd->IsIconic() ) ? m_bmpArrNcButtonsRestore : m_bmpArrNcButtonsMinimize;
		_bmpMin.AlphaBlendSkinParts(
				dc.m_hDC,
				rcMinimize,
				rcSrc,
				rcZeroPadding,
				( g_PaintManager.m_nLPZ == 96 ) ? ( CExtBitmap::__EDM_CENTER ) : ( CExtBitmap::__EDM_STRETCH ),
				true,
				true
				);
	}
	if(		( ! ::IsRectEmpty( &rcMaximizeRestore ) )
		&&	dc.RectVisible( &rcMaximizeRestore )
		)
	{
		//LPCTSTR strGlyph = stat_NcFrameButton_NameFromState( eStateButtonMaximizeRestore );
		//const CExtSkinGlyph & glyph = m_Skin[_T("Button")][_T("FrameNcButton")][ bFrameMaximized ? _T("Restore") : _T("Maximize") ][strFrameActive].Glyph(strGlyph);
		//glyph.Draw( dc.m_hDC, rcMaximizeRestore );
		INT nIndexInArray = bFrameActive ? m_nNcBtnIdxNormalActive : m_nNcBtnIdxNormalInactive;
		if( eStateButtonMaximizeRestore == __ENCBS_HOVER )
		{
			m_bmpNcButtonBkHover.AlphaBlendSkinParts( dc.m_hDC, rcMaximizeRestore, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxHover;
		}
		else if( eStateButtonMaximizeRestore == __ENCBS_PRESSED )
		{
			m_bmpNcButtonBkPressed.AlphaBlendSkinParts( dc.m_hDC, rcMaximizeRestore, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxPressed;
		}
		else if( eStateButtonMaximizeRestore == __ENCBS_DISABLED )
			nIndexInArray = m_nNcBtnIdxDisabled;
		CRect rcSrc( 0, 0, m_sizeNcButtonShapeInArr.cx, m_sizeNcButtonShapeInArr.cy );
		rcSrc.OffsetRect( 0, m_sizeNcButtonShapeInArr.cy * nIndexInArray );
		if( bFrameMaximized )
			m_bmpArrNcButtonsRestore.AlphaBlendSkinParts(
					dc.m_hDC,
					rcMaximizeRestore,
					rcSrc,
					rcZeroPadding,
					( g_PaintManager.m_nLPZ == 96 ) ? ( CExtBitmap::__EDM_CENTER ) : ( CExtBitmap::__EDM_STRETCH ),
					true,
					true
					);
		else
			m_bmpArrNcButtonsMaximize.AlphaBlendSkinParts(
					dc.m_hDC,
					rcMaximizeRestore,
					rcSrc,
					rcZeroPadding,
					( g_PaintManager.m_nLPZ == 96 ) ? ( CExtBitmap::__EDM_CENTER ) : ( CExtBitmap::__EDM_STRETCH ),
					true,
					true
					);
	}
	if(		( ! ::IsRectEmpty( &rcClose ) )
		&&	dc.RectVisible( &rcClose )
		)
	{
		//LPCTSTR strGlyph = stat_NcFrameButton_NameFromState( eStateButtonClose );
		//const CExtSkinGlyph & glyph = m_Skin[_T("Button")][_T("FrameNcButton")][_T("Close")][strFrameActive].Glyph(strGlyph);
		//glyph.Draw( dc.m_hDC, rcClose );
		INT nIndexInArray = bFrameActive ? m_nNcBtnIdxNormalActive : m_nNcBtnIdxNormalInactive;
		if( eStateButtonClose == __ENCBS_HOVER )
		{
			const CExtBitmap * pBmp = &m_bmpNcButtonBkHover;
			if( ! m_bmpNcButtonBkHoverX.IsEmpty() )
				pBmp = &m_bmpNcButtonBkHoverX;
			pBmp->AlphaBlendSkinParts( dc.m_hDC, rcClose, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxHover;
		}
		else if( eStateButtonClose == __ENCBS_PRESSED )
		{
			const CExtBitmap * pBmp = &m_bmpNcButtonBkPressed;
			if( ! m_bmpNcButtonBkPressedX.IsEmpty() )
				pBmp = &m_bmpNcButtonBkPressedX;
			pBmp->AlphaBlendSkinParts( dc.m_hDC, rcClose, m_rcNcButtonBkPadding, CExtBitmap::__EDM_STRETCH );
			nIndexInArray = m_nNcBtnIdxPressed;
		}
		else if( eStateButtonClose == __ENCBS_DISABLED )
			nIndexInArray = m_nNcBtnIdxDisabled;
		CRect rcSrc( 0, 0, m_sizeNcButtonShapeInArr.cx, m_sizeNcButtonShapeInArr.cy );
		rcSrc.OffsetRect( 0, m_sizeNcButtonShapeInArr.cy * nIndexInArray );
		m_bmpArrNcButtonsClose.AlphaBlendSkinParts(
				dc.m_hDC,
				rcClose,
				rcSrc,
				rcZeroPadding,
				( g_PaintManager.m_nLPZ == 96 ) ? ( CExtBitmap::__EDM_CENTER ) : ( CExtBitmap::__EDM_STRETCH ),
				true,
				true
				);
	}
	::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
}

#define __EXT_MFC_SKINNED_CAPTION_TEXT_GAP 4

void CExtPaintManagerOffice2007_Impl::NcFrame_GetRects(
	CExtCmdIcon * pIcon,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	UINT nDrawTextAlignFlags,
	RECT & rcIcon,
	RECT & rcText,
	RECT & rcHelp,
	RECT & rcMinimize,
	RECT & rcMaximizeRestore,
	RECT & rcClose,
	const CWnd * pWnd,
	LPMINMAXINFO pMinMaxInfo, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::NcFrame_GetRects( pIcon, strCaption, nDrawTextAlignFlags, rcIcon, rcText, rcHelp, rcMinimize, rcMaximizeRestore, rcClose, pWnd, pMinMaxInfo, lParam );
		return;
	}	
	::SetRectEmpty( &rcIcon );
	::SetRectEmpty( &rcText );
	::SetRectEmpty( &rcHelp );
	::SetRectEmpty( &rcMinimize );
	::SetRectEmpty( &rcMaximizeRestore );
	::SetRectEmpty( &rcClose );
	ASSERT( NcFrame_IsSupported( pWnd ) );
DWORD dwWndStyle = pWnd->GetStyle();
//	if( (dwWndStyle&WS_CAPTION) == 0 )
//		return;
DWORD dwWndStyleEx = pWnd->GetExStyle();
CRect rcNcBorders, rcThemePadding;
	NcFrame_GetMetrics( rcNcBorders, rcThemePadding, pWnd, lParam );
CRect rcCaption = NcFrame_GetHtRect( HTCAPTION, false, true, true, pIcon, pWnd, pMinMaxInfo );
CRect rc = rcCaption;
	::CopyRect( &rcText, &rcCaption );
bool bZoomed = pWnd->IsZoomed()? true : false;
static const POINT g_ptZoomedButtonOffset = { -2, 5 };
static const POINT g_ptZoomedIconAndTextOffset = { 4, 0 /*3*/ };
	if( (dwWndStyle&WS_SYSMENU) != 0 )
	{
		//LPCTSTR strFrameActive = _T("Active");
		//const CExtSkinGlyph & glyphClose = m_Skin[_T("Button")][_T("FrameNcButton")][_T("Close")][strFrameActive].Glyph(_T("Normal"));
		CSize _sizeScClose(m_nCaptionHeightActive-2,m_nCaptionHeightActive-3); // = glyphClose.GetSize();
		_sizeScClose.cx = UiScalingDo( _sizeScClose.cx, __EUIST_Y );
		_sizeScClose.cy = UiScalingDo( _sizeScClose.cy, __EUIST_Y );
		CRect _rcOffsetScClose(0,0,0,0); // = glyphClose.GetOffset();
		rc.right -= bZoomed ? rcThemePadding.right : 1;
		rc.right -= _rcOffsetScClose.right;
		rc.left = rc.right - _sizeScClose.cx;
		rc.top = rcCaption.top + _rcOffsetScClose.top + ( bZoomed ? _rcOffsetScClose.bottom : 0 );
		rc.bottom = rc.top + _sizeScClose.cy;
		if( bZoomed )
			rc.OffsetRect( g_ptZoomedButtonOffset );
		::CopyRect( &rcClose, &rc );
		rc.OffsetRect( -_sizeScClose.cx, 0 );
		rcText.right = rcCaption.right - __EXT_MFC_SKINNED_CAPTION_TEXT_GAP;
		if( (dwWndStyle&WS_MAXIMIZEBOX) != 0 )
		{
			//const CExtSkinGlyph & glyphMaximize = m_Skin[_T("Button")][_T("FrameNcButton")][_T("Maximize")][strFrameActive].Glyph(_T("Normal"));
			CSize _sizeScMaximize(m_nCaptionHeightActive-2,m_nCaptionHeightActive-3); // = glyphMaximize.GetSize();
			_sizeScMaximize.cx = UiScalingDo( _sizeScMaximize.cx, __EUIST_Y );
			_sizeScMaximize.cy = UiScalingDo( _sizeScMaximize.cy, __EUIST_Y );
			CRect _rcOffsetScMaximize(0,0,0,0); // = glyphMaximize.GetOffset();
			rc.right -= _rcOffsetScMaximize.right;
			rc.top = rcCaption.top + _rcOffsetScMaximize.top + ( bZoomed ? _rcOffsetScMaximize.bottom : 0 );
			rc.left = rc.right - _sizeScMaximize.cx;
			rc.bottom = rc.top + _sizeScMaximize.cy;
			if( bZoomed )
				rc.OffsetRect( g_ptZoomedButtonOffset );
			::CopyRect( &rcMaximizeRestore, &rc );
			rc.OffsetRect( -_sizeScMaximize.cx, 0 );
			rcText.right = rcMaximizeRestore.left - __EXT_MFC_SKINNED_CAPTION_TEXT_GAP;
		} // if( (dwWndStyle&WS_MAXIMIZEBOX) != 0 )
		if( (dwWndStyle&WS_MINIMIZEBOX) != 0 )
		{
			//const CExtSkinGlyph & glyphMinimize = m_Skin[_T("Button")][_T("FrameNcButton")][_T("Minimize")][strFrameActive].Glyph(_T("Normal"));
			CSize _sizeScMinimize(m_nCaptionHeightActive-2,m_nCaptionHeightActive-3); // = glyphMinimize.GetSize();
			_sizeScMinimize.cx = UiScalingDo( _sizeScMinimize.cx, __EUIST_Y );
			_sizeScMinimize.cy = UiScalingDo( _sizeScMinimize.cy, __EUIST_Y );
			CRect _rcOffsetScMinimize(0,0,0,0); // = glyphMinimize.GetOffset();
			rc.right -= _rcOffsetScMinimize.right;
			rc.top = rcCaption.top + _rcOffsetScMinimize.top + ( bZoomed ? _rcOffsetScMinimize.bottom : 0 );
			rc.left = rc.right - _sizeScMinimize.cx;
			rc.bottom = rc.top + _sizeScMinimize.cy;
			if( bZoomed )
				rc.OffsetRect( g_ptZoomedButtonOffset );
			::CopyRect( &rcMinimize, &rc );
			rc.OffsetRect( -_sizeScMinimize.cx, 0 );
			rcText.right = rcMinimize.left - __EXT_MFC_SKINNED_CAPTION_TEXT_GAP;
		} // if( (dwWndStyle&WS_MINIMIZEBOX) != 0 )
		if( (dwWndStyleEx&WS_EX_CONTEXTHELP) != 0 )
		{
			//const CExtSkinGlyph & glyphHelp = m_Skin[_T("Button")][_T("FrameNcButton")][_T("Help")][strFrameActive].Glyph(_T("Normal"));
			CSize _sizeScHelp(m_nCaptionHeightActive-2,m_nCaptionHeightActive-3); // = glyphHelp.GetSize();
			_sizeScHelp.cx = UiScalingDo( _sizeScHelp.cx, __EUIST_Y );
			_sizeScHelp.cy = UiScalingDo( _sizeScHelp.cy, __EUIST_Y );
			CRect _rcOffsetScHelp(0,0,0,0); // = glyphHelp.GetOffset();
			rc.right -= _rcOffsetScHelp.right;
			rc.top = rcCaption.top + _rcOffsetScHelp.top + ( bZoomed ? _rcOffsetScHelp.bottom : 0 );
			rc.left = rc.right - _sizeScHelp.cx;
			rc.bottom = rc.top + _sizeScHelp.cy;
			if( bZoomed )
				rc.OffsetRect( g_ptZoomedButtonOffset );
			::CopyRect( &rcHelp, &rc );
			rcText.right = rcHelp.left - __EXT_MFC_SKINNED_CAPTION_TEXT_GAP;
		} // if( (dwWndStyleEx&WS_EX_CONTEXTHELP) != 0 )
		if(		pIcon != NULL
			&&	(! pIcon->IsEmpty() )
			)
		{
			CSize _sizeIcon = pIcon->GetSize();
			if( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 )
			{
				_sizeIcon.cx = UiScalingDo( _sizeIcon.cx, __EUIST_Y );
				_sizeIcon.cy = UiScalingDo( _sizeIcon.cy, __EUIST_Y );
				int x = rcCaption.left; // + (bZoomed ? rcNcBorders.left : 0 );
				int y = rcCaption.top + ( rcCaption.Height() - _sizeIcon.cy ) / 2;
				::SetRect(
					&rcIcon,
					x,
					y,
					x + _sizeIcon.cx,
					y + _sizeIcon.cy
					);
				if( bZoomed )
					::OffsetRect(
						&rcIcon,
						g_ptZoomedIconAndTextOffset.x,
						g_ptZoomedIconAndTextOffset.y
						);
				rcText.left = rcIcon.right + __EXT_MFC_SKINNED_CAPTION_TEXT_GAP;
			} // if( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 )
			else
			{
				rcText.left += __EXT_MFC_SKINNED_CAPTION_TEXT_GAP;
				if( bZoomed )
				{
					rcText.left += g_ptZoomedIconAndTextOffset.x;
					//::OffsetRect( &rcText, 0, g_ptZoomedIconAndTextOffset.y );
					rcText.top += g_ptZoomedIconAndTextOffset.y;
				}
			}
		} // if( pIcon != NULL ...
		else
		{
			rcText.left += __EXT_MFC_SKINNED_CAPTION_TEXT_GAP + (bZoomed ? rcNcBorders.left : 0 );
			if( bZoomed )
			{
				rcText.left += g_ptZoomedIconAndTextOffset.x;
				//::OffsetRect( &rcText, 0, g_ptZoomedIconAndTextOffset.y );
				rcText.top += g_ptZoomedIconAndTextOffset.y;
			}
		}
	} // if( (dwWndStyle&WS_SYSMENU) != 0 )
	else
	{
		rcText.left += __EXT_MFC_SKINNED_CAPTION_TEXT_GAP + (bZoomed ? rcNcBorders.left : 0 );
		rcText.right -= __EXT_MFC_SKINNED_CAPTION_TEXT_GAP;
		if( bZoomed )
		{
			rcText.left += g_ptZoomedIconAndTextOffset.x;
			//::OffsetRect( &rcText, 0, g_ptZoomedIconAndTextOffset.y );
			rcText.top += g_ptZoomedIconAndTextOffset.y;
			rcText.top += m_rcNcFrameBordersActive.top;
		}
	}
bool bRTL = ( (pWnd->GetExStyle()&WS_EX_LAYOUTRTL) != 0 ) ? true : false;
	if( bRTL )
	{
		CRect rcWnd;
		pWnd->GetWindowRect( &rcWnd );
		rcWnd.OffsetRect( -rcWnd.TopLeft() );
		::SetRect(
			&rcIcon,
			rcWnd.right - 1 - rcIcon.right,
			rcIcon.top,
			rcWnd.right - 1 - rcIcon.left,
			rcIcon.bottom
			);
		::SetRect(
			&rcText,
			rcWnd.right - 1 - rcText.right,
			rcText.top,
			rcWnd.right - 1 - rcText.left,
			rcText.bottom
			);
		::SetRect(
			&rcHelp,
			rcWnd.right - 1 - rcHelp.right,
			rcHelp.top,
			rcWnd.right - 1 - rcHelp.left,
			rcHelp.bottom
			);
		::SetRect(
			&rcMinimize,
			rcWnd.right - 1 - rcMinimize.right,
			rcMinimize.top,
			rcWnd.right - 1 - rcMinimize.left,
			rcMinimize.bottom
			);
		::SetRect(
			&rcMaximizeRestore,
			rcWnd.right - 1 - rcMaximizeRestore.right,
			rcMaximizeRestore.top,
			rcWnd.right - 1 - rcMaximizeRestore.left,
			rcMaximizeRestore.bottom
			);
		::SetRect(
			&rcClose,
			rcWnd.right - 1 - rcClose.right,
			rcClose.top,
			rcWnd.right - 1 - rcClose.left,
			rcClose.bottom
			);
	} // if( bRTL )
}

bool CExtPaintManagerOffice2007_Impl::OnQueryThemeColors(
	COLORREF *pclrFillHint,
	COLORREF *pclrAccentHint // = NULL
	)
{
	ASSERT_VALID( this );
	if( pclrFillHint != NULL )
		*pclrFillHint = m_clrFillHint;
	if( pclrAccentHint != NULL )
		*pclrAccentHint = m_clrAccentHint;
	return true;
}

bool CExtPaintManagerOffice2007_Impl::OnQueryUseThemeColors() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::OnQueryUseThemeColors();
	return true;
}

bool CExtPaintManagerOffice2007_Impl::PaintDocumentClientAreaBkgnd(
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pWnd->GetSafeHwnd() != NULL );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintDocumentClientAreaBkgnd( dc, pWnd, lParam );
bool bHaveBitmapDCA = false;
	if(		(! m_bmpDCA.IsEmpty() )
		&&	m_clrDCA1 != COLORREF(-1L)
		&&	m_clrDCA2 != COLORREF(-1L)
		&&	m_clrDCA3 != COLORREF(-1L)
		)
		bHaveBitmapDCA = true;
	if( bHaveBitmapDCA || m_clrDCA_Solid != COLORREF(-1L) )
	{
		CRect rcClient;
		pWnd->GetClientRect( &rcClient );
		if( dc.RectVisible( &rcClient ) )
		{
			if( bHaveBitmapDCA )
			{
				CRect rcPadding(0,0,0,0);
				if( m_bDocumentClientAreaBkgndR2 )
				{ // R2 style
					CSize _sizeBmpDCA = m_bmpDCA.GetSize();
					rcPadding.left = _sizeBmpDCA.cx - 8;
					CRect rcPaintGradient = rcClient;
					CRect rcPaintBmp = rcClient;
					rcPaintGradient.top = rcPaintBmp.bottom = rcPaintBmp.top + _sizeBmpDCA.cy;
					if( dc.RectVisible( &rcPaintBmp ) )
						m_bmpDCA.AlphaBlendSkinParts( dc.m_hDC, rcPaintBmp, rcPadding, CExtBitmap::__EDM_STRETCH, true, true );
					if( rcPaintGradient.bottom > rcPaintGradient.top && dc.RectVisible( &rcPaintGradient ) )
						stat_PaintGradientRect2steps( dc, rcPaintGradient, m_clrDCA1, m_clrDCA2, m_clrDCA3, true, 2, 3, 256 );
				} // R2 style
				else
				{ // R1 style
					stat_PaintGradientRect2steps( dc, rcClient, m_clrDCA1, m_clrDCA2, m_clrDCA3, true, 2, 3, 256 );
					m_bmpDCA.AlphaBlendSkinParts( dc.m_hDC, rcClient, rcPadding, CExtBitmap::__EDM_TILE, true, true );
				} // R1 style
			} // if( bHaveBitmapDCA )
			else if( m_clrDCA_Solid != COLORREF(-1L) )
			{
				CRect rcClient;
				pWnd->GetClientRect( &rcClient );
				if( dc.RectVisible( &rcClient ) )
					dc.FillSolidRect( &rcClient, m_clrDCA_Solid );
				return true;
			} // else if( m_clrDCA_Solid != COLORREF(-1L) )
		} // if( dc.RectVisible( &rcClient ) )
		return true;
	} // if( bHaveBitmapDCA || m_clrDCA_Solid != COLORREF(-1L) )
	return CExtPaintManagerOffice2003::PaintDocumentClientAreaBkgnd( dc, pWnd, lParam );
}

bool CExtPaintManagerOffice2010_Impl::PaintDocumentClientAreaBkgnd(
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pWnd->GetSafeHwnd() != NULL );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintDocumentClientAreaBkgnd( dc, pWnd, lParam );
	if( ! m_bmpDCA.IsEmpty() )
	{
		CRect rcClient;
		pWnd->GetClientRect( &rcClient );
		if( dc.RectVisible( &rcClient ) )
		{
			int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
			::SetStretchBltMode( dc.m_hDC, ( g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
			m_bmpDCA.Draw( dc.m_hDC, rcClient );
			::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
		} // if( dc.RectVisible( &rcClient ) )
		return true;
	} // if( ! m_bmpDCA.IsEmpty() )
	return CExtPaintManagerOffice2003::PaintDocumentClientAreaBkgnd( dc, pWnd, lParam );
}

bool CExtPaintManagerOffice2007_Impl::PaintDockerBkgnd(
	bool bClientMapping,
	CDC & dc,
	const CRect &rcDst,
	const CRect &rcWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintDockerBkgnd( bClientMapping, dc, rcDst, rcWnd, lParam );
	if( ! m_bUseNcFrameBmpForDockerBkgnd )
		return CExtPaintManagerOffice2003::PaintDockerBkgnd( bClientMapping, dc, rcDst, rcWnd, lParam );
int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
	::SetStretchBltMode( dc.m_hDC, ( g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
CSize _size = m_bmpNcFrameActive.GetSize();
CRect rcSrc(
		m_rcNcFrameBordersActive.left,
		m_rcNcFrameBordersActive.top + m_nCaptionHeightActive,
		_size.cx - m_rcNcFrameBordersActive.right,
		_size.cy - m_rcNcFrameBordersActive.bottom
		);
	if( g_PaintManager.m_bIsWin2000orLater )
	{
		if( m_bmpNcFrameActive.Draw( dc.m_hDC, rcDst, rcSrc ) == GDI_ERROR )
			CExtPaintManagerOffice2003::PaintDockerBkgnd( bClientMapping, dc, rcDst, rcWnd, lParam );
	}
	else
	{
		if( m_bmpNcFrameActive.AlphaBlend( dc.m_hDC, rcDst.left, rcDst.top, rcDst.Width(), rcDst.Height(), rcSrc.left, rcSrc.top, rcSrc.Width(), rcSrc.Height() ) == GDI_ERROR )
			CExtPaintManagerOffice2003::PaintDockerBkgnd( bClientMapping, dc, rcDst, rcWnd, lParam );
	}
	::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
	return true;
}

void CExtPaintManagerOffice2007_Impl::PaintSeparator(
	CDC & dc,
	const RECT & rectItem,
	bool bHorz,
	bool bTransparentBk,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintSeparator(
			dc,
			rectItem,
			bHorz,
			bTransparentBk,
			pHelperSrc,
			lParam
			);
		return;
	}

	if(		pHelperSrc == NULL
		||	(!(	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtToolControlBar))
			||	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtBarButton))
#ifndef __EXT_MFC_NO_STATUSBAR
			||	pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtStatusControlBar))
#endif // __EXT_MFC_NO_STATUSBAR
			))
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerXP::PaintSeparator(
			dc,
			rectItem,
			bHorz,
			bTransparentBk,
			pHelperSrc,
			lParam
			);
		return;
	}
CRect rectItem2(rectItem);
	if( !bTransparentBk )
		dc.FillSolidRect(
			rectItem2,
			GetColor( CLR_3DFACE_OUT, pHelperSrc, lParam )
			);

COLORREF clrBtnShadow = GetColor( _2003CLR_SEPARATOR_DARK, pHelperSrc, lParam );
COLORREF clrBtnHilight = GetColor( _2003CLR_SEPARATOR_LIGHT, pHelperSrc, lParam );
	if( bHorz )
	{
		int x = (rectItem2.left + rectItem2.right) / 2;
		rectItem2.left = x-1; rectItem2.right = x+1;
		if(		pHelperSrc == NULL
#ifndef __EXT_MFC_NO_STATUSBAR
			||	(! pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtStatusControlBar)) )
#endif // __EXT_MFC_NO_STATUSBAR
			)
			rectItem2.DeflateRect( 0, 1, 0, 1 );
		dc.Draw3dRect(
			rectItem2,
			clrBtnShadow,
			clrBtnHilight
		);
	} // if( bHorz )
	else
	{
		int y = (rectItem2.top+rectItem2.bottom)/2;
		rectItem2.top = y-1; rectItem2.bottom = y+1;
		if(		pHelperSrc == NULL
#ifndef __EXT_MFC_NO_STATUSBAR
			||	(! pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtStatusControlBar)) )
#endif // __EXT_MFC_NO_STATUSBAR
			)
			rectItem2.DeflateRect( 2, 0, 2, 0 );
		dc.Draw3dRect(
			rectItem2,
			clrBtnShadow,
			clrBtnHilight
			);
	} // else from if( bHorz )
}

COLORREF CExtPaintManagerOffice2007_R2_Obsidian::QueryObjectTextColor(
	CDC & dc,
	bool bEnabled,
	bool bFocused,
	bool bHovered,
	bool bPressed,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::QueryObjectTextColor( dc, bEnabled, bFocused, bHovered, bPressed, pHelperSrc, lParam );	
	if( pHelperSrc != NULL )
	{
		if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtButton)) )
		{
			if( bEnabled )
			{
				if( bPressed )
				{
					COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorPressed();
					if( clr != COLORREF(-1L) )
						return clr;
				}
				else if( bHovered )
				{
					COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorHover();
					if( clr != COLORREF(-1L) )
						return clr;
				}
				COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorNormal();
				if( clr != COLORREF(-1L) )
					return clr;
			} // if( bEnabled )
			else
			{
				COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorDisabled();
				if( clr != COLORREF(-1L) )
					return clr;
			} // else from if( bEnabled )
		} // if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtButton)) )
		else if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtGroupBox)) )
		{
			COLORREF clr = ((CExtGroupBox*)pHelperSrc)->GetTextColor( bEnabled );
			if( clr != COLORREF(-1L) )
				return clr;
		}
#if (!defined __EXT_MFC_NO_TAB_CTRL)
		else if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtTabWnd)) )
		{
			if( bEnabled )
				return COLORREF( -1L );
		}
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)
		if( bEnabled )
			return RGB(255,255,255);
		else
			return RGB(141,141,141);
	}
	return CExtPaintManagerOffice2007_Impl::QueryObjectTextColor( dc, bEnabled, bFocused, bHovered, bPressed, pHelperSrc, lParam );
}

COLORREF CExtPaintManagerOffice2010_R2_Black::QueryObjectTextColor(
	CDC & dc,
	bool bEnabled,
	bool bFocused,
	bool bHovered,
	bool bPressed,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::QueryObjectTextColor( dc, bEnabled, bFocused, bHovered, bPressed, pHelperSrc, lParam );	
	if( pHelperSrc != NULL )
	{
		if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtButton)) )
		{
			if( bEnabled )
			{
				if( bPressed )
				{
					COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorPressed();
					if( clr != COLORREF(-1L) )
						return clr;
				}
				else if( bHovered )
				{
					COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorHover();
					if( clr != COLORREF(-1L) )
						return clr;
				}
				COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorNormal();
				if( clr != COLORREF(-1L) )
					return clr;
			} // if( bEnabled )
			else
			{
				COLORREF clr = ((CExtButton*)pHelperSrc)->GetTextColorDisabled();
				if( clr != COLORREF(-1L) )
					return clr;
			} // else from if( bEnabled )
		} // if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtButton)) )
		else if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtGroupBox)) )
		{
			COLORREF clr = ((CExtGroupBox*)pHelperSrc)->GetTextColor( bEnabled );
			if( clr != COLORREF(-1L) )
				return clr;
		}
#if (!defined __EXT_MFC_NO_TAB_CTRL)
		else if( pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtTabWnd)) )
		{
			if( bEnabled )
				return COLORREF( -1L );
		}
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)
		if( bEnabled )
			return RGB(220,220,220);
		else
			return RGB(141,141,141);
	}
	return CExtPaintManagerOffice2007_Impl::QueryObjectTextColor( dc, bEnabled, bFocused, bHovered, bPressed, pHelperSrc, lParam );
}

void CExtPaintManagerOffice2007_Impl::PaintGripper(
	CDC & dc,
	CExtPaintManager::PAINTGRIPPERDATA & _pgd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintGripper( dc, _pgd );
		return;
	}
	if(		(! ( _pgd.m_bSideBar || _pgd.m_bFloating ) )
		||	_pgd.m_pHelperSrc == NULL
		||	(!(
				_pgd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtControlBar))
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
				|| _pgd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtDynAutoHideSlider))
#endif
				|| _pgd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtMiniDockFrameWnd))
			))
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerOffice2003::PaintGripper( dc, _pgd );
		return;
	}
	if( _pgd.m_pHelperSrc->IsKindOf(RUNTIME_CLASS(CExtMiniDockFrameWnd)) )
	{
		CExtControlBar * pBar = ((CExtMiniDockFrameWnd*)_pgd.m_pHelperSrc)->GetControlBarExt( false );
		if( pBar == NULL )
		{
			CExtPaintManagerOffice2003::PaintGripper( dc, _pgd );
			return;
		}

#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
		#ifdef __FREIWALD_ORIGINAL__
		#else
			if ((pBar != NULL) && (!pBar->IsKindOf(RUNTIME_CLASS(CExtDynTabControlBar))))
		#endif
#endif

		if(		pBar->IsFixedMode()
			||	pBar->IsKindOf( RUNTIME_CLASS(CExtDynControlBar) )
			)
		{
			_pgd.m_bFloating = true;
			_pgd.m_bSideBar = false;
			_pgd.m_bActive = false;
		}
	}
CRect rectGripper2( _pgd.m_rcGripper );
	if( _pgd.m_bFlashCaptionHighlightedState )
	{
		ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
		ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
		dc.FillSolidRect( rectGripper2, _pgd.m_clrFlashCaptionBackground );
	} // if( _pgd.m_bFlashCaptionHighlightedState )
	else if( ! _pgd.m_bHelperNoFill )
	{
		if(		_pgd.m_bFloating 
			&&	(!_pgd.m_bSideBar) 
			&&	m_clrFloatingToolbarGripperSolid != COLORREF(-1L) 
			)
			dc.FillSolidRect( &rectGripper2, m_clrFloatingToolbarGripperSolid );
		else
		{
			if( _pgd.m_bActive )
				stat_PaintGradientRect(
					dc,
					&rectGripper2,
					GetColor( _2003CLR_BTN_HP_LEFT, _pgd.m_pHelperSrc, _pgd.m_lParam ),
					GetColor( _2003CLR_BTN_HP_RIGHT, _pgd.m_pHelperSrc, _pgd.m_lParam ),
					(!_pgd.m_bHorz)
					);
			else
				OnPaintToolBarGradient( dc, rectGripper2, (!_pgd.m_bHorz), _pgd.m_pHelperSrc, _pgd.m_lParam );
		}
	}
	int nTextLen = 0;
	if(		_pgd.m_sCaption != NULL
		&&	( nTextLen = int(_tcslen(_pgd.m_sCaption)) ) > 0
		&&	(! _pgd.m_rcText.IsRectEmpty() )
		&&	_pgd.m_rcText.right > _pgd.m_rcText.left
		&&	_pgd.m_rcText.bottom > _pgd.m_rcText.top
		)
	{
		COLORREF clrText =
			_pgd.m_bFlashCaptionHighlightedState
				? _pgd.m_clrFlashCaptionText
				:	(
						_pgd.m_bSideBar
							?	(	_pgd.m_bActive
									? m_clrDockingFrameCaptionTextActive
									: m_clrDockingFrameCaptionTextInactive
								)
							: m_clrDockingFrameCaptionTextFloatingFixed
					)
				;
		COLORREF clrOldText = dc.SetTextColor( clrText );
		int nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CFont * pCurrFont = (&m_FontBoldBC);
		CFont * pOldFont = dc.SelectObject( pCurrFont );
		ASSERT( pOldFont != NULL );
		CRect rcDrawText( _pgd.m_rcText );
		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( _pgd.m_bHorz )
			eLO = CExtRichContentLayout::__ELOT_270_CW;
		UINT nDtAlign = _pgd.m_bForceRTL ? DT_RIGHT : DT_LEFT;
		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, _pgd.m_sCaption, nTextLen, rcDrawText, nDtAlign|DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS, 0
			);
		dc.SelectObject( pOldFont );
		dc.SetBkMode(nOldBkMode);
		dc.SetTextColor(clrOldText);
	}
}

void CExtPaintManagerOffice2007_Impl::PaintDockingFrame(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGFRAMEDATA & _pdfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pdfd.m_rcWindow.IsRectEmpty() )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDockingFrame( dc, _pdfd );
		return;
	}
	if(		_pdfd.m_pHelperSrc == NULL
		||	(!	(	(	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtControlBar) )
					&&	(! ((CExtControlBar*)_pdfd.m_pHelperSrc)->IsFixedMode() )
					)
				||	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtMiniDockFrameWnd) )
				)
			)
		||	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		)
	{
		CExtPaintManagerOffice2003::PaintDockingFrame( dc, _pdfd );
		return;
	}
	dc.ExcludeClipRect( _pdfd.m_rcClient );
CRect rcWnd( _pdfd.m_rcWindow );
COLORREF clr3dFace = GetColor( COLOR_3DFACE, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
COLORREF clrDark = m_clrDockingFrameDark;
COLORREF clrBkOld = dc.GetBkColor();
COLORREF clrBkNew =
		GetColor(
			( _pdfd.m_bFloating )
				? (	_pdfd.m_bExtBar ? XPCLR_3DFACE_FLOAT_R : XPCLR_3DFACE_FLOAT_F )
				: CLR_3DFACE_OUT
				,
			_pdfd.m_pHelperSrc,
			_pdfd.m_lParam 
			);
	if( _pdfd.m_bFloating )
	{
		dc.Draw3dRect( &rcWnd, clrDark, clrDark);
		rcWnd.DeflateRect(1,1);
		dc.Draw3dRect( &rcWnd, clrDark, clrDark);
		rcWnd.DeflateRect(1,1);
		dc.Draw3dRect( &rcWnd, clrBkNew, clrBkNew);
		rcWnd.DeflateRect(0,0,1,1);
		dc.SetPixel( rcWnd.left, rcWnd.top, clrDark );
		dc.SetPixel( rcWnd.left, rcWnd.bottom, clrDark );
		dc.SetPixel( rcWnd.right, rcWnd.top, clrDark );
		dc.SetPixel( rcWnd.right, rcWnd.bottom, clrDark );
	} // if( _pdfd.m_bFloating )
	else
	{
		if(		_pdfd.m_pHelperSrc != NULL
			&&	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
			&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_pDockSite != NULL )
			&&	( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable )
			)
		{
			dc.SelectClipRgn(NULL);
			return;
		}
		dc.FillSolidRect( &rcWnd, clrBkNew );
		if( ! _pdfd.m_bExtBar )
			dc.Draw3dRect( &rcWnd, clr3dFace, clr3dFace);
		if( ! _pdfd.m_bSideBar && ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8 )
		{
			static WORD hatchBits[8] = { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, };
			CBrush br;
			CBitmap bmp;
			bmp.CreateBitmap( 8, 8, 1, 1, hatchBits );
			br.CreatePatternBrush( &bmp );
			LOGBRUSH lbr;
			br.GetLogBrush( &lbr );
			HPEN hPenDesired = ::ExtCreatePen( PS_GEOMETRIC, 1, &lbr, 0, NULL );
			if( hPenDesired == NULL )
			{
				COLORREF clrDesiredSolidPen = GetColor( COLOR_3DSHADOW, _pdfd.m_pHelperSrc, _pdfd.m_lParam );
				hPenDesired = ::CreatePen( PS_SOLID, 1, clrDesiredSolidPen );
				if( hPenDesired == NULL )
				{
					hPenDesired = (HPEN) ::GetStockObject(BLACK_PEN);
					ASSERT( hPenDesired != NULL );
				} // if( hPenDesired == NULL )
			} // if( hPenDesired == NULL )
			CPen pen;
			VERIFY( pen.Attach( hPenDesired ) );
			CPen * pOldPen = dc.SelectObject( &pen );
			if( m_bHelperXpStyle8BitBarRect )
			{
				dc.MoveTo( rcWnd.left, rcWnd.top );
				dc.LineTo( rcWnd.right-1, rcWnd.top );
				dc.LineTo( rcWnd.right-1, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left, rcWnd.top );
			} // if( m_bHelperXpStyle8BitBarRect )
			else
			{
				static const SIZE g_sizeRO = { 2, 2 };
				dc.MoveTo( rcWnd.left+g_sizeRO.cx, rcWnd.top );
				dc.LineTo( rcWnd.right-1-g_sizeRO.cx, rcWnd.top );
				dc.LineTo( rcWnd.right-1, rcWnd.top+g_sizeRO.cy );
				dc.LineTo( rcWnd.right-1, rcWnd.bottom-1-g_sizeRO.cy );
				dc.LineTo( rcWnd.right-1-g_sizeRO.cx, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left+g_sizeRO.cx, rcWnd.bottom-1 );
				dc.LineTo( rcWnd.left, rcWnd.bottom-1-g_sizeRO.cy );
				dc.LineTo( rcWnd.left, rcWnd.top+g_sizeRO.cy );
				dc.LineTo( rcWnd.left+g_sizeRO.cx, rcWnd.top );
			} // else from if( m_bHelperXpStyle8BitBarRect )
			dc.SelectObject( pOldPen );
		} // if( !_pdfd.m_bSideBar && ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) < 8 )
	} // else from if( _pdfd.m_bFloating )
	dc.SetBkColor( clrBkOld );
	//dc.IntersectClipRect(rectWindow);
	dc.SelectClipRgn(NULL);
}

void CExtPaintManagerOffice2007_Impl::PaintDockingCaptionButton(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA & _pdcbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT(
			__DCBT_VALUE_MIN <= _pdcbd.m_eType
		&&	_pdcbd.m_eType <= __DCBT_VALUE_MAX
		);
	if( _pdcbd.m_rcClient.IsRectEmpty() )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintDockingCaptionButton( dc, _pdcbd );
		return;
	}
	if(		_pdcbd.m_pHelperSrc == NULL
		||	( ! _pdcbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarNcAreaButton) ) )
		)
	{
		CExtPaintManagerOffice2003::PaintDockingCaptionButton( dc, _pdcbd );
		return;
	}
CExtControlBar * pBar = ((CExtBarNcAreaButton*)_pdcbd.m_pHelperSrc)->GetBar();
	ASSERT_VALID( pBar );
bool bFixedMode = pBar->IsFixedMode();
bool bHover = _pdcbd.m_bHover;
	if( !_pdcbd.m_bEnabled )
		bHover = false;
COLORREF ColorValues[2] = { RGB(0,0,0), RGB(0,0,0), };
	if( _pdcbd.m_bEnabled )
	{
		if( _pdcbd.m_bPushed )
			ColorValues[1] = bFixedMode ? m_clrDockingCaptionShapeFixedPushed : m_clrDockingCaptionShapeResizablePushed ;
		else if( _pdcbd.m_bHover )
			ColorValues[1] = bFixedMode ? m_clrDockingCaptionShapeFixedHover : m_clrDockingCaptionShapeResizableHover;
		else
			ColorValues[1] = bFixedMode ? m_clrDockingCaptionShapeFixedNormal : m_clrDockingCaptionShapeResizableNormal;
	} // if( bEnabled )
	else
		ColorValues[1] = bFixedMode ? m_clrDockingCaptionShapeFixedDisabled : m_clrDockingCaptionShapeResizableDisabled;
CRect rcGlyph( _pdcbd.m_rcClient );
	rcGlyph.NormalizeRect();
	if( bHover || _pdcbd.m_bPushed )
	{
		dc.FillSolidRect( &rcGlyph, GetColor( _pdcbd.m_bPushed ? XPCLR_HILIGHT : CLR_3DFACE_IN, _pdcbd.m_pHelperSrc, _pdcbd.m_lParam ) );
		CRect rcBtnBorder(rcGlyph);
		rcBtnBorder.InflateRect(1,1);
		COLORREF clrBtnBorder = GetColor( _pdcbd.m_bBarWndActive ? XPCLR_HILIGHT : XPCLR_HILIGHT_BORDER, _pdcbd.m_pHelperSrc, _pdcbd.m_lParam );
		dc.Draw3dRect( rcBtnBorder, clrBtnBorder, clrBtnBorder );
	}
	if( rcGlyph.Width() & 1 )
		rcGlyph.left++;
	if( rcGlyph.Height() & 1 )
		rcGlyph.top++;
int eType = _pdcbd.m_eType;
	if( _pdcbd.m_bSideBar && !_pdcbd.m_bFloating && eType == __DCBT_CLOSE )
		eType = __DCBT_XP_THIN_CLOSE;
#ifdef __FREIWALD_ORIGINAL__
	if( _pdcbd.m_bSideBar && !_pdcbd.m_bFloating && eType == __DCBT_CLOSE )
		eType = __DCBT_XP_THIN_CLOSE;
#else
#endif
glyph_t * pGlyph = g_DockingCaptionGlyphs[eType];
	ASSERT( pGlyph != NULL );
	PaintGlyphCentered( dc, rcGlyph, *pGlyph, ColorValues );
}

bool CExtPaintManagerOffice2007_Impl::IsMenuMustCombineExcludeArea(
	const CObject * pMenuTrackerObject // = NULL
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::IsMenuMustCombineExcludeArea( pMenuTrackerObject );
	if( pMenuTrackerObject != NULL )
	{
		if(		pMenuTrackerObject->IsKindOf( RUNTIME_CLASS( CExtToolControlBar ) )
			||	pMenuTrackerObject->IsKindOf( RUNTIME_CLASS( CExtBarNcAreaButton ) )
			||	pMenuTrackerObject->IsKindOf( RUNTIME_CLASS( CExtBarButton ) )
			||	pMenuTrackerObject->IsKindOf( RUNTIME_CLASS( CExtMiniDockFrameWnd ) )
			||	pMenuTrackerObject->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
			)
			return true;
	} // if( pMenuTrackerObject != NULL )
	return false;
}

#if (!defined __EXT_MFC_NO_RIBBON_BAR)

CRect CExtPaintManager::Ribbon_CalcLargeDropDownRect(
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	lParam;
INT nAdvance = UiScalingDo( 39, __EUIST_Y );
CRect rc = *pTBB;
	rc.top += nAdvance;
	return rc;
}

CRect CExtPaintManagerOffice2007_Impl::Ribbon_CalcLargeDropDownRect(
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_CalcLargeDropDownRect( pTBB, lParam );
	return
		CExtPaintManager::Ribbon_CalcLargeDropDownRect( pTBB, lParam );
}

void CExtPaintManager::Ribbon_PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
	if( ! dc.RectVisible( &_ppbd.m_rcClient ) )
		return;
	ASSERT_VALID( _ppbd.m_pHelperSrc );
CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ppbd.m_pHelperSrc );
	ASSERT( pTBB != NULL );
CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
CExtRibbonButton * pRibbonTBB = DYNAMIC_DOWNCAST( CExtRibbonButton, _ppbd.m_pHelperSrc );
CExtSafeString strText = pTBB->GetText();
INT nTextLength = strText.GetLength();
enum e_layout_case_t
{
	__ELC_TOOL,
	__ELC_SMALL,
	__ELC_LARGE,
};
e_layout_case_t eLC = __ELC_TOOL;
	if( pRibbonTBB != NULL )
	{
		if(		pParentTBB == NULL
			||	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
			)
		{
			if( pParentTBB == NULL )
			{
				const CExtRibbonNode * pRibbonNode = pTBB->Ribbon_GetNode();
				if( pRibbonNode != NULL )
				{
					const CExtCustomizeCmdTreeNode * pParentNode = pRibbonNode->GetParentNode();
					if(		pParentNode != NULL
						&&	(	pParentNode->IsKindOf( RUNTIME_CLASS( CExtRibbonNodeRightButtonsCollection ) )
							||	pParentNode->IsKindOf( RUNTIME_CLASS( CExtRibbonNodeQuickAccessButtonsCollection ) )
							)
						)
					eLC = __ELC_SMALL;
				} // if( pRibbonNode != NULL )
			} // if( pParentTBB == NULL )
		}
		else
		{
			if( pRibbonTBB->RibbonILV_Get() == __EXT_RIBBON_ILV_SIMPLE_LARGE )
				eLC = __ELC_LARGE;
			else
				eLC = __ELC_SMALL;
		}
	} // if( pRibbonTBB != NULL )
	else
	{
		if(		pParentTBB == NULL
			||	( ! pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) ) )
			)
			eLC = __ELC_SMALL;
	} // if( pRibbonTBB != NULL )
INT nILV = pTBB->RibbonILV_Get();
CRect rcCP = pTBB->OnRibbonGetContentPadding();
CRect rcIcon = _ppbd.m_rcClient;
	rcIcon.DeflateRect( rcCP.left, rcCP.top, rcCP.right, rcCP.bottom );
INT nTextToIconDistance = 0;
CRect rcText =  rcIcon;
CSize _sizeIcon( 0, 0 );
CExtCmdIcon * pCmdIcon = pTBB->GetIconPtr();
	if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
	{
		_sizeIcon = Ribbon_GetIconSize( pTBB, nILV, _ppbd.m_lParam );
		if( nTextLength >= 0 )
			nTextToIconDistance = Ribbon_GetTextToIconDistance( dc, nILV, pTBB, _ppbd.m_lParam );
		if( eLC == __ELC_LARGE )
		{
			rcIcon.bottom = rcIcon.top + _sizeIcon.cy;
			rcIcon.OffsetRect( ( rcIcon.Width() - _sizeIcon.cx ) / 2, 4 );
			if( nTextLength > 0 )
			{
				rcText.top = rcIcon.bottom;
				rcText.top += nTextToIconDistance;
			};
		} // if( eLC == __ELC_LARGE )
		else
		{
			if( nTextLength > 0 )
			{
				rcIcon.right = rcText.left = rcIcon.left + _sizeIcon.cx;
				rcText.left += nTextToIconDistance;
			}
			else
			{
				rcIcon = _ppbd.m_rcClient;
				if(		pTBB->IsAbleToTrackMenu()
					//&&	_ppbd.m_bSeparatedDropDown
					&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonGroup ) ) )
					)
					rcIcon.right -= GetDropDownButtonWidth( _ppbd.m_pHelperSrc, _ppbd.m_lParam );
				rcIcon.OffsetRect( ( rcIcon.Width() - _sizeIcon.cx ) / 2 + 1, 0 );
			}
			rcIcon.OffsetRect( 0, ( rcIcon.Height() - _sizeIcon.cy ) / 2 );
		} // else from if( eLC == __ELC_LARGE )
	} // if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
	else
		pCmdIcon = NULL;

bool bDrawDropDownWithText = _ppbd.m_bDropDown;
	switch( eLC )
	{
	case __ELC_TOOL:
	{
		bDrawDropDownWithText = false;
		PAINTPUSHBUTTONDATA _ppbd2 = _ppbd;
		_ppbd2.m_pHelperSrc = NULL;
		_ppbd2.m_pIcon = NULL;
		_ppbd2.m_sText = _T("");
		_ppbd2.m_bTransparentBackground = false;
//		_ppbd2.m_bDropDown = false;
//		_ppbd2.m_bSeparatedDropDown = false;
//		_ppbd2.m_bPushedDropDown = false;
		_ppbd2.m_bFlat = false;
		if( ! ( _ppbd2.m_bHover || _ppbd2.m_bPushed || _ppbd2.m_bIndeterminate ) )
			_ppbd2.m_clrForceBk = GetColor( CLR_3DFACE_OUT, _ppbd2.m_pHelperSrc, _ppbd2.m_lParam );
		PaintPushButton( dc, _ppbd2 );
		if( _ppbd2.m_bDropDown )
			rcIcon.OffsetRect( _ppbd.m_rcClient.left - rcIcon.left + 5, 0 );
	}
	break; // case __ELC_TOOL
	case __ELC_LARGE:
		ASSERT_VALID( pTBB );
		rcText = Ribbon_CalcLargeDropDownRect( pTBB );
		if( ! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButton ) ) )
			bDrawDropDownWithText = false;
	case __ELC_SMALL:
	{
		if( _ppbd.m_bEnabled && ( _ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bIndeterminate )  )
		{
			PAINTPUSHBUTTONDATA _ppbd2 = _ppbd;
			_ppbd2.m_pHelperSrc = NULL;
			_ppbd2.m_pIcon = NULL;
			_ppbd2.m_sText = _T("");
			_ppbd2.m_bTransparentBackground = false;
			_ppbd2.m_bNoDropDownArrow = true;
			bool bDrawSepH = false;
			if( eLC == __ELC_LARGE )
			{
				_ppbd2.m_bDropDown = false;
				_ppbd2.m_bSeparatedDropDown = false;
				_ppbd2.m_bPushedDropDown = false;
				bDrawSepH = _ppbd.m_bDropDown && _ppbd.m_bSeparatedDropDown;
			}
			_ppbd2.m_bFlat = true;
			PaintPushButton( dc, _ppbd2 );
			if( bDrawSepH )
			{
				CRect rcSepH = rcText;
				rcSepH.bottom = rcSepH.top + 3;
				rcSepH.DeflateRect( 3, 0, 2, 0 );
// 				if( g_PaintManager.m_nLPY > 96 )
// 				{
// 					INT nAdvace = UiScalingDo( 4, __EUIST_Y );
// 					rcSepH.OffsetRect( 0, nAdvace );
// 				}
				PaintSeparator( dc, rcSepH, false, true, NULL );
			} // if( bDrawSepH )
		} // if( _ppbd.m_bEnabled && ( _ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bIndeterminate )  )
	}
	break; // cases __ELC_LARGE and __ELC_SMALL
	} // switch( eLC )

	if( pCmdIcon != NULL )
	{
		ASSERT( ! pCmdIcon->IsEmpty() );
		CSize _sizeRealIcon = pCmdIcon->GetSize();
		if( _sizeRealIcon != _sizeIcon )
			rcIcon.OffsetRect(
				( _sizeIcon.cx - _sizeRealIcon.cx ) / 2,
				( _sizeIcon.cy - _sizeRealIcon.cy) / 2
				);
		rcIcon.right = rcIcon.left + _sizeRealIcon.cx;
		rcIcon.bottom = rcIcon.top + _sizeRealIcon.cy;
		bool bCenterBigIconVerticallyMode = ( eLC == __ELC_LARGE && nTextLength == 0 && ( ! _ppbd.m_bDropDown ) ) ? true : false;
		if( bCenterBigIconVerticallyMode)
			rcIcon.OffsetRect(
				0,
				_ppbd.m_rcClient.top - rcIcon.top + ( _ppbd.m_rcClient.Height() - rcIcon.Height() ) / 2
				);

		CExtCmdIcon::e_paint_type_t ePT = CExtCmdIcon::__PAINT_DISABLED;
		if( _ppbd.m_bEnabled )
		{
			if( _ppbd.m_bPushed )
				ePT = CExtCmdIcon::__PAINT_PRESSED;
			else if( _ppbd.m_bHover )
				ePT = CExtCmdIcon::__PAINT_HOVER;
			else
				ePT = CExtCmdIcon::__PAINT_NORMAL;
		} // if( _ppbd.m_bEnabled )
		pCmdIcon->Paint(
			this,
			dc.m_hDC,
			rcIcon,
			ePT
			);
	} // if( pCmdIcon != NULL )

	if( nTextLength > 0 || _ppbd.m_bDropDown )
	{
		UINT nDT = 0;
		if( eLC != __ELC_LARGE )
		{
			strText.Replace( _T("\r"), _T(" ") );
			strText.Replace( _T("\n"), _T(" ") );
			strText.Replace( _T("\t"), _T(" ") );
			strText.Replace( _T("  "), _T(" ") );
			strText.TrimLeft( _T(" ") );
			strText.TrimRight( _T(" ") );
			nTextLength = INT( strText.GetLength() );
			nDT = DT_CENTER|DT_VCENTER|DT_SINGLELINE;
		} // if( eLC != __ELC_LARGE )
		else
			nDT = DT_CENTER|DT_TOP;
		if( nTextLength > 0 || _ppbd.m_bDropDown )
		{
			CFont * pFont = pTBB->GetBar()->OnGetToolbarFont( false, false, _ppbd.m_pHelperSrc );
			ASSERT( pFont->GetSafeHandle() != NULL );
			CFont * pOldFont = dc.SelectObject( pFont );
			int nOldBkMode = dc.SetBkMode( TRANSPARENT );
			COLORREF clrText = GetColor( _ppbd.m_bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED );
			COLORREF clrOldText = dc.SetTextColor( clrText );
			Ribbon_PaintText(
				dc,
				( nTextLength > 0 ) ? LPCTSTR(strText) : _T(""),
				rcText,
				nDT,
				bDrawDropDownWithText,
				NULL,
				_ppbd.m_pHelperSrc,
				_ppbd.m_lParam
				);
			dc.SetTextColor( clrOldText );
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
		} // if( nTextLength > 0 || _ppbd.m_bDropDown )
	} // if( nTextLength > 0 || _ppbd.m_bDropDown )
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
	if( ! dc.RectVisible( &_ppbd.m_rcClient ) )
		return;
	ASSERT_VALID( _ppbd.m_pHelperSrc );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintPushButton( dc, _ppbd );
		return;
	}
CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ppbd.m_pHelperSrc );
	ASSERT( pTBB != NULL );
CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
CExtRibbonButton * pRibbonTBB = DYNAMIC_DOWNCAST( CExtRibbonButton, _ppbd.m_pHelperSrc );
enum e_layout_case_t
{
	__ELC_TOOL,
	__ELC_SMALL,
	__ELC_LARGE,
};
bool bF = false;
e_layout_case_t eLC = __ELC_TOOL;
e_button_tool_style_arr_t eBTS1 = __EBTSA_SOLID; //, eBTS2 = __EBTSA_SOLID;
	if( pRibbonTBB != NULL )
	{
		if(		pParentTBB == NULL
			||	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
			)
		{
			if( pParentTBB == NULL )
			{
				const CExtRibbonNode * pRibbonNode = pTBB->Ribbon_GetNode();
				if( pRibbonNode != NULL )
				{
					const CExtCustomizeCmdTreeNode * pParentNode = pRibbonNode->GetParentNode();
					if(		pParentNode != NULL
						&&	(	pParentNode->IsKindOf( RUNTIME_CLASS( CExtRibbonNodeRightButtonsCollection ) )
							||	pParentNode->IsKindOf( RUNTIME_CLASS( CExtRibbonNodeQuickAccessButtonsCollection ) )
							)
						)
					eLC = __ELC_SMALL;
				} // if( pRibbonNode != NULL )
			} // if( pParentTBB == NULL )
		}
		else
		{
			if( pRibbonTBB->RibbonILV_Get() == __EXT_RIBBON_ILV_SIMPLE_LARGE )
				eLC = __ELC_LARGE;
			else
				eLC = __ELC_SMALL;
		}
	} // if( pRibbonTBB != NULL )
	else
	{
		if(		pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonFile ) )
			||	pTBB->IsKindOf( RUNTIME_CLASS( CExtBarCheckBoxButton ) )
			||	pTBB->IsKindOf( RUNTIME_CLASS( CExtBarRadioBoxButton ) )
			||	pParentTBB == NULL
			||	( ! pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) ) )
			)
		{
			eLC = __ELC_SMALL;
			bF = true;
		}
	} // if( pRibbonTBB != NULL )

CExtBitmap * pBmp1 = NULL, * pBmp2 = NULL, * pBmp3 = NULL, * pBmp4 = NULL;
CRect rcSrc1( 0, 0, 0, 0 ), rcDst1( 0, 0, 0, 0 ), rcPadding1( 0, 0, 0, 0 );
CRect rcSrc2( 0, 0, 0, 0 ), rcDst2( 0, 0, 0, 0 ), rcPadding2( 0, 0, 0, 0 );
CRect rcSrc3( 0, 0, 0, 0 ), rcDst3( 0, 0, 0, 0 ), rcPadding3( 0, 0, 0, 0 );
CRect rcSrc4( 0, 0, 0, 0 ), rcDst4( 0, 0, 0, 0 ), rcPadding4( 0, 0, 0, 0 );

CExtSafeString strText = pTBB->GetText();
INT nTextLength = strText.GetLength();
INT nILV = pTBB->RibbonILV_Get();
CRect rcCP = pTBB->OnRibbonGetContentPadding();
CRect rcIcon = _ppbd.m_rcClient;
	rcIcon.DeflateRect( rcCP.left, rcCP.top, rcCP.right, rcCP.bottom );
INT nTextToIconDistance = 0;
CRect rcText =  rcIcon;
// 	if(		pTBB->IsAbleToTrackMenu()
// 		&&	eLC != __ELC_LARGE
// 		)
// 	{
// 		INT nDropDownButtonWidth = GetDropDownButtonWidth( _ppbd.m_pHelperSrc, _ppbd.m_lParam );
// 		rcIcon.right -= nDropDownButtonWidth + 3;
// 	}
CSize _sizeIcon( 0, 0 );
CExtCmdIcon * pCmdIcon = pTBB->GetIconPtr();
	if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
	{
		_sizeIcon = Ribbon_GetIconSize( pTBB, nILV, _ppbd.m_lParam );
		if( nTextLength >= 0 )
			nTextToIconDistance = Ribbon_GetTextToIconDistance( dc, nILV, pTBB, _ppbd.m_lParam );
		if( eLC == __ELC_LARGE )
		{
			rcIcon.bottom = rcIcon.top + _sizeIcon.cy;
			rcIcon.OffsetRect( ( rcIcon.Width() - _sizeIcon.cx ) / 2, 4 );
			if( nTextLength > 0 )
			{
				rcText.top = rcIcon.bottom;
				rcText.top += nTextToIconDistance;
			};
		} // if( eLC == __ELC_LARGE )
		else
		{
			if( nTextLength > 0 )
			{
				rcIcon.right = rcText.left = rcIcon.left + _sizeIcon.cx;
				rcText.left += nTextToIconDistance;
			}
			else
			{
				rcIcon = _ppbd.m_rcClient;
				if(		pTBB->IsAbleToTrackMenu()
					//&&	_ppbd.m_bSeparatedDropDown
					&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonGroup ) ) )
					)
					rcIcon.right -= GetDropDownButtonWidth( _ppbd.m_pHelperSrc, _ppbd.m_lParam );
				rcIcon.OffsetRect( ( rcIcon.Width() - _sizeIcon.cx ) / 2 + 1, 0 );
			}
			rcIcon.OffsetRect( 0, ( rcIcon.Height() - _sizeIcon.cy ) / 2 );
		} // else from if( eLC == __ELC_LARGE )
	} // if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
	else
		pCmdIcon = NULL;

CExtToolControlBar * pToolBar = pTBB->GetBar();
	ASSERT_VALID( pToolBar );
	CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
bool bSelTrackingMode = false;
	if(		pMenuBar != NULL
		&&	pMenuBar->IsMenuBarTracking()
		&&	pMenuBar->_FlatTrackingIndexGet() == pMenuBar->_GetIndexOf( pTBB )
		)
		bSelTrackingMode = true;

bool bDrawDropDownWithText = _ppbd.m_bDropDown;
	switch( eLC )
	{
	case __ELC_TOOL:
	{
		bDrawDropDownWithText = false;
		if(		pTBB->IsAbleToTrackMenu()
			//&&	_ppbd.m_bSeparatedDropDown
			)
			rcIcon.OffsetRect( _ppbd.m_rcClient.left - rcIcon.left + 3, 0 );
		if( pParentTBB != NULL )
		{
			ASSERT_KINDOF( CExtRibbonButtonToolGroup, pParentTBB );
			INT nSiblingCount = pParentTBB->ChildButtonGetCount();
			ASSERT( nSiblingCount > 0 );
			CExtBarButton * pFirstTBB = pParentTBB->ChildButtonGetAt( 0 );
			ASSERT_VALID( pFirstTBB );
			CExtBarButton * pLastTBB = pParentTBB->ChildButtonGetAt( nSiblingCount - 1 );
			ASSERT_VALID( pLastTBB );
			if( LPVOID(pTBB) == LPVOID(pFirstTBB) )
			{
				if( LPVOID(pTBB) == LPVOID(pLastTBB) )
				{
//					if( ! _ppbd.m_bSeparatedDropDown )
						eBTS1 = __EBTSA_SOLID;
//					else
//					{
//						eBTS1 = __EBTSA_LEFT;
//						eBTS2 = __EBTSA_RIGHT;
//					}
				}
				else
				{
					eBTS1 = __EBTSA_LEFT;
//					if( _ppbd.m_bSeparatedDropDown )
//						eBTS2 = __EBTSA_MIDDLE;
				}
			} // if( LPVOID(pTBB) == LPVOID(pFirstTBB) )
			else if( LPVOID(pTBB) == LPVOID(pLastTBB) )
			{
//				if( ! _ppbd.m_bSeparatedDropDown )
					eBTS1 = __EBTSA_RIGHT;
//				else
//				{
//					eBTS1 = __EBTSA_MIDDLE;
//					eBTS2 = __EBTSA_RIGHT;
//				}
			}
			else
				eBTS1 = __EBTSA_MIDDLE; // eBTS1 = eBTS2 = __EBTSA_MIDDLE;

			if( Ribbon_HaveSeparatorsBetweenToolGroups() )
			{
				CExtBarButton * pParentParentTBB = pParentTBB->ParentButtonGet();
				if( pParentParentTBB != NULL )
				{
					ASSERT_VALID( pParentParentTBB );
					CExtBarButton * pParentParentFirstTBB = pParentParentTBB->ChildButtonGetAt( 0 );
					ASSERT_VALID( pParentParentFirstTBB );
					if( LPVOID(pParentTBB) != LPVOID(pParentParentFirstTBB) )
					{
						INT nPPCount = pParentParentTBB->ChildButtonGetCount();
						ASSERT( nPPCount > 0 );
						CExtBarButton * pParentParentLastTBB = pParentParentTBB->ChildButtonGetAt( nPPCount - 1 );
						ASSERT_VALID( pParentParentLastTBB );
						if( LPVOID(pParentTBB) != LPVOID(pParentParentLastTBB) )
						{
							INT nTGI = pParentParentTBB->ChildButtonGetIndexOf( pParentTBB );
							ASSERT( nTGI < ( nPPCount - 1 ) );
							CExtBarButton * pNextTGTBB = pParentParentTBB->ChildButtonGetAt( nTGI + 1 );
							ASSERT_VALID( pNextTGTBB );
							//ASSERT_KINDOF( CExtRibbonButtonToolGroup, pNextTGTBB );
							CRect rcNextTG = pNextTGTBB->Rect();
							CRect rcThisTG = pParentTBB->Rect();
							if( rcThisTG.top == rcNextTG.top && rcThisTG.bottom == rcNextTG.bottom )
							{
								CRect rcSepTG( rcThisTG.right, rcThisTG.top, rcNextTG.left, rcThisTG.bottom );
								if( rcSepTG.left < rcSepTG.right )
								{
									//dc.FillSolidRect( &rcSepTG, 255 );
									Ribbon_PaintSeparator( dc, rcSepTG, NULL );
								}
							}
						}
					}
				}
			}

		} // if( pParentTBB != NULL )
		INT nImgIndex1 = INT(__E07BI_NORMAL);
		INT nImgIndex2 = INT(__E07BI_NORMAL);
		if( bSelTrackingMode )
				nImgIndex1 = nImgIndex2 = INT(__E07BI_SEL_T);
		else if( _ppbd.m_bEnabled )
		{
			if( _ppbd.m_bPushed || ( _ppbd.m_bIndeterminate && ( ! _ppbd.m_bHover ) ) )
			{
				nImgIndex1 = nImgIndex2 = INT(__E07BI_PRESSED);
				if( _ppbd.m_bSeparatedDropDown )
				{
					if( _ppbd.m_bPushedDropDown )
						nImgIndex1 = INT(__E07BI_SEL_T);
					else
						nImgIndex2 = INT(__E07BI_SEL_T);
				}
			}
			else if( _ppbd.m_bHover )
			{
				nImgIndex1 = nImgIndex2 = INT(__E07BI_HOVER);
				if( _ppbd.m_bSeparatedDropDown )
				{
					if( _ppbd.m_bHoverDropDown )
						nImgIndex1 = INT(__E07BI_SEL_T);
					else
						nImgIndex2 = INT(__E07BI_SEL_T);
				}
			}
			else if( _ppbd.m_bIndeterminate )
				nImgIndex1 = nImgIndex2 = INT(__E07BIX_INDETERMINATE);
		} // else if( _ppbd.m_bEnabled )
		nImgIndex1 = m_arrIndicesButtonTS[nImgIndex1];
		nImgIndex2 = m_arrIndicesButtonTS[nImgIndex2];
		if( nImgIndex1 >= 0 )
		{
			pBmp1 = &( m_bmpArrButtonTS[ INT(eBTS1) ] );
			rcPadding1 = m_rcPaddingOfButtonTS;
			CSize _sizeBmp = pBmp1->GetSize();
			rcSrc1.SetRect( 0, 0, _sizeBmp.cx, m_nHeightOfButtonTS );
			rcSrc1.OffsetRect( 0, m_nHeightOfButtonTS*nImgIndex1 );
		} // if( nImgIndex1 >= 0 )
		rcDst1 = rcDst2 = _ppbd.m_rcClient;
		if(		_ppbd.m_bSeparatedDropDown
			&&	( _ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bIndeterminate )
			&&	_ppbd.m_bEnabled
			)
		{
 			pBmp3 = &( m_bmpToolBtnSeparator[ ( _ppbd.m_bPushed || ( _ppbd.m_bIndeterminate && ( ! _ppbd.m_bHover ) ) ) ? INT(__ETBS_PRESSED) : INT(__ETBS_HOVER) ] );
 			rcPadding3 = m_rcPaddingOfToolButtonSeparator;
 			CSize _sizeBmp = pBmp3->GetSize();
 			rcSrc3.SetRect( 0, 0, _sizeBmp.cx, _sizeBmp.cy );
			INT nDropDownButtonWidth = GetDropDownButtonWidth( _ppbd.m_pHelperSrc, _ppbd.m_lParam );
 			rcDst3 = _ppbd.m_rcClient;
			rcDst3.right -= nDropDownButtonWidth;
			rcDst3.left = rcDst3.right - _sizeBmp.cx;
		} // if( _ppbd.m_bSeparatedDropDown ...
		if( _ppbd.m_bDropDown )
		{
			pBmp4 = &m_bmpRibbonDDA;
 			CSize _sizeBmp = pBmp4->GetSize();
 			rcSrc4.SetRect( 0, 0, _sizeBmp.cx, _sizeBmp.cy );
			INT nDropDownButtonWidth = GetDropDownButtonWidth( _ppbd.m_pHelperSrc, _ppbd.m_lParam );
 			rcDst4 = _ppbd.m_rcClient;
			rcDst4.left = rcDst4.right - nDropDownButtonWidth;
			rcDst4.left += ( rcDst4.Width() - _sizeBmp.cx ) / 2;
			rcDst4.top += ( rcDst4.Height() - _sizeBmp.cy ) / 2;
			rcDst4.right = rcDst4.left + _sizeBmp.cx;
			rcDst4.bottom = rcDst4.top + _sizeBmp.cy;
		} // if( _ppbd.m_bDropDown )
		if( _ppbd.m_bSeparatedDropDown && nImgIndex2 >= 0 )
		{
			pBmp2 = &( m_bmpArrButtonTS[ INT(eBTS1) ] );
			rcPadding2 = m_rcPaddingOfButtonTS;
			CSize _sizeBmp = pBmp2->GetSize();
			rcSrc2.SetRect( 0, 0, _sizeBmp.cx, m_nHeightOfButtonTS );
			rcSrc2.OffsetRect( 0, m_nHeightOfButtonTS*nImgIndex2 );
			INT nDropDownButtonWidth = GetDropDownButtonWidth( _ppbd.m_pHelperSrc, _ppbd.m_lParam );
			rcDst1.right = rcDst2.left = rcDst2.right - nDropDownButtonWidth;
			rcSrc1.right -= rcPadding1.right;
			rcSrc2.left += rcPadding2.left;
			rcPadding1.right = rcPadding2.left = 0;
		} // if( _ppbd.m_bSeparatedDropDown && nImgIndex2 >= 0 )
	}
	break; // case __ELC_TOOL
	case __ELC_SMALL:
	{
		INT nImgIndex1 = INT(__E07BI_NORMAL);
		INT nImgIndex2 = INT(__E07BI_NORMAL);
		if( bSelTrackingMode )
		{
			nImgIndex1 = nImgIndex2 = INT(__E07BI_SEL_T);
		}
		else if( _ppbd.m_bEnabled )
		{
			if( _ppbd.m_bPushed || ( _ppbd.m_bIndeterminate && ( ! _ppbd.m_bHover ) ) )
			{
				nImgIndex1 = nImgIndex2 = INT(__E07BI_PRESSED);
				if( _ppbd.m_bSeparatedDropDown )
				{
					if( _ppbd.m_bPushedDropDown )
						nImgIndex1 = INT(__E07BI_SEL_T);
					else
						nImgIndex2 = INT(__E07BI_SEL_T);
				}
			}
			else if( _ppbd.m_bHover )
			{
				nImgIndex1 = nImgIndex2 = INT(__E07BI_HOVER);
				if( _ppbd.m_bSeparatedDropDown )
				{
					if( _ppbd.m_bHoverDropDown )
						nImgIndex1 = INT(__E07BI_SEL_T);
					else
						nImgIndex2 = INT(__E07BI_SEL_T);
				}
			}
			else if( _ppbd.m_bIndeterminate )
				nImgIndex1 = nImgIndex2 = INT(__E07BIX_INDETERMINATE);
		} // else if( _ppbd.m_bEnabled )
		nImgIndex1 = m_arrIndicesButtonSS_Left[nImgIndex1];
		nImgIndex2 = m_arrIndicesButtonSS_Right[nImgIndex2];
		if( nImgIndex1 >= 0 )
		{
			if( _ppbd.m_bSeparatedDropDown )
			{
				ASSERT( nImgIndex2 >= 0 );
				pBmp1 = &( m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)] );
				pBmp2 = &( m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)] );
				rcPadding1 = rcPadding2 = m_rcPaddingOfButtonSS;
				CSize _sizeBmp1 = pBmp1->GetSize();
				CSize _sizeBmp2 = pBmp2->GetSize();
				rcSrc1.SetRect( 0, 0, _sizeBmp1.cx, m_nHeightOfButtonSS );
				rcSrc2.SetRect( 0, 0, _sizeBmp2.cx, m_nHeightOfButtonSS );
				rcSrc1.OffsetRect( 0, m_nHeightOfButtonSS*nImgIndex1 );
				rcSrc2.OffsetRect( 0, m_nHeightOfButtonSS*nImgIndex2 );
				rcDst1 = rcDst2 = _ppbd.m_rcClient;
				INT nDropDownButtonWidth = GetDropDownButtonWidth( _ppbd.m_pHelperSrc, _ppbd.m_lParam );
				nDropDownButtonWidth -= rcPadding1.right + 1;
				rcDst1.right -= nDropDownButtonWidth;
				rcDst2.left = rcDst2.right - nDropDownButtonWidth;
			} // if( _ppbd.m_bSeparatedDropDown )
			else
			{
				pBmp1 = &( m_bmpArrButtonSS_simple );
				rcPadding1 = m_rcPaddingOfButtonSS;
				CSize _sizeBmp = pBmp1->GetSize();
				rcSrc1.SetRect( 0, 0, _sizeBmp.cx, m_nHeightOfButtonSS );
				rcSrc1.OffsetRect( 0, m_nHeightOfButtonSS*nImgIndex1 );
				rcDst1 = _ppbd.m_rcClient;
			} // else from if( _ppbd.m_bSeparatedDropDown )
		} // if( nImgIndex1 >= 0 )
	}
	break; // case __ELC_SMALL
	case __ELC_LARGE:
	{
		ASSERT_VALID( pTBB );
		rcText = Ribbon_CalcLargeDropDownRect( pTBB );
		INT nImgIndex1 = INT(__E07BIX_NORMAL);
		INT nImgIndex2 = INT(__E07BIX_NORMAL);
		if( bSelTrackingMode )
			nImgIndex1 = nImgIndex2 = INT(__E07BIX_SELECTED);
		else if( _ppbd.m_bEnabled )
		{
			if( _ppbd.m_bPushed )
			{
				nImgIndex1 = nImgIndex2 = INT(__E07BIX_PRESSED);
				if( _ppbd.m_bSeparatedDropDown )
				{
					if( _ppbd.m_bPushedDropDown )
						nImgIndex1 = INT(__E07BIX_HOVER2);
					else
						nImgIndex2 = INT(__E07BIX_HOVER2);
				}
			} // if( _ppbd.m_bPushed )
			else if( _ppbd.m_bHover )
			{
				nImgIndex1 = nImgIndex2 = INT(__E07BIX_HOVER);
				if( _ppbd.m_bSeparatedDropDown )
				{
					if( _ppbd.m_bHoverDropDown )
						nImgIndex1 = INT(__E07BIX_HOVER2);
					else
						nImgIndex2 = INT(__E07BIX_HOVER2);
				}
			} // else if( _ppbd.m_bHover )
			else if( _ppbd.m_bIndeterminate )
				nImgIndex1 = nImgIndex2 = INT(__E07BIX_INDETERMINATE);
		} // else if( _ppbd.m_bEnabled )
		nImgIndex1 = m_arrIndicesButtonLSXM[nImgIndex1];
		nImgIndex2 = m_arrIndicesButtonLSXB[nImgIndex2];
		if( nImgIndex1 >= 0 && nImgIndex2 >= 0 )
		{
			pBmp1 = &m_bmpArrButtonLSXM;
			pBmp2 = &m_bmpArrButtonLSXB;
			rcPadding1 = m_rcPaddingOfButtonLSXM;
			rcPadding2 = m_rcPaddingOfButtonLSXB;
			CSize _sizeBmp = pBmp1->GetSize();
			rcSrc1.SetRect( 0, 0, _sizeBmp.cx, m_nHeightOfButtonLSXM );
			rcSrc1.OffsetRect( 0, m_nHeightOfButtonLSXM*nImgIndex1 );
			_sizeBmp = pBmp2->GetSize();
			rcSrc2.SetRect( 0, 0, _sizeBmp.cx, m_nHeightOfButtonLSXB );
			rcSrc2.OffsetRect( 0, m_nHeightOfButtonLSXB*nImgIndex2 );
			if( ! _ppbd.m_bSeparatedDropDown )
			{
				rcSrc1.bottom -= rcPadding1.bottom;
				rcSrc2.top += rcPadding1.top;
			}
			rcDst1 = rcDst2 = _ppbd.m_rcClient;
			rcDst1.bottom = rcDst2.top = rcText.top;
		} // if( nImgIndex1 >= 0 && nImgIndex2 >= 0 )
	}
	break; // case __ELC_LARGE
	} // switch( eLC )

// DWORD dwDcLayout = dc.GetLayout();
// 	if( dwDcLayout&LAYOUT_RTL )
// 		dc.SetLayout( LAYOUT_LTR );

BYTE nButtonIndeterminateSCA = BYTE(0x0FF);
	if(		_ppbd.m_bIndeterminate
		&&	_ppbd.m_bEnabled
		&&	( ! _ppbd.m_bHover )
		&&	( ! _ppbd.m_bPushed )
		&&	( ! _ppbd.m_bPushedDropDown )
		)
		nButtonIndeterminateSCA = BYTE(0x060);
	if(		pBmp1 != NULL
		&&	(! pBmp1->IsEmpty() )
		&&	(! rcSrc1.IsRectEmpty() )
		&&	(! rcDst1.IsRectEmpty() )
		&&	dc.RectVisible( &rcDst1 )
		)
		pBmp1->AlphaBlendSkinParts(
			dc.m_hDC,
			rcDst1,
			rcSrc1,
			rcPadding1,
			CExtBitmap::__EDM_STRETCH,
			true,
			true,
			nButtonIndeterminateSCA
			);
	if(		pBmp2 != NULL
		&&	(! pBmp2->IsEmpty() )
		&&	(! rcSrc2.IsRectEmpty() )
		&&	(! rcDst2.IsRectEmpty() )
		&&	dc.RectVisible( &rcDst2 )
		)
		pBmp2->AlphaBlendSkinParts(
			dc.m_hDC,
			rcDst2,
			rcSrc2,
			rcPadding2,
			CExtBitmap::__EDM_STRETCH,
			true,
			true,
			nButtonIndeterminateSCA
			);
	if(		pBmp3 != NULL
		&&	(! pBmp3->IsEmpty() )
		&&	(! rcSrc3.IsRectEmpty() )
		&&	(! rcDst3.IsRectEmpty() )
		&&	dc.RectVisible( &rcDst3 )
		)
		pBmp3->AlphaBlendSkinParts(
			dc.m_hDC,
			rcDst3,
			rcSrc3,
			rcPadding3,
			CExtBitmap::__EDM_STRETCH,
			true,
			true,
			nButtonIndeterminateSCA
			);
	if(		pBmp4 != NULL
		&&	(! pBmp4->IsEmpty() )
		&&	(! rcSrc4.IsRectEmpty() )
		&&	(! rcDst4.IsRectEmpty() )
		&&	dc.RectVisible( &rcDst4 )
		)
		pBmp4->AlphaBlendSkinParts(
			dc.m_hDC,
			rcDst4,
			rcSrc4,
			rcPadding4,
			CExtBitmap::__EDM_STRETCH,
			true,
			true,
			nButtonIndeterminateSCA
			);
	if( pCmdIcon != NULL )
	{
		ASSERT( ! pCmdIcon->IsEmpty() );
		CSize _sizeRealIcon = pCmdIcon->GetSize();
		if( _sizeRealIcon != _sizeIcon )
			rcIcon.OffsetRect(
				( _sizeIcon.cx - _sizeRealIcon.cx ) / 2,
				( _sizeIcon.cy - _sizeRealIcon.cy) / 2
				);
		rcIcon.right = rcIcon.left + _sizeRealIcon.cx;
		rcIcon.bottom = rcIcon.top + _sizeRealIcon.cy;
// 					CSize _sizeAdjust = rcIcon.Size() - _sizeIcon;
// 			// 		if( _sizeAdjust.cx > 1 || _sizeAdjust.cy > 1 )
// 			// 			rcIcon.OffsetRect( _sizeAdjust.cx/2, _sizeAdjust.cy/2 );
// 					rcIcon.right = rcIcon.left + _sizeIcon.cx;
// 					rcIcon.bottom = rcIcon.top + _sizeIcon.cy;
		bool bCenterBigIconVerticallyMode = ( eLC == __ELC_LARGE && nTextLength == 0 && ( ! _ppbd.m_bDropDown ) ) ? true : false;
		if( bCenterBigIconVerticallyMode)
			rcIcon.OffsetRect(
				0,
				_ppbd.m_rcClient.top - rcIcon.top + ( _ppbd.m_rcClient.Height() - rcIcon.Height() ) / 2
				);

		CExtCmdIcon::e_paint_type_t ePT = CExtCmdIcon::__PAINT_DISABLED;
		if( _ppbd.m_bEnabled )
		{
			if( _ppbd.m_bPushed )
				ePT = CExtCmdIcon::__PAINT_PRESSED;
			else if( _ppbd.m_bHover )
				ePT = CExtCmdIcon::__PAINT_HOVER;
			else
				ePT = CExtCmdIcon::__PAINT_NORMAL;
		} // if( _ppbd.m_bEnabled )
		pCmdIcon->Paint( this, dc.m_hDC, rcIcon, ePT );
	} // if( pCmdIcon != NULL )

// 	dc.SetLayout( dwDcLayout );

	if( nTextLength > 0 || _ppbd.m_bDropDown )
	{
		UINT nDT = 0;
		if( eLC != __ELC_LARGE )
		{
			strText.Replace( _T("\r"), _T(" ") );
			strText.Replace( _T("\n"), _T(" ") );
			strText.Replace( _T("\t"), _T(" ") );
			strText.Replace( _T("  "), _T(" ") );
			strText.TrimLeft( _T(" ") );
			strText.TrimRight( _T(" ") );
			nTextLength = INT( strText.GetLength() );
			nDT = ( bF ? DT_LEFT : DT_CENTER ) | DT_VCENTER | DT_SINGLELINE;
		} // if( eLC != __ELC_LARGE )
		else
			nDT = DT_CENTER|DT_TOP;
		if( nTextLength > 0 || _ppbd.m_bDropDown )
		{
			CFont * pFont = pTBB->GetBar()->OnGetToolbarFont( false, false, _ppbd.m_pHelperSrc );
			ASSERT( pFont->GetSafeHandle() != NULL );
			CFont * pOldFont = dc.SelectObject( pFont );
			int nOldBkMode = dc.SetBkMode( TRANSPARENT );
			COLORREF clrText = _ppbd.m_bEnabled ? m_clrRibbonButtonNormal : m_clrRibbonButtonDisabled;
			if(		( ! ( _ppbd.m_bHover || _ppbd.m_bPushed ) )
				&&	(	IsKindOf( RUNTIME_CLASS(CExtPaintManagerOffice2007_R2_Obsidian) )
					||	IsKindOf( RUNTIME_CLASS(CExtPaintManagerOffice2010_R2_Black) )
					)
				)
			{
				CExtCustomizeCmdTreeNode * pNode = pTBB->GetCmdNode();
				if( pNode != NULL )
				{
					pNode = pNode->GetParentNode();
					if(		pNode != NULL
						&&	pNode->IsKindOf( RUNTIME_CLASS(CExtRibbonNodeRightButtonsCollection) )
						)
					clrText = _ppbd.m_bEnabled ? m_clrNcFrameTextActive : m_clrNcFrameTextInactive;
				}
			}
//			if(		bF
//				&&	_ppbd.m_bEnabled
//				&&	(! ( _ppbd.m_bPushed || _ppbd.m_bHover ) )
//				&&	OnQueryPaintManagerName() == Office2007_R2_Obsidian
//				)
//				clrText = RGB(255,255,255);
			COLORREF clrOldText = dc.SetTextColor( clrText );
			Ribbon_PaintText(
				dc,
				( nTextLength > 0 ) ? LPCTSTR(strText) : _T(""),
				rcText,
				nDT,
				bDrawDropDownWithText,
				&m_bmpRibbonDDA,
				_ppbd.m_pHelperSrc,
				_ppbd.m_lParam
				);
			dc.SetTextColor( clrOldText );
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
		} // if( nTextLength > 0 || _ppbd.m_bDropDown )
	} // if( nTextLength > 0 || _ppbd.m_bDropDown )
}

#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

void CExtPaintManagerOffice2007_Impl::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPushButton( dc, _ppbd );
		return;
	}
	if(		::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) <= 8
		||	_ppbd.m_pHelperSrc == NULL
		)
	{
		CExtPaintManagerOffice2003::PaintPushButton( dc, _ppbd );
		return;
	}
	if(		_ppbd.m_pHelperSrc != NULL
		&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupMenuWnd) )
		&&	( ((CExtPopupMenuWnd*)_ppbd.m_pHelperSrc)->TrackFlagsGet() & TPMX_RIBBON_MODE ) == 0
		)
	{
		CExtPaintManagerOffice2003::PaintPushButton( dc, _ppbd );
		return;
	}

CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ppbd.m_pHelperSrc );
	if( pTBB != NULL )
	{
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if( pTBB->IsRibbonPaintingMode() )
		{
			Ribbon_PaintPushButton( dc, _ppbd );
			return;
		}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		CExtToolControlBar * pBar = pTBB->GetBar();
		if( pBar == NULL )
		{
			CExtPaintManagerOffice2003::PaintPushButton( dc, _ppbd );
			return;
		}
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if(		pBar->IsKindOf( RUNTIME_CLASS( CExtRibbonPage ) )
			&&	(! pTBB->IsNoRibbonLayout() )
			&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtBarMdiRightButton ) ) )
			)
		{
			Ribbon_PaintPushButton( dc, _ppbd );
			return;
		}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		CExtPaintManagerOffice2003::PaintPushButton( dc, _ppbd );
		return;
	} // if( pTBB != NULL )

enum ButtonDrawingMode
{
	eModeControl,
	eModeToolBar,
	eModeMenuBar,
	eModePopupMenu,
	eModeDatePicker,
	eModeToolBox,
};

bool bHorizontal = true;

ButtonDrawingMode aDrawingMode = eModeControl;
	if( _ppbd.m_pHelperSrc != NULL  )
	{
		if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) ) )
		{
			CExtBarButton * pBarButton = (CExtBarButton*)_ppbd.m_pHelperSrc;
			CExtToolControlBar * pToolBar = DYNAMIC_DOWNCAST( CExtToolControlBar, pBarButton->GetBar() );
			ASSERT( pToolBar != NULL );
			
			if( pToolBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar)) )
				aDrawingMode = eModeMenuBar;
			else
				aDrawingMode = eModeToolBar;
			if( ! pBarButton->GetNoRotateVerticalLayout() )
			{
				if( pToolBar->IsDockedVertically() )
					bHorizontal = false;
			}
		}
		else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) ) )
		{
			aDrawingMode = eModePopupMenu;
		}
#ifndef __EXT_MFC_NO_DATE_PICKER
		else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDatePickerWnd ) ) )
		{
			aDrawingMode = eModeDatePicker;
		}
#endif // #ifndef __EXT_MFC_NO_DATE_PICKER
#ifndef __EXT_MFC_NO_TOOLBOX_CTRL
		else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtToolBoxWnd ) ) )
		{
			aDrawingMode = eModeToolBox;
		}
#endif // #ifndef __EXT_MFC_NO_TOOLBOX_CTRL
		else if(
				_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CWnd ) )
			&&	CExtPopupMenuWnd::g_pCombinedHelper == NULL
			&&	(!_ppbd.m_bTransparentBackground)
			)
		{
			CExtPaintManagerOffice2003::PaintDockerBkgnd( true, dc, (CWnd*)_ppbd.m_pHelperSrc );
		}
	}

	if(		aDrawingMode != eModeControl 
		&&	aDrawingMode != eModeDatePicker
		&&	aDrawingMode != eModeToolBox
		&&	aDrawingMode != eModeToolBar
		)
	{
		CExtPaintManagerOffice2003::PaintPushButton( dc, _ppbd );
		return;
	}

CExtBitmap * pBmpSimple =
		_ppbd.m_bSeparatedDropDown
			? ( bHorizontal ? (&m_arrBmpPushBtnSDDLeftH) : (&m_arrBmpPushBtnSDDLeftV) )
			: ( bHorizontal ? (&m_arrBmpPushBtnSimpleH) : (&m_arrBmpPushBtnSimpleV) )
			;
CExtBitmap * pBmpRP =
		_ppbd.m_bSeparatedDropDown
			? ( bHorizontal ? (&m_arrBmpPushBtnSDDRightH) : (&m_arrBmpPushBtnSDDRightV) )
			: NULL
			;
INT nGlyphHeightSimple =
		_ppbd.m_bSeparatedDropDown
			? ( bHorizontal ? m_nPushBtnSDDLeftGlyphHeightH : m_nPushBtnSDDLeftGlyphHeightV )
			: ( bHorizontal ? m_nPushBtnSimpleGlyphHeightH : m_nPushBtnSimpleGlyphHeightV )
			;
INT nGlyphHeightRP =
		_ppbd.m_bSeparatedDropDown
			? ( bHorizontal ? m_nPushBtnSDDRightGlyphHeightH : m_nPushBtnSDDRightGlyphHeightV )
			: ( 0 )
			;
CRect * pRectPaddingSimple =
		_ppbd.m_bSeparatedDropDown
			? ( bHorizontal ? (&m_rcPushBtnSDDLeftPaddingH) : (&m_rcPushBtnSDDLeftPaddingV) )
			: ( bHorizontal ? (&m_rcPushBtnSimplePaddingH) : (&m_rcPushBtnSimplePaddingV) )
			;
CRect * pRectPaddingRP =
		_ppbd.m_bSeparatedDropDown
			? ( bHorizontal ? (&m_rcPushBtnSDDRightPaddingH) : (&m_rcPushBtnSDDRightPaddingV) )
			: NULL
			;

	if( ! _ppbd.m_bEnabled )
	{
		_ppbd.m_bHover = false;
		_ppbd.m_bDrawFocusRect = false;
		_ppbd.m_bIndeterminate = false;
	}

e_push_button_glyph_type_t ePBGT_Simple = __EPBGT_NORMAL;
	if( ! _ppbd.m_bEnabled )
		ePBGT_Simple = __EPBGT_DISABLED;
	else if( _ppbd.m_bPushed )
		ePBGT_Simple = __EPBGT_PRESSED;
	else if( _ppbd.m_bHover /*|| _ppbd.m_bDrawFocusRect*/ )
		ePBGT_Simple = __EPBGT_HOVER;
	else if( _ppbd.m_bDefaultPushButton )
		ePBGT_Simple = __EPBGT_DEFAULT;
e_push_button_glyph_type_t ePBGT_RP = ePBGT_Simple;
CRect rcSrcSimple( 0, 0, pBmpSimple->GetSize().cx, nGlyphHeightSimple );
CRect rcSrcRP( 0, 0, 0, 0 );
	if( _ppbd.m_bSeparatedDropDown )
	{
		if( ePBGT_Simple == __EPBGT_HOVER || ePBGT_Simple == __EPBGT_PRESSED )
		{
			if( _ppbd.m_bPushedDropDown )
				ePBGT_Simple = __EPBGT_HH;
			else
				ePBGT_RP = __EPBGT_HH;
		}
		ASSERT( pBmpRP != NULL );
		rcSrcRP.right = pBmpRP->GetSize().cx;
		rcSrcRP.bottom = nGlyphHeightRP;
		rcSrcRP.OffsetRect(
			0,
			nGlyphHeightRP * INT(ePBGT_RP)
			);
	}
	rcSrcSimple.OffsetRect(
		0,
		nGlyphHeightSimple * INT(ePBGT_Simple)
		);

bool bRTL = _ppbd.IsRTL();
CRect rectClient( _ppbd.m_rcClient );
CRect rectCaption( &rectClient );

/*
INT nDDW = g_glyph_btn_expand_bottom.Size().cx;
	if( aDrawingMode == eModeControl )
		nDDW += __DROPDOWN_ARROW_GAP*2;
	else
		nDDW += 4;
*/
INT nDDW = _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
	if( aDrawingMode != eModeControl )
		nDDW += ( - __DROPDOWN_ARROW_GAP*2 ) + 4;
CRect rcDstSimple = rectClient;
CRect rcPaintSimpleDst = rcDstSimple;
CRect rcDstRP = rectClient;
	if( _ppbd.m_bDropDown )
	{
		if( bHorizontal )
		{
			rcDstRP.left = rcDstRP.right - nDDW;
			rcDstSimple.right = rcDstRP.left;
		} // if( bHorizontal )
		else
		{
			rcDstRP.top = rcDstRP.bottom - nDDW;
			rcDstSimple.bottom = rcDstRP.top;
		} // else from if( bHorizontal )
	} // if( _ppbd.m_bDropDown )
	if( _ppbd.m_bSeparatedDropDown )
	{
		ASSERT( pBmpRP != NULL );
		pBmpRP->AlphaBlendSkinParts(
			dc.m_hDC,
			rcDstRP,
			rcSrcRP,
			*pRectPaddingRP,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			);
		rcPaintSimpleDst = rcDstSimple;
	} // if( _ppbd.m_bSeparatedDropDown )
	rectCaption = rcDstSimple;
	pBmpSimple->AlphaBlendSkinParts(
		dc.m_hDC,
		rcPaintSimpleDst,
		rcSrcSimple,
		*pRectPaddingSimple,
		CExtBitmap::__EDM_STRETCH,
		true,
		true
		);
	if( _ppbd.m_bDropDown )
	{
		CRect rectGlyph = rcDstRP;
		if( _ppbd.m_bPushedDropDown )
			rectGlyph.OffsetRect( GetPushedOffset() );
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			RGB(0,0,0),
		};
		bool bSetDefaultColorForDD = true;
		if( _ppbd.m_bEnabled )
		{
			if( m_clrCustomDropDownGlyphEnabled != COLORREF(-1L) )
			{
				ColorValues[1] = m_clrCustomDropDownGlyphEnabled;
				bSetDefaultColorForDD = false;
			}
		}
		else
		{
			if( m_clrCustomDropDownGlyphDisabled != COLORREF(-1L) )
			{
				ColorValues[1] = m_clrCustomDropDownGlyphDisabled;
				bSetDefaultColorForDD = false;
			}
		}
		if( bSetDefaultColorForDD )
			ColorValues[1] = GetColor( _ppbd.m_bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED, _ppbd.m_pHelperSrc, _ppbd.m_lParam  );
		if( bRTL && (rectGlyph.Width()&1) == 0 )
			rectGlyph.right++;
		PaintGlyphCentered( dc, rectGlyph, _ppbd.m_bHorz ? g_glyph_btn_expand_bottom : g_glyph_btn_expand_right, ColorValues );
	} // if( _ppbd.m_bDropDown )

COLORREF clrOldText = dc.GetTextColor();
COLORREF clrOldBk = dc.GetBkColor();
int nOldBkMode = dc.SetBkMode( TRANSPARENT );

	rectCaption.DeflateRect( _ppbd.m_rcBorderSizes );
	rectClient = rectCaption;
CRect rcFocus( rectCaption );

	// Draw icon
	if(		rectClient.bottom > rectClient.top
		&&	rectClient.right > rectClient.left
		)
		PaintPushButtonIcon( dc, rectClient, rectCaption, rcFocus, _ppbd );

CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;

	// Draw text
	if(		rectCaption.bottom > rectCaption.top
		&&	rectCaption.right > rectCaption.left
		&&	(!sTitle.IsEmpty())
		)
		PaintPushButtonText( dc, rectCaption, _ppbd );

	// Draw focus rectangle
	if(		_ppbd.m_bDrawFocusRect 
		&&	( ( !sTitle.IsEmpty() ) || _ppbd.m_nFocusMode == __EBFM_CLIENT_AREA )
		&&	rcFocus.bottom > rcFocus.top 
		&&	rcFocus.right > rcFocus.left
		)
	{
		rcFocus.DeflateRect( 2, 2 );
//		dc.DrawFocusRect( &rcFocus );
		stat_DrawDotLineH( dc, rcFocus.left,  rcFocus.right, rcFocus.top,    RGB(0,0,0) );
		stat_DrawDotLineH( dc, rcFocus.left,  rcFocus.right, rcFocus.bottom, RGB(0,0,0) );
		stat_DrawDotLineV( dc, rcFocus.left,  rcFocus.top,   rcFocus.bottom, RGB(0,0,0) );
		stat_DrawDotLineV( dc, rcFocus.right, rcFocus.top,   rcFocus.bottom, RGB(0,0,0) );
	}

	dc.SetBkMode( nOldBkMode );
	dc.SetBkColor( clrOldBk );
	dc.SetTextColor( clrOldText );
}

void CExtPaintManagerOffice2007_R1::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_clrForceTextDisabled == COLORREF(-1L) )
		_ppbd.m_clrForceTextDisabled = RGB(141,141,141);
	CExtPaintManagerOffice2007_Impl::PaintPushButton( dc, _ppbd );
}

void CExtPaintManagerOffice2007_R2_LunaBlue::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_clrForceTextDisabled == COLORREF(-1L) )
		_ppbd.m_clrForceTextDisabled = RGB(141,141,141);
	CExtPaintManagerOffice2007_Impl::PaintPushButton( dc, _ppbd );
}

void CExtPaintManagerOffice2007_R2_Silver::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_clrForceTextDisabled == COLORREF(-1L) )
		_ppbd.m_clrForceTextDisabled = RGB(141,141,141);
	CExtPaintManagerOffice2007_Impl::PaintPushButton( dc, _ppbd );
}

void CExtPaintManagerOffice2007_R2_Obsidian::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPushButton( dc, _ppbd );
		return;
	}
	if(		_ppbd.m_pHelperSrc != NULL
		&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CButton) )
		)
	{
		CExtPaintManagerOffice2007_Impl::PaintPushButton( dc, _ppbd );
		return;
	}
bool bInvertNormalTextColor = true;
	if( _ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )
		bInvertNormalTextColor = false;
	else if( _ppbd.m_clrForceTextNormal == COLORREF(-1L) && _ppbd.m_pHelperSrc != NULL )
	{
		if(		_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarButton) )
			&&	( ! _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarMdiRightButton) ) )
			)
		{
			if( LPVOID(CExtPopupMenuWnd::g_pCombinedHelper) == LPVOID(_ppbd.m_pHelperSrc) )
				bInvertNormalTextColor = false;
			else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarButton) ) )
			{
				CExtToolControlBar * pToolBar = ((CExtBarButton*)_ppbd.m_pHelperSrc)->GetBar();
				ASSERT_VALID( pToolBar );
				if( ! pToolBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) ) )
				{
					if( pToolBar->m_pDockSite == NULL )
					{
						if( pToolBar->m_bForceBalloonGradientInDialogs )
							bInvertNormalTextColor = false;
					}
					else
					{
						if( ! pToolBar->m_bForceNoBalloonWhenRedockable )
							bInvertNormalTextColor = false;
					}
				}
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
				else if( pToolBar->IsKindOf( RUNTIME_CLASS(CExtRibbonPage) ) )
							bInvertNormalTextColor = false;
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
			}
		}
		else if(	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupBaseWnd) )
				||	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
#if (!defined __EXT_MFC_NO_DATE_PICKER)
				||	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtDatePickerWnd) )
#endif // (!defined __EXT_MFC_NO_DATE_PICKER)
				)
				bInvertNormalTextColor = false;
	}
	if(		bInvertNormalTextColor 
		&&	_ppbd.m_clrForceTextNormal == COLORREF(-1L)
		)
		_ppbd.m_clrForceTextNormal = RGB(255,255,255);
	if( _ppbd.m_clrForceTextDisabled == COLORREF(-1L) )
		_ppbd.m_clrForceTextDisabled = RGB(141,141,141);
	CExtPaintManagerOffice2007_Impl::PaintPushButton( dc, _ppbd );
}

void CExtPaintManagerOffice2010_R2_Black::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPushButton( dc, _ppbd );
		return;
	}
	if(		_ppbd.m_pHelperSrc != NULL
		&&	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CButton) )
		)
	{
		CExtPaintManagerOffice2007_Impl::PaintPushButton( dc, _ppbd );
		return;
	}
bool bInvertNormalTextColor = true;
	if( _ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )
		bInvertNormalTextColor = false;
	else if( _ppbd.m_clrForceTextNormal == COLORREF(-1L) && _ppbd.m_pHelperSrc != NULL )
	{
		if(		_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarButton) )
			&&	( ! _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarMdiRightButton) ) )
			)
		{
			if( LPVOID(CExtPopupMenuWnd::g_pCombinedHelper) == LPVOID(_ppbd.m_pHelperSrc) )
				bInvertNormalTextColor = false;
			else if( _ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarButton) ) )
			{
				CExtToolControlBar * pToolBar = ((CExtBarButton*)_ppbd.m_pHelperSrc)->GetBar();
				ASSERT_VALID( pToolBar );
				if( ! pToolBar->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) ) )
				{
					if( pToolBar->m_pDockSite == NULL )
					{
						if( pToolBar->m_bForceBalloonGradientInDialogs )
							bInvertNormalTextColor = false;
					}
					else
					{
						if( ! pToolBar->m_bForceNoBalloonWhenRedockable )
							bInvertNormalTextColor = false;
					}
				}
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
				else if( pToolBar->IsKindOf( RUNTIME_CLASS(CExtRibbonPage) ) )
				{
							bInvertNormalTextColor = false;
							if( LPVOID(LPCTSTR(_ppbd.m_sText)) != NULL && (*LPCTSTR(_ppbd.m_sText)) != _T('\0') )
							{
								CExtCustomizeCmdTreeNode * pNode = ((CExtBarButton*)_ppbd.m_pHelperSrc)->GetCmdNode();
								if( pNode != NULL )
								{
									pNode = pNode->GetParentNode();
									if( pNode != NULL && pNode->IsKindOf( RUNTIME_CLASS(CExtRibbonNodeRightButtonsCollection) ) )
									{
										bInvertNormalTextColor = true;
									}
								}
							}
				}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
			}
		}
		else if(	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtPopupBaseWnd) )
				||	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
#if (!defined __EXT_MFC_NO_DATE_PICKER)
				||	_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtDatePickerWnd) )
#endif // (!defined __EXT_MFC_NO_DATE_PICKER)
				)
				bInvertNormalTextColor = false;
	}
	if(		bInvertNormalTextColor 
		&&	_ppbd.m_clrForceTextNormal == COLORREF(-1L)
		)
		_ppbd.m_clrForceTextNormal = RGB(220,220,220);
	if( _ppbd.m_clrForceTextDisabled == COLORREF(-1L) )
		_ppbd.m_clrForceTextDisabled = RGB(141,141,141);
	CExtPaintManagerOffice2007_Impl::PaintPushButton( dc, _ppbd );
}

CSize CExtPaintManagerOffice2007_Impl::GetCheckButtonBoxSize(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcbd
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetCheckButtonBoxSize( dc, _pcbd );
CSize _sizeBox( 13, 13 );
	_sizeBox.cx = UiScalingDo( _sizeBox.cx, __EUIST_X );
	_sizeBox.cy = UiScalingDo( _sizeBox.cy, __EUIST_Y );
	return _sizeBox;
}

CSize CExtPaintManagerOffice2007_Impl::GetRadioButtonBoxSize(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcbd
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::GetRadioButtonBoxSize( dc, _pcbd );
	return GetCheckButtonBoxSize( dc, _pcbd );
}

void CExtPaintManagerOffice2007_Impl::PaintCheckButtonBox(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcrbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcrbd.m_rcClient.IsRectEmpty() )
		return;
	if( _pcrbd.m_pHelperSrc == NULL )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintCheckButtonBox( dc, _pcrbd );
		return;
	}
	if( m_bmpArrStatesCheckBox.IsEmpty() )
	{
		CExtPaintManagerOffice2003::PaintCheckButtonBox( dc, _pcrbd );
		return;
	}
INT nIndex = 0;
	switch( _pcrbd.m_eState ) 
	{
	case CExtPaintManager::BOX_UNCHECKED:
		nIndex = 0;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_UNCHECKED:
		nIndex = 1;
		break;
	case CExtPaintManager::BOX_LDOWN_UNCHECKED:
		nIndex = 2;
		break;
	case CExtPaintManager::BOX_DISABLED_UNCHECKED:
		nIndex = 3;
		break;

	case CExtPaintManager::BOX_CHECKED:
		nIndex = 0 + 4;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_CHECKED:
		nIndex = 1 + 4;
		break;
	case CExtPaintManager::BOX_LDOWN_CHECKED:
		nIndex = 2 + 4;
		break;
	case CExtPaintManager::BOX_DISABLED_CHECKED:
		nIndex = 3 + 4;
		break;

	case CExtPaintManager::BOX_INDETERMINATE:
		nIndex = 0 + 8;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_INDETERMINATE:
		nIndex = 1 + 8;
		break;
	case CExtPaintManager::BOX_LDOWN_INDETERMINATE:
		nIndex = 2 + 8;
		break;
	case CExtPaintManager::BOX_DISABLED_INDETERMINATE:
		nIndex = 3 + 8;
		break;
	} // switch( _pcrbd.m_eState ) 

CSize _sizeImgPart( 13, 13 ); // = GetCheckButtonBoxSize( dc, _pcrbd );
CRect rcSrc( 0, 0, _sizeImgPart.cx, _sizeImgPart.cy );
	rcSrc.OffsetRect( 0, _sizeImgPart.cx * nIndex );
int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
	::SetStretchBltMode( dc.m_hDC, ( g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
	m_bmpArrStatesCheckBox.AlphaBlend(
		dc.m_hDC,
		_pcrbd.m_rcBox.left, _pcrbd.m_rcBox.top, _pcrbd.m_rcBox.Width(), _pcrbd.m_rcBox.Height(),
		rcSrc.left, rcSrc.top, rcSrc.Width(), rcSrc.Height()
		);
	::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
}

void CExtPaintManagerOffice2007_Impl::PaintRadioButtonBox(
	CDC & dc,
	CExtPaintManager::PAINTCHECKRADIOBUTTONDATA & _pcrbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pcrbd.m_rcClient.IsRectEmpty() )
		return;
	if( _pcrbd.m_pHelperSrc == NULL )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintRadioButtonBox( dc, _pcrbd );
		return;
	}
	if( m_bmpArrStatesRadioButton.IsEmpty() )
	{
		CExtPaintManagerOffice2003::PaintRadioButtonBox( dc, _pcrbd );
		return;
	}
INT nIndex = 0;
	switch( _pcrbd.m_eState ) 
	{
	case CExtPaintManager::BOX_UNCHECKED:
		nIndex = 0;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_UNCHECKED:
		nIndex = 1;
		break;
	case CExtPaintManager::BOX_LDOWN_UNCHECKED:
		nIndex = 2;
		break;
	case CExtPaintManager::BOX_DISABLED_UNCHECKED:
		nIndex = 3;
		break;

	case CExtPaintManager::BOX_CHECKED:
		nIndex = 0 + 4;
		break;
	case CExtPaintManager::BOX_MOUSE_HOVER_CHECKED:
		nIndex = 1 + 4;
		break;
	case CExtPaintManager::BOX_LDOWN_CHECKED:
		nIndex = 2 + 4;
		break;
	case CExtPaintManager::BOX_DISABLED_CHECKED:
		nIndex = 3 + 4;
		break;

	} // switch( _pcrbd.m_eState ) 

CSize _sizeImgPart( 13, 13 ); // = GetRadioButtonBoxSize( dc, _pcrbd );
CRect rcSrc( 0, 0, _sizeImgPart.cx, _sizeImgPart.cy );
	rcSrc.OffsetRect( 0, _sizeImgPart.cx * nIndex );
int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
	::SetStretchBltMode( dc.m_hDC, ( g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
	m_bmpArrStatesRadioButton.AlphaBlend(
		dc.m_hDC,
		_pcrbd.m_rcBox.left, _pcrbd.m_rcBox.top, _pcrbd.m_rcBox.Width(), _pcrbd.m_rcBox.Height(),
		rcSrc.left, rcSrc.top, rcSrc.Width(), rcSrc.Height()
		);
	::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
}

void CExtPaintManagerOffice2007_Impl::PaintMenuItemLeftAreaMarginXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcFillLeftPart,
	const RECT & rcFillRightPart
	)
{
	ASSERT_VALID( this );
	if( _pmid.m_bForceNoLeftGradient )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuItemLeftAreaMarginXP( dc, _pmid, rcFillLeftPart, rcFillRightPart );
		return;
	}
	if( m_clrMenuItemLeftAreaMarginL != COLORREF(-1L) )
		dc.FillSolidRect(
			rcFillLeftPart.right - 1,
			rcFillLeftPart.top,
			1,
			rcFillLeftPart.bottom - rcFillLeftPart.top,
			m_clrMenuItemLeftAreaMarginL
			);
	if( m_clrMenuItemLeftAreaMarginR != COLORREF(-1L) )
		dc.FillSolidRect(
			rcFillLeftPart.right,
			rcFillLeftPart.top,
			1,
			rcFillLeftPart.bottom - rcFillLeftPart.top,
			m_clrMenuItemLeftAreaMarginR
			);
}

bool CExtPaintManagerOffice2007_Impl::PaintMenuItemBackgroundXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcSelectionArea
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintMenuItemBackgroundXP( dc, _pmid, rcSelectionArea );
bool bRTL = false;
CExtPopupMenuWnd * pPopup = NULL;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
		if( pPopup != NULL )
			bRTL = pPopup->OnQueryLayoutRTL();
	}
	if(		(! m_bThemedMenuItemsEverywhere )
		&&	pPopup != NULL
		&&	( pPopup->TrackFlagsGet() & TPMX_RIBBON_MODE ) == 0 
		)
		return false;
	if(		m_bmpMenuItemLargeLeft.IsEmpty()
		||	m_bmpMenuItemLargeRight.IsEmpty()
		||	m_bmpMenuItemSmallLeft.IsEmpty()
		||	m_bmpMenuItemSmallRight.IsEmpty()
		||	m_bmpMenuArrow.IsEmpty()
		)
		return CExtPaintManagerOffice2003::PaintMenuItemBackgroundXP( dc, _pmid, rcSelectionArea );
bool bSmall = ( ! _pmid.m_bBigAccent );
INT nMenuGlyphItemHeight = bSmall ? m_nMenuGlyphItemHeightSmall : m_nMenuGlyphItemHeightLarge;
CExtBitmap & _bmpLeft = bSmall ? m_bmpMenuItemSmallLeft : m_bmpMenuItemLargeLeft;
CExtBitmap & _bmpRight = bSmall ? m_bmpMenuItemSmallRight : m_bmpMenuItemLargeRight;
CRect rcPaddingLeft = bSmall ? m_rcMenuItemPaddingSmallLeft : m_rcMenuItemPaddingLargeLeft;
CRect rcPaddingRight = bSmall ? m_rcMenuItemPaddingSmallRight : m_rcMenuItemPaddingLargeRight;
CSize _sizeSrcLeft = _bmpLeft.GetSize(), _sizeSrcRight = _bmpRight.GetSize();
CRect rcSrcLeft( 0, 0, _sizeSrcLeft.cx, nMenuGlyphItemHeight ), rcSrcRight( 0, 0, _sizeSrcRight.cx, nMenuGlyphItemHeight );
CRect rcDstLeft = rcSelectionArea, rcDstRight = rcSelectionArea;
	if( bRTL )
		rcDstLeft.right = rcDstRight.left = rcDstRight.left + __EXT_MENU_POPUP_ARROW_AREA_DX;
	else
		rcDstLeft.right = rcDstRight.left = rcDstRight.right - __EXT_MENU_POPUP_ARROW_AREA_DX;
bool bR1 = IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) ) ? true : false;
INT nImageIndexLeft = ( _pmid.m_bSelected ) ? ( bR1 ? 2 : 1 ) : 0;
INT nImageIndexRight = nImageIndexLeft;
	if( ! _pmid.m_bSeparatedDropDown )
	{
		rcSrcLeft.right -= rcPaddingLeft.right;
		rcPaddingLeft.right = 0;
		rcSrcRight.left += rcPaddingRight.left;
		rcPaddingRight.left = 0;
	}
	else
	{
		if( _pmid.m_bSelected )
		{
			if( bR1 )
			{
				if( _pmid.m_bHelperPopupDropped )
					nImageIndexRight = 1;
			}
			else
			{
				if( _pmid.m_bHelperPopupDropped )
					nImageIndexLeft = 2;
				else
					nImageIndexRight = 2;
			}
		}
	}
	rcSrcLeft.OffsetRect( 0, nImageIndexLeft*nMenuGlyphItemHeight );
	rcSrcRight.OffsetRect( 0, nImageIndexRight*nMenuGlyphItemHeight );
	_bmpLeft.AlphaBlendSkinParts(
		dc.m_hDC,
		rcDstLeft,
		rcSrcLeft,
		rcPaddingLeft,
		CExtBitmap::__EDM_STRETCH,
		true,
		false
		);
	_bmpRight.AlphaBlendSkinParts(
		dc.m_hDC,
		rcDstRight,
		rcSrcRight,
		rcPaddingRight,
		CExtBitmap::__EDM_STRETCH,
		true,
		false
		);
	if( _pmid.m_bPopup )
	{
		CExtBitmap _bmpBufferRTL;
		if( bRTL )
		{
			_bmpBufferRTL = m_bmpMenuArrow;
			_bmpBufferRTL.FlipHorizontal();
		}
		CExtBitmap * pBmpTarget = bRTL ? (&_bmpBufferRTL) : (&m_bmpMenuArrow);
		CSize _sizeBmpArrow = pBmpTarget->GetSize();
		CRect rcTarget = bRTL ? rcDstLeft : rcDstRight;
		CRect rcDstArrow( rcTarget.TopLeft(), _sizeBmpArrow );
		rcDstArrow.OffsetRect(
			( rcTarget.Width() - _sizeBmpArrow.cx ) / 2,
			( rcTarget.Height() - _sizeBmpArrow.cy ) / 2
			);
		pBmpTarget->CExtBitmap::AlphaBlend(
			dc.m_hDC,
			rcDstArrow
			);
	}
	return true;
}

bool CExtPaintManagerOffice2007_Impl::PaintMenuItemCheckMarkAreaXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcCheckMarkArea,
	CExtPaintManagerXP::e_CheckMarkAreaTypeXP eCMATXP
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintMenuItemCheckMarkAreaXP( dc, _pmid, rcCheckMarkArea, eCMATXP );
	if(		m_bmpMenuCheckAreaChecked.IsEmpty()
		||	m_bmpMenuCheckAreaUnchecked.IsEmpty()
		)
		return CExtPaintManagerOffice2003::PaintMenuItemCheckMarkAreaXP( dc, _pmid, rcCheckMarkArea, eCMATXP );
int nIndex = _pmid.m_bEnabled ? 0 : 1;
bool bChecked = ( eCMATXP == __ECMATXP_EXTRA_MARK_CHECKED ) ? true : false;
CExtBitmap & bmp =  bChecked ? m_bmpMenuCheckAreaChecked : m_bmpMenuCheckAreaUnchecked;
CSize _size = bChecked ? m_sizeMenuCheckAreaChecked : m_sizeMenuCheckAreaUnchecked;
CRect rcSrc( 0, 0, _size.cx, _size.cy );
	rcSrc.OffsetRect( 0, _size.cy * nIndex );
	bmp.AlphaBlendSkinParts(
		dc.m_hDC,
		rcCheckMarkArea,
		rcSrc,
		bChecked ? m_arrRectMenuCheckAreaCheckedPadding[nIndex] : m_arrRectMenuCheckAreaUncheckedPadding[nIndex],
		CExtBitmap::__EDM_CENTER,
		true,
		true,
		BYTE( _pmid.m_bIndeterminate ? 0x040 : 0x0FF )
		);
	return true;
}

void CExtPaintManagerOffice2007_Impl::PaintMenuScrollButton(
	CDC & dc,
	bool bHover,
	bool bPushed,
	bool bTopButton,
	const RECT & rcScrollButton,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuScrollButton( dc, bHover, bPushed, bTopButton, rcScrollButton, pHelperSrc, lParam );
		return;
	}
//bool bTransparentBk = false;
	bPushed = bPushed || bHover;
	if( bPushed )
	{
		PAINTMENUITEMDATA _pmid; // fake
		if( PaintMenuItemSelectionAreaXP( dc, _pmid, rcScrollButton ) )
		{
			bPushed = bHover = false;
			//bTransparentBk = true;
		}
	}
//	CExtPaintManagerOffice2003::PaintMenuScrollButton(
//		dc,
//		bHover,
//		bPushed,
//		bTopButton,
//		rcScrollButton,
//		pHelperSrc,
//		lParam
//		);
CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
		pHelperSrc,
		true,
		rcScrollButton,
		bTopButton ? _T("t") : _T("u"), // up arrow / down arrow
		NULL,
		true,
		false, // bHover,
		bPushed,
		false,
		true,true,false,false,
		__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
		(HFONT)m_FontMarlett.GetSafeHandle(),
		false,
		0,
		true // bTransparentBk
		);
	_ppbd.m_lParam = lParam;
	PaintPushButton( dc, _ppbd );
}

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorItem(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CExtCmdIcon * pIcon,
	bool bExpanded,
	bool bSelected,
	bool bPushed,
	bool bHover
	)	
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
	if( ::GetDeviceCaps( dc.m_hDC,BITSPIXEL) <= 8 || IsHighContrast() )
	{
		CExtPaintManagerOffice2003::PaintPageNavigatorItem( dc, rcItem, strCaption, pIcon, bExpanded, bSelected, bPushed, bHover );
		return;
	}
COLORREF clrForceText = COLORREF(-1L);
INT nPnIndex = INT(ePn_Normal);
	if( bSelected )
		nPnIndex = bHover ? INT(ePn_SelectedHover) : INT(ePn_Selected);
	else if( bPushed )
		nPnIndex = INT( ePn_Pressed );
	else if( bHover )
		nPnIndex = INT( ePn_Hover );
const CExtBitmap * pArrBmp = bExpanded ? m_arrBmpPnItemExpanded : m_arrBmpPnItemCollapsed;
const CExtBitmap & _bmp = pArrBmp[nPnIndex];
	if( ! _bmp.IsEmpty() )
	{
		CRect _rcItem = rcItem;
		if( ! bExpanded )
			_rcItem.top --;
		else
			_rcItem.bottom --;
		const CRect * pArrPadding = bExpanded ? m_arrRcPnItemPaddingExpanded : m_arrRcPnItemPaddingCollapsed;
		const CRect & _rcPadding = pArrPadding[ nPnIndex ];
		if( ! bExpanded )
			_rcItem.bottom --;
		_bmp.AlphaBlendSkinParts( dc.m_hDC, _rcItem, _rcPadding, CExtBitmap::__EDM_STRETCH, true, true );
		if( bExpanded )
		{
			clrForceText = m_arrClrPnItemTextBmpVer[nPnIndex];
			// paint 1px borders at left/right
			dc.FillSolidRect( _rcItem.left, _rcItem.top, 1, _rcItem.Height(), GetColor( _2003CLR_PN_BORDER, this ) );
			dc.FillSolidRect( _rcItem.right - 1, _rcItem.top, 1, _rcItem.Height(), GetColor( _2003CLR_PN_BORDER, this ) );
		}
	}
	else
	{
		// border
		if( bExpanded )
		{
			CBrush brBorder( GetColor( _2003CLR_PN_BORDER, this ) );
			dc.FrameRect( &rcItem, &brBorder );
		}
		CRect rcItemInner( rcItem );
		if( bExpanded )
			rcItemInner.DeflateRect( 1, 1 );
		COLORREF * pArrClrSchema = m_arrClrPnCaptNormal;
		if( ( bPushed || bSelected ) && bHover )
			pArrClrSchema = m_arrClrPnCaptPressed;
		else if( bPushed || bSelected )
 			pArrClrSchema = m_arrClrPnCaptActive;
		else if( bHover )
			pArrClrSchema = m_arrClrPnCaptHover;
		CRect rcTop = rcItemInner, rcBottom = rcItemInner;
		rcTop.bottom = rcBottom.top =rcTop.top + ::MulDiv( rcTop.Height(), 2, 5 );
		stat_PaintGradientRect( dc, rcTop,    pArrClrSchema[1], pArrClrSchema[0], true );
		stat_PaintGradientRect( dc, rcBottom, pArrClrSchema[3], pArrClrSchema[2], true );
	}
	PaintPageNavigatorCaption( dc, rcItem, strCaption, pIcon, bExpanded, bSelected, bPushed, bHover, false, clrForceText );
}

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorItemCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorItemCaption( dc, rcCaption, strCaption );
		return;
	}
CRect rc( rcCaption );
	dc.FillSolidRect(  &rc,  RGB(255,255,255) );
CRect rcBottomLine( rc );
	rcBottomLine.top = rcBottomLine.bottom - 1;
	rc.bottom -= 1;
	dc.FillSolidRect( &rcBottomLine, GetColor( _2003CLR_PN_BORDER, this ) );
	rc.top += 1;
	rc.left += 1;
	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
		stat_PaintGradientRect( dc, &rc, GetColor( _2003CLR_PN_GRIPPER_DARK, this ), GetColor( _2003CLR_PN_GRIPPER_LIGHT, this ), true );
	else
		dc.FillSolidRect(  &rc,  GetColor( COLOR_3DSHADOW, this ) );
	PaintPageNavigatorItemCaptionText( dc, rc, strCaption );
}

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorCaptionText(
	CDC & dc,
	const CRect & rcItem,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	bool bSelected,
	bool bPushed,
	bool bHover,
	bool bAllowInvertTextColor, // = true
	COLORREF clrForceText // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorCaptionText( dc, rcItem, strCaption, bSelected, bPushed, bHover, bAllowInvertTextColor );
		return;
	}
LOGFONT lf = { sizeof(LOGFONT) };
	VERIFY( ::SystemParametersInfo( SPI_GETICONTITLELOGFONT, sizeof(LOGFONT), &lf, 0 ) );
	__EXT_MFC_STRCPY( lf.lfFaceName, LF_FACESIZE, _T("Arial") );
	lf.lfWeight = FW_BOLD;
CFont font;
	font.CreateFontIndirect(&lf);
CFont * pOldFont = dc.SelectObject( &font );
COLORREF clrOldText =
		dc.SetTextColor(
			( clrForceText != COLORREF(-1L) )
				? clrForceText
				: ( ( bPushed || bSelected ) ? m_arrClrPnItemText[0] : m_arrClrPnItemText[1] )
			);
	PaintPageNavigatorCaptionTextImpl( dc, rcItem, strCaption );
	dc.SetTextColor( clrOldText );
	dc.SelectObject( pOldFont );
}

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorItemPaneCaptionText(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorItemPaneCaptionText( dc, rcCaption, strCaption );
		return;
	}
	if( strCaption == NULL )
		return;
	// caption text
LOGFONT lf = { sizeof(LOGFONT) };
	VERIFY( ::SystemParametersInfo( SPI_GETICONTITLELOGFONT, sizeof(LOGFONT), &lf, 0 ) );
	if( ! m_strPnPaneCaptCustomFontFaceName.IsEmpty() )
		__EXT_MFC_STRCPY( lf.lfFaceName, LF_FACESIZE, LPCTSTR(m_strPnPaneCaptCustomFontFaceName) );
	lf.lfWeight = m_bPnPaneCaptFontBold ? FW_BOLD : FW_NORMAL;
CFont font;
	font.CreateFontIndirect( &lf );
CFont * pOldFont = dc.SelectObject( &font );
COLORREF clrOldText = dc.SetTextColor( m_clrPnCaptText );
	PaintPageNavigatorItemPaneCaptionTextImpl( dc, rcCaption, strCaption );
	dc.SetTextColor( clrOldText );
	dc.SelectObject( pOldFont );
}

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorItemPaneCaption(
	CDC & dc,
	const CRect & rcCaption,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	bool bHover,
	bool bPressed,
	bool bExpandable,
	bool bExpanded,
	bool bDrawTopLine // = true
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcCaption) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorItemPaneCaption( dc, rcCaption, strCaption, bHover, bPressed, bExpandable, bExpanded, bDrawTopLine );
		return;
	}
CRect rc( rcCaption );
	dc.FillSolidRect( &rc, RGB(255,255,255) );
	if( bDrawTopLine )
	{
		CRect rcTopLine( rc );
		rc.top += 1;
		rcTopLine.bottom = rcTopLine.top + 1;
		dc.FillSolidRect( &rcTopLine, GetColor( _2003CLR_PN_BORDER, this ) );
	}
CRect rcBottomLine( rc );
	rcBottomLine.top = rcBottomLine.bottom - 1;
	rc.bottom -= 1;
	dc.FillSolidRect( &rcBottomLine, GetColor( _2003CLR_PN_PANE_CAPTION_BOTTOM_LINE, this ) );
	rc.top += 1;
	rc.left += 1;
	if(	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
		stat_PaintGradientRect2steps(
			dc,
			&rc,
			GetColor( bHover ? _2003CLR_PN_PANE_CAPTION_HOVER_DARK : _2003CLR_PN_PANE_CAPTION_DARK, this ),
			GetColor( bHover ? _2003CLR_PN_PANE_CAPTION_HOVER_LIGHT : _2003CLR_PN_PANE_CAPTION_LIGHT, this ),
			GetColor( bHover ? _2003CLR_PN_PANE_CAPTION_HOVER_DARK : _2003CLR_PN_PANE_CAPTION_DARK, this ),
			false,
			1,
			2
			);
	else
		dc.FillSolidRect( &rc, GetColor( COLOR_3DSHADOW, this ) );
CRect rcText( rc );
	if( bExpandable )
	{
		CExtPaintManager::glyph_t * pGlyph = 
			CExtPaintManager::g_DockingCaptionGlyphs[
				bExpanded ? CExtPaintManager::__DCBT_PN_CAPTION_EXPANDED : CExtPaintManager::__DCBT_PN_CAPTION_COLLAPSED
				];
		ASSERT( pGlyph != NULL );
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			GetColor( COLOR_3DDKSHADOW, this )
		};
		CRect rcExpandButton( rcText );
		rcExpandButton.right -= 6;
		rcExpandButton.left = rcExpandButton.right - pGlyph->Size().cx - 1*2;
		PaintGlyphCentered( dc, rcExpandButton, *pGlyph, ColorValues );
		rcText.right = rcExpandButton.left;
	}
	PaintPageNavigatorItemPaneCaptionText( dc, rcText, strCaption );
}

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorConfigButton(
	CDC & dc,
	const CRect & rcItem,
	bool bPushed,
	bool bHover
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! dc.RectVisible(&rcItem) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorConfigButton( dc, rcItem, bPushed, bHover );
		return;
	}
CRect rc( rcItem );
CExtPaintManager::glyph_t * pGlyph = CExtPaintManager::g_DockingCaptionGlyphs[ CExtPaintManager::__DCBT_PN_CONFIG_BUTTON_2007 ];
	ASSERT( pGlyph != NULL );
COLORREF ColorValues1[2] = {  RGB(0,0,0),  GetColor( COLOR_WINDOW, this )  };
	PaintGlyphCentered( dc, rc, *pGlyph, ColorValues1 );
	rc.OffsetRect(0,-1);
COLORREF ColorValues2[2] = {  RGB(0,0,0),  m_clrPnConfigButton  };
	PaintGlyphCentered( dc, rc, *pGlyph, ColorValues2 );
}

void CExtPaintManagerOffice2007_Impl::PaintPageNavigatorSplitter(
	CDC & dc,
	const CRect & rcSplitter,
	bool bDrawDots // = true
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorSplitter( dc, rcSplitter, bDrawDots );
		return;
	}
	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
	{
		stat_PaintGradientRect( dc, &rcSplitter, m_arrClrPnSplitter[1], m_arrClrPnSplitter[0], true );
		dc.FillSolidRect( rcSplitter.left, rcSplitter.top, rcSplitter.Width(), 1, GetColor( _2003CLR_PN_BORDER, this ) );
		if( bDrawDots )
			PaintPageNavigatorSplitterDots( dc, rcSplitter, 0 );
	}
	else
		CExtPaintManagerOffice2003::PaintPageNavigatorSplitter( dc, rcSplitter, true );
}

void CExtPaintManagerOffice2010_Impl::PaintPageNavigatorSplitter(
	CDC & dc,
	const CRect & rcSplitter,
	bool bDrawDots // = true
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintPageNavigatorSplitter( dc, rcSplitter, bDrawDots );
		return;
	}
	if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
	{
		stat_PaintGradientRect( dc, &rcSplitter, m_arrClrPnSplitter[1], m_arrClrPnSplitter[0], true );
		dc.FillSolidRect( rcSplitter.left, rcSplitter.top, rcSplitter.Width(), 1, GetColor( _2003CLR_PN_BORDER, this ) );
		dc.FillSolidRect( rcSplitter.left, rcSplitter.bottom-1, rcSplitter.Width(), 1, GetColor( _2003CLR_PN_BORDER, this ) );
		if( bDrawDots )
			PaintPageNavigatorSplitterDots( dc, rcSplitter, 0 );
	}
	else
		CExtPaintManagerOffice2003::PaintPageNavigatorSplitter( dc, rcSplitter, true );
}

#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

CExtPaintManager::SCROLLBARSKINDATA * CExtPaintManagerOffice2007_Impl::ScrollBar_GetSkinData(
	bool bHorzBar,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bLightAccent // = true
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::ScrollBar_GetSkinData( bHorzBar, pHelperSrc, lParam, bLightAccent );
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtZoomScrollBar ) ) )
		{
			switch( ((CExtZoomScrollBar*)pHelperSrc)->m_eSO )
			{
			case CExtScrollBar::__ESO_TOP:
				return (&m_SbSkinDataT_Zoom);
			case CExtScrollBar::__ESO_BOTTOM:
				return (&m_SbSkinDataB_Zoom);
			case CExtScrollBar::__ESO_LEFT:
				return (&m_SbSkinDataL_Zoom);
			case CExtScrollBar::__ESO_RIGHT:
				return (&m_SbSkinDataR_Zoom);
			default:
				return bHorzBar ? (&m_SbSkinDataT_Zoom) : (&m_SbSkinDataL_Zoom);
			} // switch( ((CExtZoomScrollBar*)pHelperSrc)->m_eSO )
		} // if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtZoomScrollBar ) ) )
	} // if( pHelperSrc != NULL )
	if( bLightAccent )
		return bHorzBar ? (&m_SbSkinDataH_Light) : (&m_SbSkinDataV_Light);
	else
		return bHorzBar ? (&m_SbSkinDataH_Dark) : (&m_SbSkinDataV_Dark);
}

bool CExtPaintManagerOffice2007_Impl::ScrollBar_GetMetrics(
	INT * p_nHorzBarHeight, // = NULL
	INT * p_nVertBarWidth, // = NULL
	INT * p_nHorzButtonWidth, // = NULL
	INT * p_nVertButtonHeight, // = NULL
	INT * p_nHorzThumbMinWidth, // = NULL
	INT * p_nVertThumbMinHeight, // = NULL
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return
			CExtPaintManagerXP::ScrollBar_GetMetrics(
				p_nHorzBarHeight,
				p_nVertBarWidth,
				p_nHorzButtonWidth,
				p_nVertButtonHeight,
				p_nHorzThumbMinWidth,
				p_nVertThumbMinHeight,
				pHelperSrc,
				lParam
				);

	if(		(	p_nHorzBarHeight != NULL
			||	p_nVertBarWidth != NULL
			||	p_nHorzButtonWidth != NULL
			||	p_nVertButtonHeight != NULL
			||	p_nHorzThumbMinWidth != NULL
			||	p_nVertThumbMinHeight != NULL
			)
		&&	pHelperSrc != NULL
		)
	{
		ASSERT_VALID( pHelperSrc );
		CExtZoomScrollBar * pZoomScrollBar = DYNAMIC_DOWNCAST( CExtZoomScrollBar, pHelperSrc );
		if( pZoomScrollBar != NULL )
		{
			if( p_nHorzBarHeight != NULL )
			{
				(*p_nHorzBarHeight) = m_SbSkinDataT_Zoom.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_BUTTON_DOWN)].GetSize().cy;
				if( (*p_nHorzBarHeight) <= 0 )
					return false;
				else
					(*p_nHorzBarHeight) += 2;
			}
			if( p_nVertBarWidth != NULL )
			{
				(*p_nVertBarWidth) = m_SbSkinDataT_Zoom.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_BUTTON_DOWN)].GetSize().cx;
				if( (*p_nVertBarWidth) <= 0 )
					return false;
				else
					(*p_nVertBarWidth) += 2;
			}
			if( p_nHorzButtonWidth != NULL )
			{
				(*p_nHorzButtonWidth) = m_SbSkinDataT_Zoom.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_BUTTON_DOWN)].GetSize().cx;
				if( (*p_nHorzButtonWidth) <= 0 )
					return false;
			}
			if( p_nVertButtonHeight != NULL )
			{
				(*p_nVertButtonHeight) = m_SbSkinDataT_Zoom.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_BUTTON_DOWN)].GetSize().cy;
				if( (*p_nVertButtonHeight) <= 0 )
					return false;
			}
			if( p_nHorzThumbMinWidth != NULL )
			{
				(*p_nHorzThumbMinWidth) = m_SbSkinDataT_Zoom.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_THUMB)].GetSize().cx;
				if( (*p_nHorzThumbMinWidth) <= 0 )
					return false;
			}
			if( p_nVertThumbMinHeight != NULL )
			{
				(*p_nVertThumbMinHeight) = m_SbSkinDataT_Zoom.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_THUMB)].GetSize().cy;
				if( (*p_nVertThumbMinHeight) <= 0 )
					return false;
			}
			return true;
		} // if( pZoomScrollBar != NULL )
	}
	return
		CExtPaintManagerOffice2003::ScrollBar_GetMetrics(
			p_nHorzBarHeight,
			p_nVertBarWidth,
			p_nHorzButtonWidth,
			p_nVertButtonHeight,
			p_nHorzThumbMinWidth,
			p_nVertThumbMinHeight,
			pHelperSrc,
			lParam
			);
}

CExtPaintManagerOffice2007_R1::CExtPaintManagerOffice2007_R1()
{
	m_clrFillHint = RGB(205,205,205);
	m_clrAccentHint = RGB(156,193,234);
	m_clrIconAlphaColor = RGB(114,121,138);
	m_clrAdvTipGradientBottom = RGB(229,229,240);

	m_clrDCA1 = RGB(172,180,198);
	m_clrDCA2 = RGB(113,125,152);
	m_clrDCA3 = RGB(132,141,166);
	m_bDocumentClientAreaBkgndR2 = false;
	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_DCA_R1) ) );
	m_bmpDCA.PreMultiplyRGBChannels();
	m_bmpDCA.PreMultipliedRGBChannelsSet( true );

	m_bUseNcFrameBmpForDockerBkgnd = true;
	m_clrCustomDropDownGlyphEnabled = RGB(0,0,0);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = m_clrFloatingToolbarGripperSolid = RGB(83,96,125);
	m_clrDockingFrameCaptionTextActive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextInactive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextFloatingFixed =  RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(255,255,255);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_ACTIVE_R1) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_INACTIVE_R1) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive = RGB(69,69,69); // = RGB(123,123,123);
	m_clrNcFrameTextInactive = RGB(163,163,163); // = RGB(183,183,183);
	m_bmpNcFrameActive.PreMultiplyRGBChannels();
	m_bmpNcFrameActive.PreMultipliedRGBChannelsSet( true );
	m_bmpNcFrameInactive.PreMultiplyRGBChannels();
	m_bmpNcFrameInactive.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = m_sizeNcButtonShapeInArr.cy = 21;
	m_nNcBtnIdxNormalActive = m_nNcBtnIdxNormalInactive = 0;

	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_HOVER_R1) ) );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_PRESSED_R1) ) );
	VERIFY( m_bmpNcButtonBkHover.Make32() );
	VERIFY( m_bmpNcButtonBkPressed.Make32() );
	m_bmpNcButtonBkHover.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressed.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHover.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHover.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressed.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressed.PreMultipliedRGBChannelsSet( true );
	
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_HELP_R1) ) );
	m_bmpArrNcButtonsHelp.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsHelp.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_CLOSE_R1) ) );
	m_bmpArrNcButtonsClose.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsClose.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MAXIMIZE_R1) ) );
	m_bmpArrNcButtonsMaximize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMaximize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_RESTORE_R1) ) );
	m_bmpArrNcButtonsRestore.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsRestore.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MINIMIZE_R1) ) );
	m_bmpArrNcButtonsMinimize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMinimize.PreMultipliedRGBChannelsSet( true );

#if (!defined __EXT_MFC_NO_STATUSBAR)
	m_rcStatusBkPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_LIGHT_R1) ) );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_DARK_R1) ) );
	m_rcStatusSeparatorPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_SEPARATOR_R1) ) );
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal = m_clrTabTextSelected = RGB(8,32,100);
	m_nIdxTabShapeHover = 0;
	m_nIdxTabShapePressed = 1;
	m_nIdxTabShapeSelected = 2;
	m_nIdxTabShapeSelectedHover = 3;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 72;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 25;
	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 6, 3, 6 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 6, 3, 6 );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SHAPE_ARR_R1 )
			)
		);
	VERIFY( m_arrBmpTabShapeNormal[__ETSOI_TOP].Make32() );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 1;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 25;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SEPARATOR_R1 )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_clrPnCaptText  = RGB(51,51,51);
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_CHECK_BOX_R1 )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_RADIO_BUTTON_R1 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(225,225,225);
	m_clrMenuItemLeftAreaMarginR = RGB(255,255,255);
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R1_LARGE_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R1_LARGE_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R1_SMALL_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R1_SMALL_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 1, 1, 1, 1 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_CHECKED_R1   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_UNCHECKED_R1 ) ) );

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_COMBO_BOX_BUTTON_R1 ) ) );
	m_arrClrComboBoxBorder[0] = RGB(177,187,198);
	m_arrClrComboBoxBorder[1] = RGB(148,168,198);
	m_arrClrComboBoxBorder[2] = RGB(148,168,198);
	m_arrClrComboBoxBorder[3] = RGB(177,187,198);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 0, 2, 0, 2 ), rcEntirePaddingRV( 2, 0, 2, 0 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R1, IDB_EXT_2007_ZS_MINUS_R1, IDB_EXT_2007_ZS_THUMB_R1,
		RGB(222,226,236), RGB(163,175,203), RGB(213,218,231), RGB(185,194,215), AFX_IDW_DOCKBAR_TOP, false
		);
	m_SbSkinDataB_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R1, IDB_EXT_2007_ZS_MINUS_R1, IDB_EXT_2007_ZS_THUMB_R1,
		RGB(222,226,236), RGB(163,175,203), RGB(213,218,231), RGB(185,194,215), AFX_IDW_DOCKBAR_BOTTOM, false
		);
	m_SbSkinDataL_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R1, IDB_EXT_2007_ZS_MINUS_R1, IDB_EXT_2007_ZS_THUMB_R1,
		RGB(222,226,236), RGB(163,175,203), RGB(213,218,231), RGB(185,194,215), AFX_IDW_DOCKBAR_LEFT, false
		);
	m_SbSkinDataR_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R1, IDB_EXT_2007_ZS_MINUS_R1, IDB_EXT_2007_ZS_THUMB_R1,
		RGB(222,226,236), RGB(163,175,203), RGB(213,218,231), RGB(185,194,215), AFX_IDW_DOCKBAR_RIGHT, false
		);
	m_SbSkinDataH_Light.Load2007_R1(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R1_HORZ,
		17,
		IDB_EXT_2007_SCROLL_BAR_GRIPPER_R1_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R1_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R1_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R1(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R1_VERT,
		17,
		IDB_EXT_2007_SCROLL_BAR_GRIPPER_R1_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R1_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R1_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataH_Dark.Load2007_R1(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R1_HORZ,
		17,
		IDB_EXT_2007_SCROLL_BAR_GRIPPER_R1_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R1_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R1_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Dark.Load2007_R1(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R1_VERT,
		17,
		IDB_EXT_2007_SCROLL_BAR_GRIPPER_R1_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R1_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R1_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_clrGridHeaderBkTop     = RGB(253,253,253);
	m_clrGridHeaderBkBottom  = RGB(212,215,220);
	m_clrGridHeaderSeparator = RGB(145,153,164);
	m_clrGridHeaderSortArrow = RGB(145,153,164);
	m_clrGridHeaderBorder    = RGB(145,153,164);

	m_clrRgHeaderBkTop     = RGB(253,253,253);
	m_clrRgHeaderBkBottom  = RGB(212,215,220);
	m_clrRgHeaderSeparator = RGB(145,153,164);
	m_clrRgHeaderSortArrow = RGB(145,153,164);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(76,83,92);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(235,235,235);
	m_clrRgGroupAreaText   = RGB(70,70,70);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

// 		m_nTbbLightWeightSDDRightGlyphHeightV = 9;
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R1_SIMPLE )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R1_LEFT_PART )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R1_RIGHT_PART )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSimpleH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSimpleH.GetSize().cx,
// 				m_nTbbLightWeightSimpleGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDLeftH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDLeftH.GetSize().cx,
// 				m_nTbbLightWeightSDDLeftGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDRightH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDRightH.GetSize().cx,
// 				m_nTbbLightWeightSDDRightGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);

	m_nPushBtnSDDRightGlyphHeightV = 9;
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R1_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R1_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R1_RIGHT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	m_bRibbonGroupCaptionAtTop = true;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonGroupIconBkVertOffset = 0;
	m_nRibbonCaptionPartHeight = 17;
	m_rcRibbonPageOuterContentPadding.SetRect( 0, 0, 0, 0 );
	m_clrRibbonComboBackGroundNormal = RGB(231,234,241);

	m_nRibbonQuickAccessBarButtonsAlignment = 0;

	m_clrRibbonGroupCaptionTextCollapsed
		= m_clrRibbonButtonNormal
		= RGB(32,0,112);
	m_clrRibbonButtonDisabled = RGB(128,128,128);
	m_clrRibbonGroupCaptionTextExpanded = RGB( 240, 240, 240 );
	m_clrRibbonGroupCaptionTextShadowExpanded = RGB( 0, 0, 0 );
	m_sizeRibbonGroupCaptionTextOffset = CSize( 1, 1 );

	m_rcRibbonPageBkPadding.SetRect( 5, 19, 5, 10 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_PAGE_BK_R1)
			)
		);
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 5, 4, 5, 4 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_NORMAL_BK_R1)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_HOVER_BK_R1)
			)
		);
	
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 6, 18, 6, 4 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R1)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_HOVER_BK_R1)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R1)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource( // selected same as hover in R1
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_HOVER_BK_R1)
			)
		);
//INT nBkIndex, nBkCount;
//	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
//		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_TILE_H );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_TILE_V );
	m_rcRibbonSeparatorPaddingH.SetRect( 8, 0, 8, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_H_R1)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 9, 0, 9 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_V_R1)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_nRibbonHeightOfQACEB = 18;
	m_nIdxRibbonQACEB_Selected = 0;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_QATB_CEB_R1)
			)
		);
	m_bmpArrRibbonQACEB.PreMultiplyRGBChannels();
	m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_nRibbonEmbeddedCaptionTextAlignmentFlags = (DT_SINGLELINE|DT_CENTER|DT_VCENTER);
	m_bRibbonFileButtonItegrationSupported = false;
//INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
//INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
//CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
//	m_rcRibbonNcCornerLeftCP.SetRect( 22, 8, 2, 2 );
//	m_rcRibbonNcCornerRightCP.SetRect( 2, 8, 22, 2 );
//
//	VERIFY(
//		m_bmpRibbonNcCornerActiveLeft.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_LEFT_R2_LUNA_BLUE)
//			)
//		);
//	m_bmpRibbonNcCornerActiveLeft.PreMultipliedRGBChannelsSet( true );
//	m_bmpRibbonNcCornerActiveLeft.Scale(
//		m_bmpRibbonNcCornerActiveLeft.GetSize().cx,
//		nCaptionHeightActive,
//		_fBox
//		);
//
//	VERIFY(
//		m_bmpRibbonNcCornerInactiveLeft.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_LEFT_R2_LUNA_BLUE)
//			)
//		);
//	m_bmpRibbonNcCornerInactiveLeft.PreMultipliedRGBChannelsSet( true );
//	m_bmpRibbonNcCornerInactiveLeft.Scale(
//		m_bmpRibbonNcCornerInactiveLeft.GetSize().cx,
//		nCaptionHeightInactive,
//		_fBox
//		);
//
//	VERIFY(
//		m_bmpRibbonNcCornerActiveRight.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_RIGHT_R2_LUNA_BLUE)
//			)
//		);
//	m_bmpRibbonNcCornerActiveRight.PreMultipliedRGBChannelsSet( true );
//	m_bmpRibbonNcCornerActiveRight.Scale(
//		m_bmpRibbonNcCornerActiveRight.GetSize().cx,
//		nCaptionHeightActive,
//		_fBox
//		);
//
//	VERIFY(
//		m_bmpRibbonNcCornerInactiveRight.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_RIGHT_R2_LUNA_BLUE)
//			)
//		);
//	m_bmpRibbonNcCornerInactiveRight.PreMultipliedRGBChannelsSet( true );
//	m_bmpRibbonNcCornerInactiveRight.Scale(
//		m_bmpRibbonNcCornerInactiveRight.GetSize().cx,
//		nCaptionHeightInactive,
//		_fBox
//		);
//
//	VERIFY(
//		m_bmpRibbonNcCornerHT.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_HT_MASK_R2_LUNA_BLUE)
//			)
//		);
//	m_bmpRibbonNcCornerHT.Make32();
//	m_bmpRibbonNcCornerHT.Scale(
//		m_bmpRibbonNcCornerHT.GetSize().cx,
//		nCaptionHeightActive,
//		_fBox
//		);

//	VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON) ) );
//	//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );

	VERIFY( m_bmpArrRibbonFileButtonR1.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_INTERIOR_R1) ) );
	VERIFY( m_bmpRibbonFileButtonArea.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_AREA_R1) ) );
	m_bmpRibbonFileButtonArea.Make32();
	m_bmpRibbonFileButtonArea.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 0, 0, 0, 0 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_QATB_BK_R1) ) );

	m_nRibbonHeightOfOneDLB = 12;
	m_nDlbIdxDisabled = m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 1, 1, 1, 1 );
	VERIFY(
		m_arrBmpRibbonDLB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_GCB_R1)
			)
		);

	m_clrRibbonGalleryInplaceBorderNormal = RGB(195,202,217);
	m_clrRibbonGalleryInplaceBorderHover  = RGB(171,180,199);
	m_clrRibbonGalleryInplaceBkgndNormal  = RGB(195,202,217);
	m_clrRibbonGalleryInplaceBkgndHover   = RGB(192,202,222);

	m_rcRibbonGalleryScrollFill = RGB(198,204,218);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 3, 3, 3, 3 );
	m_nHeightRibbonGalleryScrollButton = -1; //20;
	m_nIndexRibbonGalleryScrollButtonDisabled = 0;
	m_nIndexRibbonGalleryScrollButtonNormal = 1;
	m_nIndexRibbonGalleryScrollButtonHover = 2;
	m_nIndexRibbonGalleryScrollButtonPressed = 3;
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_DOWN_R1)
			)
		);
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_UP_R1)
			)
		);
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_MENU_R1)
			)
		);
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_DDA_R1) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_COMBO_BOX_BUTTON_R1) ) );

	// tool buttons 2007
	m_nHeightOfButtonLSM = 66;

	// tool buttons 2007
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]	= 0;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]	= 3;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]	= 2;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]		= 0;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]	= 1;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= -1;

	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 0;

//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 4;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 6;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 3;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 6;

	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 5;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 4;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 5;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SOLID_R1)
			)
		);
	//m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_LEFT_R1)
			)
		);
	//m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_MIDDLE_R1)
			)
		);
	//m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_RIGHT_R1)
			)
		);
	//m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_LEFT_R1)
			)
		);
	//m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_RIGHT_R1)
			)
		);
	//m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_ALL_R1) // IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R1
			)
		);
//	m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R1)
//			)
//		);
//	m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R1)
			)
		);
//	m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R1)
			)
		);
//	m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_HOVER_R1)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_PRESSED_R1)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(0,0,128);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_BORDER_R1)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(0,0,128);;
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_CAPTION_BK_R1)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 8, 8, 8, 26 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RM_BIG_BORDER_R1) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
//	VERIFY(
//		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R1)
//			)
//		);
//	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
//	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R1)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RESIZING_GRIPPER_R1) ) );
	m_bmpResizingGripper.Make32();
	m_bmpResizingGripper.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_UP_R1) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_UP_R1) ) );
}

CExtPaintManagerOffice2007_R1::~CExtPaintManagerOffice2007_R1()
{
}

CExtPaintManagerOffice2010_Impl::CExtPaintManagerOffice2010_Impl()
{
#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_bPnPaneCaptFontBold = false;
	m_strPnPaneCaptCustomFontFaceName = _T("");
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
}

CExtPaintManagerOffice2010_Impl::~CExtPaintManagerOffice2010_Impl()
{
}

CExtPaintManagerOffice2010_R1::CExtPaintManagerOffice2010_R1()
{
	m_bThemedMenuItemsEverywhere = true;
	
	m_clrFillHint = RGB(205,205,205);
	m_clrAccentHint = RGB(255,227,140); // RGB(156,193,234);
	m_clrIconAlphaColor = RGB(114,121,138);
	m_clrAdvTipGradientBottom = RGB(229,229,240);

	VERIFY( m_arrMdiRightIcons[0].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_MINIMIZE) ) );
	VERIFY( m_arrMdiRightIcons[1].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_RESTORE) ) );
	VERIFY( m_arrMdiRightIcons[2].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_CLOSE) ) );

//	m_clrDCA1 = RGB(172,180,198);
//	m_clrDCA2 = RGB(113,125,152);
//	m_clrDCA3 = RGB(132,141,166);
//	m_bDocumentClientAreaBkgndR2 = false;
//	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_DCA_R1) ) );
//	m_bmpDCA.PreMultiplyRGBChannels();
//	m_bmpDCA.PreMultipliedRGBChannelsSet( true );
	m_clrDCA_Solid = RGB(220,226,232);

	m_bUseNcFrameBmpForDockerBkgnd = true;
	m_clrCustomDropDownGlyphEnabled = RGB(0,0,0);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = m_clrFloatingToolbarGripperSolid = RGB(83,96,125);
	m_clrDockingFrameCaptionTextActive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextInactive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextFloatingFixed =  RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(255,255,255);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_ACTIVE_R1) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_INACTIVE_R1) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive = RGB(69,69,69); // = RGB(123,123,123);
	m_clrNcFrameTextInactive = RGB(163,163,163); // = RGB(183,183,183);
	m_bmpNcFrameActive.PreMultiplyRGBChannels();
	m_bmpNcFrameActive.PreMultipliedRGBChannelsSet( true );
	m_bmpNcFrameInactive.PreMultiplyRGBChannels();
	m_bmpNcFrameInactive.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = m_sizeNcButtonShapeInArr.cy = 21;
	m_nNcBtnIdxNormalActive = m_nNcBtnIdxNormalInactive = 0;

	m_rcNcButtonBkPadding.SetRect( 4, 4, 4, 4 );
	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_R1) ) );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_R1) ) );
	VERIFY( m_bmpNcButtonBkHover.Make32() );
	VERIFY( m_bmpNcButtonBkPressed.Make32() );
	m_bmpNcButtonBkHover.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressed.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHover.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHover.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressed.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressed.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpNcButtonBkHoverX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_R1_X) ) );
	VERIFY( m_bmpNcButtonBkPressedX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_R1_X) ) );
	VERIFY( m_bmpNcButtonBkHoverX.Make32() );
	VERIFY( m_bmpNcButtonBkPressedX.Make32() );
	m_bmpNcButtonBkHoverX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressedX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHoverX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHoverX.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressedX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressedX.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = 13;
	m_sizeNcButtonShapeInArr.cy = 12;
	m_nNcBtnIdxNormalActive = 0;
	m_nNcBtnIdxHover = 1;
	m_nNcBtnIdxPressed = 2;
	m_nNcBtnIdxNormalInactive = 3;
	m_nNcBtnIdxDisabled = 4;
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_CLOSE_R1) ) );
//	m_bmpArrNcButtonsClose.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsClose.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MAXIMIZE_R1) ) );
//	m_bmpArrNcButtonsMaximize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMaximize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_RESTORE_R1) ) );
//	m_bmpArrNcButtonsRestore.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsRestore.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MINIMIZE_R1) ) );
//	m_bmpArrNcButtonsMinimize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMinimize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_HELP_R1) ) );
	m_bmpArrNcButtonsHelp.PreMultiplyRGBChannels();

#if (!defined __EXT_MFC_NO_STATUSBAR)
	m_rcStatusBkPadding.SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_LIGHT_R1) ) );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_DARK_R1) ) );
	m_rcStatusSeparatorPadding.SetRect( 0, 2, 0, 2 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_SEPARATOR_R1) ) );
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal = m_clrTabTextSelected = RGB( 52, 52, 64 );
	m_clrTabTextNormalDWM = m_clrTabTextSelectedDWM = RGB( 76, 83, 92 );
	m_nIdxTabShapeHover = 1;
	m_nIdxTabShapePressed = 0;
	m_nIdxTabShapeSelected = 0;
	m_nIdxTabShapeSelectedHover = 0;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 19;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 4, 3, 4 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 4, 3, 4 );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_R1 )
			)
		);
	VERIFY( m_arrBmpTabShapeNormal[__ETSOI_TOP].Make32() );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_SEL_AREA_R1 )
			)
		);
		//VERIFY( m_arrBmpTabShapeSelArea[__ETSOI_TOP].Make32() );
		//m_arrBmpTabShapeSelArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
		//m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
		//m_arrBmpTabShapeSelArea[__ETSOI_LEFT].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
		//m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].PreMultipliedRGBChannelsSet( true );

	m_arrRectTabAreaPadding[__ETSOI_TOP].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_BOTTOM].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_LEFT].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_RIGHT].SetRect( 3, 3, 3, 3 );
	m_arrTabAreaMargins[__ETSOI_TOP] = 1;
	m_arrTabAreaMargins[__ETSOI_BOTTOM] = 1;
	m_arrTabAreaMargins[__ETSOI_LEFT] = 1;
	m_arrTabAreaMargins[__ETSOI_RIGHT] = 1;
	VERIFY(
		m_arrBmpTabArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_TAB_AREA_BK_GRAY )
			)
		);
	VERIFY( m_arrBmpTabArea[__ETSOI_TOP].Make32() );
CSize _sizeTabArea = m_arrBmpTabArea[__ETSOI_TOP].GetSize();
	m_arrBmpTabArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			180,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			270,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			90,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 2;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SEPARATOR_R1 )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_CHECK_BOX_R1 )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_RADIO_BUTTON_R1 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(226, 228, 231);
	m_clrMenuItemLeftAreaMarginR = RGB(245, 245, 245);
	m_rcMenuItemPaddingLargeLeft.SetRect(  3, 3, 3, 16 );
	m_rcMenuItemPaddingLargeRight.SetRect( 1, 3, 3, 16 );
	m_rcMenuItemPaddingSmallLeft.SetRect(  3, 3, 3, 10 );
	m_rcMenuItemPaddingSmallRight.SetRect( 1, 3, 3, 10 );
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 1, 1, 1, 1 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_CHECKED_R1   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_UNCHECKED_R1 ) ) );

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_arrClrPnCaptNormal[0]  = RGB(235,238,250);
	m_arrClrPnCaptNormal[1]  = RGB(215,219,229);
	m_arrClrPnCaptNormal[2]  = RGB(197,199,209);
	m_arrClrPnCaptNormal[3]  = RGB(212,216,226);
	m_arrClrPnSplitter[0]    = RGB( 240, 243, 247 );
	m_arrClrPnSplitter[1]    = RGB( 215, 219, 225 );
	m_clrPnCaptText			 = RGB( 30, 57, 91 );
	m_arrClrPnItemText[0]    = RGB(0,0,0);
	m_arrClrPnItemText[1]    = RGB(76,83,92);
	m_clrPnConfigButton		 = RGB(101,104,112);
static const UINT g_arrResIdPnItemExpanded[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_HOVER_R1,
};
static const UINT g_arrResIdPnItemCollapsed[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_HOVER_R1,
};
INT nPnIndex;
	for( nPnIndex = 0; nPnIndex < INT(ePn_Count); nPnIndex ++ )
	{
		VERIFY( m_arrBmpPnItemExpanded[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemExpanded[nPnIndex]) ) );
		VERIFY( m_arrBmpPnItemCollapsed[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemCollapsed[nPnIndex]) ) );
		m_arrRcPnItemPaddingExpanded[nPnIndex].SetRect( 0, 2, 0, 2 );
		m_arrRcPnItemPaddingCollapsed[nPnIndex].SetRect( 0, 0, 0, 0 );
		m_arrClrPnItemTextBmpVer[nPnIndex] = RGB(0,0,0);
	}
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_COMBO_BOX_BUTTON_R1 ) ) );
		m_bmpArrComboBoxDropDown.PreMultipliedRGBChannelsSet( true );
	m_arrClrComboBoxBorder[0] = RGB(212,214,217);
	m_arrClrComboBoxBorder[1] = RGB(180,180,180);
	m_arrClrComboBoxBorder[2] = RGB(212,214,217);
	m_arrClrComboBoxBorder[3] = RGB(228,231,235);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 2, 2, 2, 2 ), rcEntirePaddingRV( 2, 2, 2, 2 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R1, IDB_EXT_2010_OFFICE_ZS_MINUS_R1, IDB_EXT_2010_OFFICE_ZS_THUMB_R1,
		RGB(204,204,204), RGB(37,37,37), RGB(204,204,204), RGB(37,37,37), AFX_IDW_DOCKBAR_TOP
		);
	m_SbSkinDataB_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R1, IDB_EXT_2010_OFFICE_ZS_MINUS_R1, IDB_EXT_2010_OFFICE_ZS_THUMB_R1,
		RGB(204,204,204), RGB(37,37,37), RGB(204,204,204), RGB(37,37,37), AFX_IDW_DOCKBAR_BOTTOM
		);
	m_SbSkinDataL_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R1, IDB_EXT_2010_OFFICE_ZS_MINUS_R1, IDB_EXT_2010_OFFICE_ZS_THUMB_R1,
		RGB(204,204,204), RGB(37,37,37), RGB(204,204,204), RGB(37,37,37), AFX_IDW_DOCKBAR_LEFT
		);
	m_SbSkinDataR_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R1, IDB_EXT_2010_OFFICE_ZS_MINUS_R1, IDB_EXT_2010_OFFICE_ZS_THUMB_R1,
		RGB(204,204,204), RGB(37,37,37), RGB(204,204,204), RGB(37,37,37), AFX_IDW_DOCKBAR_RIGHT
		);
	m_SbSkinDataH_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R1_HORZ_LIGHT,
		15,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R1_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R1_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R1_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R1_VERT_LIGHT,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R1_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R1_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R1_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataH_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R1_HORZ_DARK,
		15,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R1_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R1_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R1_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R1_VERT_DARK,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R1_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R1_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R1_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_clrGridHeaderBkTop     = RGB(253,253,253);
	m_clrGridHeaderBkBottom  = RGB(212,215,220);
	m_clrGridHeaderSeparator = RGB(145,153,164);
	m_clrGridHeaderSortArrow = RGB(145,153,164);
	m_clrGridHeaderBorder    = RGB(145,153,164);

	m_clrRgHeaderBkTop     = RGB(253,253,253);
	m_clrRgHeaderBkBottom  = RGB(212,215,220);
	m_clrRgHeaderSeparator = RGB(145,153,164);
	m_clrRgHeaderSortArrow = RGB(145,153,164);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(76,83,92);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(235,235,235);
	m_clrRgGroupAreaText   = RGB(70,70,70);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

	m_nPushBtnSimpleGlyphHeightH = 43;
	m_nPushBtnSimpleGlyphHeightV = 43;
	m_nPushBtnSDDLeftGlyphHeightH = 43;
	m_nPushBtnSDDLeftGlyphHeightV = 43;
	m_nPushBtnSDDRightGlyphHeightH = 43;
	m_nPushBtnSDDRightGlyphHeightV = 9;
	m_rcPushBtnSimplePaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSimplePaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingV.SetRect( 3, 3, 3, 3 );
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_RIGHT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);
	m_arrBmpPushBtnSimpleV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDLeftV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDRightV.PreMultipliedRGBChannelsSet( true );

#if (!defined __EXT_MFC_NO_RIBBON_BAR)

	if( g_PaintManager.m_bIsWinVistaOrLater )
	{
		VERIFY( m_bmpRibbonTabAreaBlur.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TAB_AREA_DWM_BLUR) ) );
		m_rcRibbonTabAreaBlurPadding.SetRect( 35, 0, 35, 36 );
	}

	m_clrRibbonTabClientAreaActive = RGB(227,230,232);
	m_clrRibbonTabClientAreaInactive = RGB(252,252,252);

	m_clrContractedMargin1 = RGB(128,128,128);
	m_clrContractedMargin2 = RGB(128,128,128);
	m_bRibbonGroupCaptionAtTop = false;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonGroupIconBkVertOffset = 2;
	m_nRibbonCaptionPartHeight = 17;
	m_rcRibbonPageOuterContentPadding.SetRect( 0, 0, 0, 0 );
	m_clrRibbonComboBackGroundNormal   = RGB(255,255,255);
	m_clrRibbonComboBackGroundDisabled = RGB(255,255,255);
	m_nRibbonTabIntersectionHeight = 1;

	//m_nRibbonQuickAccessBarButtonsAlignment = 0;

	m_clrRibbonGroupCaptionTextCollapsed
		= m_clrRibbonButtonNormal
		= RGB(57,60,63);
	m_clrRibbonButtonDisabled = RGB(128,128,128);
	m_clrRibbonGroupCaptionTextExpanded = RGB( 52, 52, 64 );
	//m_clrRibbonGroupCaptionTextShadowExpanded = RGB( 0, 0, 0 );
	//m_sizeRibbonGroupCaptionTextOffset = CSize( 1, 1 );
	m_nRibbonGroupCaptionTextDF
		= m_nRibbonGroupCaptionTextShadowDF
		= DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;

	m_rcRibbonPageBkPadding.SetRect( 1, 1, 1, 1 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_PAGE_BK_R1)
			)
		);
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 2, 6, 2, 2 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_NORMAL_BK_R1)
			)
		);
		m_bmpRibbonGroupBkExpanded[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_HOVER_BK_R1)
			)
		);
		m_bmpRibbonGroupBkExpanded[1].PreMultipliedRGBChannelsSet( false );
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 2, 6, 2, 2 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R1)
			)
		);
		m_bmpRibbonGroupBkCollapsed[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R1)
			)
		);
		m_bmpRibbonGroupBkCollapsed[1].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R1)
			)
		);
		m_bmpRibbonGroupBkCollapsed[2].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource( // selected same as hover in R1
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R1)
			)
		);
		m_bmpRibbonGroupBkCollapsed[3].PreMultipliedRGBChannelsSet( false );
//INT nBkIndex, nBkCount;
//	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
//		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )

	VERIFY( m_bmpRibbonGroupBkQATB[0].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_NORMAL_BK_R1) ) );
	m_bmpRibbonGroupBkQATB[0].PreMultiplyRGBChannels( false );
	VERIFY( m_bmpRibbonGroupBkQATB[1].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_HOVER_BK_R1) ) );
	m_bmpRibbonGroupBkQATB[1].PreMultiplyRGBChannels( false );
	VERIFY( m_bmpRibbonGroupBkQATB[2].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_PRESSED_BK_R1) ) );
	m_bmpRibbonGroupBkQATB[2].PreMultiplyRGBChannels( false );
	m_bmpRibbonGroupBkQATB[3] = m_bmpRibbonGroupBkQATB[1];

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_STRETCH );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_STRETCH );
	m_rcRibbonSeparatorPaddingH.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_H_R1)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_V_R1)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingQACEB.SetRect( 3, 3, 3, 3 );
	m_nRibbonHeightOfQACEB = 22;
	m_nIdxRibbonQACEB_Normal   = 3;
	m_nIdxRibbonQACEB_Hover    = 0;
	m_nIdxRibbonQACEB_Pressed  = 1;
	m_nIdxRibbonQACEB_Selected = 2;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_CEB_R1)
			)
		);
		m_bmpArrRibbonQACEB.PreMultiplyRGBChannels( false );
		//m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_nRibbonEmbeddedCaptionTextAlignmentFlags = (DT_SINGLELINE|DT_CENTER|DT_VCENTER);
			//m_bRibbonFileButtonItegrationSupported = false;

	//m_nRibbonFileButtonMenuIntersectionHeight = 20;

			m_nQatbAdditionalSpaceAtRightDWM = 0;

// 			INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
// 			INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
// 			CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
			m_rcRibbonNcCornerLeftCP.SetRect( 53, 2, 2, 2 );
			m_rcRibbonNcCornerRightCP.SetRect( 2, 2, 42, 2 );

			VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_FILE_BUTTON) ) );
			//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );
			m_bmpArrRibbonFileButton.PreMultiplyRGBChannels( true );
			m_nRibbonFileButtonHeight = m_bmpArrRibbonFileButton.GetSize().cy / 3;

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 0, 1, 0, 1 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_BK_R1) ) );

	m_nRibbonHeightOfOneDLB = 14;
	m_nDlbIdxDisabled = m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 2, 2, 2, 2 );
	VERIFY( m_arrBmpRibbonDLB.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_GCB_R1) ) );
		//m_arrBmpRibbonDLB.PreMultipliedRGBChannelsSet( true );
		m_arrBmpRibbonDLB.PreMultiplyRGBChannels( false );

	m_clrRibbonGalleryInplaceBorderNormal = m_clrRibbonGalleryInplaceBorderHover  = RGB(198,202,205);
	m_clrRibbonGalleryInplaceBkgndNormal  = m_clrRibbonGalleryInplaceBkgndHover   = RGB(255,255,255);

	m_rcRibbonGalleryScrollFill = RGB(255,255,255);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 3, 3, 3, 3 );
	m_nHeightRibbonGalleryScrollButton = -1; //20;
	m_nIndexRibbonGalleryScrollButtonNormal   = 0;
	m_nIndexRibbonGalleryScrollButtonHover    = 1;
	m_nIndexRibbonGalleryScrollButtonPressed  = 2;
	m_nIndexRibbonGalleryScrollButtonDisabled = 3;
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_DOWN_R1)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonDown.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_UP_R1)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonUp.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_MENU_R1)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonMenu.PreMultipliedRGBChannelsSet( true );
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_DDA_R1) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingComboBoxDropDown.SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_COMBO_BOX_BUTTON_R1) ) );
		m_bmpArrRibbonComboBoxDropDown.PreMultipliedRGBChannelsSet( true );

	// buttons 2010
	m_nHeightOfButtonLSM = 66;
	m_nHeightOfButtonLSXM = 39;
	m_nHeightOfButtonLSXB = 27;

	// tool buttons 2010
	m_rcPaddingOfButtonTS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]				= -1;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]				= 0;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]				= 1;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]					= 2;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]				= 3;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]		= 4;

	m_rcPaddingOfButtonSS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 3;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 4;

//	m_rcPaddingOfButtonLSB.SetRect( 4, 4, 4, 4 );
//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 2;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 3;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSXM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 3;

	m_rcPaddingOfButtonLSXB.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 3;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_LEFT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_RIGHT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_ALL_R1)
			)
		);
		m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R1)
//			)
//		);
//		m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_TOP_R1)
			)
		);
		m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R1)
			)
		);
		m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_HOVER_R1)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_PRESSED_R1)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpRibbonMenuResizingMarginHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_HV_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingMarginV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_V_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingGripperHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_HV_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperHV.Make32();
	m_bmpRibbonMenuResizingGripperHV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY( m_bmpRibbonMenuResizingGripperV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_V_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperV.Make32();
	m_bmpRibbonMenuResizingGripperV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(57,60,63);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_BORDER_R1)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(57,60,63);
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_CAPTION_BK_R1)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 6, 6, 29 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RM_BIG_BORDER_R1) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
//	VERIFY(
//		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R1)
//			)
//		);
//	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
//	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R1)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RESIZING_GRIPPER_R1) ) );
	m_bmpResizingGripper.Make32();
	m_bmpResizingGripper.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_UP_R1) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_UP_R1) ) );
}

CExtPaintManagerOffice2010_R1::~CExtPaintManagerOffice2010_R1()
{
}

CExtPaintManagerOffice2010_R2_Blue::CExtPaintManagerOffice2010_R2_Blue()
{
	m_bThemedMenuItemsEverywhere = true;
	m_clrFillHint = RGB(192,211,235);
	m_clrAccentHint = RGB(255,227,140); // RGB(156,193,234);
	m_clrIconAlphaColor = RGB(114,121,138);
	m_clrAdvTipGradientBottom = RGB(229,229,240);

	VERIFY( m_arrMdiRightIcons[0].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_MINIMIZE) ) );
	VERIFY( m_arrMdiRightIcons[1].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_RESTORE) ) );
	VERIFY( m_arrMdiRightIcons[2].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_CLOSE) ) );

// 	m_clrDCA1 = RGB(192,211,235);
// 	m_clrDCA2 = RGB(192,211,235);
// 	m_clrDCA3 = RGB(192,211,235);
// 	m_bDocumentClientAreaBkgndR2 = true;
	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_DCA_R2_BLUE) ) );
// 	m_bmpDCA.PreMultiplyRGBChannels();
// 	m_bmpDCA.PreMultipliedRGBChannelsSet( true );
// 	m_clrDCA_Solid = RGB(192,211,235);

	m_bUseNcFrameBmpForDockerBkgnd = true;
	m_clrCustomDropDownGlyphEnabled = RGB(0,0,0);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = m_clrFloatingToolbarGripperSolid = RGB(83,96,125);
	m_clrDockingFrameCaptionTextActive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextInactive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextFloatingFixed =  RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(255,255,255);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_ACTIVE_R2_BLUE) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_INACTIVE_R2_BLUE) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive = RGB(69,69,69); // = RGB(123,123,123);
	m_clrNcFrameTextInactive = RGB(163,163,163); // = RGB(183,183,183);
	m_bmpNcFrameActive.PreMultiplyRGBChannels();
	m_bmpNcFrameActive.PreMultipliedRGBChannelsSet( true );
	m_bmpNcFrameInactive.PreMultiplyRGBChannels();
	m_bmpNcFrameInactive.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = m_sizeNcButtonShapeInArr.cy = 21;
	m_nNcBtnIdxNormalActive = m_nNcBtnIdxNormalInactive = 0;

	m_rcNcButtonBkPadding.SetRect( 4, 4, 4, 4 );
	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_R2_BLUE) ) );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_R2_BLUE) ) );
	VERIFY( m_bmpNcButtonBkHover.Make32() );
	VERIFY( m_bmpNcButtonBkPressed.Make32() );
	m_bmpNcButtonBkHover.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressed.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHover.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHover.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressed.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressed.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpNcButtonBkHoverX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_X_R2_BLUE) ) );
	VERIFY( m_bmpNcButtonBkPressedX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_X_R2_BLUE) ) );
	VERIFY( m_bmpNcButtonBkHoverX.Make32() );
	VERIFY( m_bmpNcButtonBkPressedX.Make32() );
	m_bmpNcButtonBkHoverX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressedX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHoverX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHoverX.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressedX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressedX.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = 13;
	m_sizeNcButtonShapeInArr.cy = 12;
	m_nNcBtnIdxNormalActive = 0;
	m_nNcBtnIdxHover = 1;
	m_nNcBtnIdxPressed = 2;
	m_nNcBtnIdxNormalInactive = 3;
	m_nNcBtnIdxDisabled = 4;
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_CLOSE_R2_BLUE) ) );
//	m_bmpArrNcButtonsClose.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsClose.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MAXIMIZE_R2_BLUE) ) );
//	m_bmpArrNcButtonsMaximize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMaximize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_RESTORE_R2_BLUE) ) );
//	m_bmpArrNcButtonsRestore.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsRestore.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MINIMIZE_R2_BLUE) ) );
//	m_bmpArrNcButtonsMinimize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMinimize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_HELP_R1) ) );
	m_bmpArrNcButtonsHelp.PreMultiplyRGBChannels();

#if (!defined __EXT_MFC_NO_STATUSBAR)
	m_clrStatusPaneTextColorNormal   = RGB(35,30,66);
	m_clrStatusPaneTextColorDisabled = RGB(136,142,149);
	m_rcStatusBkPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_LIGHT_R2_BLUE) ) );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_DARK_R2_BLUE) ) );
	m_rcStatusSeparatorPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_SEPARATOR_R2_BLUE) ) );
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal = m_clrTabTextSelected = RGB( 52, 52, 64 );
	m_clrTabTextNormalDWM = m_clrTabTextSelectedDWM = RGB( 30, 57, 91 );
	m_nIdxTabShapeHover = 0;
	m_nIdxTabShapePressed = 1;
	m_nIdxTabShapeSelected = 1;
	m_nIdxTabShapeSelectedHover = 1;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 13;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 4, 3, 4 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 4, 3, 4 );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_R2_BLUE )
			)
		);
	m_arrBmpTabShapeNormal[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_SEL_AREA_R2_BLUE )
			)
		);
	m_arrBmpTabShapeSelArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	m_arrRectTabAreaPadding[__ETSOI_TOP].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_BOTTOM].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_LEFT].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_RIGHT].SetRect( 3, 3, 3, 3 );
	m_arrTabAreaMargins[__ETSOI_TOP] = 1;
	m_arrTabAreaMargins[__ETSOI_BOTTOM] = 1;
	m_arrTabAreaMargins[__ETSOI_LEFT] = 1;
	m_arrTabAreaMargins[__ETSOI_RIGHT] = 1;
	VERIFY(
		m_arrBmpTabArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_TAB_AREA_BK_BLUE )
			)
		);
	VERIFY( m_arrBmpTabArea[__ETSOI_TOP].Make32() );
CSize _sizeTabArea = m_arrBmpTabArea[__ETSOI_TOP].GetSize();
	m_arrBmpTabArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			180,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			270,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			90,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 2;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SEPARATOR_R2_BLUE )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
// 			m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
// 			m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_CHECK_BOX_R1 )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_RADIO_BUTTON_R1 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(226, 228, 231);
	m_clrMenuItemLeftAreaMarginR = RGB(245, 245, 245);
	m_rcMenuItemPaddingLargeLeft.SetRect(  3, 3, 3, 16 );
	m_rcMenuItemPaddingLargeRight.SetRect( 1, 3, 3, 16 );
	m_rcMenuItemPaddingSmallLeft.SetRect(  3, 3, 3, 10 );
	m_rcMenuItemPaddingSmallRight.SetRect( 1, 3, 3, 10 );
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 1, 1, 1, 1 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_CHECKED_R1   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_UNCHECKED_R1 ) ) );

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_arrClrPnCaptNormal[0]  = RGB(235,238,250);
	m_arrClrPnCaptNormal[1]  = RGB(215,219,229);
	m_arrClrPnCaptNormal[2]  = RGB(197,199,209);
	m_arrClrPnCaptNormal[3]  = RGB(212,216,226);
	m_arrClrPnSplitter[0]    = RGB( 219, 235, 255 );
	m_arrClrPnSplitter[1]    = RGB( 198, 216, 237 );
	m_clrPnCaptText			 = RGB( 30, 57, 91 );
	m_arrClrPnItemText[0]    = RGB(0,0,0);
	m_arrClrPnItemText[1]    = RGB(76,83,92);
	m_clrPnConfigButton		 = RGB(101,104,112); 
static const UINT g_arrResIdPnItemExpanded[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_HOVER_R1,
};
static const UINT g_arrResIdPnItemCollapsed[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_HOVER_R1,
};
INT nPnIndex;
	for( nPnIndex = 0; nPnIndex < INT(ePn_Count); nPnIndex ++ )
	{
		VERIFY( m_arrBmpPnItemExpanded[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemExpanded[nPnIndex]) ) );
		VERIFY( m_arrBmpPnItemCollapsed[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemCollapsed[nPnIndex]) ) );
		m_arrRcPnItemPaddingExpanded[nPnIndex].SetRect( 0, 2, 0, 2 );
		m_arrRcPnItemPaddingCollapsed[nPnIndex].SetRect( 0, 0, 0, 0 );
		m_arrClrPnItemTextBmpVer[nPnIndex] = RGB(0,0,0);
	}
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_COMBO_BOX_BUTTON_R2_BLUE ) ) );
		m_bmpArrComboBoxDropDown.PreMultipliedRGBChannelsSet( true );
	m_arrClrComboBoxBorder[0] = RGB(212,214,217);
	m_arrClrComboBoxBorder[1] = RGB(164,164,164);
	m_arrClrComboBoxBorder[2] = RGB(164,164,164);
	m_arrClrComboBoxBorder[3] = RGB(228,231,235);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 2, 2, 2, 2 ), rcEntirePaddingRV( 2, 2, 2, 2 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLUE,
		RGB(222,234,247), RGB(138,156,184), RGB(222,234,247), RGB(138,156,184), AFX_IDW_DOCKBAR_TOP
		);
	m_SbSkinDataB_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLUE,
		RGB(222,234,247), RGB(138,156,184), RGB(222,234,247), RGB(138,156,184), AFX_IDW_DOCKBAR_BOTTOM
		);
	m_SbSkinDataL_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLUE,
		RGB(222,234,247), RGB(138,156,184), RGB(222,234,247), RGB(138,156,184), AFX_IDW_DOCKBAR_LEFT
		);
	m_SbSkinDataR_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLUE, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLUE,
		RGB(222,234,247), RGB(138,156,184), RGB(222,234,247), RGB(138,156,184), AFX_IDW_DOCKBAR_RIGHT
		);
	m_SbSkinDataH_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLUE_HORZ_LIGHT,
		16,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_LIGHT_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_LIGHT,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLUE_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLUE_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLUE_VERT_LIGHT,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_LIGHT_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_LIGHT,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLUE_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLUE_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataH_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLUE_HORZ_DARK,
		16,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_BLUE_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_BLUE,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_BLUE,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_BLUE,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_BLUE,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLUE_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLUE_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLUE_VERT_DARK,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_BLUE_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_BLUE,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_BLUE,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_BLUE,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_BLUE,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLUE_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLUE_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_clrGridHeaderBkTop     = RGB(253,253,253);
	m_clrGridHeaderBkBottom  = RGB(212,215,220);
	m_clrGridHeaderSeparator = RGB(145,153,164);
	m_clrGridHeaderSortArrow = RGB(145,153,164);
	m_clrGridHeaderBorder    = RGB(145,153,164);

	m_clrRgHeaderBkTop     = RGB(253,253,253);
	m_clrRgHeaderBkBottom  = RGB(212,215,220);
	m_clrRgHeaderSeparator = RGB(145,153,164);
	m_clrRgHeaderSortArrow = RGB(145,153,164);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(76,83,92);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(235,235,235);
	m_clrRgGroupAreaText   = RGB(70,70,70);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

	m_nPushBtnSimpleGlyphHeightH = 43;
	m_nPushBtnSimpleGlyphHeightV = 43;
	m_nPushBtnSDDLeftGlyphHeightH = 43;
	m_nPushBtnSDDLeftGlyphHeightV = 43;
	m_nPushBtnSDDRightGlyphHeightH = 43;
	m_nPushBtnSDDRightGlyphHeightV = 9;
	m_rcPushBtnSimplePaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSimplePaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingV.SetRect( 3, 3, 3, 3 );
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_RIGHT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);
	m_arrBmpPushBtnSimpleV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDLeftV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDRightV.PreMultipliedRGBChannelsSet( true );

#if (!defined __EXT_MFC_NO_RIBBON_BAR)

	if( g_PaintManager.m_bIsWinVistaOrLater )
	{
		VERIFY( m_bmpRibbonTabAreaBlur.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TAB_AREA_DWM_BLUR) ) );
		m_rcRibbonTabAreaBlurPadding.SetRect( 35, 0, 35, 36 );
	}

	m_clrRibbonTabClientAreaActive = RGB(192,211,235);
	m_clrRibbonTabClientAreaInactive = RGB(223,235,247);

	m_clrContractedMargin1 = RGB(128,128,128);
	m_clrContractedMargin2 = RGB(223,235,247);
	m_bRibbonGroupCaptionAtTop = false;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonGroupIconBkVertOffset = 2;
	m_nRibbonCaptionPartHeight = 17;
	m_rcRibbonPageOuterContentPadding.SetRect( 0, 0, 0, 0 );
	m_clrRibbonComboBackGroundNormal   = RGB(255,255,255);
	m_clrRibbonComboBackGroundDisabled = RGB(255,255,255);
	m_nRibbonTabIntersectionHeight = 1;

	//m_nRibbonQuickAccessBarButtonsAlignment = 0;

	m_clrRibbonGroupCaptionTextCollapsed
		= m_clrRibbonButtonNormal
		= RGB(57,60,63);
	m_clrRibbonButtonDisabled = RGB(128,128,128);
	m_clrRibbonGroupCaptionTextExpanded = RGB( 52, 52, 64 );
	//m_clrRibbonGroupCaptionTextShadowExpanded = RGB( 0, 0, 0 );
	//m_sizeRibbonGroupCaptionTextOffset = CSize( 1, 1 );
	m_nRibbonGroupCaptionTextDF
		= m_nRibbonGroupCaptionTextShadowDF
		= DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;

	m_rcRibbonPageBkPadding.SetRect( 1, 1, 1, 1 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_PAGE_BK_R2_BLUE)
			)
		);
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 2, 6, 4, 2 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_NORMAL_BK_R2_BLUE)
			)
		);
		m_bmpRibbonGroupBkExpanded[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_HOVER_BK_R2_BLUE)
			)
		);
		m_bmpRibbonGroupBkExpanded[1].PreMultipliedRGBChannelsSet( false );
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 2, 6, 4, 2 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R2_BLUE)
			)
		);
		m_bmpRibbonGroupBkCollapsed[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_BLUE)
			)
		);
		m_bmpRibbonGroupBkCollapsed[1].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R2_BLUE)
			)
		);
		m_bmpRibbonGroupBkCollapsed[2].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource( // selected same as hover in R1
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_BLUE)
			)
		);
		m_bmpRibbonGroupBkCollapsed[3].PreMultipliedRGBChannelsSet( false );
//INT nBkIndex, nBkCount;
//	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
//		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )

	VERIFY( m_bmpRibbonGroupBkQATB[0].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_NORMAL_BK_R2_BLUE) ) );
		//m_bmpRibbonGroupBkQATB[0].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[0].Make32() );
		m_bmpRibbonGroupBkQATB[0].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	VERIFY( m_bmpRibbonGroupBkQATB[1].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_HOVER_BK_R2_BLUE) ) );
		//m_bmpRibbonGroupBkQATB[1].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[1].Make32() );
		m_bmpRibbonGroupBkQATB[1].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	VERIFY( m_bmpRibbonGroupBkQATB[2].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_PRESSED_BK_R2_BLUE) ) );
		//m_bmpRibbonGroupBkQATB[2].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[2].Make32() );
		m_bmpRibbonGroupBkQATB[2].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonGroupBkQATB[3] = m_bmpRibbonGroupBkQATB[1];

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_STRETCH );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_STRETCH );
	m_rcRibbonSeparatorPaddingH.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_H_R2_BLUE)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_V_R2_BLUE)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingQACEB.SetRect( 3, 3, 3, 3 );
	m_nRibbonHeightOfQACEB = 22;
	m_nIdxRibbonQACEB_Normal   = 3;
	m_nIdxRibbonQACEB_Hover    = 0;
	m_nIdxRibbonQACEB_Pressed  = 1;
	m_nIdxRibbonQACEB_Selected = 2;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_CEB_R2_BLUE)
			)
		);
		m_bmpArrRibbonQACEB.PreMultiplyRGBChannels( false );
		//m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_nRibbonEmbeddedCaptionTextAlignmentFlags = (DT_SINGLELINE|DT_CENTER|DT_VCENTER);
			//m_bRibbonFileButtonItegrationSupported = false;

	//m_nRibbonFileButtonMenuIntersectionHeight = 20;

			m_nQatbAdditionalSpaceAtRightDWM = 0;

// 			INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
// 			INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
// 			CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
			m_rcRibbonNcCornerLeftCP.SetRect( 53, 2, 2, 2 );
			m_rcRibbonNcCornerRightCP.SetRect( 2, 2, 42, 2 );

			VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_FILE_BUTTON) ) );
			//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );
			m_bmpArrRibbonFileButton.PreMultiplyRGBChannels( true );
			m_nRibbonFileButtonHeight = m_bmpArrRibbonFileButton.GetSize().cy / 3;

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_BK_R2_BLUE) ) );

	m_nRibbonHeightOfOneDLB = 14;
	m_nDlbIdxDisabled = m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 2, 2, 2, 2 );
	VERIFY( m_arrBmpRibbonDLB.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_GCB_R2_BLUE) ) );
		//m_arrBmpRibbonDLB.PreMultipliedRGBChannelsSet( true );
		m_arrBmpRibbonDLB.PreMultiplyRGBChannels( false );

	m_clrRibbonGalleryInplaceBorderNormal = m_clrRibbonGalleryInplaceBorderHover  = RGB(198,202,205);
	m_clrRibbonGalleryInplaceBkgndNormal  = m_clrRibbonGalleryInplaceBkgndHover   = RGB(255,255,255);

	m_rcRibbonGalleryScrollFill = RGB(255,255,255);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 3, 3, 3, 3 );
	m_nHeightRibbonGalleryScrollButton = -1; //20;
	m_nIndexRibbonGalleryScrollButtonNormal   = 0;
	m_nIndexRibbonGalleryScrollButtonHover    = 1;
	m_nIndexRibbonGalleryScrollButtonPressed  = 2;
	m_nIndexRibbonGalleryScrollButtonDisabled = 3;
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_DOWN_R2_BLUE)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonDown.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_UP_R2_BLUE)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonUp.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_MENU_R2_BLUE)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonMenu.PreMultipliedRGBChannelsSet( true );
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_DDA_R1) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingComboBoxDropDown.SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_COMBO_BOX_BUTTON_R1) ) );
		m_bmpArrRibbonComboBoxDropDown.PreMultipliedRGBChannelsSet( true );

	// buttons 2010
	m_nHeightOfButtonLSM = 66;
	m_nHeightOfButtonLSXM = 39;
	m_nHeightOfButtonLSXB = 27;

	// tool buttons 2010
	m_rcPaddingOfButtonTS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]				= -1;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]				= 0;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]				= 1;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]					= 2;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]				= 3;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]		= 4;

	m_rcPaddingOfButtonSS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 3;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 4;

//	m_rcPaddingOfButtonLSB.SetRect( 4, 4, 4, 4 );
//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 2;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 3;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSXM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 3;

	m_rcPaddingOfButtonLSXB.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 3;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_LEFT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_RIGHT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_ALL_R1)
			)
		);
		m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R2_BLUE)
//			)
//		);
//		m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_TOP_R1)
			)
		);
		m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R1)
			)
		);
		m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_HOVER_R2_BLUE)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_PRESSED_R2_BLUE)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpRibbonMenuResizingMarginHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_HV_LUNA_BLUE) ) );
	VERIFY( m_bmpRibbonMenuResizingMarginV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_V_LUNA_BLUE) ) );
	VERIFY( m_bmpRibbonMenuResizingGripperHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_HV_LUNA_BLUE) ) );
	m_bmpRibbonMenuResizingGripperHV.Make32();
	m_bmpRibbonMenuResizingGripperHV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY( m_bmpRibbonMenuResizingGripperV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_V_LUNA_BLUE) ) );
	m_bmpRibbonMenuResizingGripperV.Make32();
	m_bmpRibbonMenuResizingGripperV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(57,60,63);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_BORDER_R2_BLUE)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(57,60,63);
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_CAPTION_BK_R2_BLUE)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 6, 6, 29 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RM_BIG_BORDER_R2_BLUE) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
//	VERIFY(
//		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R2_BLUE)
//			)
//		);
//	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
//	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R1)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RESIZING_GRIPPER_R2_BLUE) ) );
	m_bmpResizingGripper.Make32();
	m_bmpResizingGripper.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_UP_R1) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_UP_R1) ) );
}

CExtPaintManagerOffice2010_R2_Blue::~CExtPaintManagerOffice2010_R2_Blue()
{
}

CExtPaintManagerOffice2010_R2_Silver::CExtPaintManagerOffice2010_R2_Silver()
{
	m_bThemedMenuItemsEverywhere = true;
	m_clrFillHint = RGB(233,235,238);
	m_clrAccentHint = RGB(255,227,140); // RGB(156,193,234);
	m_clrIconAlphaColor = RGB(114,121,138);
	m_clrAdvTipGradientBottom = RGB(229,229,240);

	VERIFY( m_arrMdiRightIcons[0].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_MINIMIZE) ) );
	VERIFY( m_arrMdiRightIcons[1].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_RESTORE) ) );
	VERIFY( m_arrMdiRightIcons[2].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_CLOSE) ) );

// 	m_clrDCA1 = RGB(234,237,239);
// 	m_clrDCA2 = RGB(234,237,239);
// 	m_clrDCA3 = RGB(234,237,239);
// 	m_bDocumentClientAreaBkgndR2 = true;
	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_DCA_R2_SILVER) ) );
// 	m_bmpDCA.PreMultiplyRGBChannels();
// 	m_bmpDCA.PreMultipliedRGBChannelsSet( true );
// 	m_clrDCA_Solid = RGB(234,237,239);

	m_bUseNcFrameBmpForDockerBkgnd = true;
	m_clrCustomDropDownGlyphEnabled = RGB(0,0,0);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = m_clrFloatingToolbarGripperSolid = RGB(83,96,125);
	m_clrDockingFrameCaptionTextActive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextInactive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextFloatingFixed =  RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(255,255,255);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_ACTIVE_R2_SILVER) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_INACTIVE_R2_SILVER) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive = RGB(69,69,69); // = RGB(123,123,123);
	m_clrNcFrameTextInactive = RGB(163,163,163); // = RGB(183,183,183);
	m_bmpNcFrameActive.PreMultiplyRGBChannels();
	m_bmpNcFrameActive.PreMultipliedRGBChannelsSet( true );
	m_bmpNcFrameInactive.PreMultiplyRGBChannels();
	m_bmpNcFrameInactive.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = m_sizeNcButtonShapeInArr.cy = 21;
	m_nNcBtnIdxNormalActive = m_nNcBtnIdxNormalInactive = 0;

	m_rcNcButtonBkPadding.SetRect( 4, 4, 4, 4 );
	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_R2_SILVER) ) );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_R2_SILVER) ) );
	VERIFY( m_bmpNcButtonBkHover.Make32() );
	VERIFY( m_bmpNcButtonBkPressed.Make32() );
	m_bmpNcButtonBkHover.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressed.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHover.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHover.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressed.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressed.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpNcButtonBkHoverX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_X_R2_SILVER) ) );
	VERIFY( m_bmpNcButtonBkPressedX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_X_R2_SILVER) ) );
	VERIFY( m_bmpNcButtonBkHoverX.Make32() );
	VERIFY( m_bmpNcButtonBkPressedX.Make32() );
	m_bmpNcButtonBkHoverX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressedX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHoverX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHoverX.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressedX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressedX.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = 13;
	m_sizeNcButtonShapeInArr.cy = 12;
	m_nNcBtnIdxNormalActive = 0;
	m_nNcBtnIdxHover = 1;
	m_nNcBtnIdxPressed = 2;
	m_nNcBtnIdxNormalInactive = 3;
	m_nNcBtnIdxDisabled = 4;
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_CLOSE_R2_SILVER) ) );
//	m_bmpArrNcButtonsClose.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsClose.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MAXIMIZE_R2_SILVER) ) );
//	m_bmpArrNcButtonsMaximize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMaximize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_RESTORE_R2_SILVER) ) );
//	m_bmpArrNcButtonsRestore.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsRestore.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MINIMIZE_R2_SILVER) ) );
//	m_bmpArrNcButtonsMinimize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMinimize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_HELP_R1) ) );
	m_bmpArrNcButtonsHelp.PreMultiplyRGBChannels();

#if (!defined __EXT_MFC_NO_STATUSBAR)
	m_clrStatusPaneTextColorNormal   = RGB(51,59,67);
	m_clrStatusPaneTextColorDisabled = RGB(145,149,153);
	m_rcStatusBkPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_LIGHT_R2_SILVER) ) );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_DARK_R2_SILVER) ) );
	m_rcStatusSeparatorPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_SEPARATOR_R2_SILVER) ) );
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal = m_clrTabTextSelected = RGB( 52, 52, 64 );
	m_clrTabTextNormalDWM = m_clrTabTextSelectedDWM = RGB( 76, 83, 92 );
	m_nIdxTabShapeHover = 0;
	m_nIdxTabShapePressed = 1;
	m_nIdxTabShapeSelected = 1;
	m_nIdxTabShapeSelectedHover = 1;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 13;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 4, 3, 4 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 4, 3, 4 );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_R2_SILVER )
			)
		);
	m_arrBmpTabShapeNormal[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_SEL_AREA_R2_SILVER )
			)
		);
	m_arrBmpTabShapeSelArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	m_arrRectTabAreaPadding[__ETSOI_TOP].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_BOTTOM].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_LEFT].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_RIGHT].SetRect( 3, 3, 3, 3 );
	m_arrTabAreaMargins[__ETSOI_TOP] = 1;
	m_arrTabAreaMargins[__ETSOI_BOTTOM] = 1;
	m_arrTabAreaMargins[__ETSOI_LEFT] = 1;
	m_arrTabAreaMargins[__ETSOI_RIGHT] = 1;
	VERIFY(
		m_arrBmpTabArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_TAB_AREA_BK_GRAY )
			)
		);
	VERIFY( m_arrBmpTabArea[__ETSOI_TOP].Make32() );
CSize _sizeTabArea = m_arrBmpTabArea[__ETSOI_TOP].GetSize();
	m_arrBmpTabArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			180,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			270,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			90,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 2;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SEPARATOR_R2_SILVER )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
// 			m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
// 			m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_CHECK_BOX_R1 )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_RADIO_BUTTON_R1 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(226, 228, 231);
	m_clrMenuItemLeftAreaMarginR = RGB(245, 245, 245);
	m_rcMenuItemPaddingLargeLeft.SetRect(  3, 3, 3, 16 );
	m_rcMenuItemPaddingLargeRight.SetRect( 1, 3, 3, 16 );
	m_rcMenuItemPaddingSmallLeft.SetRect(  3, 3, 3, 10 );
	m_rcMenuItemPaddingSmallRight.SetRect( 1, 3, 3, 10 );
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 1, 1, 1, 1 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_CHECKED_R1   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_UNCHECKED_R1 ) ) );

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_arrClrPnCaptNormal[0]  = RGB(235,238,250);
	m_arrClrPnCaptNormal[1]  = RGB(215,219,229);
	m_arrClrPnCaptNormal[2]  = RGB(197,199,209);
	m_arrClrPnCaptNormal[3]  = RGB(212,216,226);
	m_arrClrPnSplitter[0]    = RGB( 240, 243, 247 );
	m_arrClrPnSplitter[1]    = RGB( 215, 219, 225 );
	m_clrPnCaptText			 = RGB( 30, 57, 91 );
	m_arrClrPnItemText[0]    = RGB(0,0,0);
	m_arrClrPnItemText[1]    = RGB(76,83,92);
	m_clrPnConfigButton		 = RGB(101,104,112); 
static const UINT g_arrResIdPnItemExpanded[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_HOVER_R1,
};
static const UINT g_arrResIdPnItemCollapsed[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_HOVER_R1,
};
INT nPnIndex;
	for( nPnIndex = 0; nPnIndex < INT(ePn_Count); nPnIndex ++ )
	{
		VERIFY( m_arrBmpPnItemExpanded[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemExpanded[nPnIndex]) ) );
		VERIFY( m_arrBmpPnItemCollapsed[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemCollapsed[nPnIndex]) ) );
		m_arrRcPnItemPaddingExpanded[nPnIndex].SetRect( 0, 2, 0, 2 );
		m_arrRcPnItemPaddingCollapsed[nPnIndex].SetRect( 0, 0, 0, 0 );
		m_arrClrPnItemTextBmpVer[nPnIndex] = RGB(0,0,0);
	}
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_COMBO_BOX_BUTTON_R2_SILVER ) ) );
		m_bmpArrComboBoxDropDown.PreMultipliedRGBChannelsSet( true );
	m_arrClrComboBoxBorder[0] = RGB(212,214,217);
	m_arrClrComboBoxBorder[1] = RGB(164,164,164);
	m_arrClrComboBoxBorder[2] = RGB(164,164,164);
	m_arrClrComboBoxBorder[3] = RGB(228,231,235);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 2, 2, 2, 2 ), rcEntirePaddingRV( 2, 2, 2, 2 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_SILVER,
		RGB(255,255,255), RGB(157,166,176), RGB(255,255,255), RGB(157,166,176), AFX_IDW_DOCKBAR_TOP
		);
	m_SbSkinDataB_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_SILVER,
		RGB(255,255,255), RGB(157,166,176), RGB(255,255,255), RGB(157,166,176), AFX_IDW_DOCKBAR_BOTTOM
		);
	m_SbSkinDataL_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_SILVER,
		RGB(255,255,255), RGB(157,166,176), RGB(255,255,255), RGB(157,166,176), AFX_IDW_DOCKBAR_LEFT
		);
	m_SbSkinDataR_Zoom.Load2010_Zoom_R1(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_SILVER, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_SILVER,
		RGB(255,255,255), RGB(157,166,176), RGB(255,255,255), RGB(157,166,176), AFX_IDW_DOCKBAR_RIGHT
		);
	m_SbSkinDataH_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_SILVER_HORZ_LIGHT,
		16,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_LIGHT_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_LIGHT,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_SILVER_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_SILVER_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_SILVER_VERT_LIGHT,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_LIGHT_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_SILVER,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_SILVER_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_SILVER_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataH_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_SILVER_HORZ_DARK,
		16,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_SILVER_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_SILVER,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_SILVER_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_SILVER_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_SILVER_VERT_DARK,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_SILVER_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_SILVER,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_SILVER,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_SILVER_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_SILVER_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_clrGridHeaderBkTop     = RGB(253,253,253);
	m_clrGridHeaderBkBottom  = RGB(212,215,220);
	m_clrGridHeaderSeparator = RGB(145,153,164);
	m_clrGridHeaderSortArrow = RGB(145,153,164);
	m_clrGridHeaderBorder    = RGB(145,153,164);

	m_clrRgHeaderBkTop     = RGB(253,253,253);
	m_clrRgHeaderBkBottom  = RGB(212,215,220);
	m_clrRgHeaderSeparator = RGB(145,153,164);
	m_clrRgHeaderSortArrow = RGB(145,153,164);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(76,83,92);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(235,235,235);
	m_clrRgGroupAreaText   = RGB(70,70,70);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

	m_nPushBtnSimpleGlyphHeightH = 43;
	m_nPushBtnSimpleGlyphHeightV = 43;
	m_nPushBtnSDDLeftGlyphHeightH = 43;
	m_nPushBtnSDDLeftGlyphHeightV = 43;
	m_nPushBtnSDDRightGlyphHeightH = 43;
	m_nPushBtnSDDRightGlyphHeightV = 9;
	m_rcPushBtnSimplePaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSimplePaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingV.SetRect( 3, 3, 3, 3 );
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_RIGHT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);
	m_arrBmpPushBtnSimpleV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDLeftV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDRightV.PreMultipliedRGBChannelsSet( true );

#if (!defined __EXT_MFC_NO_RIBBON_BAR)

	if( g_PaintManager.m_bIsWinVistaOrLater )
	{
		VERIFY( m_bmpRibbonTabAreaBlur.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TAB_AREA_DWM_BLUR) ) );
		m_rcRibbonTabAreaBlurPadding.SetRect( 35, 0, 35, 36 );
	}

	m_clrRibbonTabClientAreaActive = RGB(233,235,238);
	m_clrRibbonTabClientAreaInactive = RGB(252,252,252);

	m_clrContractedMargin1 = RGB(128,128,128);
	m_clrContractedMargin2 = RGB(128,128,128);
	m_bRibbonGroupCaptionAtTop = false;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonGroupIconBkVertOffset = 2;
	m_nRibbonCaptionPartHeight = 17;
	m_rcRibbonPageOuterContentPadding.SetRect( 0, 0, 0, 0 );
	m_clrRibbonComboBackGroundNormal   = RGB(255,255,255);
	m_clrRibbonComboBackGroundDisabled = RGB(255,255,255);
	m_nRibbonTabIntersectionHeight = 1;

	//m_nRibbonQuickAccessBarButtonsAlignment = 0;

	m_clrRibbonGroupCaptionTextCollapsed
		= m_clrRibbonButtonNormal
		= RGB(57,60,63);
	m_clrRibbonButtonDisabled = RGB(128,128,128);
	m_clrRibbonGroupCaptionTextExpanded = RGB( 52, 52, 64 );
	//m_clrRibbonGroupCaptionTextShadowExpanded = RGB( 0, 0, 0 );
	//m_sizeRibbonGroupCaptionTextOffset = CSize( 1, 1 );
	m_nRibbonGroupCaptionTextDF
		= m_nRibbonGroupCaptionTextShadowDF
		= DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;

	m_rcRibbonPageBkPadding.SetRect( 1, 1, 1, 1 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_PAGE_BK_R2_SILVER)
			)
		);
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 2, 6, 4, 2 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_NORMAL_BK_R2_SILVER)
			)
		);
		m_bmpRibbonGroupBkExpanded[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_HOVER_BK_R2_SILVER)
			)
		);
		m_bmpRibbonGroupBkExpanded[1].PreMultipliedRGBChannelsSet( false );
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 2, 6, 4, 2 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R2_SILVER)
			)
		);
		m_bmpRibbonGroupBkCollapsed[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_SILVER)
			)
		);
		m_bmpRibbonGroupBkCollapsed[1].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R2_SILVER)
			)
		);
		m_bmpRibbonGroupBkCollapsed[2].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource( // selected same as hover in R1
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_SILVER)
			)
		);
		m_bmpRibbonGroupBkCollapsed[3].PreMultipliedRGBChannelsSet( false );
//INT nBkIndex, nBkCount;
//	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
//		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )

	VERIFY( m_bmpRibbonGroupBkQATB[0].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_NORMAL_BK_R2_SILVER) ) );
		//m_bmpRibbonGroupBkQATB[0].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[0].Make32() );
		m_bmpRibbonGroupBkQATB[0].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	VERIFY( m_bmpRibbonGroupBkQATB[1].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_HOVER_BK_R2_SILVER) ) );
		//m_bmpRibbonGroupBkQATB[1].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[1].Make32() );
		m_bmpRibbonGroupBkQATB[1].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	VERIFY( m_bmpRibbonGroupBkQATB[2].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_PRESSED_BK_R2_SILVER) ) );
		//m_bmpRibbonGroupBkQATB[2].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[2].Make32() );
		m_bmpRibbonGroupBkQATB[2].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonGroupBkQATB[3] = m_bmpRibbonGroupBkQATB[1];

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_STRETCH );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_STRETCH );
	m_rcRibbonSeparatorPaddingH.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_H_R2_SILVER)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_V_R2_SILVER)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingQACEB.SetRect( 3, 3, 3, 3 );
	m_nRibbonHeightOfQACEB = 22;
	m_nIdxRibbonQACEB_Normal   = 3;
	m_nIdxRibbonQACEB_Hover    = 0;
	m_nIdxRibbonQACEB_Pressed  = 1;
	m_nIdxRibbonQACEB_Selected = 2;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_CEB_R2_SILVER)
			)
		);
		m_bmpArrRibbonQACEB.PreMultiplyRGBChannels( false );
		//m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_nRibbonEmbeddedCaptionTextAlignmentFlags = (DT_SINGLELINE|DT_CENTER|DT_VCENTER);
			//m_bRibbonFileButtonItegrationSupported = false;

	//m_nRibbonFileButtonMenuIntersectionHeight = 20;

			m_nQatbAdditionalSpaceAtRightDWM = 0;

// 			INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
// 			INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
// 			CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
			m_rcRibbonNcCornerLeftCP.SetRect( 53, 2, 2, 2 );
			m_rcRibbonNcCornerRightCP.SetRect( 2, 2, 42, 2 );

			VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_FILE_BUTTON) ) );
			//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );
			m_bmpArrRibbonFileButton.PreMultiplyRGBChannels( true );
			m_nRibbonFileButtonHeight = m_bmpArrRibbonFileButton.GetSize().cy / 3;

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 0, 1, 0, 1 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_BK_R2_SILVER) ) );

	m_nRibbonHeightOfOneDLB = 14;
	m_nDlbIdxDisabled = m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 2, 2, 2, 2 );
	VERIFY( m_arrBmpRibbonDLB.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_GCB_R2_SILVER) ) );
		//m_arrBmpRibbonDLB.PreMultipliedRGBChannelsSet( true );
		m_arrBmpRibbonDLB.PreMultiplyRGBChannels( false );

	m_clrRibbonGalleryInplaceBorderNormal = m_clrRibbonGalleryInplaceBorderHover  = RGB(198,202,205);
	m_clrRibbonGalleryInplaceBkgndNormal  = m_clrRibbonGalleryInplaceBkgndHover   = RGB(255,255,255);

	m_rcRibbonGalleryScrollFill = RGB(255,255,255);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 3, 3, 3, 3 );
	m_nHeightRibbonGalleryScrollButton = -1; //20;
	m_nIndexRibbonGalleryScrollButtonNormal   = 0;
	m_nIndexRibbonGalleryScrollButtonHover    = 1;
	m_nIndexRibbonGalleryScrollButtonPressed  = 2;
	m_nIndexRibbonGalleryScrollButtonDisabled = 3;
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_DOWN_R2_SILVER)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonDown.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_UP_R2_SILVER)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonUp.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_MENU_R2_SILVER)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonMenu.PreMultipliedRGBChannelsSet( true );
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_DDA_R1) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingComboBoxDropDown.SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_COMBO_BOX_BUTTON_R1) ) );
		m_bmpArrRibbonComboBoxDropDown.PreMultipliedRGBChannelsSet( true );

	// buttons 2010
	m_nHeightOfButtonLSM = 66;
	m_nHeightOfButtonLSXM = 39;
	m_nHeightOfButtonLSXB = 27;

	// tool buttons 2010
	m_rcPaddingOfButtonTS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]				= -1;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]				= 0;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]				= 1;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]					= 2;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]				= 3;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]		= 4;

	m_rcPaddingOfButtonSS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 3;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 4;

//	m_rcPaddingOfButtonLSB.SetRect( 4, 4, 4, 4 );
//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 2;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 3;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSXM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 3;

	m_rcPaddingOfButtonLSXB.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 3;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_LEFT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_RIGHT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_ALL_R1)
			)
		);
		m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R2_SILVER)
//			)
//		);
//		m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_TOP_R1)
			)
		);
		m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R1)
			)
		);
		m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_HOVER_R2_SILVER)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_PRESSED_R2_SILVER)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpRibbonMenuResizingMarginHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_HV_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingMarginV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_V_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingGripperHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_HV_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperHV.Make32();
	m_bmpRibbonMenuResizingGripperHV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY( m_bmpRibbonMenuResizingGripperV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_V_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperV.Make32();
	m_bmpRibbonMenuResizingGripperV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(57,60,63);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_BORDER_R2_SILVER)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(57,60,63);
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_CAPTION_BK_R2_SILVER)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 6, 6, 29 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RM_BIG_BORDER_R2_SILVER) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
//	VERIFY(
//		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R2_SILVER)
//			)
//		);
//	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
//	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R1)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RESIZING_GRIPPER_R2_SILVER) ) );
	m_bmpResizingGripper.Make32();
	m_bmpResizingGripper.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_UP_R1) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_UP_R1) ) );
}

CExtPaintManagerOffice2010_R2_Silver::~CExtPaintManagerOffice2010_R2_Silver()
{
}

CExtPaintManagerOffice2010_R2_Black::CExtPaintManagerOffice2010_R2_Black()
{
	m_bThemedMenuItemsEverywhere = true;
	
	m_clrFillHint = RGB(188,188,188);
	m_clrAccentHint = RGB(255,227,140); // RGB(156,193,234);
	m_clrIconAlphaColor = RGB(114,121,138);
	m_clrAdvTipGradientBottom = RGB(229,229,240);

	VERIFY( m_arrMdiRightIcons[0].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_MINIMIZE) ) );
	VERIFY( m_arrMdiRightIcons[1].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_RESTORE) ) );
	VERIFY( m_arrMdiRightIcons[2].m_bmpNormal.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MDI_ICON_SC_CLOSE) ) );

// 	m_clrDCA1 = RGB(115,115,115);
// 	m_clrDCA2 = RGB(115,115,115);
// 	m_clrDCA3 = RGB(115,115,115);
// 	m_bDocumentClientAreaBkgndR2 = true;
	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_DCA_R2_BLACK) ) );
// 	m_bmpDCA.PreMultiplyRGBChannels();
// 	m_bmpDCA.PreMultipliedRGBChannelsSet( true );
// 	m_clrDCA_Solid = RGB(115,115,115);

	m_bUseNcFrameBmpForDockerBkgnd = true;
	m_clrCustomDropDownGlyphEnabled = RGB(0,0,0);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = m_clrFloatingToolbarGripperSolid = RGB(83,96,125);
	m_clrDockingFrameCaptionTextActive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextInactive = RGB(51,51,51);
	m_clrDockingFrameCaptionTextFloatingFixed =  RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(255,255,255);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_ACTIVE_R2_BLACK) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_FRAME_INACTIVE_R2_BLACK) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive =  RGB(220,220,220); // = RGB(123,123,123);
	m_clrNcFrameTextInactive = RGB(200,200,200); // = RGB(183,183,183);
	m_bmpNcFrameActive.PreMultiplyRGBChannels();
	m_bmpNcFrameActive.PreMultipliedRGBChannelsSet( true );
	m_bmpNcFrameInactive.PreMultiplyRGBChannels();
	m_bmpNcFrameInactive.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = m_sizeNcButtonShapeInArr.cy = 21;
	m_nNcBtnIdxNormalActive = m_nNcBtnIdxNormalInactive = 0;

	m_rcNcButtonBkPadding.SetRect( 4, 4, 4, 4 );
	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_R2_BLACK) ) );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_R2_BLACK) ) );
	VERIFY( m_bmpNcButtonBkHover.Make32() );
	VERIFY( m_bmpNcButtonBkPressed.Make32() );
	m_bmpNcButtonBkHover.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressed.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHover.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHover.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressed.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressed.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpNcButtonBkHoverX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_HOVER_X_R2_BLACK) ) );
	VERIFY( m_bmpNcButtonBkPressedX.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_BUTTON_BK_PRESSED_X_R2_BLACK) ) );
	VERIFY( m_bmpNcButtonBkHoverX.Make32() );
	VERIFY( m_bmpNcButtonBkPressedX.Make32() );
	m_bmpNcButtonBkHoverX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkPressedX.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_bmpNcButtonBkHoverX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkHoverX.PreMultipliedRGBChannelsSet( true );
	m_bmpNcButtonBkPressedX.PreMultiplyRGBChannels();
	m_bmpNcButtonBkPressedX.PreMultipliedRGBChannelsSet( true );

	m_sizeNcButtonShapeInArr.cx = 13;
	m_sizeNcButtonShapeInArr.cy = 12;
	m_nNcBtnIdxNormalActive = 0;
	m_nNcBtnIdxHover = 1;
	m_nNcBtnIdxPressed = 2;
	m_nNcBtnIdxNormalInactive = 3;
	m_nNcBtnIdxDisabled = 4;
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_CLOSE_R2_BLACK) ) );
//	m_bmpArrNcButtonsClose.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsClose.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MAXIMIZE_R2_BLACK) ) );
//	m_bmpArrNcButtonsMaximize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMaximize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_RESTORE_R2_BLACK) ) );
//	m_bmpArrNcButtonsRestore.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsRestore.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_MINIMIZE_R2_BLACK) ) );
//	m_bmpArrNcButtonsMinimize.PreMultiplyRGBChannels();
	m_bmpArrNcButtonsMinimize.PreMultipliedRGBChannelsSet( true );
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_NC_ARR_HELP_R1) ) );
	m_bmpArrNcButtonsHelp.PreMultiplyRGBChannels();

#if (!defined __EXT_MFC_NO_STATUSBAR)
	m_clrStatusPaneTextColorNormal   = RGB(226,226,226);
	m_clrStatusPaneTextColorDisabled = RGB(170,170,170);
	m_rcStatusBkPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_LIGHT_R2_BLACK) ) );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_BK_DARK_R2_BLACK) ) );
	m_rcStatusSeparatorPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_STATUSBAR_SEPARATOR_R2_BLACK) ) );
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal   = RGB(226,226,226);
	m_clrTabTextSelected = RGB(52,52,64);
	m_clrTabTextNormalDWM = RGB( 226, 226, 226 );
	m_clrTabTextSelectedDWM = RGB( 0, 0, 0 );
	m_nIdxTabShapeHover = 0;
	m_nIdxTabShapePressed = 1;
	m_nIdxTabShapeSelected = 1;
	m_nIdxTabShapeSelectedHover = 1;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 13;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 4, 3, 4, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 4, 3, 4 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 4, 3, 4 );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_R2_BLACK )
			)
		);
	m_arrBmpTabShapeNormal[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SHAPE_ARR_SEL_AREA_R2_BLACK )
			)
		);
	m_arrBmpTabShapeSelArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			180,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			270,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			90,
			4,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	m_arrRectTabAreaPadding[__ETSOI_TOP].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_BOTTOM].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_LEFT].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_RIGHT].SetRect( 3, 3, 3, 3 );
	m_arrTabAreaMargins[__ETSOI_TOP] = 1;
	m_arrTabAreaMargins[__ETSOI_BOTTOM] = 1;
	m_arrTabAreaMargins[__ETSOI_LEFT] = 1;
	m_arrTabAreaMargins[__ETSOI_RIGHT] = 1;
	VERIFY(
		m_arrBmpTabArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_TAB_AREA_BK_BLACK )
			)
		);
	VERIFY( m_arrBmpTabArea[__ETSOI_TOP].Make32() );
CSize _sizeTabArea = m_arrBmpTabArea[__ETSOI_TOP].GetSize();
	m_arrBmpTabArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			180,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			270,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			90,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 2;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 23;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_TAB_SEPARATOR_R2_BLACK )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
// 			m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
// 			m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_CHECK_BOX_R1 )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_RADIO_BUTTON_R1 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(226, 228, 231);
	m_clrMenuItemLeftAreaMarginR = RGB(245, 245, 245);
	m_rcMenuItemPaddingLargeLeft.SetRect(  3, 3, 3, 16 );
	m_rcMenuItemPaddingLargeRight.SetRect( 1, 3, 3, 16 );
	m_rcMenuItemPaddingSmallLeft.SetRect(  3, 3, 3, 10 );
	m_rcMenuItemPaddingSmallRight.SetRect( 1, 3, 3, 10 );
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_LARGE_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_LEFT )
			)
		);
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_R1_SMALL_RIGHT )
			)
		);
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 1, 1, 1, 1 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_CHECKED_R1   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_MENU_CHECK_AREA_UNCHECKED_R1 ) ) );

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_arrClrPnCaptNormal[0]  = RGB(235,238,250);
	m_arrClrPnCaptNormal[1]  = RGB(215,219,229);
	m_arrClrPnCaptNormal[2]  = RGB(197,199,209);
	m_arrClrPnCaptNormal[3]  = RGB(212,216,226);
	m_arrClrPnSplitter[0]    = RGB( 102, 102, 102 );
	m_arrClrPnSplitter[1]    = RGB( 79, 79, 79 );
	m_clrPnCaptText			 = RGB( 30, 57, 91 );
	m_arrClrPnItemText[0]    = RGB(0,0,0);
	m_arrClrPnItemText[1]    = RGB(76,83,92);
	m_clrPnConfigButton		 = RGB(101,104,112); 
static const UINT g_arrResIdPnItemExpanded[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_EXPANDED_SELECTED_HOVER_R1,
};
static const UINT g_arrResIdPnItemCollapsed[ePn_Count] =
{
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_NORMAL_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_HOVER_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_PRESSED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_R1,
	IDB_EXT_2010_OFFICE_PN_ITEM_COLLAPSED_SELECTED_HOVER_R1,
};
INT nPnIndex;
	for( nPnIndex = 0; nPnIndex < INT(ePn_Count); nPnIndex ++ )
	{
		VERIFY( m_arrBmpPnItemExpanded[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemExpanded[nPnIndex]) ) );
		VERIFY( m_arrBmpPnItemCollapsed[nPnIndex].LoadBMP_Resource( MAKEINTRESOURCE(g_arrResIdPnItemCollapsed[nPnIndex]) ) );
		m_arrRcPnItemPaddingExpanded[nPnIndex].SetRect( 0, 2, 0, 2 );
		m_arrRcPnItemPaddingCollapsed[nPnIndex].SetRect( 0, 0, 0, 0 );
		m_arrClrPnItemTextBmpVer[nPnIndex] = RGB(0,0,0);
	}
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_COMBO_BOX_BUTTON_R2_BLACK ) ) );
		m_bmpArrComboBoxDropDown.PreMultipliedRGBChannelsSet( true );
	m_arrClrComboBoxBorder[0] = RGB(212,214,217);
	m_arrClrComboBoxBorder[1] = RGB(164,164,164);
	m_arrClrComboBoxBorder[2] = RGB(164,164,164);
	m_arrClrComboBoxBorder[3] = RGB(228,231,235);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 2, 2, 2, 2 ), rcEntirePaddingRV( 2, 2, 2, 2 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2010_Zoom_R2(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLACK,
		RGB(87,87,87), RGB(38,38,38), RGB(87,87,87), RGB(38,38,38), AFX_IDW_DOCKBAR_TOP
		);
	m_SbSkinDataB_Zoom.Load2010_Zoom_R2(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLACK,
		RGB(87,87,87), RGB(38,38,38), RGB(87,87,87), RGB(38,38,38), AFX_IDW_DOCKBAR_BOTTOM
		);
	m_SbSkinDataL_Zoom.Load2010_Zoom_R2(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLACK,
		RGB(87,87,87), RGB(38,38,38), RGB(87,87,87), RGB(38,38,38), AFX_IDW_DOCKBAR_LEFT
		);
	m_SbSkinDataR_Zoom.Load2010_Zoom_R2(
		IDB_EXT_2010_OFFICE_ZS_PLUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_MINUS_R2_BLACK, IDB_EXT_2010_OFFICE_ZS_THUMB_R2_BLACK,
		RGB(87,87,87), RGB(38,38,38), RGB(87,87,87), RGB(38,38,38), AFX_IDW_DOCKBAR_RIGHT
		);
	m_SbSkinDataH_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLACK_HORZ_LIGHT,
		16,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_LIGHT_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_LIGHT,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLACK_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLACK_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLACK_VERT_LIGHT,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_LIGHT_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R1,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R1,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLACK_LIGHT,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLACK_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataH_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLACK_HORZ_DARK,
		16,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_BLACK_HORZ,
		SbSkinDataPaddingH,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_BLACK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_BLACK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_BLACK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_BLACK,
		true,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLACK_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLACK_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Dark.Load2007_R1(
		IDB_EXT_2010_OFFICE_SCROLL_BAR_STACK_BUTTONS_R2_BLACK_VERT_DARK,
		17,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_GRIPPER_R2_BLACK_VERT,
		SbSkinDataPaddingV,
		COLORREF(-1L),
		COLORREF(-1L),
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_NORMAL_R2_BLACK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_UP_DISABLED_R2_BLACK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_NORMAL_R2_BLACK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ARROW_DOWN_DISABLED_R2_BLACK,
		false,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_ENTIRE_BK_R2_BLACK_DARK,
		IDB_EXT_2010_OFFICE_SCROLL_BAR_PAGE_BK_R2_BLACK_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_clrGridHeaderBkTop     = RGB(253,253,253);
	m_clrGridHeaderBkBottom  = RGB(212,215,220);
	m_clrGridHeaderSeparator = RGB(145,153,164);
	m_clrGridHeaderSortArrow = RGB(145,153,164);
	m_clrGridHeaderBorder    = RGB(145,153,164);

	m_clrRgHeaderBkTop     = RGB(253,253,253);
	m_clrRgHeaderBkBottom  = RGB(212,215,220);
	m_clrRgHeaderSeparator = RGB(145,153,164);
	m_clrRgHeaderSortArrow = RGB(145,153,164);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(76,83,92);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(235,235,235);
	m_clrRgGroupAreaText   = RGB(70,70,70);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

	m_nPushBtnSimpleGlyphHeightH = 43;
	m_nPushBtnSimpleGlyphHeightV = 43;
	m_nPushBtnSDDLeftGlyphHeightH = 43;
	m_nPushBtnSDDLeftGlyphHeightV = 43;
	m_nPushBtnSDDRightGlyphHeightH = 43;
	m_nPushBtnSDDRightGlyphHeightV = 9;
	m_rcPushBtnSimplePaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSimplePaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDLeftPaddingV.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingH.SetRect( 3, 3, 3, 3 );
	m_rcPushBtnSDDRightPaddingV.SetRect( 3, 3, 3, 3 );
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2010_OFFICE_BUTTON_R1_RIGHT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);
	m_arrBmpPushBtnSimpleV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDLeftV.PreMultipliedRGBChannelsSet( true );
	m_arrBmpPushBtnSDDRightV.PreMultipliedRGBChannelsSet( true );

#if (!defined __EXT_MFC_NO_RIBBON_BAR)

	if( g_PaintManager.m_bIsWinVistaOrLater )
	{
		VERIFY( m_bmpRibbonTabAreaBlur.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TAB_AREA_DWM_BLUR_R2_BLACK) ) );
		m_rcRibbonTabAreaBlurPadding.SetRect( 35, 0, 35, 36 );
	}

	m_clrRibbonTabClientAreaActive = RGB(117,117,117);
	m_clrRibbonTabClientAreaInactive = RGB(158,158,158);

	m_clrContractedMargin1 = RGB(128,128,128);
	m_clrContractedMargin2 = RGB(128,128,128);
	m_bRibbonGroupCaptionAtTop = false;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonGroupIconBkVertOffset = 2;
	m_nRibbonCaptionPartHeight = 17;
	m_rcRibbonPageOuterContentPadding.SetRect( 0, 0, 0, 0 );
	m_clrRibbonComboBackGroundNormal   = RGB(255,255,255);
	m_clrRibbonComboBackGroundDisabled = RGB(255,255,255);
	m_nRibbonTabIntersectionHeight = 1;

	//m_nRibbonQuickAccessBarButtonsAlignment = 0;

	m_clrRibbonGroupCaptionTextCollapsed
		= m_clrRibbonButtonNormal
		= RGB(57,60,63);
	m_clrRibbonButtonDisabled = RGB(128,128,128);
	m_clrRibbonGroupCaptionTextExpanded = RGB( 52, 52, 64 );
	//m_clrRibbonGroupCaptionTextShadowExpanded = RGB( 0, 0, 0 );
	//m_sizeRibbonGroupCaptionTextOffset = CSize( 1, 1 );
	m_nRibbonGroupCaptionTextDF
		= m_nRibbonGroupCaptionTextShadowDF
		= DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;

	m_rcRibbonPageBkPadding.SetRect( 1, 1, 1, 1 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_PAGE_BK_R2_BLACK)
			)
		);
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 2, 6, 4, 2 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_NORMAL_BK_R2_BLACK)
			)
		);
		m_bmpRibbonGroupBkExpanded[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_EXPANDED_HOVER_BK_R2_BLACK)
			)
		);
		m_bmpRibbonGroupBkExpanded[1].PreMultipliedRGBChannelsSet( false );
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 2, 6, 4, 2 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R2_BLACK)
			)
		);
		m_bmpRibbonGroupBkCollapsed[0].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_BLACK)
			)
		);
		m_bmpRibbonGroupBkCollapsed[1].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R2_BLACK)
			)
		);
		m_bmpRibbonGroupBkCollapsed[2].PreMultipliedRGBChannelsSet( false );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource( // selected same as hover in R1
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_BLACK)
			)
		);
		m_bmpRibbonGroupBkCollapsed[3].PreMultipliedRGBChannelsSet( false );
//INT nBkIndex, nBkCount;
//	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
//		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
//	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
//	{
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
//		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
//	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )

	VERIFY( m_bmpRibbonGroupBkQATB[0].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_NORMAL_BK_R2_BLACK) ) );
		//m_bmpRibbonGroupBkQATB[0].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[0].Make32() );
		m_bmpRibbonGroupBkQATB[0].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	VERIFY( m_bmpRibbonGroupBkQATB[1].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_HOVER_BK_R2_BLACK) ) );
		//m_bmpRibbonGroupBkQATB[1].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[1].Make32() );
		m_bmpRibbonGroupBkQATB[1].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	VERIFY( m_bmpRibbonGroupBkQATB[2].LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_GROUP_BUTTON_QATB_PRESSED_BK_R2_BLACK) ) );
		//m_bmpRibbonGroupBkQATB[2].PreMultiplyRGBChannels( false );
		VERIFY( m_bmpRibbonGroupBkQATB[2].Make32() );
		m_bmpRibbonGroupBkQATB[2].AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonGroupBkQATB[3] = m_bmpRibbonGroupBkQATB[1];

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_STRETCH );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_STRETCH );
	m_rcRibbonSeparatorPaddingH.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_H_R2_BLACK)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 0, 0, 0 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_SEPARATOR_V_R2_BLACK)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingQACEB.SetRect( 3, 3, 3, 3 );
	m_nRibbonHeightOfQACEB = 22;
	m_nIdxRibbonQACEB_Normal   = 3;
	m_nIdxRibbonQACEB_Hover    = 0;
	m_nIdxRibbonQACEB_Pressed  = 1;
	m_nIdxRibbonQACEB_Selected = 2;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_CEB_R2_BLACK)
			)
		);
		m_bmpArrRibbonQACEB.PreMultiplyRGBChannels( false );
		//m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_nRibbonEmbeddedCaptionTextAlignmentFlags = (DT_SINGLELINE|DT_CENTER|DT_VCENTER);
			//m_bRibbonFileButtonItegrationSupported = false;

	//m_nRibbonFileButtonMenuIntersectionHeight = 20;

	m_clrRibbon_EmbeddedCaptionTextLeft = RGB(210,210,210);
	m_clrRibbon_EmbeddedCaptionTextRight = RGB(230,244,244);

		m_nQatbAdditionalSpaceAtRightDWM = 0;

// 			INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
// 			INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
// 			CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
			m_rcRibbonNcCornerLeftCP.SetRect( 53, 2, 2, 2 );
			m_rcRibbonNcCornerRightCP.SetRect( 2, 2, 42, 2 );

			VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_FILE_BUTTON) ) );
			//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );
			m_bmpArrRibbonFileButton.PreMultiplyRGBChannels( true );
			m_nRibbonFileButtonHeight = m_bmpArrRibbonFileButton.GetSize().cy / 3;

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_QATB_BK_R2_BLACK) ) );

	m_nRibbonHeightOfOneDLB = 14;
	m_nDlbIdxDisabled = m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 2, 2, 2, 2 );
	VERIFY(
		m_arrBmpRibbonDLB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_GCB_R2_BLACK)
			)
		);
		//m_arrBmpRibbonDLB.PreMultipliedRGBChannelsSet( true );
		m_arrBmpRibbonDLB.PreMultiplyRGBChannels( false );

	m_clrRibbonGalleryInplaceBorderNormal = m_clrRibbonGalleryInplaceBorderHover  = RGB(198,202,205);
	m_clrRibbonGalleryInplaceBkgndNormal  = m_clrRibbonGalleryInplaceBkgndHover   = RGB(255,255,255);

	m_rcRibbonGalleryScrollFill = RGB(255,255,255);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 3, 3, 3, 3 );
	m_nHeightRibbonGalleryScrollButton = -1; //20;
	m_nIndexRibbonGalleryScrollButtonNormal   = 0;
	m_nIndexRibbonGalleryScrollButtonHover    = 1;
	m_nIndexRibbonGalleryScrollButtonPressed  = 2;
	m_nIndexRibbonGalleryScrollButtonDisabled = 3;
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_DOWN_R2_BLACK)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonDown.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_UP_R2_BLACK)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonUp.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RGIBTN_MENU_R2_BLACK)
			)
		);
		m_bmpArrRibbonGalleryScrollButtonMenu.PreMultipliedRGBChannelsSet( true );
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_DDA_R1) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_rcRibbonPaddingComboBoxDropDown.SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_COMBO_BOX_BUTTON_R1) ) );
		m_bmpArrRibbonComboBoxDropDown.PreMultipliedRGBChannelsSet( true );

	// buttons 2010
	m_nHeightOfButtonLSM = 66;
	m_nHeightOfButtonLSXM = 39;
	m_nHeightOfButtonLSXB = 27;

	// tool buttons 2010
	m_rcPaddingOfButtonTS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]				= -1;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]				= 0;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]				= 1;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]					= 2;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]				= 3;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]		= 4;

	m_rcPaddingOfButtonSS.SetRect( 3, 3, 3, 3 );
	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 3;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 3;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 4;

//	m_rcPaddingOfButtonLSB.SetRect( 4, 4, 4, 4 );
//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 2;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 3;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 4;

	m_rcPaddingOfButtonLSXM.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 3;

	m_rcPaddingOfButtonLSXB.SetRect( 4, 4, 4, 4 );
	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 5;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 3;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SOLID_R1)
			)
		);
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_LEFT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_SMALL_RIGHT_R1)
			)
		);
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_ALL_R1)
			)
		);
		m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R2_BLACK)
//			)
//		);
//		m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_TOP_R1)
			)
		);
		m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_BTN_PART_LARGE_BOTTOM_R1)
			)
		);
		m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_HOVER_R2_BLACK)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RIBBON_TB_SEPARATOR_PRESSED_R2_BLACK)
			)
		);
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R1)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpRibbonMenuResizingMarginHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_HV_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingMarginV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_V_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingGripperHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_HV_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperHV.Make32();
	m_bmpRibbonMenuResizingGripperHV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY( m_bmpRibbonMenuResizingGripperV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_V_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperV.Make32();
	m_bmpRibbonMenuResizingGripperV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(57,60,63);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_BORDER_R2_BLACK)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(57,60,63);
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_MENU_CAPTION_BK_R2_BLACK)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 6, 6, 29 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RM_BIG_BORDER_R2_BLACK) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
//	VERIFY(
//		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R2_BLACK)
//			)
//		);
//	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
//	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R1)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_RESIZING_GRIPPER_R2_BLACK) ) );
	m_bmpResizingGripper.Make32();
	m_bmpResizingGripper.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_ARROW_UP_R1) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_DOWN_R1) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2010_OFFICE_SPIN_UP_R1) ) );
}

CExtPaintManagerOffice2010_R2_Black::~CExtPaintManagerOffice2010_R2_Black()
{
}

#if (!defined __EXT_MFC_NO_RIBBON_BAR)

INT CExtPaintManagerOffice2010_Impl::Ribbon_GetOuterGroupDistance(
	const CExtBarButton * pTBB,
	bool bDistanceBefore,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetOuterGroupDistance(
				pTBB,
				bDistanceBefore,
				lParam
				);	
	return 0;
}

bool CExtPaintManagerOffice2010_Impl::Ribbon_HaveSeparatorsBetweenToolGroups() const
{
	ASSERT_VALID( this );
	return true;
}

#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

void CExtPaintManagerOffice2010_R1::InitTranslatedColors()
{
	CExtPaintManagerOffice2010_Impl::InitTranslatedColors();
#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
INT nPnCaptionBkClrIdx = InstallColor( RGB( 169, 193, 222 ) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]       = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]        = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]  = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223, 226, 229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225, 227, 230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(246, 247, 248) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(218, 223, 231) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB( 162, 166, 171 ) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(101, 109, 117) ); // 30, 57, 91
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(169,177,184) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(169,169,169) );

 	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(209, 213, 219) );
 	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(181, 184, 191) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(235, 237, 240) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(232, 234, 236) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(222, 224, 226) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(181, 184, 191) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(144, 144, 144) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(170, 170, 170) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(230, 230, 230) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(232, 233, 241) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(172, 170, 194) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(252, 151, 61) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255, 184, 94) );

	m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( RGB(220, 226, 232) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(167, 171, 176) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(255, 189, 105) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(249, 249, 255) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(159, 157, 185) );

	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R] = InstallColor( RGB(219, 218, 228) );
	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F] = InstallColor( RGB(219, 218, 228) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = InstallColor( RGB(243, 243, 247) );
	m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( RGB(215, 215, 229) );

int nTextColorIndex = InstallColor( RGB(57,60,63) );
	m_mapColorTranslate[CLR_MENUTEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_MENUTEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[COLOR_MENUTEXT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
}

void CExtPaintManagerOffice2010_R2_Blue::InitTranslatedColors()
{
	CExtPaintManagerOffice2010_Impl::InitTranslatedColors();
#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
INT nPnCaptionBkClrIdx = InstallColor( RGB( 169, 193, 222 ) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]       = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]        = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]  = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223, 226, 229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225, 227, 230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(246, 247, 248) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(218, 223, 231) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB( 162, 166, 171 ) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(101, 109, 117) );
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(169,177,184) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(169,169,169) );

 	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(216, 228, 242) );
 	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(139, 160, 188) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(237, 245, 253) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(216, 229, 244) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(216, 228, 242) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(139, 160, 188) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(139, 160, 188) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(139, 160, 188) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(230, 230, 230) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(232, 233, 241) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(172, 170, 194) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(252, 151, 61) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255, 184, 94) );

	m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( RGB(220, 226, 232) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(167, 171, 176) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(255, 189, 105) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(249, 249, 255) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(159, 157, 185) );

	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R] = InstallColor( RGB(219, 218, 228) );
	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F] = InstallColor( RGB(219, 218, 228) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = InstallColor( RGB(237, 245, 253) );
	m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( RGB(216, 228, 242) );

int nTextColorIndex = InstallColor( RGB(57,60,63) );
	m_mapColorTranslate[CLR_MENUTEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_MENUTEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[COLOR_MENUTEXT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
}

void CExtPaintManagerOffice2010_R2_Silver::InitTranslatedColors()
{
	CExtPaintManagerOffice2010_Impl::InitTranslatedColors();
#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
INT nPnCaptionBkClrIdx = InstallColor( RGB( 169, 193, 222 ) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]       = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]        = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]  = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223, 226, 229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225, 227, 230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(246, 247, 248) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(218, 223, 231) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB( 162, 166, 171 ) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(101, 109, 117) );
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(169,177,184) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(169,169,169) );

 	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(238, 240, 243) );
 	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(139, 144, 151) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(251, 250, 250) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(238, 240, 243) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(139, 144, 151) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(139, 144, 151) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(139, 144, 151) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(230, 230, 230) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(232, 233, 241) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(172, 170, 194) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(252, 151, 61) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255, 184, 94) );

	m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( RGB(220, 226, 232) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(167, 171, 176) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(255, 189, 105) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(249, 249, 255) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(159, 157, 185) );

	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R] = InstallColor( RGB(219, 218, 228) );
	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F] = InstallColor( RGB(219, 218, 228) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( RGB(234, 237, 241) );

int nTextColorIndex = InstallColor( RGB(57,60,63) );
	m_mapColorTranslate[CLR_MENUTEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_MENUTEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[COLOR_MENUTEXT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
}

void CExtPaintManagerOffice2010_R2_Black::InitTranslatedColors()
{
	CExtPaintManagerOffice2010_Impl::InitTranslatedColors();
#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
INT nPnCaptionBkClrIdx = InstallColor( RGB( 169, 193, 222 ) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]       = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]        = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]  = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223, 226, 229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225, 227, 230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(246, 247, 248) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(218, 223, 231) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB( 162, 166, 171 ) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(101, 109, 117) );
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(169,177,184) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(169,169,169) );

 	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(145, 145, 145) );
 	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(78, 78, 78) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(188, 188, 188) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(188, 188, 188) /*RGB(147, 147, 147)*/ );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(145, 145, 145) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(78, 78, 78) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(78, 78, 78) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(188, 188, 188) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(78, 78, 78) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(230, 230, 230) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(230, 230, 230) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(232, 233, 241) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(172, 170, 194) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(252, 151, 61) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255, 184, 94) );

	m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( RGB(220, 226, 232) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(167, 171, 176) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(255, 189, 105) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(249, 249, 255) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(159, 157, 185) );

	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R] = InstallColor( RGB(219, 218, 228) );
	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F] = InstallColor( RGB(219, 218, 228) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = InstallColor( RGB(189, 189, 189) );
	m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( RGB(145, 145, 145) );

int nTextColorIndex = InstallColor( RGB(57,60,63) );
	m_mapColorTranslate[CLR_MENUTEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_MENUTEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_IN] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_OUT] = nTextColorIndex;
	m_mapColorTranslate[COLOR_MENUTEXT] = nTextColorIndex;
	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
}

void CExtPaintManagerOffice2010_Impl::PaintPushButtonMdiRight(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if( _ppbd.m_pHelperSrc != NULL )
	{
		CExtBarMdiRightButton * pTBB = DYNAMIC_DOWNCAST( CExtBarMdiRightButton, _ppbd.m_pHelperSrc );
		if( pTBB != NULL )
		{
			CExtToolControlBar * pBar = pTBB->GetSafeBar();
			if( pBar != NULL )
			{
				CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pBar );
				if(		pRibbonBar != NULL
					&&	pRibbonBar->m_pExtNcFrameImpl != NULL
//					&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
					)
				{
					_ppbd.m_pIcon = NULL;
					CExtCmdIcon * pIcon = NULL;
					switch( _ppbd.m_nHelperSysCmdID )
					{
					case SC_MINIMIZE:
						pIcon = &m_arrMdiRightIcons[0];
					break;
					case SC_MAXIMIZE:
					case SC_RESTORE:
						pIcon = &m_arrMdiRightIcons[1];
					break;
					case SC_CLOSE:
						pIcon = &m_arrMdiRightIcons[2];
					break;
					}
					if( pIcon != NULL )
					{
						static const CRect g_rcInf( 3, 3, 1, 1 );
						_ppbd.m_rcClient.InflateRect( &g_rcInf );
						Ribbon_PaintPushButton( dc, _ppbd );
						_ppbd.m_rcClient.DeflateRect( &g_rcInf );

						CRect rectCaption = _ppbd.m_rcClient;
						rectCaption.DeflateRect( _ppbd.m_rcBorderSizes );
						CRect rectClient( rectCaption );
						CRect rcFocus( rectCaption );
						if(		rectClient.bottom > rectClient.top
							&&	rectClient.right > rectClient.left
							)
						{
							_ppbd.m_pIcon = pIcon;
							PaintPushButtonIcon( dc, rectCaption, rectCaption, rcFocus, _ppbd );
							_ppbd.m_pIcon = NULL;
						}
						return;
					}
				}
			}
		}
	}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	CExtPaintManagerOffice2007_Impl::PaintPushButtonMdiRight( dc, _ppbd );
}

CExtPaintManagerOffice2007_R2_LunaBlue::CExtPaintManagerOffice2007_R2_LunaBlue()
{
	m_clrFillHint = RGB(191,219,255);
	m_clrAccentHint = RGB(255,200,91);
	m_clrIconAlphaColor = RGB(191,219,255);

	m_clrDCA1 = RGB(136,170,214);
	m_clrDCA2 = RGB(86,125,176);
	m_clrDCA3 = RGB(101,145,205);
	m_bDocumentClientAreaBkgndR2 = true;
	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_DCA_LUNA_BLUE) ) );

	m_clrCustomDropDownGlyphEnabled = RGB(0,0,0);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = m_clrFloatingToolbarGripperSolid = RGB(49,101,165);
	m_clrDockingFrameCaptionTextActive = RGB(21,74,147);
	m_clrDockingFrameCaptionTextInactive = RGB(21,74,147);
	m_clrDockingFrameCaptionTextFloatingFixed = RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(255,255,255);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_ACTIVE_LUNA_BLUE) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_INACTIVE_LUNA_BLUE) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive = RGB(62,106,170); // = RGB(105,112,121); // RGB(62,106,170);
	m_clrNcFrameTextInactive = RGB(105,112,121); // RGB(62,106,170);

	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_HOVER_LUNA_BLUE) ) );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_PRESSED_LUNA_BLUE) ) );
	
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_HELP_LUNA_BLUE) ) );
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_CLOSE_LUNA_BLUE) ) );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MAXIMIZE_LUNA_BLUE) ) );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_RESTORE_LUNA_BLUE) ) );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MINIMIZE_LUNA_BLUE) ) );

#if (!defined __EXT_MFC_NO_STATUSBAR)
	m_rcStatusBkPadding.SetRect( 0, 1, 0, 1 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_LIGHT_LUNA_BLUE) ) );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_DARK_LUNA_BLUE) ) );
	m_rcStatusSeparatorPadding.SetRect( 0, 1, 0, 1 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_SEPARATOR_LUNA_BLUE) ) );
//	VERIFY( m_bmpStatusSeparator.Make32() );
//	m_bmpStatusSeparator.AdjustAlpha( -0.75 );
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal = m_clrTabTextSelected = RGB(22,22,100);
	m_nIdxTabShapeHover = 1;
	m_nIdxTabShapePressed = 2;
	m_nIdxTabShapeSelected = 3;
	m_nIdxTabShapeSelectedHover = 4;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 57;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 24;

	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 6, 3, 6 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 6, 3, 6 );

	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SHAPE_ARR_LUNA_BLUE )
			)
		);
	VERIFY( m_arrBmpTabShapeNormal[__ETSOI_TOP].Make32() );
	m_arrBmpTabShapeNormal[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SHAPE_ARR_LUNA_BLUE_SEL_AREA )
			)
		);
	VERIFY( m_arrBmpTabShapeSelArea[__ETSOI_TOP].Make32() );
	m_arrBmpTabShapeSelArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			180,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			270,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			90,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	m_arrRectTabAreaPadding[__ETSOI_TOP].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_BOTTOM].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_LEFT].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_RIGHT].SetRect( 3, 3, 3, 3 );
	m_arrTabAreaMargins[__ETSOI_TOP] = 1;
	m_arrTabAreaMargins[__ETSOI_BOTTOM] = 1;
	m_arrTabAreaMargins[__ETSOI_LEFT] = 1;
	m_arrTabAreaMargins[__ETSOI_RIGHT] = 1;
	VERIFY(
		m_arrBmpTabArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_AREA_BK_LUNA_BLUE )
			)
		);
	VERIFY( m_arrBmpTabArea[__ETSOI_TOP].Make32() );
CSize _sizeTabArea = m_arrBmpTabArea[__ETSOI_TOP].GetSize();
	m_arrBmpTabArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			180,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			270,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			90,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 1;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 24;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SEPARATOR_LUNA_BLUE )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_CHECK_BOX_R2_LUNA_BLUE )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_RADIO_BUTTON_R2 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(197,197,197);
	m_clrMenuItemLeftAreaMarginR = RGB(245,245,245);
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_LARGE_LEFT )
			)
		);
		m_bmpMenuItemLargeLeft.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_LARGE_RIGHT )
			)
		);
		m_bmpMenuItemLargeRight.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_SMALL_LEFT )
			)
		);
		m_bmpMenuItemSmallLeft.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_SMALL_RIGHT )
			)
		);
		m_bmpMenuItemSmallRight.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 2, 2, 2, 2 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_CHECKED_R2   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_UNCHECKED_R2 ) ) );

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_arrClrPnCaptNormal[0]  = RGB(227,239,255);
	m_arrClrPnCaptNormal[1]  = RGB(197,222,255);
	m_arrClrPnCaptNormal[2]  = RGB(173,209,255);
	m_arrClrPnCaptNormal[3]  = RGB(193,220,255);
	m_arrClrPnSplitter[0]    = RGB(255,255,255);
	m_arrClrPnSplitter[1]    = RGB(182,214,255);
	m_clrPnSplitterDots		 = RGB(101,147,207);
	m_clrPnCaptText			 = RGB(21,66,139);
	m_arrClrPnItemText[0]    = RGB(0,0,0);
	m_arrClrPnItemText[1]    = RGB(32,77,137);
	m_clrPnConfigButton		 = RGB(67,113,176); 
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_COMBO_BOX_BUTTON_R2_LUNA_BLUE ) ) );
	m_arrClrComboBoxBorder[0] = RGB(171,193,222);
	m_arrClrComboBoxBorder[1] = RGB(179,199,225);
	m_arrClrComboBoxBorder[2] = RGB(179,199,225);
	m_arrClrComboBoxBorder[3] = RGB(171,193,222);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 0, 2, 0, 2 ), rcEntirePaddingRV( 2, 0, 2, 0 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_MINUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_THUMB_R2_LUNA_BLUE,
		RGB(222,226,236), RGB(116,150,194), RGB(179,200,230), RGB(127,164,211), AFX_IDW_DOCKBAR_TOP
		);
	m_SbSkinDataB_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_MINUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_THUMB_R2_LUNA_BLUE,
		RGB(222,226,236), RGB(116,150,194), RGB(179,200,230), RGB(127,164,211), AFX_IDW_DOCKBAR_BOTTOM
		);
	m_SbSkinDataL_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_MINUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_THUMB_R2_LUNA_BLUE,
		RGB(222,226,236), RGB(116,150,194), RGB(179,200,230), RGB(127,164,211), AFX_IDW_DOCKBAR_LEFT
		);
	m_SbSkinDataR_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_MINUS_R2_LUNA_BLUE, IDB_EXT_2007_ZS_THUMB_R2_LUNA_BLUE,
		RGB(222,226,236), RGB(116,150,194), RGB(179,200,230), RGB(127,164,211), AFX_IDW_DOCKBAR_RIGHT
		);
	m_SbSkinDataH_Light.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_HORZ_LUNA_BLUE,
		15,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_HORZ,
		8,
		SbSkinDataPaddingH,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_LUNA_BLUE_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_LUNA_BLUE_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_VERT_LUNA_BLUE,
		21,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_VERT,
		8,
		SbSkinDataPaddingV,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_LUNA_BLUE_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_LUNA_BLUE_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataH_Dark.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_HORZ_LUNA_BLUE,
		15,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_HORZ,
		8,
		SbSkinDataPaddingH,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_LUNA_BLUE_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_LUNA_BLUE_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Dark.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_VERT_LUNA_BLUE,
		21,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_VERT,
		8,
		SbSkinDataPaddingV,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_LUNA_BLUE_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_LUNA_BLUE_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_clrGridHeaderBkTop     = RGB(252,253,255);
	m_clrGridHeaderBkBottom  = RGB(197,222,255);
	m_clrGridHeaderSeparator = RGB(154,198,255);
	m_clrGridHeaderSortArrow = RGB(154,198,255);
	m_clrGridHeaderBorder    = RGB(154,198,255);

	m_clrRgHeaderBkTop     = RGB(252,253,255);
	m_clrRgHeaderBkBottom  = RGB(197,222,255);
	m_clrRgHeaderSeparator = RGB(154,198,255);
	m_clrRgHeaderSortArrow = RGB(154,198,255);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(101,147,207);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(213,228,242);
	m_clrRgGroupAreaText   = RGB(21,74,147);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

//  		m_nTbbLightWeightSimpleGlyphHeightV = 20;
//  		m_nTbbLightWeightSDDLeftGlyphHeightV = 23;
// 		m_nTbbLightWeightSDDRightGlyphHeightV = 10;
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_SIMPLE )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_LEFT_PART )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_RIGHT_PART )
// 				)
// 			);
// 	// 	m_arrBmpTbbLightWeightSimpleH.PreMultipliedRGBChannelsSet( true );
// 	// 	m_arrBmpTbbLightWeightSDDLeftH.PreMultipliedRGBChannelsSet( true );
// 	// 	m_arrBmpTbbLightWeightSDDRightH.PreMultipliedRGBChannelsSet( true );
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSimpleH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSimpleH.GetSize().cx,
// 				m_nTbbLightWeightSimpleGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDLeftH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDLeftH.GetSize().cx,
// 				m_nTbbLightWeightSDDLeftGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDRightH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDRightH.GetSize().cx,
// 				m_nTbbLightWeightSDDRightGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);

 	m_nPushBtnSimpleGlyphHeightV = 20;
 	m_nPushBtnSDDLeftGlyphHeightV = 23;
	m_nPushBtnSDDRightGlyphHeightV = 10;
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_LUNA_BLUE_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_LUNA_BLUE_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_LUNA_BLUE_RIGHT_PART )
			)
		);
// 	m_arrBmpPushBtnSimpleH.PreMultipliedRGBChannelsSet( true );
// 	m_arrBmpPushBtnSDDLeftH.PreMultipliedRGBChannelsSet( true );
// 	m_arrBmpPushBtnSDDRightH.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	m_nQatbAdditionalSpaceAtRightDWM = 30;

	m_clrContractedMargin1 = RGB(213,226,243);
	m_clrContractedMargin2 = RGB(155,187,227);
	m_nContractedMarginHeight = 2;
	m_bRibbonGroupCaptionAtTop = false;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonCaptionPartHeight = 17;
	m_nRibbonGroupIconBkVertOffset = 2;
	m_clrRibbonComboBackGroundNormal = RGB(234,242,251);
	m_nRibbonTabIntersectionHeight = 1;

	m_clrRibbonGroupCaptionTextCollapsed
		= m_clrRibbonButtonNormal
		= RGB( 45, 83, 144 );
	m_clrRibbonButtonDisabled = RGB(128,128,128);
//	m_clrRibbonGroupCaptionTextExpanded = RGB( 45, 83, 115 );
	m_clrRibbonGroupCaptionTextExpanded = RGB( 65, 115, 175 );
	m_nRibbonGroupCaptionTextDF
		= m_nRibbonGroupCaptionTextShadowDF
		= DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;

	m_rcRibbonPageBkPadding.SetRect( 5, 19, 5, 10 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_PAGE_BK_R2_LUNA_BLUE)
			)
		);
	m_bmpRibbonPageBk.PreMultipliedRGBChannelsSet( true );
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 4, 4, 4, 4 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_NORMAL_BK_R2_LUNA_BLUE)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_HOVER_BK_R2_LUNA_BLUE)
			)
		);
	
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 4, 18, 4, 4 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R2_LUNA_BLUE)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_LUNA_BLUE)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R2_LUNA_BLUE)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_SELECTED_BK_R2)
			)
		);
INT nBkIndex, nBkCount;
	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	{
		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	{
		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )


//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[0].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_NORMAL_BK_R2_LUNA_BLUE)
//			)
//		);
//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[1].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_HOVER_BK_R2_LUNA_BLUE)
//			)
//		);
//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[2].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_PRESSED_BK_R2_LUNA_BLUE)
//			)
//		);
	VERIFY(
		m_bmpRibbonIconBkCF.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_COLLAPSED_ICON_FRAME_R2_LUNA_BLUE)
			)
		);
 	m_bmpRibbonIconBkCF.PreMultiplyRGBChannels( false );
// 	m_bmpRibbonIconBkCF.PreMultipliedRGBChannelsSet( true );

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_STRETCH );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_STRETCH );
	m_rcRibbonSeparatorPaddingH.SetRect( 6, 0, 6, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_H_R2_LUNA_BLUE)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 6, 0, 6 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_V_R2_LUNA_BLUE)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_nRibbonHeightOfQACEB = 22;
	m_nIdxRibbonQACEB_Selected = 3;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_QATB_CEB_R2_LUNA_BLUE)
			)
		);
	m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_clrRibbon_EmbeddedCaptionTextLeft = RGB(100,100,100);
	m_clrRibbon_EmbeddedCaptionTextRight = RGB( 65, 115, 175 );;
	m_bRibbonFileButtonItegrationSupported = true;
INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
	m_rcRibbonNcCornerLeftCP.SetRect( 22, 8, 2, 2 );
	m_rcRibbonNcCornerRightCP.SetRect( 2, 8, 22, 2 );

	VERIFY(
		m_bmpRibbonNcCornerActiveLeft.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_LEFT_R2_LUNA_BLUE)
			)
		);
	m_bmpRibbonNcCornerActiveLeft.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerActiveLeft.Make32();
// 	m_bmpRibbonNcCornerActiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerActiveLeft.Scale(
		m_bmpRibbonNcCornerActiveLeft.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerInactiveLeft.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_LEFT_R2_LUNA_BLUE)
			)
		);
	m_bmpRibbonNcCornerInactiveLeft.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerInactiveLeft.Make32();
// 	m_bmpRibbonNcCornerInactiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerInactiveLeft.Scale(
		m_bmpRibbonNcCornerInactiveLeft.GetSize().cx,
		nCaptionHeightInactive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerActiveRight.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_RIGHT_R2_LUNA_BLUE)
			)
		);
	m_bmpRibbonNcCornerActiveRight.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerActiveRight.Make32();
// 	m_bmpRibbonNcCornerActiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerActiveRight.Scale(
		m_bmpRibbonNcCornerActiveRight.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerInactiveRight.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_RIGHT_R2_LUNA_BLUE)
			)
		);
	m_bmpRibbonNcCornerInactiveRight.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerInactiveRight.Make32();
// 	m_bmpRibbonNcCornerInactiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerInactiveRight.Scale(
		m_bmpRibbonNcCornerInactiveRight.GetSize().cx,
		nCaptionHeightInactive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerHT.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_HT_MASK_R2_LUNA_BLUE)
			)
		);
	m_bmpRibbonNcCornerHT.Make32();
	m_bmpRibbonNcCornerHT.Scale(
		m_bmpRibbonNcCornerHT.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_R2_LUNA_BLUE) ) );
	//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 3, 3, 3, 3 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_QATB_BK_R2_LUNA_BLUE) ) );

	m_nRibbonHeightOfOneDLB = 14;
	m_nDlbIdxDisabled = 3;
	m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 2, 2, 2, 2 );
	VERIFY( m_arrBmpRibbonDLB.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_GCB_R2_LUNA_BLUE) ) );
	m_arrBmpRibbonDLB.PreMultipliedRGBChannelsSet( true );

	m_clrRibbonGalleryInplaceBorderNormal = RGB(185,208,237);
	m_clrRibbonGalleryInplaceBorderHover  = RGB(185,208,237);
	m_clrRibbonGalleryInplaceBkgndNormal  = RGB(212,230,248);
	m_clrRibbonGalleryInplaceBkgndHover   = RGB(236,243,251);

	m_rcRibbonGalleryScrollFill = RGB(212,230,248);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 4, 4, 4, 4 );
	m_nHeightRibbonGalleryScrollButton = -1;
	m_nIndexRibbonGalleryScrollButtonDisabled = 4;
	m_nIndexRibbonGalleryScrollButtonNormal = 1;
	m_nIndexRibbonGalleryScrollButtonHover = 2;
	m_nIndexRibbonGalleryScrollButtonPressed = 3;
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_DOWN_R2_LUNA_BLUE)
			)
		);
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_UP_R2_LUNA_BLUE)
			)
		);
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_MENU_R2_LUNA_BLUE)
			)
		);
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_DDA_R2_LUNA_BLUE) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_COMBO_BOX_BUTTON_R2_LUNA_BLUE) ) );

	// tool buttons 2007
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]	= 0;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]	= 3;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]	= 2;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]		= 3;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]	= 1;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 5;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= 3;

	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 0;

//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 2;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 3;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 4;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 5;

	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 4;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 3;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 4;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SOLID_R2_LUNA_BLUE)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_LEFT_R2_LUNA_BLUE)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_MIDDLE_R2_LUNA_BLUE)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_RIGHT_R2_LUNA_BLUE)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_LEFT_R2)
			)
		);
	m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_RIGHT_R2)
			)
		);
	m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_ALL_R2) // IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R2
			)
		);
//	m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R2)
//			)
//		);
//	m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R2)
			)
		);
	m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R2)
			)
		);
	m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_HOVER_R2)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_PRESSED_R2)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R2)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R2)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpRibbonMenuResizingMarginHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_HV_LUNA_BLUE) ) );
	VERIFY( m_bmpRibbonMenuResizingMarginV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_V_LUNA_BLUE) ) );
	VERIFY( m_bmpRibbonMenuResizingGripperHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_HV_LUNA_BLUE) ) );
	m_bmpRibbonMenuResizingGripperHV.Make32();
	m_bmpRibbonMenuResizingGripperHV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY( m_bmpRibbonMenuResizingGripperV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_V_LUNA_BLUE) ) );
	m_bmpRibbonMenuResizingGripperV.Make32();
	m_bmpRibbonMenuResizingGripperV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(20,20,90);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_BORDER_R2)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(20,20,90);
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_CAPTION_BK_R2_LUNA_BLUE)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 12, 6, 29 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RM_BIG_BORDER_R2_LUNA_BLUE) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R2_LUNA_BLUE)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R2)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RESIZING_GRIPPER_R2_LUNA_BLUE) ) );
	m_bmpResizingGripper.PreMultipliedRGBChannelsSet( true );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_DOWN_LUNA_BLUE) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_UP_LUNA_BLUE) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_DOWN_LUNA_BLUE) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_UP_LUNA_BLUE) ) );

#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	m_bShortcutListUseDockerBkgnd = true;
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
}

CExtPaintManagerOffice2007_R2_Silver::CExtPaintManagerOffice2007_R2_Silver()
{
	m_clrFillHint = RGB(244,247,251);
	m_clrAccentHint = RGB(255,227,140);

INT nBmpArrWalkIndex;
	nBmpArrWalkIndex;
	//m_clrIconAlphaColor = RGB(128,128,128); // not needed

	//m_clrForceSplitterBk = RGB(83,83,83);
	m_clrDCA1 = RGB(200,203,211);
	m_clrDCA2 = RGB(200,203,211);
	m_clrDCA3 = RGB(200,203,211);
	m_bDocumentClientAreaBkgndR2 = true;
	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_DCA_SILVER) ) );

	m_clrCustomDropDownGlyphEnabled = RGB(76,83,92);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = RGB(122, 121, 153);
	m_clrFloatingToolbarGripperSolid = RGB(122, 121, 153);
	m_clrDockingFrameCaptionTextActive = RGB(76,83,92);
	m_clrDockingFrameCaptionTextInactive = RGB(76,83,92);
	m_clrDockingFrameCaptionTextFloatingFixed = RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(0,0,0);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_ACTIVE_SILVER) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_INACTIVE_SILVER) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive = RGB(92,98,106);
	m_clrNcFrameTextInactive = RGB(105,112,121);

	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_HOVER_LUNA_BLUE) ) );
			m_bmpNcButtonBkHover.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_PRESSED_LUNA_BLUE) ) );
			m_bmpNcButtonBkPressed.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_HELP_LUNA_BLUE) ) );
			m_bmpArrNcButtonsHelp.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_CLOSE_LUNA_BLUE) ) );
			m_bmpArrNcButtonsClose.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MAXIMIZE_LUNA_BLUE) ) );
			m_bmpArrNcButtonsMaximize.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_RESTORE_LUNA_BLUE) ) );
			m_bmpArrNcButtonsRestore.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MINIMIZE_LUNA_BLUE) ) );
			m_bmpArrNcButtonsMinimize.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );

#if (!defined __EXT_MFC_NO_STATUSBAR)

	m_rcStatusBkPadding.SetRect( 0, 1, 0, 1 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_LIGHT_SILVER) ) );
//			m_bmpStatusBkLight.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_DARK_SILVER) ) );
//			m_bmpStatusBkDark.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	m_rcStatusSeparatorPadding.SetRect( 0, 1, 0, 1 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_SEPARATOR_SILVER) ) );
//			m_bmpStatusSeparator.AdjustHLS( RGB(255,0,255), RGB(0,0,0), 0.0, 0.0, -1.0 );
	m_clrStatusPaneTextColorDisabled = RGB(128,128,128);
	m_clrStatusPaneTextColorNormal = RGB(32,32,32);
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal = RGB(84,84,84);
	m_clrTabTextSelected =  RGB(128,128,128);
	m_nIdxTabShapeHover = 1;
	m_nIdxTabShapePressed = 2;
	m_nIdxTabShapeSelected = 3;
	m_nIdxTabShapeSelectedHover = 4;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 57;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 24;

	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 6, 3, 6 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 6, 3, 6 );

	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SHAPE_ARR_SILVER )
			)
		);
	VERIFY( m_arrBmpTabShapeNormal[__ETSOI_TOP].Make32() );

//	m_arrBmpTabShapeNormal[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SHAPE_ARR_SILVER_SEL_AREA )
			)
		);
	VERIFY( m_arrBmpTabShapeSelArea[__ETSOI_TOP].Make32() );
	m_arrBmpTabShapeSelArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			180,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			270,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			90,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	m_arrRectTabAreaPadding[__ETSOI_TOP].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_BOTTOM].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_LEFT].SetRect( 3, 3, 3, 3 );
	m_arrRectTabAreaPadding[__ETSOI_RIGHT].SetRect( 3, 3, 3, 3 );
	m_arrTabAreaMargins[__ETSOI_TOP] = 1;
	m_arrTabAreaMargins[__ETSOI_BOTTOM] = 1;
	m_arrTabAreaMargins[__ETSOI_LEFT] = 1;
	m_arrTabAreaMargins[__ETSOI_RIGHT] = 1;
	VERIFY(
		m_arrBmpTabArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_AREA_BK_SILVER )
			)
		);
	VERIFY( m_arrBmpTabArea[__ETSOI_TOP].Make32() );
CSize _sizeTabArea = m_arrBmpTabArea[__ETSOI_TOP].GetSize();
	m_arrBmpTabArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			180,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			270,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			90,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 1;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 24;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SEPARATOR_SILVER )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_CHECK_BOX_R2_OBSIDIAN )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_RADIO_BUTTON_R2 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(197,197,197);
	m_clrMenuItemLeftAreaMarginR = RGB(245,245,245);
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_LARGE_LEFT )
			)
		);
		m_bmpMenuItemLargeLeft.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_LARGE_RIGHT )
			)
		);
		m_bmpMenuItemLargeRight.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_SMALL_LEFT )
			)
		);
		m_bmpMenuItemSmallLeft.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_SMALL_RIGHT )
			)
		);
		m_bmpMenuItemSmallRight.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 2, 2, 2, 2 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_CHECKED_R2   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_UNCHECKED_R2 ) ) );

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_arrClrPnCaptNormal[0]  = RGB(235,238,250);
	m_arrClrPnCaptNormal[1]  = RGB(215,219,229);
	m_arrClrPnCaptNormal[2]  = RGB(197,199,209);
	m_arrClrPnCaptNormal[3]  = RGB(212,216,226);
	m_arrClrPnSplitter[0]    = RGB(255,255,255);
	m_arrClrPnSplitter[1]    = RGB(120,119,151);
	m_clrPnCaptText			 = RGB(21,66,139);
	m_arrClrPnItemText[0]    = RGB(0,0,0);
	m_arrClrPnItemText[1]    = RGB(76,83,92);
	m_clrPnConfigButton		 = RGB(101,104,112); 
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_COMBO_BOX_BUTTON_R2_OBSIDIAN ) ) );
	m_arrClrComboBoxBorder[0] = RGB(169,177,184);
	m_arrClrComboBoxBorder[1] = RGB(169,177,184);
	m_arrClrComboBoxBorder[2] = RGB(169,177,184);
	m_arrClrComboBoxBorder[3] = RGB(169,177,184);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 0, 2, 0, 2 ), rcEntirePaddingRV( 2, 0, 2, 0 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_TOP
		);
	m_SbSkinDataB_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_BOTTOM
		);
	m_SbSkinDataL_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_LEFT
		);
	m_SbSkinDataR_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_RIGHT
		);
	m_SbSkinDataH_Light.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_HORZ_OBSIDIAN,
		15,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_HORZ,
		8,
		SbSkinDataPaddingH,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_OBSIDIAN_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_OBSIDIAN_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_VERT_OBSIDIAN,
		21,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_VERT,
		8,
		SbSkinDataPaddingV,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_OBSIDIAN_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_OBSIDIAN_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataH_Dark.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_HORZ_OBSIDIAN,
		15,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_HORZ,
		8,
		SbSkinDataPaddingH,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_SILVER_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_SILVER_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Dark.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_VERT_OBSIDIAN,
		21,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_VERT,
		8,
		SbSkinDataPaddingV,
		COLORREF(-1L), // RGB(117,150,192),
		COLORREF(-1L), // RGB(91,99,116),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_SILVER_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_SILVER_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_clrGridHeaderBkTop     = RGB(253,253,253);
	m_clrGridHeaderBkBottom  = RGB(212,215,220);
	m_clrGridHeaderSeparator = RGB(145,153,164);
	m_clrGridHeaderSortArrow = RGB(145,153,164);
	m_clrGridHeaderBorder    = RGB(145,153,164);

	m_clrRgHeaderBkTop     = RGB(253,253,253);
	m_clrRgHeaderBkBottom  = RGB(212,215,220);
	m_clrRgHeaderSeparator = RGB(145,153,164);
	m_clrRgHeaderSortArrow = RGB(145,153,164);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(76,83,92);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(235,235,235);
	m_clrRgGroupAreaText   = RGB(70,70,70);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

//  		m_nTbbLightWeightSimpleGlyphHeightV = 20;
//  		m_nTbbLightWeightSDDLeftGlyphHeightV = 23;
// 		m_nTbbLightWeightSDDRightGlyphHeightV = 10;
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_SIMPLE )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_LEFT_PART )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_RIGHT_PART )
// 				)
// 			);
// 	// 	m_arrBmpTbbLightWeightSimpleH.PreMultipliedRGBChannelsSet( true );
// 	// 	m_arrBmpTbbLightWeightSDDLeftH.PreMultipliedRGBChannelsSet( true );
// 	// 	m_arrBmpTbbLightWeightSDDRightH.PreMultipliedRGBChannelsSet( true );
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSimpleH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSimpleH.GetSize().cx,
// 				m_nTbbLightWeightSimpleGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDLeftH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDLeftH.GetSize().cx,
// 				m_nTbbLightWeightSDDLeftGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDRightH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDRightH.GetSize().cx,
// 				m_nTbbLightWeightSDDRightGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);

 	m_nPushBtnSimpleGlyphHeightV = 20;
 	m_nPushBtnSDDLeftGlyphHeightV = 23;
	m_nPushBtnSDDRightGlyphHeightV = 10;
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_OBSIDIAN_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_OBSIDIAN_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_OBSIDIAN_RIGHT_PART )
			)
		);
// 	m_arrBmpPushBtnSimpleH.PreMultipliedRGBChannelsSet( true );
// 	m_arrBmpPushBtnSDDLeftH.PreMultipliedRGBChannelsSet( true );
// 	m_arrBmpPushBtnSDDRightH.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	m_nQatbAdditionalSpaceAtRightDWM = 30;

	m_clrContractedMargin1 = RGB(220,225,235);
	m_clrContractedMargin2 = RGB(128,128,128);
	m_nContractedMarginHeight = 2;
	m_bRibbonGroupCaptionAtTop = false;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonCaptionPartHeight = 17;
	m_nRibbonGroupIconBkVertOffset = 2;
	m_clrRibbonComboBackGroundNormal = RGB(232,232,232);
	m_nRibbonTabIntersectionHeight = 1;

	m_clrRibbonButtonDisabled = RGB(128,128,128);
	m_clrRibbonGroupCaptionTextExpanded = RGB( 84, 84, 84 );
	m_nRibbonGroupCaptionTextDF
		= m_nRibbonGroupCaptionTextShadowDF
		= DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;

	m_rcRibbonPageBkPadding.SetRect( 5, 19, 5, 10 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_PAGE_BK_R2_SILVER)
			)
		);
// 	m_bmpRibbonPageBk.Make32();
// 	m_bmpRibbonPageBk.PreMultipliedRGBChannelsSet( true );
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 4, 4, 4, 4 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_NORMAL_BK_R2_SILVER)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_HOVER_BK_R2_SILVER)
			)
		);
	
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 4, 18, 4, 4 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R2_SILVER)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_SILVER)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R2_SILVER)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_SELECTED_BK_R2)
			)
		);
INT nBkIndex, nBkCount;
	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	{
		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	{
		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )


//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[0].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_NORMAL_BK_R2_OBSIDIAN)
//			)
//		);
//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[1].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_HOVER_BK_R2_OBSIDIAN)
//			)
//		);
//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[2].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_PRESSED_BK_R2_OBSIDIAN)
//			)
//		);
	VERIFY(
		m_bmpRibbonIconBkCF.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_COLLAPSED_ICON_FRAME_R2_OBSIDIAN)
			)
		);
 	m_bmpRibbonIconBkCF.PreMultiplyRGBChannels( false );
// 	m_bmpRibbonIconBkCF.PreMultipliedRGBChannelsSet( true );

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_STRETCH );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_STRETCH );
	m_rcRibbonSeparatorPaddingH.SetRect( 6, 0, 6, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_H_R2_OBSIDIAN)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 6, 0, 6 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_V_R2_OBSIDIAN)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_nRibbonHeightOfQACEB = 22;
	m_nIdxRibbonQACEB_Selected = 3;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_QATB_CEB_R2_OBSIDIAN)
			)
		);
	//m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_clrRibbon_EmbeddedCaptionTextLeft = RGB(100,100,100);
	m_clrRibbon_EmbeddedCaptionTextRight = RGB( 65, 115, 175 );;
	m_bRibbonFileButtonItegrationSupported = true;
INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
	m_rcRibbonNcCornerLeftCP.SetRect( 22, 8, 2, 2 );
	m_rcRibbonNcCornerRightCP.SetRect( 2, 8, 22, 2 );

	VERIFY(
		m_bmpRibbonNcCornerActiveLeft.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_LEFT_R2_SILVER)
			)
		);
	m_bmpRibbonNcCornerActiveLeft.Make32();
	m_bmpRibbonNcCornerActiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
//	m_bmpRibbonNcCornerActiveLeft.PreMultipliedRGBChannelsSet( true );
	m_bmpRibbonNcCornerActiveLeft.Scale(
		m_bmpRibbonNcCornerActiveLeft.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerInactiveLeft.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_LEFT_R2_SILVER)
			)
		);
	m_bmpRibbonNcCornerInactiveLeft.Make32();
	m_bmpRibbonNcCornerInactiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
//	m_bmpRibbonNcCornerInactiveLeft.PreMultipliedRGBChannelsSet( true );
	m_bmpRibbonNcCornerInactiveLeft.Scale(
		m_bmpRibbonNcCornerInactiveLeft.GetSize().cx,
		nCaptionHeightInactive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerActiveRight.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_RIGHT_R2_SILVER)
			)
		);
	m_bmpRibbonNcCornerActiveRight.Make32();
	m_bmpRibbonNcCornerActiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
//	m_bmpRibbonNcCornerActiveRight.PreMultipliedRGBChannelsSet( true );
	m_bmpRibbonNcCornerActiveRight.Scale(
		m_bmpRibbonNcCornerActiveRight.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerInactiveRight.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_RIGHT_R2_SILVER)
			)
		);
	m_bmpRibbonNcCornerInactiveRight.Make32();
	m_bmpRibbonNcCornerInactiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
//	m_bmpRibbonNcCornerInactiveRight.PreMultipliedRGBChannelsSet( true );
	m_bmpRibbonNcCornerInactiveRight.Scale(
		m_bmpRibbonNcCornerInactiveRight.GetSize().cx,
		nCaptionHeightInactive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerHT.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_HT_MASK_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonNcCornerHT.Make32();
	m_bmpRibbonNcCornerHT.Scale(
		m_bmpRibbonNcCornerHT.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_R2_OBSIDIAN) ) );
	//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 3, 3, 3, 3 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_QATB_BK_R2_SILVER) ) );

	m_nRibbonHeightOfOneDLB = 14;
	m_nDlbIdxDisabled = 3;
	m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 2, 2, 2, 2 );
	VERIFY( m_arrBmpRibbonDLB.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_GCB_R2_OBSIDIAN) ) );
//	m_arrBmpRibbonDLB.PreMultipliedRGBChannelsSet( true );

	m_clrRibbonGalleryInplaceBorderNormal = RGB(172,172,172);
	m_clrRibbonGalleryInplaceBorderHover  = RGB(172,172,172);
	m_clrRibbonGalleryInplaceBkgndNormal  = RGB(232,234,236);
	m_clrRibbonGalleryInplaceBkgndHover   = RGB(247,247,247);

	m_rcRibbonGalleryScrollFill = RGB(218,226,226);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 4, 4, 4, 4 );
	m_nHeightRibbonGalleryScrollButton = -1;
	m_nIndexRibbonGalleryScrollButtonDisabled = 4;
	m_nIndexRibbonGalleryScrollButtonNormal = 1;
	m_nIndexRibbonGalleryScrollButtonHover = 2;
	m_nIndexRibbonGalleryScrollButtonPressed = 3;
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_DOWN_R2_OBSIDIAN)
			)
		);
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_UP_R2_OBSIDIAN)
			)
		);
	VERIFY(
		m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_MENU_R2_OBSIDIAN)
			)
		);
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_DDA_R2_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_COMBO_BOX_BUTTON_R2_SILVER) ) );

	// tool buttons 2007
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]	= 0;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]	= 3;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]	= 2;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]		= 3;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]	= 1;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 5;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= 3;

	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 0;

//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 2;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 3;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 4;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 5;

	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 4;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 3;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 4;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SOLID_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_LEFT_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_MIDDLE_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_RIGHT_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_LEFT_R2)
			)
		);
	m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_RIGHT_R2)
			)
		);
	m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_ALL_R2) // IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R2
			)
		);
//	m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R2)
//			)
//		);
//	m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R2)
			)
		);
	m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R2)
			)
		);
	m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_HOVER_R2)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_PRESSED_R2)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R2)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R2)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpRibbonMenuResizingMarginHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_HV_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingMarginV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_V_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingGripperHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_HV_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperHV.Make32();
	m_bmpRibbonMenuResizingGripperHV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY( m_bmpRibbonMenuResizingGripperV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_V_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperV.Make32();
	m_bmpRibbonMenuResizingGripperV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(0,0,0);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_BORDER_R2)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(20,20,90);
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_CAPTION_BK_R2_OBSIDIAN)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 12, 6, 29 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RM_BIG_BORDER_R2_SILVER) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R2)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RESIZING_GRIPPER_R2_OBSIDIAN) ) );
	m_bmpResizingGripper.PreMultipliedRGBChannelsSet( true );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_DOWN_SILVER) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_UP_SILVER) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_DOWN_SILVER) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_UP_SILVER) ) );

#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	m_bShortcutListUseDockerBkgnd = true;
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
}

CExtPaintManagerOffice2007_R3_Silver::CExtPaintManagerOffice2007_R3_Silver()
{
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
			m_nQatbAdditionalSpaceAtRightDWM = 0;

// 			INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
// 			INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
// 			CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
			m_rcRibbonNcCornerLeftCP.SetRect( 53, 2, 2, 2 );
			m_rcRibbonNcCornerRightCP.SetRect( 2, 2, 42, 2 );

			VERIFY(
				m_bmpRibbonNcCornerDwmLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_DWM_LEFT_R3_SILVER)
					)
				);
			//m_bmpRibbonNcCornerDwmLeft.PreMultipliedRGBChannelsSet( true );
			VERIFY(
				m_bmpRibbonNcCornerDwmRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_DWM_RIGHT_R3_SILVER)
					)
				);
			//m_bmpRibbonNcCornerDwmRight.PreMultipliedRGBChannelsSet( true );
							m_bmpRibbonNcCornerDwmLeft.AdjustAlpha( -0.60 );
							m_bmpRibbonNcCornerDwmRight.AdjustAlpha( -0.60 );

			VERIFY(
				m_bmpRibbonNcCornerActiveLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_LEFT_R3_SILVER)
					)
				);
// 			m_bmpRibbonNcCornerActiveLeft.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerActiveLeft.Scale(
// 				m_bmpRibbonNcCornerActiveLeft.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerActiveLeft.Make32() );
			m_bmpRibbonNcCornerActiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerInactiveLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_LEFT_R3_SILVER)
					)
				);
// 			m_bmpRibbonNcCornerInactiveLeft.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerInactiveLeft.Scale(
// 				m_bmpRibbonNcCornerInactiveLeft.GetSize().cx,
// 				nCaptionHeightInactive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerInactiveLeft.Make32() );
			m_bmpRibbonNcCornerInactiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerActiveRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_RIGHT_R3_SILVER)
					)
				);
// 			m_bmpRibbonNcCornerActiveRight.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerActiveRight.Scale(
// 				m_bmpRibbonNcCornerActiveRight.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerActiveRight.Make32() );
			m_bmpRibbonNcCornerActiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerInactiveRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_RIGHT_R3_SILVER)
					)
				);
// 			m_bmpRibbonNcCornerInactiveRight.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerInactiveRight.Scale(
// 				m_bmpRibbonNcCornerInactiveRight.GetSize().cx,
// 				nCaptionHeightInactive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerInactiveRight.Make32() );
			m_bmpRibbonNcCornerInactiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

// 			VERIFY(
// 				m_bmpRibbonNcCornerHT.LoadBMP_Resource(
// 					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_HT_MASK_R2_SILVER)
// 					)
// 				);
// 			m_bmpRibbonNcCornerHT.Make32();
// 			m_bmpRibbonNcCornerHT.Scale(
// 				m_bmpRibbonNcCornerHT.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);

			m_bmpRibbonNcCornerHT.Empty();

			VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_R3_SILVER) ) );
			//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );

			m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 18, 6, 29 );
			VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RM_BIG_BORDER_R3_SILVER) ) );
			m_bmpRibbonFileMenuBigBorder.Make32();
			m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			m_sizeAboveTheRibbonShiftQACEB.cx = 10;
			m_sizeAboveTheRibbonShiftQACEB.cy = 0;

			m_nRibbonFileButtonMenuIntersectionHeight = 20;

#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
}

CExtPaintManagerOffice2007_R3_LunaBlue::CExtPaintManagerOffice2007_R3_LunaBlue()
{
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
			m_nQatbAdditionalSpaceAtRightDWM = 0;

// 			INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
// 			INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
// 			CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
			m_rcRibbonNcCornerLeftCP.SetRect( 53, 2, 2, 2 );
			m_rcRibbonNcCornerRightCP.SetRect( 2, 2, 42, 2 );

			VERIFY(
				m_bmpRibbonNcCornerDwmLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_DWM_LEFT_R3_LUNA_BLUE)
					)
				);
			//m_bmpRibbonNcCornerDwmLeft.PreMultipliedRGBChannelsSet( true );
			VERIFY(
				m_bmpRibbonNcCornerDwmRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_DWM_RIGHT_R3_LUNA_BLUE)
					)
				);
			//m_bmpRibbonNcCornerDwmRight.PreMultipliedRGBChannelsSet( true );
							m_bmpRibbonNcCornerDwmLeft.AdjustAlpha( -0.60 );
							m_bmpRibbonNcCornerDwmRight.AdjustAlpha( -0.60 );

			VERIFY(
				m_bmpRibbonNcCornerActiveLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_LEFT_R3_LUNA_BLUE)
					)
				);
// 			m_bmpRibbonNcCornerActiveLeft.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerActiveLeft.Scale(
// 				m_bmpRibbonNcCornerActiveLeft.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerActiveLeft.Make32() );
			m_bmpRibbonNcCornerActiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerInactiveLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_LEFT_R3_LUNA_BLUE)
					)
				);
// 			m_bmpRibbonNcCornerInactiveLeft.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerInactiveLeft.Scale(
// 				m_bmpRibbonNcCornerInactiveLeft.GetSize().cx,
// 				nCaptionHeightInactive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerInactiveLeft.Make32() );
			m_bmpRibbonNcCornerInactiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerActiveRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_RIGHT_R3_LUNA_BLUE)
					)
				);
// 			m_bmpRibbonNcCornerActiveRight.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerActiveRight.Scale(
// 				m_bmpRibbonNcCornerActiveRight.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerActiveRight.Make32() );
			m_bmpRibbonNcCornerActiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerInactiveRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_RIGHT_R3_LUNA_BLUE)
					)
				);
// 			m_bmpRibbonNcCornerInactiveRight.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerInactiveRight.Scale(
// 				m_bmpRibbonNcCornerInactiveRight.GetSize().cx,
// 				nCaptionHeightInactive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerInactiveRight.Make32() );
			m_bmpRibbonNcCornerInactiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

// 			VERIFY(
// 				m_bmpRibbonNcCornerHT.LoadBMP_Resource(
// 					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_HT_MASK_R2_LUNA_BLUE)
// 					)
// 				);
// 			m_bmpRibbonNcCornerHT.Make32();
// 			m_bmpRibbonNcCornerHT.Scale(
// 				m_bmpRibbonNcCornerHT.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);

			m_bmpRibbonNcCornerHT.Empty();

			VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_R3_LUNA_BLUE) ) );
			//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );

			m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 18, 6, 29 );
			VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RM_BIG_BORDER_R3_LUNA_BLUE) ) );
			m_bmpRibbonFileMenuBigBorder.Make32();
			m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			m_sizeAboveTheRibbonShiftQACEB.cx = 10;
			m_sizeAboveTheRibbonShiftQACEB.cy = 0;

			m_nRibbonFileButtonMenuIntersectionHeight = 20;

#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
}

CExtPaintManagerOffice2007_R2_LunaBlue::~CExtPaintManagerOffice2007_R2_LunaBlue()
{
}

CExtPaintManagerOffice2007_R2_Silver::~CExtPaintManagerOffice2007_R2_Silver()
{
}

CExtPaintManagerOffice2007_R3_Silver::~CExtPaintManagerOffice2007_R3_Silver()
{
}

CExtPaintManagerOffice2007_R3_LunaBlue::~CExtPaintManagerOffice2007_R3_LunaBlue()
{
}

CExtPaintManagerOffice2007_R2_Obsidian::CExtPaintManagerOffice2007_R2_Obsidian()
{
	m_clrFillHint = RGB(173,174,189);
	m_clrAccentHint = RGB(255,227,140);
	//m_clrIconAlphaColor = RGB(128,128,128); // not needed

	m_clrForceSplitterBk = RGB(83,83,83);
	m_clrDCA1 = RGB(72,72,72);
	m_clrDCA2 = RGB(45,45,45);
	m_clrDCA3 = RGB(10,10,10);
	m_bDocumentClientAreaBkgndR2 = true;
	VERIFY( m_bmpDCA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_DCA_OBSIDIAN) ) );

	m_clrCustomDropDownGlyphEnabled = RGB(0,0,0);
	m_clrCustomDropDownGlyphDisabled = RGB(141,141,141);
	m_clrDockingFrameDark = RGB(49,60,66);
	m_clrFloatingToolbarGripperSolid = RGB(74,81,90);
	m_clrDockingFrameCaptionTextActive = RGB(0,0,0);
	m_clrDockingFrameCaptionTextInactive =  RGB(0,0,0);
	m_clrDockingFrameCaptionTextFloatingFixed =  RGB(255,255,255);

	m_clrDockingCaptionShapeFixedNormal =  RGB(255,255,255);

	m_rcNcFrameBordersActive.SetRect( 3, 4, 3, 2 );
	m_rcNcFrameBordersInactive.SetRect( 3, 4, 3, 2 );
	m_nCaptionHeightActive = m_nCaptionHeightInactive = 26;
	VERIFY( m_bmpNcFrameActive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_ACTIVE_OBSIDIAN) ) );
	VERIFY( m_bmpNcFrameInactive.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_FRAME_INACTIVE_OBSIDIAN) ) );
	VERIFY( m_bmpNcFrameActive.Make32() );
	VERIFY( m_bmpNcFrameInactive.Make32() );
	m_bmpNcFrameActive.AlphaColor( m_clrTransparentNcFrameActive, RGB(0,0,0), 0 );
	m_bmpNcFrameInactive.AlphaColor( m_clrTransparentNcFrameInactive, RGB(0,0,0), 0 );
	m_clrNcFrameTextActive = RGB(255,255,255); // = RGB(174,209,255);
	m_clrNcFrameTextInactive = RGB(183,183,183); // = RGB(255,255,255); // = RGB(174,209,255);

	VERIFY( m_bmpNcButtonBkHover.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_HOVER_OBSIDIAN) ) );
	VERIFY( m_bmpNcButtonBkPressed.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_BUTTON_BK_PRESSED_OBSIDIAN) ) );
	
	VERIFY( m_bmpArrNcButtonsHelp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_HELP_OBSIDIAN) ) );
	VERIFY( m_bmpArrNcButtonsClose.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_CLOSE_OBSIDIAN) ) );
	VERIFY( m_bmpArrNcButtonsMaximize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MAXIMIZE_OBSIDIAN) ) );
	VERIFY( m_bmpArrNcButtonsRestore.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_RESTORE_OBSIDIAN) ) );
	VERIFY( m_bmpArrNcButtonsMinimize.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_NC_ARR_MINIMIZE_OBSIDIAN) ) );

#if (!defined __EXT_MFC_NO_STATUSBAR)
	m_rcStatusBkPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusBkLight.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_LIGHT_OBSIDIAN) ) );
	VERIFY( m_bmpStatusBkDark.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_BK_DARK_OBSIDIAN) ) );
	m_rcStatusSeparatorPadding.SetRect( 0, 2, 0, 1 );
	VERIFY( m_bmpStatusSeparator.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_STATUSBAR_SEPARATOR_OBSIDIAN) ) );
// 	VERIFY( m_bmpStatusSeparator.Make32() );
// 	m_bmpStatusSeparator.AdjustAlpha( -0.5 );
	//m_clrStatusPaneTextColorDisabled = RGB(128,128,128);
	m_clrStatusPaneTextColorNormal = RGB(255,255,255);
#endif // (!defined __EXT_MFC_NO_STATUSBAR)

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_clrTabTextNormal = RGB(255,255,255);
	m_clrTabTextSelected = RGB(0,0,0);
	m_nIdxTabShapeHover = 1;
	m_nIdxTabShapePressed = 2;
	m_nIdxTabShapeSelected = 3;
	m_nIdxTabShapeSelectedHover = 4;
	m_arrSizeTabShape[__ETSOI_TOP].cx
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cx
		= m_arrSizeTabShape[__ETSOI_LEFT].cy
		= m_arrSizeTabShape[__ETSOI_RIGHT].cy
		= 57;
	m_arrSizeTabShape[__ETSOI_TOP].cy
		= m_arrSizeTabShape[__ETSOI_BOTTOM].cy
		= m_arrSizeTabShape[__ETSOI_LEFT].cx
		= m_arrSizeTabShape[__ETSOI_RIGHT].cx
		= 24;
	m_arrRectTabShapePadding[__ETSOI_TOP].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_BOTTOM].SetRect( 6, 3, 6, 3 );
	m_arrRectTabShapePadding[__ETSOI_LEFT].SetRect( 3, 6, 3, 6 );
	m_arrRectTabShapePadding[__ETSOI_RIGHT].SetRect( 3, 6, 3, 6 );

	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SHAPE_ARR_OBSIDIAN )
			)
		);
	VERIFY( m_arrBmpTabShapeNormal[__ETSOI_TOP].Make32() );
	m_arrBmpTabShapeNormal[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			180,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			270,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeNormal[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeNormal[__ETSOI_TOP],
			90,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SHAPE_ARR_OBSIDIAN_SEL_AREA )
			)
		);
	VERIFY( m_arrBmpTabShapeSelArea[__ETSOI_TOP].Make32() );
	m_arrBmpTabShapeSelArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			180,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			270,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabShapeSelArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabShapeSelArea[__ETSOI_TOP],
			90,
			5,
			m_arrSizeTabShape[__ETSOI_TOP].cx,
			m_arrSizeTabShape[__ETSOI_TOP].cy,
			false,
			false
			)
		);

	m_arrRectTabAreaPadding[__ETSOI_TOP].SetRect( 4, 4, 4, 4 );
	m_arrRectTabAreaPadding[__ETSOI_BOTTOM].SetRect( 4, 4, 4, 4 );
	m_arrRectTabAreaPadding[__ETSOI_LEFT].SetRect( 4, 4, 4, 4 );
	m_arrRectTabAreaPadding[__ETSOI_RIGHT].SetRect( 4, 4, 4, 4 );
	m_arrTabAreaMargins[__ETSOI_TOP] = 1;
	m_arrTabAreaMargins[__ETSOI_BOTTOM] = 1;
	m_arrTabAreaMargins[__ETSOI_LEFT] = 1;
	m_arrTabAreaMargins[__ETSOI_RIGHT] = 1;
	VERIFY(
		m_arrBmpTabArea[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_AREA_BK_OBSIDIAN )
			)
		);
	VERIFY( m_arrBmpTabArea[__ETSOI_TOP].Make32() );
CSize _sizeTabArea = m_arrBmpTabArea[__ETSOI_TOP].GetSize();
	m_arrBmpTabArea[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabArea[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			180,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			270,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabArea[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabArea[__ETSOI_TOP],
			90,
			1,
			_sizeTabArea.cx,
			_sizeTabArea.cy,
			false,
			false
			)
		);

	m_arrSizeTabSeparator[__ETSOI_TOP].cx
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cx
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cy
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cy
		= 1;
	m_arrSizeTabSeparator[__ETSOI_TOP].cy
		= m_arrSizeTabSeparator[__ETSOI_BOTTOM].cy
		= m_arrSizeTabSeparator[__ETSOI_LEFT].cx
		= m_arrSizeTabSeparator[__ETSOI_RIGHT].cx
		= 24;
	m_arrRectTabSeparatorPadding[__ETSOI_TOP].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_BOTTOM].SetRect( 0, 2, 0, 2 );
	m_arrRectTabSeparatorPadding[__ETSOI_LEFT].SetRect( 2, 0, 2, 0 );
	m_arrRectTabSeparatorPadding[__ETSOI_RIGHT].SetRect( 2, 0, 2, 0 );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_TOP].LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_TAB_SEPARATOR_OBSIDIAN )
			)
		);
	VERIFY( m_arrBmpTabSeparator[__ETSOI_TOP].Make32() );
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultiplyRGBChannels();
	m_arrBmpTabSeparator[__ETSOI_TOP].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_BOTTOM].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			180,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_LEFT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			270,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpTabSeparator[__ETSOI_RIGHT].CreateRotated9xStack(
			m_arrBmpTabSeparator[__ETSOI_TOP],
			90,
			1,
			m_arrSizeTabSeparator[__ETSOI_TOP].cx,
			m_arrSizeTabSeparator[__ETSOI_TOP].cy,
			false,
			false
			)
		);
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

	VERIFY(
		m_bmpArrStatesCheckBox.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_CHECK_BOX_R2_OBSIDIAN )
			)
		);
	VERIFY(
		m_bmpArrStatesRadioButton.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_RADIO_BUTTON_R2 )
			)
		);

	m_clrMenuItemLeftAreaMarginL = RGB(197,197,197);
	m_clrMenuItemLeftAreaMarginR = RGB(245,245,245);
	VERIFY(
		m_bmpMenuItemLargeLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_LARGE_LEFT )
			)
		);
		m_bmpMenuItemLargeLeft.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemLargeRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_LARGE_RIGHT )
			)
		);
		m_bmpMenuItemLargeRight.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemSmallLeft.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_SMALL_LEFT )
			)
		);
		m_bmpMenuItemSmallLeft.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuItemSmallRight.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_R2_SMALL_RIGHT )
			)
		);
		m_bmpMenuItemSmallRight.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpMenuArrow.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_2007_MENU_ITEM_ARROW )
			)
		);
	m_sizeMenuCheckAreaChecked.cx = 16;
	m_sizeMenuCheckAreaChecked.cy = 16;
	m_sizeMenuCheckAreaUnchecked.cx = 20;
	m_sizeMenuCheckAreaUnchecked.cy = 20;
	m_arrRectMenuCheckAreaCheckedPadding[0].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaCheckedPadding[1].SetRect( 1, 1, 1, 1 );
	m_arrRectMenuCheckAreaUncheckedPadding[0].SetRect( 2, 2, 2, 2 );
	m_arrRectMenuCheckAreaUncheckedPadding[1].SetRect( 2, 2, 2, 2 );
	VERIFY( m_bmpMenuCheckAreaChecked.LoadBMP_Resource(   MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_CHECKED_R2   ) ) );
	VERIFY( m_bmpMenuCheckAreaUnchecked.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_MENU_CHECK_AREA_UNCHECKED_R2 ) ) );

	VERIFY( m_bmpArrComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_2007_COMBO_BOX_BUTTON_R2_OBSIDIAN ) ) );
	m_arrClrComboBoxBorder[0] = RGB(137,137,137);
	m_arrClrComboBoxBorder[1] = RGB(137,137,137);
	m_arrClrComboBoxBorder[2] = RGB(137,137,137);
	m_arrClrComboBoxBorder[3] = RGB(137,137,137);

CRect SbSkinDataPaddingH( 5, 3, 5, 3 ), SbSkinDataPaddingV( 3, 5, 3, 5 );
CRect rcEntirePaddingRH( 0, 2, 0, 2 ), rcEntirePaddingRV( 2, 0, 2, 0 );
CRect rcEntirePaddingCH( 1, 1, 1, 1 ), rcEntirePaddingCV( 1, 1, 1, 1 );
	m_SbSkinDataT_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_TOP
		);
	m_SbSkinDataB_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_BOTTOM
		);
	m_SbSkinDataL_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_LEFT
		);
	m_SbSkinDataR_Zoom.Load2007_Zoom(
		IDB_EXT_2007_ZS_PLUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_MINUS_R2_OBSIDIAN, IDB_EXT_2007_ZS_THUMB_R2_OBSIDIAN,
		RGB(204,204,204), RGB(37,37,37), RGB(148,149,151), RGB(68,69,71), AFX_IDW_DOCKBAR_RIGHT
		);
	m_SbSkinDataH_Light.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_HORZ_OBSIDIAN,
		15,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_HORZ,
		8,
		SbSkinDataPaddingH,
		COLORREF(-1L), // RGB(64,64,64),
		COLORREF(-1L), // RGB(91,98,115),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_OBSIDIAN_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_OBSIDIAN_LIGHT,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataV_Light.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_VERT_OBSIDIAN,
		21,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_VERT,
		8,
		SbSkinDataPaddingV,
		COLORREF(-1L), // RGB(64,64,64),
		COLORREF(-1L), // RGB(91,98,115),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_OBSIDIAN_LIGHT,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_OBSIDIAN_LIGHT,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);

	m_SbSkinDataH_Dark.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_HORZ_OBSIDIAN,
		15,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_HORZ,
		8,
		SbSkinDataPaddingH,
		COLORREF(-1L), // RGB(64,64,64),
		COLORREF(-1L), // RGB(91,98,115),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		true,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_OBSIDIAN_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_OBSIDIAN_DARK,
		rcEntirePaddingRH,
		rcEntirePaddingCH
		);
	m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_HOT)][INT(__ESBMHT_GLYPH_ARROW_UP)] =
		m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_UP)];
	m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_GLYPH_ARROW_UP)] =
		m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_UP)];
	m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_UP)].
		AdjustHLS( COLORREF(-1L), RGB(0,0,0), 0.0, 0.75, -1.0 );
	m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_HOT)][INT(__ESBMHT_GLYPH_ARROW_DOWN)] =
		m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_DOWN)];
	m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_GLYPH_ARROW_DOWN)] =
		m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_DOWN)];
	m_SbSkinDataH_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_DOWN)].
		AdjustHLS( COLORREF(-1L), RGB(0,0,0), 0.0, 0.75, -1.0 );

	m_SbSkinDataV_Dark.Load2007_R2(
		IDB_EXT_2007_SCROLL_BAR_STACK_BUTTONS_R2_VERT_OBSIDIAN,
		21,
		IDB_EXT_2007_SCROLL_BAR_STACK_GRIPPER_R2_VERT,
		8,
		SbSkinDataPaddingV,
		COLORREF(-1L), // RGB(64,64,64),
		COLORREF(-1L), // RGB(91,98,115),
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2,
		IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2,
		false,
		IDB_EXT_2007_SCROLL_BAR_ENTIRE_BK_R2_OBSIDIAN_DARK,
		IDB_EXT_2007_SCROLL_BAR_PAGE_BK_R2_OBSIDIAN_DARK,
		rcEntirePaddingRV,
		rcEntirePaddingCV
		);
	m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_HOT)][INT(__ESBMHT_GLYPH_ARROW_UP)] =
		m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_UP)];
	m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_GLYPH_ARROW_UP)] =
		m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_UP)];
	m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_UP)].
		AdjustHLS( COLORREF(-1L), RGB(0,0,0), 0.0, 0.75, -1.0 );
	m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_HOT)][INT(__ESBMHT_GLYPH_ARROW_DOWN)] =
		m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_DOWN)];
	m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_NORMAL)][INT(__ESBMHT_GLYPH_ARROW_DOWN)] =
		m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_DOWN)];
	m_SbSkinDataV_Dark.m_arrPartBmp[INT(__ESBSPT_COLD)][INT(__ESBMHT_GLYPH_ARROW_DOWN)].
		AdjustHLS( COLORREF(-1L), RGB(0,0,0), 0.0, 0.75, -1.0 );

	m_clrGridHeaderBkTop     = RGB(253,253,253);
	m_clrGridHeaderBkBottom  = RGB(212,215,220);
	m_clrGridHeaderSeparator = RGB(145,153,164);
	m_clrGridHeaderSortArrow = RGB(145,153,164);
	m_clrGridHeaderBorder    = RGB(145,153,164);

	m_clrRgHeaderBkTop     = RGB(253,253,253);
	m_clrRgHeaderBkBottom  = RGB(212,215,220);
	m_clrRgHeaderSeparator = RGB(145,153,164);
	m_clrRgHeaderSortArrow = RGB(145,153,164);
	m_clrRgHeaderText      = RGB(0,0,0);
	m_clrRgHeaderBorder    = RGB(76,83,92);
#if (!defined __EXT_MFC_NO_REPORTGRIDWND)
	m_clrRgGroupAreaBk     = RGB(235,235,235);
	m_clrRgGroupAreaText   = RGB(70,70,70);
#endif // (!defined __EXT_MFC_NO_REPORTGRIDWND)

//  		m_nTbbLightWeightSimpleGlyphHeightV = 20;
//  		m_nTbbLightWeightSDDLeftGlyphHeightV = 23;
// 		m_nTbbLightWeightSDDRightGlyphHeightV = 10;
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_SIMPLE )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_LEFT_PART )
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightH.LoadBMP_Resource(
// 				MAKEINTRESOURCE(IDB_EXT_2007_TBB_LIGHTWEIGHT_R2_RIGHT_PART )
// 				)
// 			);
// 	// 	m_arrBmpTbbLightWeightSimpleH.PreMultipliedRGBChannelsSet( true );
// 	// 	m_arrBmpTbbLightWeightSDDLeftH.PreMultipliedRGBChannelsSet( true );
// 	// 	m_arrBmpTbbLightWeightSDDRightH.PreMultipliedRGBChannelsSet( true );
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSimpleV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSimpleH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSimpleH.GetSize().cx,
// 				m_nTbbLightWeightSimpleGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDLeftV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDLeftH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDLeftH.GetSize().cx,
// 				m_nTbbLightWeightSDDLeftGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);
// 		VERIFY(
// 			m_arrBmpTbbLightWeightSDDRightV.CreateRotated9xStack(
// 				m_arrBmpTbbLightWeightSDDRightH,
// 				90,
// 				INT(__EPBGT_GLYPH_COUNT),
// 				m_arrBmpTbbLightWeightSDDRightH.GetSize().cx,
// 				m_nTbbLightWeightSDDRightGlyphHeightH,
// 				false,
// 				false
// 				)
// 			);

 	m_nPushBtnSimpleGlyphHeightV = 20;
 	m_nPushBtnSDDLeftGlyphHeightV = 23;
	m_nPushBtnSDDRightGlyphHeightV = 10;
	VERIFY(
		m_arrBmpPushBtnSimpleH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_OBSIDIAN_SIMPLE )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_OBSIDIAN_LEFT_PART )
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_BUTTON_R2_OBSIDIAN_RIGHT_PART )
			)
		);
// 	m_arrBmpPushBtnSimpleH.PreMultipliedRGBChannelsSet( true );
// 	m_arrBmpPushBtnSDDLeftH.PreMultipliedRGBChannelsSet( true );
// 	m_arrBmpPushBtnSDDRightH.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_arrBmpPushBtnSimpleV.CreateRotated9xStack(
			m_arrBmpPushBtnSimpleH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSimpleH.GetSize().cx,
			m_nPushBtnSimpleGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDLeftV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDLeftH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDLeftH.GetSize().cx,
			m_nPushBtnSDDLeftGlyphHeightH,
			false,
			false
			)
		);
	VERIFY(
		m_arrBmpPushBtnSDDRightV.CreateRotated9xStack(
			m_arrBmpPushBtnSDDRightH,
			90,
			INT(__EPBGT_GLYPH_COUNT),
			m_arrBmpPushBtnSDDRightH.GetSize().cx,
			m_nPushBtnSDDRightGlyphHeightH,
			false,
			false
			)
		);

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	m_nQatbAdditionalSpaceAtRightDWM = 30;

	m_clrContractedMargin1 = RGB(98,98,98);
	m_clrContractedMargin2 = RGB(79,79,79);
	m_nContractedMarginHeight = 2;
	m_bRibbonGroupCaptionAtTop = false;
	m_bRibbonGroupCaptionAreaHasPadding = true;
	m_nRibbonGroupCaptionAreaHeightExpanded = 16;
	m_nRibbonGroupCaptionAreaHeightCollapsed = 16;
	m_nRibbonCaptionPartHeight = 17;
	m_nRibbonGroupIconBkVertOffset = 2;
	m_clrRibbonComboBackGroundNormal = RGB(232,232,232);
	m_nRibbonTabIntersectionHeight = 1;

	m_clrRibbonButtonDisabled = RGB(128,128,128);
	m_clrRibbonGroupCaptionTextExpanded = RGB( 250, 250, 250 );
	m_nRibbonGroupCaptionTextDF
		= m_nRibbonGroupCaptionTextShadowDF
		= DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;

	m_rcRibbonPageBkPadding.SetRect( 5, 19, 5, 10 );
	VERIFY(
		m_bmpRibbonPageBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_PAGE_BK_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonPageBk.PreMultipliedRGBChannelsSet( true );
	
	m_rcRibbonGroupPaddingBkExpanded.SetRect( 4, 4, 4, 4 );
	VERIFY(
		m_bmpRibbonGroupBkExpanded[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_NORMAL_BK_R2_OBSIDIAN)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkExpanded[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_EXPANDED_HOVER_BK_R2_OBSIDIAN)
			)
		);
	
	m_rcRibbonGroupPaddingBkCollapsed.SetRect( 4, 18, 4, 4 );
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[0].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_NORMAL_BK_R2_OBSIDIAN)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[1].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_HOVER_BK_R2_OBSIDIAN)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[2].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_PRESSED_BK_R2_OBSIDIAN)
			)
		);
	VERIFY(
		m_bmpRibbonGroupBkCollapsed[3].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_GROUP_COLLAPSED_SELECTED_BK_R2)
			)
		);
	
//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[0].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_NORMAL_BK_R2_OBSIDIAN)
//			)
//		);
//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[1].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_HOVER_BK_R2_OBSIDIAN)
//			)
//		);
//	VERIFY(
//		m_bmpRibbonIconBkCollapsed[2].LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_ICON_COLLAPSED_PRESSED_BK_R2_OBSIDIAN)
//			)
//		);
INT nBkIndex, nBkCount;
	nBkCount = sizeof( m_bmpRibbonGroupBkExpanded ) / sizeof( m_bmpRibbonGroupBkExpanded[0] );
	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	{
		m_bmpRibbonGroupBkExpanded[nBkIndex].Make32();
		m_bmpRibbonGroupBkExpanded[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	nBkCount = sizeof( m_bmpRibbonGroupBkCollapsed ) / sizeof( m_bmpRibbonGroupBkCollapsed[0] );
	for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )
	{
		m_bmpRibbonGroupBkCollapsed[nBkIndex].Make32();
		m_bmpRibbonGroupBkCollapsed[nBkIndex].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	} // for( nBkIndex = 0; nBkIndex < nBkCount; nBkIndex ++ )


	VERIFY(
		m_bmpRibbonIconBkCF.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_COLLAPSED_ICON_FRAME_R2_OBSIDIAN)
			)
		);
 	m_bmpRibbonIconBkCF.PreMultiplyRGBChannels( false );
// 	m_bmpRibbonIconBkCF.PreMultipliedRGBChannelsSet( true );

	m_nRibbonSeparatorDrawModeH = INT( CExtBitmap::__EDM_STRETCH );
	m_nRibbonSeparatorDrawModeV = INT( CExtBitmap::__EDM_STRETCH );
	m_rcRibbonSeparatorPaddingH.SetRect( 6, 0, 6, 0 );
	VERIFY(
		m_bmpRibbonSeparatorH.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_H_R2_OBSIDIAN)
			)
		);
	VERIFY( m_bmpRibbonSeparatorH.Make32() );
	m_bmpRibbonSeparatorH.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	m_rcRibbonSeparatorPaddingV.SetRect( 0, 6, 0, 6 );
	VERIFY(
		m_bmpRibbonSeparatorV.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_SEPARATOR_V_R2_OBSIDIAN)
			)
		);
	VERIFY( m_bmpRibbonSeparatorV.Make32() );
	m_bmpRibbonSeparatorV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_nRibbonHeightOfQACEB = 22;
	m_nIdxRibbonQACEB_Selected = 3;
	VERIFY(
		m_bmpArrRibbonQACEB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_QATB_CEB_R2_OBSIDIAN)
			)
		);
	m_bmpArrRibbonQACEB.PreMultiplyRGBChannels();
	m_bmpArrRibbonQACEB.PreMultipliedRGBChannelsSet( true );

	m_clrRibbon_EmbeddedCaptionTextLeft = RGB(255,255,255);
	m_clrRibbon_EmbeddedCaptionTextRight = RGB(180,216,255);
	m_bRibbonFileButtonItegrationSupported = true;
INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
	m_rcRibbonNcCornerLeftCP.SetRect( 22, 8, 2, 2 );
	m_rcRibbonNcCornerRightCP.SetRect( 2, 8, 22, 2 );

	VERIFY(
		m_bmpRibbonNcCornerActiveLeft.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_LEFT_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonNcCornerActiveLeft.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerActiveLeft.Make32();
// 	m_bmpRibbonNcCornerActiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerActiveLeft.Scale(
		m_bmpRibbonNcCornerActiveLeft.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerInactiveLeft.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_LEFT_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonNcCornerInactiveLeft.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerInactiveLeft.Make32();
// 	m_bmpRibbonNcCornerInactiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerInactiveLeft.Scale(
		m_bmpRibbonNcCornerInactiveLeft.GetSize().cx,
		nCaptionHeightInactive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerActiveRight.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_RIGHT_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonNcCornerActiveRight.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerActiveRight.Make32();
// 	m_bmpRibbonNcCornerActiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerActiveRight.Scale(
		m_bmpRibbonNcCornerActiveRight.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerInactiveRight.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_RIGHT_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonNcCornerInactiveRight.PreMultipliedRGBChannelsSet( true );
// 	m_bmpRibbonNcCornerInactiveRight.Make32();
// 	m_bmpRibbonNcCornerInactiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
	m_bmpRibbonNcCornerInactiveRight.Scale(
		m_bmpRibbonNcCornerInactiveRight.GetSize().cx,
		nCaptionHeightInactive,
		_fBox
		);

	VERIFY(
		m_bmpRibbonNcCornerHT.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_HT_MASK_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonNcCornerHT.Make32();
	m_bmpRibbonNcCornerHT.Scale(
		m_bmpRibbonNcCornerHT.GetSize().cx,
		nCaptionHeightActive,
		_fBox
		);

	VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_R2_OBSIDIAN) ) );
	//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );

	m_rcPaddingRibbonQuickAccessBarBkAtTheBottom.SetRect( 3, 3, 3, 3 );
	VERIFY( m_bmpRibbonQuickAccessBarBkAtTheBottom.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_QATB_BK_R2_OBSIDIAN) ) );

	m_nRibbonHeightOfOneDLB = 14;
	m_nDlbIdxDisabled = 3;
	m_nDlbIdxNormal = 0;
	m_nDlbIdxHover = 1;
	m_nDlbIdxPressed = 2;
	rcRibbonContentPaddingDLB.SetRect( 2, 2, 2, 2 );
	VERIFY( m_arrBmpRibbonDLB.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_GCB_R2_OBSIDIAN) ) );
	m_arrBmpRibbonDLB.PreMultiplyRGBChannels();
	m_arrBmpRibbonDLB.PreMultipliedRGBChannelsSet( true );

	m_clrRibbonGalleryInplaceBorderNormal = RGB(172,172,172);
	m_clrRibbonGalleryInplaceBorderHover  = RGB(172,172,172);
	m_clrRibbonGalleryInplaceBkgndNormal  = RGB(218,226,226);
	m_clrRibbonGalleryInplaceBkgndHover   = RGB(247,247,247);

	m_rcRibbonGalleryScrollFill = RGB(218,226,226);
	m_rcRibbonGalleryScrollButtonPadding.SetRect( 4, 4, 4, 4 );
	m_nHeightRibbonGalleryScrollButton = -1;
	m_nIndexRibbonGalleryScrollButtonDisabled = 4;
	m_nIndexRibbonGalleryScrollButtonNormal = 1;
	m_nIndexRibbonGalleryScrollButtonHover = 2;
	m_nIndexRibbonGalleryScrollButtonPressed = 3;
	VERIFY( m_bmpArrRibbonGalleryScrollButtonDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_DOWN_R2_OBSIDIAN) ) );
	VERIFY( m_bmpArrRibbonGalleryScrollButtonUp.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_UP_R2_OBSIDIAN) ) );
	VERIFY( m_bmpArrRibbonGalleryScrollButtonMenu.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RGIBTN_MENU_R2_OBSIDIAN) ) );
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	VERIFY( m_bmpRibbonDDA.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_DDA_R2_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonDDA.Make32() );
	m_bmpRibbonDDA.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpArrRibbonComboBoxDropDown.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_COMBO_BOX_BUTTON_R2_OBSIDIAN) ) );

	// tool buttons 2007
	m_arrIndicesButtonTS[INT(__E07BI_NORMAL)]	= 0;
	m_arrIndicesButtonTS[INT(__E07BI_HOVER)]	= 3;
	m_arrIndicesButtonTS[INT(__E07BI_PRESSED)]	= 2;
	m_arrIndicesButtonTS[INT(__E07BI_HDD)]		= 3;
	m_arrIndicesButtonTS[INT(__E07BI_SEL_T)]	= 1;
	m_arrIndicesButtonTS[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonSS_Left[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Left[INT(__E07BI_PRESSED)]			= 1;
	m_arrIndicesButtonSS_Left[INT(__E07BI_HDD)]				= 2;
	m_arrIndicesButtonSS_Left[INT(__E07BI_SEL_T)]			= 5;
	m_arrIndicesButtonSS_Left[INT(__E07BI_INDETERMINATE)]	= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_NORMAL)]			= -1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HOVER)]			= 0;
	m_arrIndicesButtonSS_Right[INT(__E07BI_PRESSED)]		= 1;
	m_arrIndicesButtonSS_Right[INT(__E07BI_HDD)]			= 2;
	m_arrIndicesButtonSS_Right[INT(__E07BI_SEL_T)]			= 4;
	m_arrIndicesButtonSS_Right[INT(__E07BI_INDETERMINATE)]	= 3;

	m_arrIndicesButtonLSM[INT(__E07BI_NORMAL)]	= -1;
	m_arrIndicesButtonLSM[INT(__E07BI_HOVER)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BI_PRESSED)]	= 1;
	m_arrIndicesButtonLSM[INT(__E07BI_HDD)]		= 2;
	m_arrIndicesButtonLSM[INT(__E07BI_SEL_T)]	= 0;
	m_arrIndicesButtonLSM[INT(__E07BIX_INDETERMINATE)]	= 0;

//	m_arrIndicesButtonLSB[INT(__E07BI_NORMAL)]	= -1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HOVER)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_PRESSED)]	= 1;
//	m_arrIndicesButtonLSB[INT(__E07BI_HDD)]		= 2;
//	m_arrIndicesButtonLSB[INT(__E07BI_SEL_T)]	= 0;
//	m_arrIndicesButtonLSB[INT(__E07BI_INDETERMINATE)]	= 0;

	m_arrIndicesButtonLSXM[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXM[INT(__E07BIX_HOVER2)]			= 5;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXM[INT(__E07BIX_PRESSED3)]			= 3;
	m_arrIndicesButtonLSXM[INT(__E07BIX_INDETERMINATE)]		= 4;
	m_arrIndicesButtonLSXM[INT(__E07BIX_SELECTED)]			= 5;

	m_arrIndicesButtonLSXB[INT(__E07BIX_NORMAL)]			= -1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER)]				= 0;
	m_arrIndicesButtonLSXB[INT(__E07BIX_HOVER2)]			= 4;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED)]			= 1;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED2)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_PRESSED3)]			= 2;
	m_arrIndicesButtonLSXB[INT(__E07BIX_INDETERMINATE)]		= 3;
	m_arrIndicesButtonLSXB[INT(__E07BIX_SELECTED)]			= 4;

	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_SOLID)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SOLID_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_SOLID)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_LEFT_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_MIDDLE_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_MIDDLE)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_RIGHT_R2_OBSIDIAN)
			)
		);
	m_bmpArrButtonTS[INT(__EBTSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_LEFT_R2)
			)
		);
	m_bmpArrButtonSS_DD[INT(__EBSSA_LEFT)].PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_SMALL_RIGHT_R2)
			)
		);
	m_bmpArrButtonSS_DD[INT(__EBSSA_RIGHT)].PreMultipliedRGBChannelsSet( true );

	m_bmpArrButtonSS_simple = m_bmpArrButtonSS_DD[ INT(__EBSSA_LEFT) ];
	if( ! m_bmpArrButtonSS_simple.IsEmpty() )
	{
		CSize _sizeBmp = m_bmpArrButtonSS_simple.GetSize();
		INT nY = 0, nXRange = _sizeBmp.cx / 2;
		for( ; nY < _sizeBmp.cy; nY ++ )
		{
			INT nXSrc = nXRange - 1, nXDst = _sizeBmp.cx - nXRange;
			for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
			{
				RGBQUAD _pixel;
				VERIFY( m_bmpArrButtonSS_simple.GetPixel( nXSrc, nY, _pixel ) );
				VERIFY( m_bmpArrButtonSS_simple.SetPixel( nXDst, nY, _pixel ) );
			} // for( ; nXDst < _sizeBmp.cx; nXDst ++, nXSrc -- )
		} // for( ; nY < _sizeBmp.cy; nY ++ )
	} // if( m_bmpArrButtonSS_simple.IsEmpty() )

	VERIFY(
		m_bmpArrButtonLSM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_ALL_R2) // IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R2
			)
		);
//	m_bmpArrButtonLSM.PreMultipliedRGBChannelsSet( true );
//	VERIFY(
//		m_bmpArrButtonLSB.LoadBMP_Resource(
//			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R2)
//			)
//		);
//	m_bmpArrButtonLSB.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXM.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_TOP_R2)
			)
		);
	m_bmpArrButtonLSXM.PreMultipliedRGBChannelsSet( true );
	VERIFY(
		m_bmpArrButtonLSXB.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_BOTTOM_R2)
			)
		);
	m_bmpArrButtonLSXB.PreMultipliedRGBChannelsSet( true );

	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_HOVER_R2)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_TB_SEPARATOR_PRESSED_R2)
			)
		);
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].Make32();
	m_bmpToolBtnSeparator[INT(__ETBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_HOVER_R2)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_HOVER)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_BTN_PART_LARGE_SEPARATOR_PRESSED_R2)
			)
		);
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].Make32();
	m_bmpLargeBtnSeparator[INT(__ELBS_PRESSED)].AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpRibbonMenuResizingMarginHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_HV_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingMarginV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRB_V_OBSIDIAN) ) );
	VERIFY( m_bmpRibbonMenuResizingGripperHV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_HV_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperHV.Make32();
	m_bmpRibbonMenuResizingGripperHV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY( m_bmpRibbonMenuResizingGripperV.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_MRG_V_OBSIDIAN) ) );
	m_bmpRibbonMenuResizingGripperV.Make32();
	m_bmpRibbonMenuResizingGripperV.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrRibbonModeMenuTextNormal = RGB(0,0,0);
	VERIFY(
		m_bmpRibbonModeMenuBorder.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_BORDER_R2)
			)
		);
	m_bmpRibbonModeMenuBorder.Make32();
	m_bmpRibbonModeMenuBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	m_clrMenuCaptionText = RGB(20,20,90);
	m_rcMenuCaptionBmpPadding.SetRect( 0, 2, 0, 2 );
	VERIFY(
		m_bmpMenuCaptionBk.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_MENU_CAPTION_BK_R2_OBSIDIAN)
			)
		);

	m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 12, 6, 29 );
	VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RM_BIG_BORDER_R2_OBSIDIAN) ) );
	m_bmpRibbonFileMenuBigBorder.Make32();
	m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	
	m_rcPaddingRibbonFileMenuOptionsButton.SetRect( 2, 2, 2, 2 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonCold.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_COLD_R2_OBSIDIAN)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonCold.Make32();
	m_bmpRibbonFileMenuOptionsButtonCold.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );
	VERIFY(
		m_bmpRibbonFileMenuOptionsButtonHot.LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_RM_OPTION_HOT_R2)
			)
		);
	m_bmpRibbonFileMenuOptionsButtonHot.Make32();
	m_bmpRibbonFileMenuOptionsButtonHot.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

	VERIFY( m_bmpResizingGripper.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RESIZING_GRIPPER_R2_OBSIDIAN) ) );
	m_bmpResizingGripper.PreMultipliedRGBChannelsSet( true );

	// spin bitmaps
	VERIFY( m_arrBmpSpinArrowDown.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_DOWN_OBSIDIAN) ) );
	VERIFY( m_arrBmpSpinArrowUp.	LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_ARROW_UP_OBSIDIAN) ) );
	VERIFY( m_arrBmpSpinDown.		LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_DOWN_OBSIDIAN) ) );
	VERIFY( m_arrBmpSpinUp.			LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_SPIN_UP_OBSIDIAN) ) );

#if (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
	m_clrShortcutListItemAlternativeText = RGB(255,255,255);
	m_bShortcutListUseDockerBkgnd = true;
#endif // (!defined __EXT_MFC_NO_SHORTCUTLIST_CTRL)
}

CExtPaintManagerOffice2007_R3_Obsidian::CExtPaintManagerOffice2007_R3_Obsidian()
{
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
			m_nQatbAdditionalSpaceAtRightDWM = 0;

// 			INT nCaptionHeightActive = NcFrame_GetCaptionHeight( true, NULL ) + m_rcNcFrameBordersActive.top;
// 			INT nCaptionHeightInactive = NcFrame_GetCaptionHeight( false, NULL ) + m_rcNcFrameBordersInactive.top;
// 			CExtBitmap::Filter _fBox( CExtBitmap::Filter::box );
			m_rcRibbonNcCornerLeftCP.SetRect( 53, 2, 2, 2 );
			m_rcRibbonNcCornerRightCP.SetRect( 2, 2, 42, 2 );

			VERIFY(
				m_bmpRibbonNcCornerDwmLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_DWM_LEFT_R3_OBSIDIAN)
					)
				);
			//m_bmpRibbonNcCornerDwmLeft.PreMultipliedRGBChannelsSet( true );
			VERIFY(
				m_bmpRibbonNcCornerDwmRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_DWM_RIGHT_R3_OBSIDIAN)
					)
				);
			//m_bmpRibbonNcCornerDwmRight.PreMultipliedRGBChannelsSet( true );
							m_bmpRibbonNcCornerDwmLeft.AdjustAlpha( -0.60 );
							m_bmpRibbonNcCornerDwmRight.AdjustAlpha( -0.60 );

			VERIFY(
				m_bmpRibbonNcCornerActiveLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_LEFT_R3_OBSIDIAN)
					)
				);
// 			m_bmpRibbonNcCornerActiveLeft.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerActiveLeft.Scale(
// 				m_bmpRibbonNcCornerActiveLeft.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerActiveLeft.Make32() );
			m_bmpRibbonNcCornerActiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerInactiveLeft.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_LEFT_R3_OBSIDIAN)
					)
				);
// 			m_bmpRibbonNcCornerInactiveLeft.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerInactiveLeft.Scale(
// 				m_bmpRibbonNcCornerInactiveLeft.GetSize().cx,
// 				nCaptionHeightInactive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerInactiveLeft.Make32() );
			m_bmpRibbonNcCornerInactiveLeft.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerActiveRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_ACTIVE_RIGHT_R3_OBSIDIAN)
					)
				);
// 			m_bmpRibbonNcCornerActiveRight.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerActiveRight.Scale(
// 				m_bmpRibbonNcCornerActiveRight.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerActiveRight.Make32() );
			m_bmpRibbonNcCornerActiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			VERIFY(
				m_bmpRibbonNcCornerInactiveRight.LoadBMP_Resource(
					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_INACTIVE_RIGHT_R3_OBSIDIAN)
					)
				);
// 			m_bmpRibbonNcCornerInactiveRight.PreMultipliedRGBChannelsSet( true );
// 			m_bmpRibbonNcCornerInactiveRight.Scale(
// 				m_bmpRibbonNcCornerInactiveRight.GetSize().cx,
// 				nCaptionHeightInactive,
// 				_fBox
// 				);
			VERIFY( m_bmpRibbonNcCornerInactiveRight.Make32() );
			m_bmpRibbonNcCornerInactiveRight.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

// 			VERIFY(
// 				m_bmpRibbonNcCornerHT.LoadBMP_Resource(
// 					MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_NC_CORNER_HT_MASK_R2_OBSIDIAN)
// 					)
// 				);
// 			m_bmpRibbonNcCornerHT.Make32();
// 			m_bmpRibbonNcCornerHT.Scale(
// 				m_bmpRibbonNcCornerHT.GetSize().cx,
// 				nCaptionHeightActive,
// 				_fBox
// 				);

			m_bmpRibbonNcCornerHT.Empty();

			VERIFY( m_bmpArrRibbonFileButton.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RIBBON_FILE_BUTTON_R3_OBSIDIAN) ) );
			//m_bmpArrRibbonFileButton.PreMultipliedRGBChannelsSet( true );

			m_rcPaddingRibbonFileMenuBigBorder.SetRect( 6, 18, 6, 29 );
			VERIFY( m_bmpRibbonFileMenuBigBorder.LoadBMP_Resource( MAKEINTRESOURCE(IDB_EXT_2007_RM_BIG_BORDER_R3_OBSIDIAN) ) );
			m_bmpRibbonFileMenuBigBorder.Make32();
			m_bmpRibbonFileMenuBigBorder.AlphaColor( RGB(255,0,255), RGB(0,0,0), 0 );

			m_sizeAboveTheRibbonShiftQACEB.cx = 10;
			m_sizeAboveTheRibbonShiftQACEB.cy = 0;

			m_nRibbonFileButtonMenuIntersectionHeight = 20;

#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
}

CExtPaintManagerOffice2007_R2_Obsidian::~CExtPaintManagerOffice2007_R2_Obsidian()
{
}

CExtPaintManagerOffice2007_R3_Obsidian::~CExtPaintManagerOffice2007_R3_Obsidian()
{
}

void CExtPaintManagerOffice2007_Impl::InitTranslatedColors()
{
	CExtPaintManagerOffice2003::InitTranslatedColors();

	m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_LIGHT] = InstallColor( RGB(255,251,214) );
	m_mapColorTranslate[_2003CLR_EXPBTN_HOVER_DARK] = InstallColor( RGB(255,195,115) );
	m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_LIGHT] = InstallColor( RGB(255,219,148) );
	m_mapColorTranslate[_2003CLR_EXPBTN_PRESSED_DARK] = InstallColor( RGB(255,150,82) );
}

void CExtPaintManagerOffice2007_R1::InitTranslatedColors()
{
	CExtPaintManagerOffice2007_Impl::InitTranslatedColors();

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT] = InstallColor( RGB(240,241,242) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK] = InstallColor( RGB(221,224,227) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK] = InstallColor( RGB(232,234,236) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = InstallColor( RGB(199,203,209) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223,226,229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225,227,230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(240,241,242) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(189,194,201) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB(119,130,153) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(51,51,51) );
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(140,140,140) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(140,140,140) );

	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(178, 183, 191) );
	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(76, 83, 92) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(242, 242, 242) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(224, 224, 224) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(186, 186, 186) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(83, 96, 125) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(130,135,146) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(130,135,146) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(239,239,239) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(239,239,239) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(239,239,239) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(242,242,242) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(224, 224, 224) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(186, 186, 186) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(239,239,239) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(239,239,239) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255,247,206) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255,219,115) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255,150,57) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255,186,90) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(255,150,57) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255,186,90) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(83,96,125) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(83,96,125) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(242,242,242) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(186, 186, 186) );

	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = 
		m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( m_clrFillHint );
}

void CExtPaintManagerOffice2007_R2_LunaBlue::InitTranslatedColors()
{
	CExtPaintManagerOffice2007_Impl::InitTranslatedColors();

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT] = InstallColor( RGB(226, 239, 255) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK] = InstallColor( RGB(214, 232, 255) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK] = InstallColor( RGB(227, 239, 255) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = InstallColor( RGB(173, 209, 255) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(216, 233, 255) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(216, 233, 255) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(227, 239, 255) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(175, 210, 255) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB(101, 147, 207) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(21, 66, 139) );
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(101,147,207) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(101,147,207) );

	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(215, 232, 255) );
	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(111, 157, 217) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(227, 239, 255) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(227, 239, 255) );
 	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(167, 205, 255) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(111, 157, 217) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(111,157,217) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(154,198,255) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(233, 238, 238) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(233, 238, 238) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(233, 238, 238) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(215, 227, 234) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(215, 227, 234) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(215, 227, 234) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(227, 239, 254) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(131, 176, 236) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(252, 151, 61) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255, 184, 94) );

	m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( RGB(255, 231, 162) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(101, 147, 207) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(255, 189, 105) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(231,239,255) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(140,182,239) );

	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R] = InstallColor( RGB(194, 220, 255) );
	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F] = InstallColor( RGB(194, 220, 255) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = 
		m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( RGB(191, 219, 255) );
}

void CExtPaintManagerOffice2007_R2_Silver::InitTranslatedColors()
{
	CExtPaintManagerOffice2007_Impl::InitTranslatedColors();

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT] = InstallColor( RGB(243, 245, 245) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK] = InstallColor( RGB(213, 219, 231) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK] = InstallColor( RGB(231, 234, 238) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = InstallColor( RGB(197, 199, 199) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223, 226, 229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225, 227, 230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(246, 247, 248) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(218, 223, 231) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB(111, 112, 116) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(21, 66, 139) );
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(169,177,184) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(169,177,184) );

 	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(179, 178, 200) );
 	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(118, 116, 146) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(243, 244, 250) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(225, 226, 236) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(134, 130, 166) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(124, 124, 148) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255,255,255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(84, 84, 117) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(110, 109, 143) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(239, 239, 239) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(239, 239, 239) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(239, 239, 239) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(215, 215, 226) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(184, 185, 202) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(128, 126, 158) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(232, 233, 241) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(172, 170, 194) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(252, 151, 61) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255, 184, 94) );

	m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( RGB(255, 238, 194) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(124, 124, 148) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(255, 189, 105) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(249, 249, 255) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(159, 157, 185) );

	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R] = InstallColor( RGB(219, 218, 228) );
	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F] = InstallColor( RGB(219, 218, 228) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = InstallColor( RGB(243, 243, 247) );
	m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( RGB(215, 215, 229) );
}

void CExtPaintManagerOffice2007_R2_Obsidian::InitTranslatedColors()
{
	CExtPaintManagerOffice2007_Impl::InitTranslatedColors();

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT] = InstallColor( RGB(240, 241, 242) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK] = InstallColor( RGB(221, 224, 227) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK] = InstallColor( RGB(232, 234, 236) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = InstallColor( RGB(199, 203, 209) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223, 226, 229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225, 227, 230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(240, 241, 242) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(189, 194, 201) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB(76, 83, 92) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(0, 0, 0) );
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	m_mapColorTranslate[CLR_GROUP_BOX_FRAME] = InstallColor( RGB(132,132,132) );
	m_mapColorTranslate[CLR_WRB_FRAME] = InstallColor( RGB(132,132,132) );

	m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT] = InstallColor( RGB(178, 183, 191) );
	m_mapColorTranslate[_2003CLR_EXPBTN_DARK] = InstallColor( RGB(76, 83, 92) );

	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT] = InstallColor( RGB(205, 208, 213) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE] = InstallColor( RGB(187, 192, 198) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK] = InstallColor( RGB(138, 147, 157) );
	m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE] = InstallColor( RGB(76, 83, 92) );

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT] = InstallColor( RGB(255, 255, 255) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK] = InstallColor( RGB(55, 60, 67) );

	m_mapColorTranslate[_2003CLR_SEPARATOR_LIGHT] = InstallColor( RGB(221, 224, 227) );
	m_mapColorTranslate[_2003CLR_SEPARATOR_DARK] = InstallColor( RGB(145, 153, 164) );

	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT] = InstallColor( RGB(239, 239, 239) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE] = InstallColor( RGB(239, 239, 239) );
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT] = InstallColor( RGB(239, 239, 239) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( RGB(210, 213, 218) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( RGB(187, 192, 199) );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT] = InstallColor( RGB(197, 201, 207) );

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP] = InstallColor( RGB(145, 153, 164) );
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM] = InstallColor( RGB(97, 106, 118) );

	m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT] = InstallColor( RGB(255, 245, 204) );
	m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT] = InstallColor( RGB(255, 219, 117) );
	m_mapColorTranslate[_2003CLR_BTN_HP_LEFT] = InstallColor( RGB(252, 151, 61) );
	m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT] = InstallColor( RGB(255, 184, 94) );

	m_mapColorTranslate[CLR_3DFACE_IN] = InstallColor( RGB(255, 231, 162) );

	m_mapColorTranslate[XPCLR_MENU_BORDER] = InstallColor( RGB(145, 153, 164) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER] = InstallColor( RGB(255, 189, 105) );
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]	= m_mapColorTranslate[XPCLR_HILIGHT_BORDER]; 

	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_LIGHT] = InstallColor( RGB(148,154,165) );
	m_mapColorTranslate[_2003CLR_EXPBTN_CIRCLE_DARK] = InstallColor( RGB(99,109,123) );

	m_mapColorTranslate[CLR_TEXT_DISABLED] = InstallColor( RGB(141,141,141) );
	m_mapColorTranslate[COLOR_3DSHADOW] = InstallColor( RGB(141,141,141) );

	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_R] = InstallColor( RGB(115,130,140) );
	m_mapColorTranslate[XPCLR_3DFACE_FLOAT_F] = InstallColor( RGB(115,130,140) );

	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL] = InstallColor( m_arrClrComboBoxBorder[0] );
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED] = InstallColor( m_arrClrComboBoxBorder[3] );

	m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = 
		m_mapColorTranslate[_2003CLR_GRADIENT_DARK] = InstallColor( RGB(83, 83, 83) );
}

#if (!defined __EXT_MFC_NO_RIBBON_BAR)

CSize CExtPaintManager::Ribbon_GetIconSize(
	const CObject * pHelperSrc,
	INT nILV,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
CSize _size( 16, 16 );
	if( nILV < 0 || nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
		_size.cx = _size.cy = 32;
	_size.cx = UiScalingDo( _size.cx, __EUIST_X );
	_size.cy = UiScalingDo( _size.cy, __EUIST_Y );
	return _size;
}

INT CExtPaintManager::Ribbon_GetOuterGroupDistance(
	const CExtBarButton * pTBB,
	bool bDistanceBefore,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	pTBB;
	bDistanceBefore;
	lParam;
	return 1;
}

INT CExtPaintManagerOffice2007_R1::Ribbon_GetOuterGroupDistance(
	const CExtBarButton * pTBB,
	bool bDistanceBefore,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetOuterGroupDistance(
				pTBB,
				bDistanceBefore,
				lParam
				);	
	return 0;
}

bool CExtPaintManager::Ribbon_OptionsPageBackgroundIsDefault() const
{
	ASSERT_VALID( this );
	return false;
}

void CExtPaintManager::Ribbon_DwmAreaAdjust(
	CExtRibbonBar * pRibbonBar,
	CExtUxTheme::__EXT_UX_MARGINS & _margins,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	lParam;
	if( Ribbon_DwmAreaCoversTabs() )
		_margins.cyTopHeight += pRibbonBar->RibbonLayout_GetTabLineHeight();
}

bool CExtPaintManager::Ribbon_DwmAreaCoversTabs() const
{
	ASSERT_VALID( this );
	return false;
}

bool CExtPaintManagerOffice2010_Impl::Ribbon_DwmAreaCoversTabs() const
{
	ASSERT_VALID( this );
	return true;
}

INT CExtPaintManager::Ribbon_GetContractedMarginHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pRibbonPage;
	lParam;
	return 0;
}

INT CExtPaintManagerOffice2007_Impl::Ribbon_GetContractedMarginHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetContractedMarginHeight(
				pRibbonPage,
				lParam
				);	
	return m_nContractedMarginHeight;
}

void CExtPaintManager::Ribbon_PaintContractedMargin(
	CDC & dc,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	pRibbonPage;
	lParam;
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintContractedMargin(
	CDC & dc,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintContractedMargin(
			dc,
			pRibbonPage,
			lParam
			);
		return;
	}

	if( m_clrContractedMargin1 != COLORREF(-1L) )
	{
		CRect rc;
		pRibbonPage->GetClientRect( &rc );
		rc.top = rc.bottom - 1;
		if( dc.RectVisible( &rc ) )
			dc.FillSolidRect( &rc, m_clrContractedMargin1 );
		if( m_clrContractedMargin2 != COLORREF(-1L) )
		{
			rc.OffsetRect( 0, -1 );
			if( dc.RectVisible( &rc ) )
				dc.FillSolidRect( &rc, m_clrContractedMargin2 );
		} // if( m_clrContractedMargin2 != COLORREF(-1L) )
	} // if( m_clrContractedMargin1 != COLORREF(-1L) )
}

INT CExtPaintManager::Ribbon_GetGroupHeight(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	lParam;
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CWindowDC dc( NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
// 			//INT nBasicHeight = 95;
// 			INT nBasicHeight = _TxtM.tmHeight*3 + 56;
// 			INT nRetVal = UiScalingDo( nBasicHeight, __EUIST_Y );
INT nRetVal = _TxtM.tmHeight*3;
	if( g_PaintManager.m_nLPY > 120 )
		nRetVal += UiScalingDo( 62, __EUIST_Y );
	else
		nRetVal += UiScalingDo( 56, __EUIST_Y );
	if( pGroupTBB != NULL )
	{
		ASSERT_VALID( pGroupTBB );
		const CExtRibbonPage * pRibbonPage = pGroupTBB->GetRibbonPage();
		if( pRibbonPage != NULL )
		{
			ASSERT_VALID( pRibbonPage );
			if(		pRibbonPage->m_bHelperPopupMode
				&&	( ! pRibbonPage->m_bHelperAutoHideMode )
				&&	( ! Ribbon_IsPopupGroupWithCaption( (CObject*)pRibbonPage ) )
				)
			{
				INT nCaptionHeight = Ribbon_GroupCaptionGetHeight( NULL );
				nRetVal -= nCaptionHeight;
			}
		} // if( pRibbonPage != NULL )
	} // if( pGroupTBB != NULL )
	return nRetVal;
}

INT CExtPaintManagerNativeXP::Ribbon_GetGroupHeight(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
INT nHeight = CExtPaintManager::Ribbon_GetGroupHeight( pGroupTBB, lParam );
	if( g_PaintManager.m_nLPY > 96 )
		nHeight += 2;
	return nHeight;
}

INT CExtPaintManagerOffice2007_Impl::Ribbon_GetGroupHeight(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GetGroupHeight( pGroupTBB, lParam );	
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CWindowDC dc( NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
// 			//INT nBasicHeight = 92;
// 			INT nBasicHeight = _TxtM.tmHeight*3 + 53;
// 			INT nRetVal = UiScalingDo( nBasicHeight, __EUIST_Y );
INT nRetVal = _TxtM.tmHeight*3;
	if( g_PaintManager.m_nLPY > 120 )
		nRetVal += UiScalingDo( 60, __EUIST_Y );
	else
		nRetVal += UiScalingDo( 54, __EUIST_Y );
	if( pGroupTBB != NULL )
	{
		ASSERT_VALID( pGroupTBB );
		const CExtRibbonPage * pRibbonPage = pGroupTBB->GetRibbonPage();
		if( pRibbonPage != NULL )
		{
			ASSERT_VALID( pRibbonPage );
			if(		pRibbonPage->m_bHelperPopupMode
				&&	( ! pRibbonPage->m_bHelperAutoHideMode )
				&&	( ! Ribbon_IsPopupGroupWithCaption( (CObject*)pRibbonPage ) )
				)
			{
				INT nCaptionHeight = Ribbon_GroupCaptionGetHeight( NULL );
				nRetVal -= nCaptionHeight;
			}
		} // if( pRibbonPage != NULL )
	} // if( pGroupTBB != NULL )
	return nRetVal;
}

INT CExtPaintManagerOffice2010_Impl::Ribbon_GetGroupHeight(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GetGroupHeight( pGroupTBB, lParam );	
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CWindowDC dc( NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
// 				//INT nBasicHeight = 92;
// 				INT nBasicHeight = _TxtM.tmHeight*3 + 48;
// 				INT nRetVal = UiScalingDo( nBasicHeight, __EUIST_Y );
INT nRetVal = _TxtM.tmHeight*3;
	if( g_PaintManager.m_nLPY > 120 )
		nRetVal += UiScalingDo( 48, __EUIST_Y );
	else
		nRetVal += UiScalingDo( 40, __EUIST_Y ) + 8;
	if( pGroupTBB != NULL )
	{
		ASSERT_VALID( pGroupTBB );
		const CExtRibbonPage * pRibbonPage = pGroupTBB->GetRibbonPage();
		if( pRibbonPage != NULL )
		{
			ASSERT_VALID( pRibbonPage );
			if(		pRibbonPage->m_bHelperPopupMode
				&&	( ! pRibbonPage->m_bHelperAutoHideMode )
				&&	( ! Ribbon_IsPopupGroupWithCaption( (CObject*)pRibbonPage ) )
				)
			{
				INT nCaptionHeight = Ribbon_GroupCaptionGetHeight( NULL );
				nRetVal -= nCaptionHeight;
			}
		} // if( pRibbonPage != NULL )
	} // if( pGroupTBB != NULL )
	return nRetVal;
}

INT CExtPaintManagerOffice2007_R1::Ribbon_GetGroupHeight(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GetGroupHeight( pGroupTBB, lParam );	
	lParam;
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CWindowDC dc( NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
// 			//INT nBasicHeight = 93;
// 			INT nBasicHeight = _TxtM.tmHeight*3 + 54;
// 			INT nRetVal = UiScalingDo( nBasicHeight, __EUIST_Y );
INT nRetVal = _TxtM.tmHeight*3;
	if( g_PaintManager.m_nLPY > 120 )
		nRetVal += UiScalingDo( 60, __EUIST_Y );
	else
		nRetVal += UiScalingDo( 54, __EUIST_Y );
	if( pGroupTBB != NULL )
	{
		ASSERT_VALID( pGroupTBB );
		const CExtRibbonPage * pRibbonPage = pGroupTBB->GetRibbonPage();
		if( pRibbonPage != NULL )
		{
			ASSERT_VALID( pRibbonPage );
			if(		pRibbonPage->m_bHelperPopupMode
				&&	( ! pRibbonPage->m_bHelperAutoHideMode )
				&&	( ! Ribbon_IsPopupGroupWithCaption( (CObject*)pRibbonPage ) )
				)
			{
				INT nCaptionHeight = Ribbon_GroupCaptionGetHeight( NULL );
				nRetVal -= nCaptionHeight;
			}
		} // if( pRibbonPage != NULL )
	} // if( pGroupTBB != NULL )
	return nRetVal;
}

INT CExtPaintManager::Ribbon_GetToolGroupExtraOffset(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
//	ASSERT_VALID( pGroupTBB );
	pGroupTBB;
	lParam;
	return -1;
}

INT CExtPaintManagerOffice2007_Impl::Ribbon_GetToolGroupExtraOffset(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
//	ASSERT_VALID( pGroupTBB );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetToolGroupExtraOffset(
				pGroupTBB,
				lParam
				);	
	return 0;
}

INT CExtPaintManagerOffice2007_R1::Ribbon_GetToolGroupExtraOffset(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
//	ASSERT_VALID( pGroupTBB );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetToolGroupExtraOffset(
				pGroupTBB,
				lParam
				);	
	return 0;
}

INT CExtPaintManager::Ribbon_GetToolGroupExtraLineDistance(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
//	ASSERT_VALID( pGroupTBB );
	pGroupTBB;
	lParam;
	return 1;
}

INT CExtPaintManagerOffice2007_Impl::Ribbon_GetToolGroupExtraLineDistance(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
//	ASSERT_VALID( pGroupTBB );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetToolGroupExtraLineDistance(
				pGroupTBB,
				lParam
				);	
	return 1;
}

INT CExtPaintManagerOffice2007_R1::Ribbon_GetToolGroupExtraLineDistance(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
//	ASSERT_VALID( pGroupTBB );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetToolGroupExtraLineDistance(
				pGroupTBB,
				lParam
				);	
	return 0;
}

CRect CExtPaintManager::Ribbon_GetContentPadding(
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	lParam;
	if( pTBB->IsSeparator() )
		return CRect( 1, 1, 1, 1 );
const CExtRibbonButtonGroup * pGroupTBB = DYNAMIC_DOWNCAST( CExtRibbonButtonGroup, pTBB );
	if( pGroupTBB != NULL )
	{
		if( pGroupTBB->ParentButtonGet() == NULL )
			return CRect( 2, 2, 2, 2 );
		if( pGroupTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) ) )
			return CRect( 1, 0, 1, 0 );
		return CRect( 0, 0, 0, 0 );
	}
	if(		pTBB->IsKindOf( RUNTIME_CLASS(CExtRibbonButton) )
		||	pTBB->IsKindOf( RUNTIME_CLASS(CExtBarColorButton) )
		)
	{
		const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
		if( pParentTBB != NULL )
		{
			if( pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) ) )
				return CRect( 0, 0, 0, 0 );
			if( pParentTBB->ParentButtonGet() == NULL )
				return CRect( 2, 0, 2, 0 );
		}
		return CRect( 3, 0, 3, 0 );
	}
	return CRect( 0, 0, 0, 0 );
}

CRect CExtPaintManagerOffice2007_R1::Ribbon_GetContentPadding(
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GetContentPadding( pTBB, lParam );	
	if( pTBB->IsSeparator() )
		return CRect( 1, 1, 1, 1 );
const CExtRibbonButtonGroup * pGroupTBB = DYNAMIC_DOWNCAST( CExtRibbonButtonGroup, pTBB );
	if( pGroupTBB != NULL )
	{
		if( pGroupTBB->ParentButtonGet() == NULL )
			return CRect( 4, 2, 4, 2 );
		if( pGroupTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) ) )
			return CRect( 1, 0, 1, 0 );
		return CRect( 0, 0, 0, 0 );
	}
	if(		pTBB->IsKindOf( RUNTIME_CLASS(CExtRibbonButton) )
		||	pTBB->IsKindOf( RUNTIME_CLASS(CExtBarColorButton) )
		)
	{
		const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
		if(		pParentTBB != NULL
			&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
			)
			return CRect( 0, 0, 0, 0 );
		return CRect( 3, 0, 3, 0 );
	}
	return CRect( 0, 0, 0, 0 );
}

CRect CExtPaintManagerOffice2010_Impl::Ribbon_GetContentPadding(
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	lParam;
	if( pTBB->IsSeparator() )
		return CRect( 1, 1, 1, 1 );
const CExtRibbonButtonGroup * pGroupTBB = DYNAMIC_DOWNCAST( CExtRibbonButtonGroup, pTBB );
	if( pGroupTBB != NULL )
	{
		if( pGroupTBB->ParentButtonGet() == NULL )
			return CRect( 2, 2, 2, 0 );
		if( pGroupTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) ) )
			return CRect( 1, 0, 1, 0 );
		return CRect( 0, 0, 0, 0 );
	}
	if(		pTBB->IsKindOf( RUNTIME_CLASS(CExtRibbonButton) )
		||	pTBB->IsKindOf( RUNTIME_CLASS(CExtBarColorButton) )
		)
	{
		const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
		if( pParentTBB != NULL )
		{
			if( pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) ) )
				return CRect( 0, 0, 0, 0 );
			if( pParentTBB->ParentButtonGet() == NULL )
				return CRect( 2, 0, 2, 0 );
		}
		return CRect( 3, 0, 3, 0 );
	}
	return CRect( 0, 0, 0, 0 );
}


CSize CExtPaintManager::Ribbon_GetDropDownArrowSize(
	CDC & dc,
	INT nILV,
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	dc;
	nILV;
	pTBB;
	lParam;
CSize _size( 10, 6 );
	_size.cx = UiScalingDo( _size.cx, __EUIST_X );
	_size.cy = UiScalingDo( _size.cy, __EUIST_Y );
	return _size;
}

INT CExtPaintManager::Ribbon_GetTextToIconDistance(
	CDC & dc,
	INT nILV,
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	dc;
	pTBB;
	lParam;
INT nTextToIconDistance = 0;
	if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
		nTextToIconDistance = UiScalingDo( 1, __EUIST_Y );
	else
		nTextToIconDistance = UiScalingDo( 2, __EUIST_X );
	return nTextToIconDistance;
}

CSize CExtPaintManager::Ribbon_CalcButtonSize(
	CDC & dc,
	INT nILV,
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( pTBB->IsSeparator() )
		return CSize( 2, 2 );
const CExtRibbonNode * pRibbonNode = pTBB->Ribbon_GetNode();
	if( pRibbonNode == NULL )
		return CSize( 0, 0 );
	ASSERT_VALID( pRibbonNode );
	if( nILV < 0 )
		nILV = pTBB->RibbonILV_Get( 0 );
CSize _sizeIcon = Ribbon_GetIconSize( pTBB, nILV, lParam );
const CExtCmdIcon * pCmdIcon = pTBB->GetIconPtr();
bool bHaveIcon = ( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) ) ? true : false;
CExtSafeString strText;
	if( ! ( nILV == __EXT_RIBBON_ILV_SIMPLE_SMALL && bHaveIcon ) )
		strText = pTBB->GetText();
	if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE && pCmdIcon == 0 )
		_sizeIcon.cx = _sizeIcon.cy = 0;
CSize _sizeText( 0, 0 );
UINT nDT = 0;
	if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE )
	{
		strText.Replace( _T("\r"), _T(" ") );
		strText.Replace( _T("\n"), _T(" ") );
		strText.Replace( _T("\t"), _T(" ") );
		strText.Replace( _T("  "), _T(" ") );
		strText.TrimLeft( _T(" ") );
		strText.TrimRight( _T(" ") );
		nDT = DT_SINGLELINE|DT_LEFT|DT_TOP;
	} // if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE )
	else
		nDT = DT_LEFT|DT_TOP;
	if( ! strText.IsEmpty() )
	{
		CFont * pFont = ((CExtToolControlBar*)(pTBB->GetBar()))->OnGetToolbarFont( false, true, const_cast < CExtBarButton * > ( pTBB ) );
		_sizeText = stat_CalcTextDimension( dc, *pFont, strText, nDT|DT_CALCRECT ).Size();
// 		_sizeText.cx = UiScalingDo( _sizeText.cx, __EUIST_X );
// 		_sizeText.cy = UiScalingDo( _sizeText.cy, __EUIST_Y );
		if( _sizeText.cx > 0 )
			_sizeText.cx += 4;
	} // if( ! strText.IsEmpty() )
CSize _sizeDDA( 0, 0 );
	if( pTBB->IsAbleToTrackMenu() )
		_sizeDDA = Ribbon_GetDropDownArrowSize( dc, nILV, pTBB, lParam );
CRect rcCP = pTBB->OnRibbonGetContentPadding();
	rcCP.left = UiScalingDo( rcCP.left, __EUIST_X );
	rcCP.top = UiScalingDo( rcCP.top, __EUIST_Y );
	rcCP.right = UiScalingDo( rcCP.right, __EUIST_X );
	rcCP.bottom = UiScalingDo( rcCP.bottom, __EUIST_Y );
INT nTextToIconDistance = Ribbon_GetTextToIconDistance( dc, nILV, pTBB, lParam );
CSize _size = _sizeIcon;
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
INT nBasicHeight = _TxtM.tmHeight;

	if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
	{
		_sizeText.cx += _sizeDDA.cx;
		if( ! strText.IsEmpty() )
		{
			_sizeText.cy = max( _sizeText.cy, _sizeDDA.cy );
			_sizeText.cy += nTextToIconDistance;
		}
		_size.cy += _sizeText.cy;
		_size.cx = max( _sizeText.cx, _size.cx );
		_size.cx += rcCP.left + rcCP.right;
		_size.cy += rcCP.top + rcCP.bottom;
//		 CSize _sizeAdjust( 42, 66 );
		 CSize _sizeAdjust( 42, nBasicHeight * 2 + 40 );
		_sizeAdjust.cx = UiScalingDo( _sizeAdjust.cx, __EUIST_X );
		_sizeAdjust.cy = UiScalingDo( _sizeAdjust.cy, __EUIST_Y );
		_size.cx = max( _size.cx, _sizeAdjust.cx );
		_size.cy = max( _size.cy, _sizeAdjust.cy );
	}
	else
	{
		if( ! strText.IsEmpty() )
		{
			_sizeText.cy = max( _sizeText.cy, _sizeDDA.cy );
			_sizeText.cx += _sizeDDA.cx;
			if( bHaveIcon )
				_sizeText.cx += nTextToIconDistance;
			_size.cx += 4;
		}
		else
		{
			const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			if(		pParentTBB != NULL
				&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
				)
				_size.cx += 8;
			else if(
					pTBB->IsAbleToTrackMenu()
				&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButton ) ) )
				)
				_size.cx += 7;
		}
		_size.cx += _sizeText.cx;
		_size.cy = max( _sizeText.cy, _size.cy );
		_size.cx += rcCP.left + rcCP.right;
		_size.cy += rcCP.top + rcCP.bottom;
		if( pTBB->IsAbleToTrackMenu() )
		{
			const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			bool bInToolGroup =
				(	pParentTBB != NULL
					&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
				) ? true : false;
			if(		bInToolGroup
				||	(	nILV < __EXT_RIBBON_ILV_SIMPLE_LARGE
					&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonGroup ) ) )
					)
				)
			{
				INT nDropDownButtonWidth = GetDropDownButtonWidth( (CObject*)pTBB, lParam );
				_size.cx += nDropDownButtonWidth;
			}
		}
//		 CSize _sizeAdjust( 22, 22 );
		 CSize _sizeAdjust( nBasicHeight + 6, nBasicHeight + 6 );
		 _sizeAdjust.cx = max( _sizeAdjust.cx, 22 );
		 _sizeAdjust.cy = max( _sizeAdjust.cy, 22 );
		_sizeAdjust.cx = UiScalingDo( _sizeAdjust.cx, __EUIST_X );
		_sizeAdjust.cy = UiScalingDo( _sizeAdjust.cy, __EUIST_Y );
		_size.cx = max( _size.cx, _sizeAdjust.cx );
		_size.cy = max( _size.cy, _sizeAdjust.cy );
	}
	return _size;
}

CSize CExtPaintManagerOffice2007_Impl::Ribbon_CalcButtonSize(
	CDC & dc,
	INT nILV,
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( pTBB->IsSeparator() )
		return CSize( 2, 2 );
const CExtRibbonNode * pRibbonNode = pTBB->Ribbon_GetNode();
	if( pRibbonNode == NULL )
		return CSize( 0, 0 );
	ASSERT_VALID( pRibbonNode );
	if( nILV < 0 )
		nILV = pTBB->RibbonILV_Get( 0 );
CSize _sizeIcon = Ribbon_GetIconSize( pTBB, nILV, lParam );
const CExtCmdIcon * pCmdIcon = pTBB->GetIconPtr();
bool bHaveIcon = ( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) ) ? true : false;
CExtSafeString strText;
	if( ! ( nILV == __EXT_RIBBON_ILV_SIMPLE_SMALL && bHaveIcon ) )
		strText = pTBB->GetText();
	if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE && pCmdIcon == 0 )
		_sizeIcon.cx = _sizeIcon.cy = 0;
CSize _sizeText( 0, 0 );
UINT nDT = 0;
	if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE )
	{
		strText.Replace( _T("\r"), _T(" ") );
		strText.Replace( _T("\n"), _T(" ") );
		strText.Replace( _T("\t"), _T(" ") );
		strText.Replace( _T("  "), _T(" ") );
		strText.TrimLeft( _T(" ") );
		strText.TrimRight( _T(" ") );
		nDT = DT_SINGLELINE|DT_LEFT|DT_TOP;
	} // if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE )
	else
		nDT = DT_LEFT|DT_TOP;
	if( ! strText.IsEmpty() )
	{
		CFont * pFont = ((CExtToolControlBar*)(pTBB->GetBar()))->OnGetToolbarFont( false, true, const_cast < CExtBarButton * > ( pTBB ) );
		_sizeText = stat_CalcTextDimension( dc, *pFont, strText, nDT|DT_CALCRECT ).Size();
// 		_sizeText.cx = UiScalingDo( _sizeText.cx, __EUIST_X );
// 		_sizeText.cy = UiScalingDo( _sizeText.cy, __EUIST_Y );
		if( _sizeText.cx > 0 )
			_sizeText.cx += 4;
	} // if( ! strText.IsEmpty() )
CSize _sizeDDA( 0, 0 );
	if( pTBB->IsAbleToTrackMenu() )
		_sizeDDA = Ribbon_GetDropDownArrowSize( dc, nILV, pTBB, lParam );
CRect rcCP = pTBB->OnRibbonGetContentPadding();
// 	rcCP.left = UiScalingDo( rcCP.left, __EUIST_X );
// 	rcCP.top = UiScalingDo( rcCP.top, __EUIST_Y );
// 	rcCP.right = UiScalingDo( rcCP.right, __EUIST_X );
// 	rcCP.bottom = UiScalingDo( rcCP.bottom, __EUIST_Y );
INT nTextToIconDistance = Ribbon_GetTextToIconDistance( dc, nILV, pTBB, lParam );
CSize _size = _sizeIcon;
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
INT nBasicHeight = _TxtM.tmHeight;

	if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
	{
		_sizeText.cx += _sizeDDA.cx;
		if( ! strText.IsEmpty() )
		{
			_sizeText.cy = max( _sizeText.cy, _sizeDDA.cy );
			_sizeText.cy += nTextToIconDistance;
		}
		_size.cy += _sizeText.cy;
		_size.cx = max( _sizeText.cx, _size.cx );
		_size.cx += rcCP.left + rcCP.right;
		_size.cy += rcCP.top + rcCP.bottom;
//		 CSize _sizeAdjust( 42, 66 );
		 CSize _sizeAdjust(
			 UiScalingDo( 42, __EUIST_X ),
			 nBasicHeight * 2 + UiScalingDo( 40, __EUIST_Y )
			 );
		_size.cx = max( _size.cx, _sizeAdjust.cx );
		_size.cy = max( _size.cy, _sizeAdjust.cy );
	}
	else
	{
		if( ! strText.IsEmpty() )
		{
			_sizeText.cy = max( _sizeText.cy, _sizeDDA.cy );
			_sizeText.cx += _sizeDDA.cx;
			if( bHaveIcon )
				_sizeText.cx += nTextToIconDistance;
			_size.cx += 4;
		}
		else
		{
			const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			if(		pParentTBB != NULL
				&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
				)
				_size.cx += 8;
			else if(
					pTBB->IsAbleToTrackMenu()
				&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButton ) ) )
				)
				_size.cx += 7;
		}
		_size.cx += _sizeText.cx;
		_size.cy = max( _sizeText.cy, _size.cy );
		_size.cx += rcCP.left + rcCP.right;
		_size.cy += rcCP.top + rcCP.bottom;
		if( pTBB->IsAbleToTrackMenu() )
		{
			const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			bool bInToolGroup =
				(	pParentTBB != NULL
					&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
				) ? true : false;
			if(		bInToolGroup
				||	(	nILV < __EXT_RIBBON_ILV_SIMPLE_LARGE
					&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonGroup ) ) )
					)
				)
			{
				INT nDropDownButtonWidth = GetDropDownButtonWidth( (CObject*)pTBB, lParam );
				_size.cx += nDropDownButtonWidth;
			}
		}
//		 CSize _sizeAdjust( 22, 22 );
		 CSize _sizeAdjust( nBasicHeight + 6, nBasicHeight + 6 );
		 if( g_PaintManager.m_bIsWinVistaOrLater && g_PaintManager.m_nLPY <= 96 )
		 {
			 _sizeAdjust.cx = max( _sizeAdjust.cx, 22 );
			 _sizeAdjust.cy = max( _sizeAdjust.cy, 22 );
		 }
		_sizeAdjust.cx = UiScalingDo( _sizeAdjust.cx, __EUIST_X );
		_sizeAdjust.cy = UiScalingDo( _sizeAdjust.cy, __EUIST_Y );
		_size.cx = max( _size.cx, _sizeAdjust.cx );
		_size.cy = max( _size.cy, _sizeAdjust.cy );
	}
	return _size;
}

CSize CExtPaintManagerOffice2007_R1::Ribbon_CalcButtonSize(
	CDC & dc,
	INT nILV,
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	return CExtPaintManagerOffice2003::Ribbon_CalcButtonSize( dc, nILV, pTBB, lParam );
}

CSize CExtPaintManagerOffice2010_Impl::Ribbon_CalcButtonSize(
	CDC & dc,
	INT nILV,
	const CExtBarButton * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( pTBB->IsSeparator() )
		return CSize( 2, 2 );
const CExtRibbonNode * pRibbonNode = pTBB->Ribbon_GetNode();
	if( pRibbonNode == NULL )
		return CSize( 0, 0 );
	ASSERT_VALID( pRibbonNode );
	if( nILV < 0 )
		nILV = pTBB->RibbonILV_Get( 0 );
CSize _sizeIcon = Ribbon_GetIconSize( pTBB, nILV, lParam );
const CExtCmdIcon * pCmdIcon = pTBB->GetIconPtr();
bool bHaveIcon = ( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) ) ? true : false;
CExtSafeString strText;
	if( ! ( nILV == __EXT_RIBBON_ILV_SIMPLE_SMALL && bHaveIcon ) )
		strText = pTBB->GetText();
	if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE && pCmdIcon == 0 )
		_sizeIcon.cx = _sizeIcon.cy = 0;
CSize _sizeText( 0, 0 );
UINT nDT = 0;
	if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE )
	{
		strText.Replace( _T("\r"), _T(" ") );
		strText.Replace( _T("\n"), _T(" ") );
		strText.Replace( _T("\t"), _T(" ") );
		strText.Replace( _T("  "), _T(" ") );
		strText.TrimLeft( _T(" ") );
		strText.TrimRight( _T(" ") );
		nDT = DT_SINGLELINE|DT_LEFT|DT_TOP;
	} // if( nILV != __EXT_RIBBON_ILV_SIMPLE_LARGE )
	else
		nDT = DT_LEFT|DT_TOP;
	if( ! strText.IsEmpty() )
	{
		CFont * pFont = ((CExtToolControlBar*)(pTBB->GetBar()))->OnGetToolbarFont( false, true, const_cast < CExtBarButton * > ( pTBB ) );
		_sizeText = stat_CalcTextDimension( dc, *pFont, strText, nDT|DT_CALCRECT ).Size();
// 		_sizeText.cx = UiScalingDo( _sizeText.cx, __EUIST_X );
// 		_sizeText.cy = UiScalingDo( _sizeText.cy, __EUIST_Y );
		if( _sizeText.cx > 0 )
			_sizeText.cx += 4;
	} // if( ! strText.IsEmpty() )
CSize _sizeDDA( 0, 0 );
	if( pTBB->IsAbleToTrackMenu() )
		_sizeDDA = Ribbon_GetDropDownArrowSize( dc, nILV, pTBB, lParam );
CRect rcCP = pTBB->OnRibbonGetContentPadding();
	rcCP.left = UiScalingDo( rcCP.left, __EUIST_X );
	rcCP.top = UiScalingDo( rcCP.top, __EUIST_Y );
	rcCP.right = UiScalingDo( rcCP.right, __EUIST_X );
	rcCP.bottom = UiScalingDo( rcCP.bottom, __EUIST_Y );
INT nTextToIconDistance = Ribbon_GetTextToIconDistance( dc, nILV, pTBB, lParam );
CSize _size = _sizeIcon;
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
INT nBasicHeight = _TxtM.tmHeight;

	if( nILV == __EXT_RIBBON_ILV_SIMPLE_LARGE )
	{
		_sizeText.cx += _sizeDDA.cx;
		if( ! strText.IsEmpty() )
		{
			_sizeText.cy = max( _sizeText.cy, _sizeDDA.cy );
			_sizeText.cy += nTextToIconDistance;
		}
		_size.cy += _sizeText.cy;
		_size.cx = max( _sizeText.cx, _size.cx );
		_size.cx += rcCP.left + rcCP.right;
		_size.cy += rcCP.top + rcCP.bottom;
//		 CSize _sizeAdjust( 42, 66 );
		 CSize _sizeAdjust(
			 UiScalingDo( 42, __EUIST_X ),
			 nBasicHeight * 2 + UiScalingDo( 40, __EUIST_Y )
			 );
		_size.cx = max( _size.cx, _sizeAdjust.cx );
		_size.cy = max( _size.cy, _sizeAdjust.cy );
	}
	else
	{
		if( ! strText.IsEmpty() )
		{
			_sizeText.cy = max( _sizeText.cy, _sizeDDA.cy );
			_sizeText.cx += _sizeDDA.cx;
			if( bHaveIcon )
				_sizeText.cx += nTextToIconDistance;
			_size.cx += 4;
		}
		else
		{
			const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			if(		pParentTBB != NULL
				&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
				)
				_size.cx += 8;
			else if(
					pTBB->IsAbleToTrackMenu()
				&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButton ) ) )
				)
				_size.cx += 7;
		}
		_size.cx += _sizeText.cx;
		_size.cy = max( _sizeText.cy, _size.cy );
		_size.cx += rcCP.left + rcCP.right;
		_size.cy += rcCP.top + rcCP.bottom;
		if( pTBB->IsAbleToTrackMenu() )
		{
			const CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
			bool bInToolGroup =
				(	pParentTBB != NULL
					&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
				) ? true : false;
			if(		bInToolGroup
				||	(	nILV < __EXT_RIBBON_ILV_SIMPLE_LARGE
					&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonGroup ) ) )
					)
				)
			{
				INT nDropDownButtonWidth = GetDropDownButtonWidth( (CObject*)pTBB, lParam );
				_size.cx += nDropDownButtonWidth;
			}
		}
//		 CSize _sizeAdjust( 22, 22 );
		 CSize _sizeAdjust( nBasicHeight + 6, nBasicHeight + 6 );
		 _sizeAdjust.cx = max( _sizeAdjust.cx, 22 );
		 _sizeAdjust.cy = max( _sizeAdjust.cy, 22 );
// 		_sizeAdjust.cx = UiScalingDo( _sizeAdjust.cx, __EUIST_X );
// 		_sizeAdjust.cy = UiScalingDo( _sizeAdjust.cy, __EUIST_Y );
		_size.cx = max( _size.cx, _sizeAdjust.cx );
		_size.cy = max( _size.cy, _sizeAdjust.cy );
	}
	return _size;
}

bool CExtPaintManager::Ribbon_GroupCaptionIsAtTop(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pGroupTBB;
	lParam;
	return true;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_GroupCaptionIsAtTop(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GroupCaptionIsAtTop(
				pGroupTBB,
				lParam
				);	
	return m_bRibbonGroupCaptionAtTop;
}

INT CExtPaintManager::Ribbon_GroupCaptionGetHeight(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	lParam;
	if( pGroupTBB != NULL )
	{
		ASSERT_VALID( pGroupTBB );
		const CExtRibbonPage * pRibbonPage = pGroupTBB->GetRibbonPage();
		if( pRibbonPage != NULL )
		{
			ASSERT_VALID( pRibbonPage );
			if(		pRibbonPage->m_bHelperPopupMode
				&&	( ! pRibbonPage->m_bHelperAutoHideMode )
				&&	( ! Ribbon_IsPopupGroupWithCaption( (CObject*)pRibbonPage ) )
				)
				return 0;
		} // if( pRibbonPage != NULL )
	} // if( pGroupTBB != NULL )

CFont * pMeasureFont = (CFont*)&m_FontRibbonGroupCaption;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CWindowDC dc( NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
INT nCaptionHeight = _TxtM.tmHeight;
	nCaptionHeight = UiScalingDo( nCaptionHeight, __EUIST_Y );
	if( g_PaintManager.m_nLPY <= 96 )
		nCaptionHeight += 5;
	return nCaptionHeight;
}

INT CExtPaintManagerOffice2007_Impl::Ribbon_GroupCaptionGetHeight(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GroupCaptionGetHeight( pGroupTBB, lParam );	
	return CExtPaintManagerOffice2003::Ribbon_GroupCaptionGetHeight( pGroupTBB, lParam );
}

CExtCmdIcon * CExtPaintManager::Ribbon_GetGroupCollapsedIcon(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	lParam;
	if( pGroupTBB == NULL )
		return NULL;
	ASSERT_VALID( pGroupTBB );
CExtRibbonNode * pRibbonNode = (CExtRibbonNode *)pGroupTBB->Ribbon_GetNode();
	if( pRibbonNode == NULL )
		return NULL;
	ASSERT_VALID( pRibbonNode );
	if( ! pRibbonNode->m_iconBig.IsEmpty() )
		return (& pRibbonNode->m_iconBig );
	if( ! pRibbonNode->m_iconSmall.IsEmpty() )
	{
		CSize _size = Ribbon_GetIconSize( pGroupTBB, __EXT_RIBBON_ILV_SIMPLE_LARGE );
		pRibbonNode->m_iconBig = pRibbonNode->m_iconSmall;
		pRibbonNode->m_iconBig.Scale( _size );
		return (& pRibbonNode->m_iconBig );
	}
	return NULL;
}

CExtCmdIcon * CExtPaintManagerOffice2007_Impl::Ribbon_GetGroupCollapsedIcon(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetGroupCollapsedIcon(
				pGroupTBB,
				lParam
				);	

	if( pGroupTBB == NULL )
		return NULL;
	ASSERT_VALID( pGroupTBB );

CExtRibbonNode * pRibbonNode = (CExtRibbonNode *)pGroupTBB->Ribbon_GetNode();
	if( pRibbonNode == NULL )
		return NULL;
	ASSERT_VALID( pRibbonNode );
	if( ! pRibbonNode->m_iconSmall.IsEmpty() )
		return (& pRibbonNode->m_iconSmall );
	if( ! pRibbonNode->m_iconBig.IsEmpty() )
	{
		CSize _sizeSmall = Ribbon_GetIconSize( pGroupTBB, __EXT_RIBBON_ILV_SIMPLE_SMALL );
		pRibbonNode->m_iconSmall = pRibbonNode->m_iconBig;
		pRibbonNode->m_iconSmall.Scale( _sizeSmall );
		return (& pRibbonNode->m_iconSmall );
	}
	return NULL;
}

CExtCmdIcon * CExtPaintManagerOffice2007_R1::Ribbon_GetGroupCollapsedIcon(
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetGroupCollapsedIcon(
				pGroupTBB,
				lParam
				);	

CExtCmdIcon * pCmdIcon = CExtPaintManager::Ribbon_GetGroupCollapsedIcon( pGroupTBB, lParam );
	if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
		pCmdIcon->Scale( CSize( 32, 32 ) );
	return pCmdIcon;
}

void CExtPaintManager::Ribbon_PaintText(
	CDC & dc,
	__EXT_MFC_SAFE_LPCTSTR strText,
	const RECT & rcText,
	UINT nDrawTextFlags,
	bool bDrawDropDownArrow,
	CExtBitmap * pBmpAlternativeDropDownArrow,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	pHelperSrc;
	lParam;
CExtSafeString strCaptionText = ( strText == NULL ) ? _T("") : strText;
	strCaptionText.TrimLeft( _T(" \r\t") );
	strCaptionText.TrimRight( _T(" \r\t") );
CExtSafeStringArray strArray;
INT nPartIndex, nPartCount, nMeasuredTextHeight = 0;
	if( ! strCaptionText.IsEmpty() )
	{
		nPartCount = 2;
		for( nPartIndex = 0; nPartIndex < nPartCount; nPartIndex ++ )
		{
			INT nSepPos = strCaptionText.Find( '\n' );
			if( nSepPos >= 0 )
			{
				CExtSafeString s = strCaptionText.Left( nSepPos );
				s.TrimLeft( _T(" \r\t") );
				s.TrimRight( _T(" \r\t") );
				if( ! s.IsEmpty() )
				{
					strArray.Add( s );
					CRect rcCalc( 0, 0, 0, 0 );
					CExtRichContentLayout::stat_DrawText(
						dc.m_hDC,
						LPCTSTR(s), INT( _tcslen( LPCTSTR(s) ) ),
						rcCalc,
						DT_SINGLELINE|DT_LEFT|DT_TOP|DT_CALCRECT, 0
						);
					nMeasuredTextHeight += rcCalc.Height();
				}
				INT nRightPartSize =
					strCaptionText.GetLength() - nSepPos - 1;
				ASSERT( nRightPartSize >= 0 );
				if( nRightPartSize == 0 )
					break;
				strCaptionText = strCaptionText.Right( nRightPartSize );
				strCaptionText.TrimLeft( _T(" \r\t") );
				strCaptionText.TrimRight( _T(" \r\t") );
				if( strCaptionText.IsEmpty() )
					break;
			} // if( nSepPos >= 0 )
			else
			{
				strArray.Add( strCaptionText );
				CRect rcCalc( 0, 0, 0, 0 );
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR(strCaptionText), INT( _tcslen( LPCTSTR(strCaptionText) ) ),
					rcCalc,
					DT_SINGLELINE|DT_LEFT|DT_TOP|DT_CALCRECT, 0
					);
				nMeasuredTextHeight += rcCalc.Height();
				break;
			} // else from if( nSepPos >= 0 )
		} // for( nPartIndex = 0; nPartIndex < nPartCount; nPartIndex ++ )
	} // if( ! strCaptionText.IsEmpty() )
	nPartCount = INT( strArray.GetSize() );
static const POINT g_ptArrDist = { 2, 4 };
CPoint ptArrow( 0, 0 );
CSize _sizeArrow( 0, 0 );
glyph_t * pGlyph = g_DockingCaptionGlyphs[ __DCBT_ARROW_DOWN ];
	if( bDrawDropDownArrow )
	{
		if(		pBmpAlternativeDropDownArrow != NULL
			&&	(! pBmpAlternativeDropDownArrow->IsEmpty() )
			)
			_sizeArrow = pBmpAlternativeDropDownArrow->GetSize();
		else
			_sizeArrow = pGlyph->Size();
	} // if( bDrawDropDownArrow )
CRect rcWalk = rcText;
	if(		nPartCount <= 1
		&&	pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) )
		&&	((CExtBarButton*)pHelperSrc)->RibbonILV_Get() < __EXT_RIBBON_ILV_SIMPLE_LARGE
		)
	{
		CRect rcDraw = rcText;
		CRect rcArrow = rcDraw;
		if( nPartCount == 1 || bDrawDropDownArrow )
		{
			if(		_sizeArrow.cx > 0
				&&	_sizeArrow.cy > 0
				)
			{
				rcDraw.right -= _sizeArrow.cx;
				rcArrow.left = rcDraw.right;
				if(		pBmpAlternativeDropDownArrow != NULL
					&&	(! pBmpAlternativeDropDownArrow->IsEmpty() )
					)
				{
					rcArrow.left += ( rcArrow.Width() - _sizeArrow.cx ) / 2;
					rcArrow.top  += ( rcArrow.Height() - _sizeArrow.cy ) / 2;
					rcArrow.right = rcArrow.left + _sizeArrow.cx;
					rcArrow.bottom = rcArrow.top + _sizeArrow.cy;
					if( nPartCount == 0 )
						rcArrow.OffsetRect( 0, 1 );
// rcArrow.OffsetRect(
// 	0, 
// 	( rcText.bottom - rcText.top - nMeasuredTextHeight ) / 2
// 	);
					pBmpAlternativeDropDownArrow->AlphaBlend( dc.m_hDC, rcArrow );
				}
				else
				{
					ptArrow.y -= 4;
					COLORREF ColorValues1[2] =
					{
						RGB(0,0,0),
						GetColor(COLOR_3DHILIGHT),
					};
					COLORREF ColorValues2[2] =
					{
						RGB(0,0,0),
						GetColor(COLOR_BTNTEXT),
					};
					if( nPartCount == 0 )
					{
						ptArrow.x += 3;
						ptArrow.y ++;
					}
// ptArrow.y += ( rcText.bottom - rcText.top - nMeasuredTextHeight ) / 2;
					ptArrow.y ++;
					PaintGlyphCentered( dc, rcArrow, *pGlyph, ColorValues1 );
					ptArrow.y --;
					PaintGlyphCentered( dc, rcArrow, *pGlyph, ColorValues2 );
				}
			}
		}
		if( nPartCount == 1 )
		{
			CExtSafeString & s = strArray.ElementAt( 0 );
			INT nLen = s.GetLength();
			ASSERT( nLen > 0 );
// rcDraw.OffsetRect(
// 	0, 
// 	( rcText.bottom - rcText.top - nMeasuredTextHeight ) / 2
// 	);
			CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(s), nLen, rcDraw, nDrawTextFlags, 0 );
		}
	}
	else
	{
		nDrawTextFlags &= ~(DT_SINGLELINE);
		for( nPartIndex = 0; nPartIndex < nPartCount; nPartIndex ++ )
		{
			CExtSafeString & s = strArray.ElementAt( nPartIndex );
			INT nLen = s.GetLength();
			ASSERT( nLen > 0 );
			CRect rcCalc( 0, 0, 0, 0 );
			CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(s), nLen, rcCalc, DT_SINGLELINE|DT_LEFT|DT_TOP|DT_CALCRECT, 0 );
			INT nTextHeight = rcCalc.Height();
			rcWalk.bottom = rcWalk.top + nTextHeight;
			CRect rcDraw = rcWalk;
			if(		_sizeArrow.cx > 0
				&&	_sizeArrow.cy > 0
				&&	nPartCount > 1
				&&	nPartIndex == ( nPartCount - 1 )
				)
			{
				if( ( nDrawTextFlags & DT_CENTER ) != 0 )
				{
					INT nTextWidth = rcCalc.Width();
					rcDraw.left += ( rcWalk.Width() - nTextWidth - _sizeArrow.cx - g_ptArrDist.x ) / 2;
					rcDraw.right = rcDraw.left + nTextWidth;
				} // if( ( nDrawTextFlags & DT_CENTER ) != 0 )
				ptArrow.x = rcDraw.right + g_ptArrDist.x;
				ptArrow.y = rcWalk.top + ( nTextHeight - _sizeArrow.cy ) / 2;
			}
// rcDraw.OffsetRect(
// 	0, 
// 	( rcText.bottom - rcText.top - nMeasuredTextHeight ) / 2
// 	);
			CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(s), nLen, rcDraw, nDrawTextFlags, 0 );
			rcWalk.OffsetRect( 0, nTextHeight );
		} // for( nPartIndex = 0; nPartIndex < nPartCount; nPartIndex ++ )
		if(		_sizeArrow.cx > 0
			&&	_sizeArrow.cy > 0
			)
		{
			if( nPartCount <= 1 )
			{
				ptArrow.x = rcWalk.left + ( rcWalk.Width() - _sizeArrow.cx ) / 2;
				ptArrow.y = rcWalk.top + g_ptArrDist.y;
			}
			if(		pBmpAlternativeDropDownArrow != NULL
				&&	(! pBmpAlternativeDropDownArrow->IsEmpty() )
				)
			{
				CRect rcArrow( ptArrow, _sizeArrow );
// rcArrow.OffsetRect(
// 	0, 
// 	( rcText.bottom - rcText.top - nMeasuredTextHeight ) / 2
// 	);
				pBmpAlternativeDropDownArrow->AlphaBlend( dc.m_hDC, rcArrow );
			}
			else
			{
				ptArrow.y -= 4;
				COLORREF ColorValues1[2] =
				{
					RGB(0,0,0),
					GetColor(COLOR_3DHILIGHT),
				};
				COLORREF ColorValues2[2] =
				{
					RGB(0,0,0),
					GetColor(COLOR_BTNTEXT),
				};
// ptArrow.y += ( rcText.bottom - rcText.top - nMeasuredTextHeight ) / 2;
				ptArrow.y ++;
				PaintGlyph( dc, ptArrow, *pGlyph, ColorValues1 );
				ptArrow.y --;
				PaintGlyph( dc, ptArrow, *pGlyph, ColorValues2 );
			}
		}
	}
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintText(
	CDC & dc,
	__EXT_MFC_SAFE_LPCTSTR strText,
	const RECT & rcText,
	UINT nDrawTextFlags,
	bool bDrawDropDownArrow,
	CExtBitmap * pBmpAlternativeDropDownArrow,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintText( dc, strText, rcText, nDrawTextFlags, bDrawDropDownArrow, pBmpAlternativeDropDownArrow, pHelperSrc, lParam );
		return;
	}
	if( bDrawDropDownArrow && ( pBmpAlternativeDropDownArrow == NULL || pBmpAlternativeDropDownArrow->IsEmpty() ) )
		pBmpAlternativeDropDownArrow = &m_bmpRibbonDDA;
	CExtPaintManager::Ribbon_PaintText( dc, strText, rcText, nDrawTextFlags, bDrawDropDownArrow, pBmpAlternativeDropDownArrow, pHelperSrc, lParam );
}

bool CExtPaintManager::Ribbon_PaintQuickAccessGroupButton(
	CDC & dc,
	const RECT & rcGroupBk,
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc; rcGroupBk; pGroupTBB; lParam;
	return false;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_PaintQuickAccessGroupButton(
	CDC & dc,
	const RECT & rcGroupBk,
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGroupTBB );
	if( ::IsRectEmpty( &rcGroupBk ) )
		return true;
	if( ! dc.RectVisible( &rcGroupBk ) )
		return true;
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_PaintQuickAccessGroupButton( dc, rcGroupBk, pGroupTBB, lParam );	
bool bEnabled = pGroupTBB->IsEnabled();
bool bHover = ( bEnabled && pGroupTBB->IsHover() ) ? true : false;
	if( bHover && pGroupTBB->GetBar()->GetMenuTrackingButton() >= 0 )
		bHover = false;
bool bPressed = false;
	if( bEnabled )
		bPressed = pGroupTBB->IsPressed();
bool bSelTrackingMode = false;
const CExtToolControlBar * pToolBar = pGroupTBB->GetBar();
	if( pToolBar != NULL )
	{
		CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
		if(		pMenuBar != NULL
			&&	pMenuBar->IsMenuBarTracking()
			)
		{
			int nFlatTrackingIndex = pMenuBar->_FlatTrackingIndexGet();
			if( nFlatTrackingIndex >= 0 )
			{
				int nIndexOfTBB = pMenuBar->_GetIndexOf( (CExtBarButton*)pGroupTBB );
				if( nFlatTrackingIndex == nIndexOfTBB )
						bSelTrackingMode = true;
			}
		}
	}

CExtBitmap & _bmp1 = m_bmpRibbonGroupBkQATB[ bSelTrackingMode ? 3 : ( bPressed ? 2 : ( bHover ? 1 : 0 ) ) ];
CExtBitmap & _bmp2 = m_bmpRibbonGroupBkCollapsed[ bSelTrackingMode ? 3 : ( bPressed ? 2 : ( bHover ? 1 : 0 ) ) ];
CExtBitmap & _bmp = _bmp1.IsEmpty() ? _bmp2 : _bmp1;
	if( _bmp.IsEmpty() )
		return false;
CRect rcPadding(3,3,3,3);
//CExtMemoryDC dcMem( &dc, &rcGroupBk, CExtMemoryDC::MDCOPT_FORCE_DIB|CExtMemoryDC::MDCOPT_TO_MEMORY|CExtMemoryDC::MDCOPT_FILL_BITS|CExtMemoryDC::MDCOPT_RTL_COMPATIBILITY );
	_bmp.AlphaBlendSkinParts(
		dc.m_hDC, // dcMem.m_hDC
		rcGroupBk,
		rcPadding, //m_rcRibbonGroupPaddingBkCollapsed,
		CExtBitmap::__EDM_STRETCH,
		true,
		true
		);
//	dcMem.__Flush();

//CExtCmdIcon * pCmdIcon = Ribbon_GetGroupCollapsedIcon( pGroupTBB, lParam );
//CExtCmdIcon * pCmdIcon = ((CExtBarButton*)pGroupTBB)->GetIconPtr();

CExtRibbonNode * pRibbonNode = (CExtRibbonNode *)pGroupTBB->Ribbon_GetNode();
	if( pRibbonNode == NULL )
		return true;
	ASSERT_VALID( pRibbonNode );
	if( pRibbonNode->m_iconSmall.IsEmpty() )
	{
		if( pRibbonNode->m_iconBig.IsEmpty() )
			return true;
		CSize _size = Ribbon_GetIconSize( pGroupTBB, __EXT_RIBBON_ILV_SIMPLE_SMALL );
		pRibbonNode->m_iconSmall = pRibbonNode->m_iconBig;
		pRibbonNode->m_iconSmall.Scale( _size );
	}
CExtCmdIcon *  pCmdIcon = & pRibbonNode->m_iconSmall;
	if( pCmdIcon == NULL || pCmdIcon->IsEmpty() )
		return true;
CSize _sizeIcon = pCmdIcon->GetSize();
	pCmdIcon->Paint(
		this,
		dc,
		rcGroupBk.left + ( rcGroupBk.right - rcGroupBk.left - _sizeIcon.cx ) / 2,
		rcGroupBk.top + ( rcGroupBk.bottom - rcGroupBk.top - _sizeIcon.cy ) / 2,
		-1,
		-1
		);
	return true;
}

void CExtPaintManager::Ribbon_PaintGroupBk(
	CDC & dc,
	const RECT & rcGroupBk,
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGroupTBB );
	if( pGroupTBB->ParentButtonGet() != NULL )
		return;
	if( ::IsRectEmpty( &rcGroupBk ) )
		return;
	if( ! dc.RectVisible( &rcGroupBk ) )
		return;
CRect _rcGroupBk = rcGroupBk;
	_rcGroupBk.InflateRect( 0, 0, 1, 1 );
CExtSafeString strCaptionText = pGroupTBB->GetText();
INT nCaptionTextLength = strCaptionText.GetLength();
bool bEnabled = pGroupTBB->IsEnabled();
bool bHover = ( bEnabled && pGroupTBB->IsHover() ) ? true : false;
	if( bHover && pGroupTBB->GetBar()->GetMenuTrackingButton() >= 0 )
		bHover = false;
bool bCollapsed = pGroupTBB->TopCollapsedStateGet();
	if( bCollapsed )
	{
		bool bPressed = false;
		if( bEnabled )
			bPressed = pGroupTBB->IsPressed();
		PAINTPUSHBUTTONDATA _ppbd;
		_ppbd.m_rcClient = _rcGroupBk;
		_ppbd.m_bFlat = false;
		_ppbd.m_bEnabled = bEnabled;
		_ppbd.m_bHover = bHover;
		_ppbd.m_bPushed = bPressed;
		_ppbd.m_bHorz = true;
		PaintPushButton( dc, _ppbd );
		CExtCmdIcon * pCmdIcon = Ribbon_GetGroupCollapsedIcon( pGroupTBB, lParam );
		//CExtCmdIcon * pCmdIcon = ((CExtBarButton*)pGroupTBB)->GetIconPtr();
		CRect rcIconArea = _rcGroupBk, rcTextArea = _rcGroupBk;
		if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
		{
			CSize _sizeIcon = pCmdIcon->GetSize();
			rcIconArea.left += ( rcIconArea.Width() - _sizeIcon.cx ) / 2;
			rcIconArea.top += ( rcIconArea.Height() - _sizeIcon.cy ) / 2 - 6;
			rcIconArea.right = rcIconArea.left + _sizeIcon.cx;
			rcIconArea.bottom = rcIconArea.top + _sizeIcon.cy;
			rcTextArea.top = rcIconArea.bottom + 7;
		} // if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
		else
			rcTextArea.top += 16;
		rcIconArea.OffsetRect( 0, -10 );
		if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
		{
			pCmdIcon->Paint(
				this,
				dc,
				rcIconArea.left,
				rcIconArea.top,
				-1,
				-1
				);
		} // if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
		if( nCaptionTextLength > 0 )
		{
			CExtRibbonPage * pRibbonPage =
				const_cast < CExtRibbonPage * >
				( pGroupTBB->GetRibbonPage() );
			ASSERT_VALID( pRibbonPage );
			ASSERT( pRibbonPage->GetSafeHwnd() != NULL );
			CFont * pFont = pRibbonPage->OnGetToolbarFont( false, false, const_cast < CExtRibbonButtonGroup * > ( pGroupTBB ) );
			ASSERT( pFont->GetSafeHandle() != NULL );
			//CFont * pOldFont = dc.SelectObject( pFont );
			CFont * pOldFont = dc.SelectObject( &m_FontRibbonGroupCaption );
			INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
			COLORREF clrOldTextColor = dc.SetTextColor( GetColor( COLOR_BTNTEXT ) );
			CRect rcCaption = rcTextArea;
rcCaption.OffsetRect( 0, -5 );
			Ribbon_PaintText(
				dc,
				LPCTSTR( strCaptionText ),
				rcCaption,
				DT_CENTER|DT_TOP,
				true,
				NULL,
				(CObject*)pGroupTBB,
				lParam
				);
			dc.SetTextColor( clrOldTextColor );
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
		} // if( nCaptionTextLength > 0 )
	} // if( bCollapsed )
	else
	{
		const CExtRibbonPage * pRibbonPage = pGroupTBB->GetRibbonPage();
		ASSERT_VALID( pRibbonPage );
		CWnd * pWndParent = pRibbonPage->GetParent();
		bool bDrawCaption = true, bPopupMode =
				(	pWndParent != NULL
				&&	pWndParent->IsKindOf( RUNTIME_CLASS( CExtRibbonPopupMenuWnd ) )
				&&	(! ((CExtRibbonPopupMenuWnd*)pWndParent)->m_wndRibbonPage.m_bHelperAutoHideMode )
				) ? true : false;
		INT nCaptionHeight = 0;
		if( bPopupMode && (! Ribbon_IsPopupGroupWithCaption( (CObject*) pRibbonPage ) ) )
		{
			bDrawCaption = false;
			strCaptionText.Empty();
			nCaptionTextLength = 0;
		}
		else
		{
			strCaptionText.Replace( _T("\r"), _T(" ") );
			strCaptionText.Replace( _T("\n"), _T(" ") );
			strCaptionText.Replace( _T("\t"), _T(" ") );
			strCaptionText.Replace( _T("  "), _T(" ") );
			strCaptionText.TrimLeft( _T(" ") );
			strCaptionText.TrimRight( _T(" ") );
			nCaptionHeight = Ribbon_GroupCaptionGetHeight( pGroupTBB, lParam );
			ASSERT( nCaptionHeight >= 0 );
		}
		COLORREF clrBorder = RGB(0,0,0);
		if( bEnabled )
		{
			if( bHover )
			{
				clrBorder = GetColor( COLOR_3DDKSHADOW );
				dc.FillRect( &_rcGroupBk, &m_brushLighterDefault );
			} // if( bHover )
			else
				clrBorder = GetColor( COLOR_3DSHADOW );
		} // if( bEnabled )
		else
			clrBorder = GetColor( COLOR_3DSHADOW );
		if( nCaptionHeight > 0 && nCaptionTextLength > 0 )
		{
			CRect rcCaption = _rcGroupBk;
			bool bTopCaption = Ribbon_GroupCaptionIsAtTop( pGroupTBB );
			if( bTopCaption )
				rcCaption.bottom = rcCaption.top + nCaptionHeight;
			else
				rcCaption.top = rcCaption.bottom - nCaptionHeight;
			dc.FillSolidRect( &rcCaption, GetColor( COLOR_3DSHADOW ) );
			dc.Draw3dRect( &rcCaption, clrBorder, clrBorder );
			CExtRibbonPage * pRibbonPage =
				const_cast < CExtRibbonPage * >
				( pGroupTBB->GetRibbonPage() );
			ASSERT_VALID( pRibbonPage );
			ASSERT( pRibbonPage->GetSafeHwnd() != NULL );
			CFont * pFont = pRibbonPage->OnGetToolbarFont( false, false, const_cast < CExtRibbonButtonGroup * > ( pGroupTBB ) );
			ASSERT( pFont->GetSafeHandle() != NULL );

			CRect rcCaptionTextAlignmentDLB =
				pGroupTBB->GetCaptionTextAlignmentRect();
			if( ! rcCaptionTextAlignmentDLB.IsRectEmpty() )
			{
				rcCaption.left =
					max(
						rcCaption.left,
						rcCaptionTextAlignmentDLB.left
						);
				rcCaption.right =
					min(
						rcCaption.right,
						rcCaptionTextAlignmentDLB.right
						);
			} // if( ! rcCaptionTextAlignmentDLB.IsRectEmpty() )

			//CFont * pOldFont = dc.SelectObject( pFont );
			CFont * pOldFont = dc.SelectObject( &m_FontRibbonGroupCaption );
			INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
			COLORREF clrOldTextColor = dc.SetTextColor( GetColor( COLOR_3DDKSHADOW ) );
			rcCaption.OffsetRect( 1, 1 );
			UINT nRibbonGroupCaptionTextShadowDF = DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_END_ELLIPSIS;
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR( strCaptionText ), nCaptionTextLength,
				&rcCaption,
				nRibbonGroupCaptionTextShadowDF, 0
				);
			rcCaption.OffsetRect( -1, -1 );
			dc.SetTextColor( GetColor( COLOR_3DHIGHLIGHT ) );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR( strCaptionText ), nCaptionTextLength,
				&rcCaption,
				nRibbonGroupCaptionTextShadowDF, 0
				);
			dc.SetTextColor( clrOldTextColor );
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
		} // if( nCaptionHeight > 0 && nCaptionTextLength > 0 )
//		dc.Draw3dRect( &_rcGroupBk, clrBorder, clrBorder );
	} // else from if( bCollapsed )
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintGroupBk(
	CDC & dc,
	const RECT & rcGroupBk,
	const CExtRibbonButtonGroup * pGroupTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGroupTBB );
	if( pGroupTBB->ParentButtonGet() != NULL )
		return;
	if( ::IsRectEmpty( &rcGroupBk ) )
		return;
	if( ! dc.RectVisible( &rcGroupBk ) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintGroupBk( dc, rcGroupBk, pGroupTBB, lParam );
		return;
	}
CExtSafeString strCaptionText = pGroupTBB->GetText();
INT nCaptionTextLength = strCaptionText.GetLength();
bool bEnabled = pGroupTBB->IsEnabled();
bool bHover = ( bEnabled && pGroupTBB->IsHover() ) ? true : false;
	if( bHover && pGroupTBB->GetBar()->GetMenuTrackingButton() >= 0 )
		bHover = false;
bool bCollapsed = pGroupTBB->TopCollapsedStateGet();
	if( bCollapsed )
	{
		bool bPressed = false;
		if( bEnabled )
			bPressed = pGroupTBB->IsPressed();

		bool bSelTrackingMode = false;
		const CExtToolControlBar * pToolBar = pGroupTBB->GetBar();
		if( pToolBar != NULL )
		{
			CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
			if(		pMenuBar != NULL
				&&	pMenuBar->IsMenuBarTracking()
				)
			{
				int nFlatTrackingIndex = pMenuBar->_FlatTrackingIndexGet();
				if( nFlatTrackingIndex >= 0 )
				{
					int nIndexOfTBB = pMenuBar->_GetIndexOf( (CExtBarButton*)pGroupTBB );
					if( nFlatTrackingIndex == nIndexOfTBB )
							bSelTrackingMode = true;
				}
			}
		}

		CExtBitmap & _bmp = m_bmpRibbonGroupBkCollapsed[ bSelTrackingMode ? 3 : ( bPressed ? 2 : ( bHover ? 1 : 0 ) ) ];
		_bmp.AlphaBlendSkinParts(
			dc.m_hDC,
			rcGroupBk,
			m_rcRibbonGroupPaddingBkCollapsed,
			CExtBitmap::__EDM_STRETCH
			);
		CExtCmdIcon * pCmdIcon = Ribbon_GetGroupCollapsedIcon( pGroupTBB, lParam );
		//CExtCmdIcon * pCmdIcon = ((CExtBarButton*)pGroupTBB)->GetIconPtr();
		CRect rcIconArea = rcGroupBk, rcTextArea = rcGroupBk;
		//CExtBitmap & _bmpIconBk = m_bmpRibbonIconBkCollapsed[ bPressed ? 2 : ( bHover ? 1 : 0 ) ];
		CExtBitmap & _bmpIconBk = m_bmpRibbonIconBkCF;
		if( ! _bmpIconBk.IsEmpty() )
		{
			CSize _sizeIconBk = _bmpIconBk.GetSize();
			rcIconArea.left = rcGroupBk.left + ( rcGroupBk.right - rcGroupBk.left - _sizeIconBk.cx ) / 2;
			rcIconArea.top = rcGroupBk.top + m_nRibbonGroupIconBkVertOffset;
			rcIconArea.right = rcIconArea.left + _sizeIconBk.cx;
			rcIconArea.bottom = rcIconArea.top + _sizeIconBk.cy;
			_bmpIconBk.AlphaBlend(
				dc.m_hDC,
				rcIconArea.left,
				rcIconArea.top,
				_sizeIconBk.cx,
				_sizeIconBk.cy
				);
			if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
			{
				CSize _sizeIcon = pCmdIcon->GetSize();
				rcIconArea.left += ( rcIconArea.Width() - _sizeIcon.cx ) / 2;
				rcIconArea.top += ( rcIconArea.Height() - _sizeIcon.cy - 8 ) / 2;
				rcTextArea.top = rcIconArea.bottom + 2;
				rcIconArea.right = rcIconArea.left + _sizeIcon.cx;
				rcIconArea.bottom = rcIconArea.top + _sizeIcon.cy;
			} // if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
			else
				rcTextArea.top += 16;
		} // if( ! _bmpIconBk.IsEmpty() )
		else
		{
			if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
			{
				CSize _sizeIcon = pCmdIcon->GetSize();
				rcIconArea.left += ( rcIconArea.Width() - _sizeIcon.cx ) / 2;
				rcIconArea.top += ( rcIconArea.Height() - _sizeIcon.cy ) / 2 - 6;
				rcIconArea.right = rcIconArea.left + _sizeIcon.cx;
				rcIconArea.bottom = rcIconArea.top + _sizeIcon.cy;
				rcTextArea.top = rcIconArea.bottom + 7;
			} // if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
			else
				rcTextArea.top += 16;
		} // else from if( ! _bmpIconBk.IsEmpty() )
		if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
		{
			pCmdIcon->Paint(
				this,
				dc,
				rcIconArea.left,
				rcIconArea.top,
				-1,
				-1
				);
		} // if( pCmdIcon != NULL && (! pCmdIcon->IsEmpty() ) )
		if( nCaptionTextLength > 0 )
		{
			CExtRibbonPage * pRibbonPage =
				const_cast < CExtRibbonPage * >
				( pGroupTBB->GetRibbonPage() );
			ASSERT_VALID( pRibbonPage );
			ASSERT( pRibbonPage->GetSafeHwnd() != NULL );
			CFont * pFont = pRibbonPage->OnGetToolbarFont( false, false, const_cast < CExtRibbonButtonGroup * > ( pGroupTBB ) );
			ASSERT( pFont->GetSafeHandle() != NULL );
			//CFont * pOldFont = dc.SelectObject( pFont );
			CFont * pOldFont = dc.SelectObject( &m_FontRibbonGroupCaption );
			INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
			COLORREF clrOldTextColor = dc.SetTextColor( m_clrRibbonGroupCaptionTextCollapsed );
			CRect rcCaption = rcTextArea;
			if( IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) ) )
				rcCaption.OffsetRect( 0, -5 );
			else if( g_PaintManager.m_nLPY > 96 )
				rcCaption.top += 10;
			Ribbon_PaintText(
				dc,
				LPCTSTR( strCaptionText ),
				rcCaption,
				DT_CENTER|DT_TOP,
				true,
				&m_bmpRibbonDDA,
				(CObject*)pGroupTBB,
				lParam
				);
			dc.SetTextColor( clrOldTextColor );
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
		} // if( nCaptionTextLength > 0 )
	} // if( bCollapsed )
	else
	{
		const CExtRibbonPage * pRibbonPage = pGroupTBB->GetRibbonPage();
		ASSERT_VALID( pRibbonPage );
		CWnd * pWndParent = pRibbonPage->GetParent();
		bool bDrawCaption = true, bPopupMode =
				(	pWndParent != NULL
				&&	pWndParent->IsKindOf( RUNTIME_CLASS( CExtRibbonPopupMenuWnd ) )
				&&	(! ((CExtRibbonPopupMenuWnd*)pWndParent)->m_wndRibbonPage.m_bHelperAutoHideMode )
				) ? true : false;
		INT nCaptionHeight = 0;
		if( bPopupMode && (! Ribbon_IsPopupGroupWithCaption( (CObject*) pRibbonPage ) ) )
		{
			bDrawCaption = false;
			strCaptionText.Empty();
			nCaptionTextLength = 0;
		}
		else
		{
			strCaptionText.Replace( _T("\r"), _T(" ") );
			strCaptionText.Replace( _T("\n"), _T(" ") );
			strCaptionText.Replace( _T("\t"), _T(" ") );
			strCaptionText.Replace( _T("  "), _T(" ") );
			strCaptionText.TrimLeft( _T(" ") );
			strCaptionText.TrimRight( _T(" ") );
			nCaptionHeight = Ribbon_GroupCaptionGetHeight( pGroupTBB, lParam );
			ASSERT( nCaptionHeight >= 0 );
		}
		CExtBitmap & _bmp = m_bmpRibbonGroupBkExpanded[ bHover ? 1 : 0 ];
		if( nCaptionHeight == 0 )
		{
			CSize _size = _bmp.GetSize();
			CRect rcSrc( 0, 0, _size.cx, _size.cy );
			if( ! bDrawCaption )
			{
				bool bTopCaption = Ribbon_GroupCaptionIsAtTop( pGroupTBB );
				if( bTopCaption )
					rcSrc.top += m_nRibbonCaptionPartHeight;
				else
					rcSrc.bottom += m_nRibbonCaptionPartHeight;
				rcSrc.DeflateRect( 2, 2 );
			}
			_bmp.AlphaBlendSkinParts(
				dc.m_hDC,
				rcGroupBk,
				rcSrc,
				m_rcRibbonGroupPaddingBkExpanded,
				CExtBitmap::__EDM_STRETCH
				);
		} // if( nCaptionHeight == 0 )
		else
		{
			CSize _size = _bmp.GetSize();
			CRect rcDstGroupBk( rcGroupBk ),
				rcSrcGroupBk( 0, 0, _size.cx, _size.cy ),
				rcDstCaptionBk( rcGroupBk ),
				rcSrcCaptionBk( 0, 0, _size.cx, _size.cy );
			bool bTopCaption = Ribbon_GroupCaptionIsAtTop( pGroupTBB );
			if( bTopCaption )
			{
				rcDstGroupBk.top += nCaptionHeight;
				rcDstCaptionBk.bottom = rcDstGroupBk.top;
				rcSrcGroupBk.top += m_nRibbonCaptionPartHeight;
				rcSrcCaptionBk.bottom = rcSrcGroupBk.top;
			} // if( bTopCaption )
			else
			{
				rcDstGroupBk.bottom -= nCaptionHeight;
				rcDstCaptionBk.top = rcDstGroupBk.bottom;
				rcSrcGroupBk.bottom -= m_nRibbonCaptionPartHeight;
				rcSrcCaptionBk.top = rcSrcGroupBk.bottom;
			} // else from if( bTopCaption )
			_bmp.AlphaBlendSkinParts(
				dc.m_hDC,
				rcDstGroupBk,
				rcSrcGroupBk,
				m_rcRibbonGroupPaddingBkExpanded,
				CExtBitmap::__EDM_STRETCH
				);
			_bmp.AlphaBlendSkinParts(
				dc.m_hDC,
				rcDstCaptionBk,
				rcSrcCaptionBk,
				m_rcRibbonGroupPaddingBkExpanded,
				CExtBitmap::__EDM_STRETCH
				);
			if( nCaptionTextLength > 0 )
			{
				CExtRibbonPage * pRibbonPage =
					const_cast < CExtRibbonPage * >
					( pGroupTBB->GetRibbonPage() );
				ASSERT_VALID( pRibbonPage );
				ASSERT( pRibbonPage->GetSafeHwnd() != NULL );
				CFont * pFont = pRibbonPage->OnGetToolbarFont( false, false, const_cast < CExtRibbonButtonGroup * > ( pGroupTBB ) );
				ASSERT( pFont->GetSafeHandle() != NULL );
				//CFont * pOldFont = dc.SelectObject( pFont );
				CFont * pOldFont = dc.SelectObject( &m_FontRibbonGroupCaption );
				INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
				COLORREF clrOldTextColor =
					dc.SetTextColor(
						( m_clrRibbonGroupCaptionTextShadowExpanded == COLORREF(-1L) )
							? m_clrRibbonGroupCaptionTextExpanded
							: m_clrRibbonGroupCaptionTextShadowExpanded
						);
				CRect rcCaption = rcDstCaptionBk;
				rcCaption.DeflateRect(
					m_rcRibbonGroupPaddingBkExpanded.left,
					2,
					m_rcRibbonGroupPaddingBkExpanded.right,
					2
					);
				if( ! bTopCaption )
					rcCaption.OffsetRect( 0, -1 );
				if( m_clrRibbonGroupCaptionTextShadowExpanded != COLORREF(-1L) )
				{
					rcCaption.OffsetRect(
						m_sizeRibbonGroupCaptionTextOffset.cx,
						m_sizeRibbonGroupCaptionTextOffset.cy
						);
					CExtRichContentLayout::stat_DrawText(
						dc.m_hDC,
						LPCTSTR( strCaptionText ), nCaptionTextLength,
						&rcCaption,
						m_nRibbonGroupCaptionTextShadowDF, 0
						);
					rcCaption.OffsetRect(
						- m_sizeRibbonGroupCaptionTextOffset.cx,
						- m_sizeRibbonGroupCaptionTextOffset.cy
						);
					dc.SetTextColor( m_clrRibbonGroupCaptionTextExpanded );
				} // if( m_clrRibbonGroupCaptionTextShadowExpanded != COLORREF(-1L) )

				CRect rcCaptionTextAlignmentDLB =
					pGroupTBB->GetCaptionTextAlignmentRect();
				if( ! rcCaptionTextAlignmentDLB.IsRectEmpty() )
				{
					rcCaption.left =
						max(
							rcCaption.left,
							rcCaptionTextAlignmentDLB.left
							);
					rcCaption.right =
						min(
							rcCaption.right,
							rcCaptionTextAlignmentDLB.right
							);
				} // if( ! rcCaptionTextAlignmentDLB.IsRectEmpty() )

				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC,
					LPCTSTR( strCaptionText ), nCaptionTextLength,
					&rcCaption,
					m_nRibbonGroupCaptionTextDF, 0
					);
				dc.SetTextColor( clrOldTextColor );
				dc.SetBkMode( nOldBkMode );
				dc.SelectObject( pOldFont );
			} // if( nCaptionTextLength > 0 )
		} // else from if( nCaptionHeight == 0 )
	} // else from if( bCollapsed )
}

CRect CExtPaintManager::Ribbon_GetPageOuterContentPadding(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage;
	lParam;
	return CRect( 3, 3, 3, 3 );
}

CRect CExtPaintManagerNativeXP::Ribbon_GetPageOuterContentPadding(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
CRect rc =
		CExtPaintManager::Ribbon_GetPageOuterContentPadding( pRibbonPage, lParam );
e_system_theme_t eST = OnQuerySystemTheme();
	if(		eST == ThemeLunaRoyale       // +2.87
		||	eST == ThemeVistaOrLaterUX   // +2.87
		||	eST == ThemeVistaOrLaterDWM  // +2.87
		||	eST == ThemeLunaBlue
		||	eST == ThemeLunaOlive
		||	eST == ThemeLunaSilver
		)
		rc.bottom += 2;
	return rc;
}

CRect CExtPaintManagerOffice2007_Impl::Ribbon_GetPageOuterContentPadding(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetPageOuterContentPadding(
				pRibbonPage,
				lParam
				);	
	return m_rcRibbonPageOuterContentPadding;
}

void CExtPaintManager::Ribbon_PaintPageBk(
	CDC & dc,
	const RECT & rcPageBk,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );
	lParam;
	if( ! dc.RectVisible( &rcPageBk ) )
		return;
	if( pRibbonPage->GetSafeHwnd() != NULL )
	{
		CWnd * pWndParent = pRibbonPage->GetParent();
		if(		pWndParent != NULL
			&&	pWndParent->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
			)
			return;
	} // if( pRibbonPage->GetSafeHwnd() != NULL )
CRect rc = rcPageBk;
	rc.DeflateRect( 2, 0 );
	stat_PaintGradientRect(
		dc,
		rc,
		GetColor( COLOR_3DHILIGHT ),
		GetColor( COLOR_3DFACE ),
		true
		);
	dc.Draw3dRect(
		&rc,
		GetColor( COLOR_3DHIGHLIGHT ),
		GetColor( COLOR_3DSHADOW )
		);
}

void CExtPaintManagerStudio2005::Ribbon_PaintPageBk(
	CDC & dc,
	const RECT & rcPageBk,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintPageBk(
			dc,
			rcPageBk,
			pRibbonPage,
			lParam
			);
		return;
	}

	if( ! dc.RectVisible( &rcPageBk ) )
		return;
	if( pRibbonPage->GetSafeHwnd() != NULL )
	{
		CWnd * pWndParent = pRibbonPage->GetParent();
		if(		pWndParent != NULL
			&&	pWndParent->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
			)
			return;
	} // if( pRibbonPage->GetSafeHwnd() != NULL )
CRect rc = rcPageBk;
	rc.DeflateRect( 2, 0 );
// 	dc.FillSolidRect(
// 		&rc,
// 		GetColor( COLOR_3DHILIGHT )
// 		);
	stat_PaintGradientRect(
		dc,
		rc,
		GetColor( COLOR_3DFACE ),
		GetColor( COLOR_3DHILIGHT ),
		true
		);
COLORREF clrBorder = GetColor( COLOR_3DSHADOW );
	dc.Draw3dRect(
		&rc,
		clrBorder,
		clrBorder
		);
}

void CExtPaintManagerNativeXP::Ribbon_PaintPageBk(
	CDC & dc,
	const RECT & rcPageBk,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );
	lParam;
	if( ! dc.RectVisible( &rcPageBk ) )
		return;
	if( pRibbonPage->GetSafeHwnd() != NULL )
	{
		CWnd * pWndParent = pRibbonPage->GetParent();
		if(		pWndParent != NULL
			&&	pWndParent->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
			)
			return;
	} // if( pRibbonPage->GetSafeHwnd() != NULL )
	if( g_PaintManager.m_UxTheme.IsAppThemed() )
	{
		HWND hWndOpenTheme = pRibbonPage->GetSafeHwnd();
		if( hWndOpenTheme != NULL )
			hWndOpenTheme = ::GetDesktopWindow();
		ASSERT( hWndOpenTheme != NULL );
		if(	g_PaintManager.m_UxTheme.OpenThemeData( hWndOpenTheme, VSCLASS_TAB ) != NULL )
		{
			CRect rcItem = rcPageBk;
			rcItem.DeflateRect( 2, 0 );
			INT nPartID = TABP_PANE;
			INT nStateID = 0;
			VERIFY( 
				g_PaintManager.m_UxTheme.DrawBackground(
					hWndOpenTheme,
					dc.GetSafeHdc(), 
					nPartID, 
					nStateID, 
					&rcItem, 
					&rcItem
					) == S_OK
				);
			g_PaintManager.m_UxTheme.CloseThemeData();
		}
	} // if( g_PaintManager.m_UxTheme.IsAppThemed() )
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintPageBk(
	CDC & dc,
	const RECT & rcPageBk,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage;
	lParam;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintPageBk( dc, rcPageBk, pRibbonPage, lParam );
		return;
	}
	if( m_bmpRibbonPageBk.IsEmpty() )
		return;
	if( ::IsRectEmpty( &rcPageBk ) )
		return;
	if( ! dc.RectVisible( &rcPageBk ) )
		return;
CRect _rcPageBk = rcPageBk;
	if( m_rcRibbonPageBkPadding.bottom > 1 )
	{
		CFont * pFont = ((CExtToolControlBar*)pRibbonPage)->OnGetToolbarFont( false, true, const_cast < CExtRibbonPage * > ( pRibbonPage ) );
		LOGFONT _lf;
		::memset( &_lf, 0, sizeof(LOGFONT) );
		pFont->GetLogFont( &_lf );
		if( _tcscmp( _lf.lfFaceName, _T("Segoe UI") ) != 0 )
			_rcPageBk.bottom ++;
	}
	m_bmpRibbonPageBk.AlphaBlendSkinParts(
		dc.m_hDC,
		_rcPageBk,
		m_rcRibbonPageBkPadding,
		CExtBitmap::__EDM_STRETCH
		);
}

void CExtPaintManagerOffice2007_R1::Ribbon_PaintPageBk(
	CDC & dc,
	const RECT & rcPageBk,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );
	if( ! dc.RectVisible( &rcPageBk ) )
		return;

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintPageBk(
			dc,
			rcPageBk,
			pRibbonPage,
			lParam
			);
		return;
	}

	CExtPaintManagerOffice2007_Impl::Ribbon_PaintPageBk(
		dc,
		rcPageBk,
		pRibbonPage,
		lParam
		);
INT nCaptionHeight = Ribbon_GroupCaptionGetHeight( NULL, lParam );
	ASSERT( nCaptionHeight >= 0 );
	if( nCaptionHeight == 0 )
		return;
CRect rcPageBkAtEnd = rcPageBk;
INT nPos, nCount = pRibbonPage->RibbonGroupButton_GetCount();
	for( nPos = 0; nPos < nCount; nPos ++ )
	{
		const CExtRibbonButtonGroup * pTBB =
			pRibbonPage->RibbonGroupButton_GetAt( nPos );
		ASSERT_VALID( pTBB );
		if( ! pTBB->IsVisible() )
			continue;
		if( ( pTBB->GetStyle() & TBBS_HIDDEN ) != 0 )
			continue;
		CRect rcTBB = *pTBB;
		rcPageBkAtEnd.left = rcTBB.right;
	} // for( nPos = 0; nPos < nCount; nPos ++ )

CExtBitmap & _bmp = m_bmpRibbonGroupBkExpanded[ 0 ];
CSize _size = _bmp.GetSize();
CRect rcDstGroupBk( rcPageBkAtEnd ),
		rcSrcGroupBk( 0, 0, _size.cx, _size.cy ),
		rcDstCaptionBk( rcPageBkAtEnd ),
		rcSrcCaptionBk( 0, 0, _size.cx, _size.cy );
bool bTopCaption = Ribbon_GroupCaptionIsAtTop( NULL );
	if( bTopCaption )
	{
		rcDstGroupBk.top += nCaptionHeight;
		rcDstCaptionBk.bottom = rcDstGroupBk.top;
		rcSrcGroupBk.top += m_nRibbonCaptionPartHeight;
		rcSrcCaptionBk.bottom = rcSrcGroupBk.top;
	} // if( bTopCaption )
	else
	{
		rcDstGroupBk.bottom -= nCaptionHeight;
		rcDstCaptionBk.top = rcDstGroupBk.bottom;
		rcSrcGroupBk.bottom -= m_nRibbonCaptionPartHeight;
		rcSrcCaptionBk.top = rcSrcGroupBk.bottom;
	} // else from if( bTopCaption )
	_bmp.AlphaBlendSkinParts(
		dc.m_hDC,
		rcDstGroupBk,
		rcSrcGroupBk,
		m_rcRibbonGroupPaddingBkExpanded,
		CExtBitmap::__EDM_STRETCH
		);
	_bmp.AlphaBlendSkinParts(
		dc.m_hDC,
		rcDstCaptionBk,
		rcSrcCaptionBk,
		m_rcRibbonGroupPaddingBkExpanded,
		CExtBitmap::__EDM_STRETCH
		);
}

bool CExtPaintManager::Ribbon_HaveSeparatorsBetweenToolGroups() const
{
	ASSERT_VALID( this );
	return false;
}

void CExtPaintManager::Ribbon_PaintSeparator(
	CDC & dc,
	const RECT & rcTBB,
	const CExtBarButton * pSepTBB, // can be NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	pSepTBB;
	lParam;
CRect _rcTBB = rcTBB;
	if( ! dc.RectVisible( &_rcTBB ) )
		return;
	for( ; _rcTBB.Width() < 3; _rcTBB.InflateRect( 1, 0 ) );
	for( ; _rcTBB.Height() < 3; _rcTBB.InflateRect( 0, 1 ) );
	PaintSeparator(
		dc,
		_rcTBB,
		( _rcTBB.Width() < _rcTBB.Height() ) ? true : false,
		true,
		(CObject*)pSepTBB,
		lParam
		);
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintSeparator(
	CDC & dc,
	const RECT & rcTBB,
	const CExtBarButton * pSepTBB, // can be NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	pSepTBB;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintSeparator(
			dc,
			rcTBB,
			pSepTBB,
			lParam
			);
		return;
	}
CRect _rcTBB = rcTBB;
	if( ! dc.RectVisible( &_rcTBB ) )
		return;
	if( _rcTBB.Width() > _rcTBB.Height() )
	{
		if( ! m_bmpRibbonSeparatorH.IsEmpty() )
		{
			CSize _size = m_bmpRibbonSeparatorH.GetSize();
			INT nY = _rcTBB.top + ( _rcTBB.Height() - _size.cy ) / 2;
			CRect rc(
				_rcTBB.left,
				nY,
				_rcTBB.right,
				nY + _size.cy
				);
			m_bmpRibbonSeparatorH.AlphaBlendSkinParts(
				dc.m_hDC,
				rc,
				m_rcRibbonSeparatorPaddingH,
				CExtBitmap::e_DrawMethod_t( m_nRibbonSeparatorDrawModeH )
				);
		} // if( ! m_bmpRibbonSeparatorH.IsEmpty() )
	} // if( _rcTBB.Width() > _rcTBB.Height() )
	else
	{
		if( ! m_bmpRibbonSeparatorV.IsEmpty() )
		{
			CSize _size = m_bmpRibbonSeparatorV.GetSize();
			INT nX = _rcTBB.left + ( _rcTBB.Width() - _size.cx ) / 2;
			CRect rc(
				nX,
				_rcTBB.top,
				nX + _size.cx,
				_rcTBB.bottom
				);
			m_bmpRibbonSeparatorV.AlphaBlendSkinParts(
				dc.m_hDC,
				rc,
				m_rcRibbonSeparatorPaddingV,
				CExtBitmap::e_DrawMethod_t( m_nRibbonSeparatorDrawModeV )
				);
		} // if( ! m_bmpRibbonSeparatorV.IsEmpty() )
	} // else from if( _rcTBB.Width() > _rcTBB.Height() )
}

void CExtPaintManager::Ribbon_SyncFonts()
{
	ASSERT_VALID( this );
	ASSERT( m_FontNormal.GetSafeHandle() != NULL );
	if( m_FontRibbonNormal.GetSafeHandle() != NULL )
		m_FontRibbonNormal.DeleteObject();
	if( m_FontRibbonGroupCaption.GetSafeHandle() != NULL )
		m_FontRibbonGroupCaption.DeleteObject();
	if( m_FontRibbonTabItem.GetSafeHandle() != NULL )
		m_FontRibbonTabItem.DeleteObject();
//bool bUseDesiredRibbonFontFaceName = false;
//static __EXT_MFC_SAFE_LPCTSTR
//		g_sDesiredRibbonFontFaceName = _T("Segoe UI");
//CWindowDC dc( NULL );
//	if(	! ::EnumFontFamilies(
//			dc.m_hDC,
//			NULL,
//			(FONTENUMPROC)stat_FindFontByNameCallBack,
//			reinterpret_cast < LPARAM > ( LPCTSTR(g_sDesiredRibbonFontFaceName) )
//			)
//		)
//		bUseDesiredRibbonFontFaceName = true;
LOGFONT _lf;
	::memset( &_lf, 0, sizeof(LOGFONT) );
	m_FontNormal.GetLogFont( &_lf );
//	if( bUseDesiredRibbonFontFaceName )
//	{
//		__EXT_MFC_STRCPY( _lf.lfFaceName, LF_FACESIZE, g_sDesiredRibbonFontFaceName );
//		_lf.lfWidth = 0;
//		_lf.lfHeight = -11;
//	}
//	else
//	{
//		__EXT_MFC_STRCPY( _lf.lfFaceName, LF_FACESIZE, _T("Arial") );
//		_lf.lfWidth = 5;
//		_lf.lfHeight = 14;
//		_lf.lfWeight = 550;
//	}
	if( g_PaintManager.m_bIsWinXPorLater )
		_lf.lfQuality = CLEARTYPE_QUALITY;
	if( g_PaintManager.m_bIsWinVistaOrLater )
	{
		static __EXT_MFC_SAFE_LPCTSTR g_sDesiredRibbonFontFaceName = _T("Segoe UI");
		CWindowDC dc( NULL );
		if(	! ::EnumFontFamilies(
				dc.m_hDC,
				NULL,
				(FONTENUMPROC)stat_FindFontByNameCallBack,
				reinterpret_cast < LPARAM > ( LPCTSTR(g_sDesiredRibbonFontFaceName) )
				)
			)
		{
			__EXT_MFC_STRCPY( _lf.lfFaceName, LF_FACESIZE, g_sDesiredRibbonFontFaceName );
			_lf.lfWidth = 0;
			if(		UiScalingIsEnabled( __EUIST_Y )
				&&	g_PaintManager.m_nLPY > 96
				)
				_lf.lfHeight = -13;
			else
				_lf.lfHeight = -11;
		}
	}
	VERIFY( m_FontRibbonNormal.CreateFontIndirect( &_lf ) );
	VERIFY( m_FontRibbonGroupCaption.CreateFontIndirect( &_lf ) );
	VERIFY( m_FontRibbonTabItem.CreateFontIndirect( &_lf ) );
}

void CExtPaintManagerOffice2007_R1::Ribbon_SyncFonts()
{
	ASSERT_VALID( this );
	ASSERT( m_FontNormal.GetSafeHandle() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_SyncFonts();
		return;
	}
	CExtPaintManagerOffice2003::Ribbon_SyncFonts();
	ASSERT( m_FontRibbonTabItem.GetSafeHandle() != NULL );
LOGFONT _lf;
	::memset( &_lf, 0, sizeof(LOGFONT) );
	m_FontRibbonTabItem.GetLogFont( &_lf );
	m_FontRibbonTabItem.DeleteObject();
	_lf.lfWidth = 0;
	_lf.lfHeight = -13;
	VERIFY( m_FontRibbonTabItem.CreateFontIndirect( &_lf ) );
}

CRect CExtPaintManager::Ribbon_GetPopupGroupBorderMetrics(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage; lParam;
	return CRect( 2, 2, 2, 2 );
}

CRect CExtPaintManagerXP::Ribbon_GetPopupGroupBorderMetrics(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage; lParam;
	return CRect( 1, 1, 1, 1 );
}

CRect CExtPaintManagerOffice2007_Impl::Ribbon_GetPopupGroupBorderMetrics(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GetPopupGroupBorderMetrics( pRibbonPage, lParam );	
	return CRect( -1, 0, -1, -2 );
}

CRect CExtPaintManagerOffice2007_R1::Ribbon_GetPopupGroupBorderMetrics(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GetPopupGroupBorderMetrics( pRibbonPage, lParam );	
	return CRect( 1, 1, 1, 1 );
}

bool CExtPaintManager::Ribbon_IsPopupGroupWithCaption(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	pHelperSrc; lParam;
	return false;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_IsPopupGroupWithCaption(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_IsPopupGroupWithCaption( pHelperSrc, lParam );	
	return true;
}

bool CExtPaintManagerOffice2007_R1::Ribbon_IsPopupGroupWithCaption(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_IsPopupGroupWithCaption( pHelperSrc, lParam );	
	return false;
}

INT CExtPaintManager::RibbonQuickAccessBar_GetBottomHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage; lParam;
INT nHeight = UiScalingDo( 24, __EUIST_Y );
	return nHeight;
}

INT CExtPaintManagerOffice2007_R2_LunaBlue::RibbonQuickAccessBar_GetBottomHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonQuickAccessBar_GetBottomHeight( pRibbonPage, lParam );	
INT nHeight = UiScalingDo( 26, __EUIST_Y );
	return nHeight;
}

INT CExtPaintManagerOffice2007_R2_Silver::RibbonQuickAccessBar_GetBottomHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonQuickAccessBar_GetBottomHeight( pRibbonPage, lParam );	
INT nHeight = UiScalingDo( 24, __EUIST_Y );
	return nHeight;
}

INT CExtPaintManagerOffice2007_R2_Obsidian::RibbonQuickAccessBar_GetBottomHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonQuickAccessBar_GetBottomHeight( pRibbonPage, lParam );	
INT nHeight = UiScalingDo( 24, __EUIST_Y );
	return nHeight;
}

INT CExtPaintManager::RibbonQuickAccessBar_GetButtonsAlignment(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage; lParam;
	return 0;
}

INT CExtPaintManagerOffice2007_Impl::RibbonQuickAccessBar_GetButtonsAlignment(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonQuickAccessBar_GetButtonsAlignment( pRibbonPage, lParam );	
	return m_nRibbonQuickAccessBarButtonsAlignment;
}

void CExtPaintManager::RibbonQuickAccessBar_PaintBkAtTheBottom(
	CDC & dc,
	CRect rcQATB,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );
	dc; rcQATB; pRibbonPage; lParam;
}

void CExtPaintManagerNativeXP::RibbonQuickAccessBar_PaintBkAtTheBottom(
	CDC & dc,
	CRect rcQATB,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage;
	lParam;
	if( g_PaintManager.m_UxTheme.OpenThemeData( pRibbonPage->GetSafeHwnd(), VSCLASS_REBAR ) != NULL )
	{
		CRect rcPaint = rcQATB;
		VERIFY( 
			g_PaintManager.m_UxTheme.DrawBackground(
				pRibbonPage->GetSafeHwnd(),
				dc.GetSafeHdc(), 
				0, 
				0, 
				&rcPaint, 
				&rcPaint
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

void CExtPaintManagerOffice2007_Impl::RibbonQuickAccessBar_PaintBkAtTheBottom(
	CDC & dc,
	CRect rcQATB,
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::RibbonQuickAccessBar_PaintBkAtTheBottom( dc, rcQATB, pRibbonPage, lParam );
		return;
	}
	if( m_bmpRibbonQuickAccessBarBkAtTheBottom.IsEmpty() )
		return;
	m_bmpRibbonQuickAccessBarBkAtTheBottom.AlphaBlendSkinParts(
		dc.m_hDC,
		rcQATB,
		m_rcPaddingRibbonQuickAccessBarBkAtTheBottom,
		CExtBitmap::__EDM_STRETCH,
		true,
		true
		);
}

void CExtPaintManager::RibbonQuickAccessBar_AdjustButtonLocation(
	CExtBarButton * pTBB,
	CRect & rcTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	pTBB; rcTBB; lParam;
}

void CExtPaintManagerOffice2007_Impl::RibbonQuickAccessBar_AdjustButtonLocation(
	CExtBarButton * pTBB,
	CRect & rcTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::RibbonQuickAccessBar_AdjustButtonLocation( pTBB, rcTBB, lParam );
		return;
	}

	if(		g_PaintManager.m_DWM.IsCompositionEnabled()
		&&	Ribbon_FileButtonIsItegrationSupported()
		)
	{
		CExtRibbonBar * pRibbonBar = STATIC_DOWNCAST( CExtRibbonBar, pTBB->GetBar() );
		if(		pRibbonBar != NULL
			&&	pRibbonBar->m_pExtNcFrameImpl != NULL
			&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
			&&	pRibbonBar->RibbonQuickAccessBar_AboveTheRibbonGet()
			)
		{
			bool bZoomedMode = false;
			if( pRibbonBar->GetParent()->IsZoomed() )
				bZoomedMode = true;
			rcTBB.OffsetRect( 0, bZoomedMode ? 3 : 2 );
// 			if(		( ! IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_LunaBlue ) ) )
// 				&&	( ! IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Obsidian ) ) )
// 				&&	( ! IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Silver ) ) )
// 				)
// 				rcTBB.OffsetRect( 0, 3 );
// 			else
// 			{
// 				if(		UiScalingIsEnabled( __EUIST_Y )
// 					&&	g_PaintManager.m_nLPY > 96
// 					)
// 					rcTBB.OffsetRect( 0, 1 );
// 			}
		}
	} // if( g_PaintManager.m_DWM.IsCompositionEnabled() ...
}

INT CExtPaintManager::RibbonQuickAccessBar_GetAdditionalSpaceAtRight(
	bool bDwmMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	bDwmMode; pHelperSrc; lParam;
	return 0;
}	

INT CExtPaintManagerOffice2007_Impl::RibbonQuickAccessBar_GetAdditionalSpaceAtRight(
	bool bDwmMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc; lParam;
	return bDwmMode ? m_nQatbAdditionalSpaceAtRightDWM : m_nQatbAdditionalSpaceAtRight;
}	

void CExtPaintManager::Ribbon_PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bSelected,
	const CRect & rcEntireItem,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pFont->GetSafeHandle() != NULL );
	if( ! dc.RectVisible( &rcEntireItem ) )
		return;
	if( clrForceText == COLORREF(-1L) )
		clrForceText = GetColor( COLOR_BTNTEXT );
	if( clrForceTabSeparator == COLORREF(-1L) )
		clrForceTabSeparator = GetColor( COLOR_BTNTEXT );
CRect _rcEntireItem = rcEntireItem;
	if( bSelected )
		_rcEntireItem.DeflateRect( 0, 2, 0, 0 );
// 	else if(
// 			pHelperSrc != NULL
// 		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) )
// 		&&	((CExtBarButton*)pHelperSrc)->IsHover()
// 		)
// 	{
// 		bSelected = true;
// 		_rcEntireItem.DeflateRect( 2, 1, 3, 1 );
// 		clrForceText = GetColor( COLOR_3DHIGHLIGHT );
// 		clrForceTabBk = clrForceTabBorderLT = clrForceTabBorderRB =
// 			GetColor( COLOR_3DDKSHADOW );
// 	}
	else
		_rcEntireItem.DeflateRect( 0, 2, 0, 2 );
CSize sizeTextMeasured = stat_CalcTextDimension( dc, *pFont, CExtSafeString(sText), DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
	PaintTabItem(
		dc,
		rcTabItemsArea,
		true,
		true,
		bSelected,
		true,
		false,
		false,
		false,
		_rcEntireItem,
		sizeTextMeasured,
		pFont,
		sText,
		pIcon,
		pHelperSrc,
		lParam,
		clrForceText,
		clrForceTabBk,
		clrForceTabBorderLT,
		clrForceTabBorderRB,
		clrForceTabSeparator
		);
}

void CExtPaintManagerNativeXP::Ribbon_PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bSelected,
	const CRect & rcEntireItem,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pFont->GetSafeHandle() != NULL );
	if( ! dc.RectVisible( &rcEntireItem ) )
		return;
	if( clrForceText == COLORREF(-1L) )
		clrForceText = GetColor( COLOR_BTNTEXT );
	if( clrForceTabSeparator == COLORREF(-1L) )
		clrForceTabSeparator = GetColor( COLOR_BTNTEXT );
CRect _rcEntireItem = rcEntireItem;
	_rcEntireItem.DeflateRect( 0, 2, 0, 2 );
CSize sizeTextMeasured = stat_CalcTextDimension( dc, *pFont, CExtSafeString(sText), DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
	PaintTabItem(
		dc,
		rcTabItemsArea,
		true,
		true,
		bSelected,
		true,
		false,
		false,
		false,
		_rcEntireItem,
		sizeTextMeasured,
		pFont,
		sText,
		pIcon,
		pHelperSrc,
		lParam,
		clrForceText,
		clrForceTabBk,
		clrForceTabBorderLT,
		clrForceTabBorderRB,
		clrForceTabSeparator
		);
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bSelected,
	const CRect & rcEntireItem,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pFont->GetSafeHandle() != NULL );
	if( ! dc.RectVisible( &rcEntireItem ) )
		return;

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintTabItem(
			dc,
			rcTabItemsArea,
			bSelected,
			rcEntireItem,
			pFont,
			sText,
			pIcon,
			pHelperSrc,
			lParam,
			clrForceText,
			clrForceTabBk,
			clrForceTabBorderLT,
			clrForceTabBorderRB,
			clrForceTabSeparator
			);
		return;
	}

bool bDwmMode = false;
	if(		g_PaintManager.m_bIsWinVistaOrLater
		&&	g_PaintManager.m_DWM.IsCompositionEnabled()
		&&	pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarButton) )
		)
	{
		CExtToolControlBar * pToolBar = ((CExtBarButton*)pHelperSrc)->GetSafeBar();
		if( pToolBar != NULL )
		{
			CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pToolBar );
			if( pRibbonBar != NULL )
			{
				if(		pRibbonBar->m_pExtNcFrameImpl != NULL
					&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
					)
					bDwmMode = true;
			}
		}
	}
CDC * pDC = &dc;
CExtMemoryDC * p_dc32 = NULL;
	if( bDwmMode )
	{
		if(	! g_PaintManager.m_UxTheme.OpenThemeDataEx( ::GetDesktopWindow(), VSCLASS_WINDOW, __EXT_UX_OTD_NONCLIENT ) != NULL )
			bDwmMode = false;
		else
		{
			p_dc32 = new CExtMemoryDC(
				&dc,
				&rcEntireItem,
				CExtMemoryDC::MDCOPT_TO_MEMORY
					| CExtMemoryDC::MDCOPT_FORCE_DIB
					| CExtMemoryDC::MDCOPT_FILL_BITS
					| CExtMemoryDC::MDCOPT_DIB_NEGATIVE_HEIGHT
				);
			ASSERT( p_dc32->GetSafeHdc() != NULL );
			pDC = p_dc32;
		}
	}
CSize sizeTextMeasured = stat_CalcTextDimension( dc, *pFont, CExtSafeString(sText), DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
	PaintTabItem(
		*pDC,
		rcTabItemsArea,
		true,
		true,
		bSelected,
		true,
		false,
		false,
		false,
		rcEntireItem,
		sizeTextMeasured,
		pFont,
		sText,
		pIcon,
		pHelperSrc,
		lParam,
		clrForceText,
		clrForceTabBk,
		clrForceTabBorderLT,
		clrForceTabBorderRB,
		clrForceTabSeparator,
		bDwmMode
		);
	if( bDwmMode )
	{
		ASSERT( p_dc32 != NULL );
		delete p_dc32;
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
}

void CExtPaintManagerOffice2007_R1::Ribbon_PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bSelected,
	const CRect & rcEntireItem,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator // = COLORREF(-1L)
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pFont->GetSafeHandle() != NULL );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintTabItem(
			dc,
			rcTabItemsArea,
			bSelected,
			rcEntireItem,
			pFont,
			sText,
			pIcon,
			pHelperSrc,
			lParam,
			clrForceText,
			clrForceTabBk,
			clrForceTabBorderLT,
			clrForceTabBorderRB,
			clrForceTabSeparator
			);	
		return;
	}

CRect _rcEntireItem = rcEntireItem;
	_rcEntireItem.top ++;
	if( ! dc.RectVisible( &_rcEntireItem ) )
		return;
	CExtPaintManagerOffice2007_Impl::Ribbon_PaintTabItem(
		dc,
		rcTabItemsArea,
		bSelected,
		_rcEntireItem,
		pFont,
		sText,
		pIcon,
		pHelperSrc,
		lParam,
		clrForceText,
		clrForceTabBk,
		clrForceTabBorderLT,
		clrForceTabBorderRB,
		clrForceTabSeparator
		);
}

void CExtPaintManager::Ribbon_PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc;
	rcClient;
	rcTabItemsArea;
	rcTabNearBorderArea;
	pHelperSrc;
	lParam;
}

void CExtPaintManagerOffice2007_R1::Ribbon_PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_PaintTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			pHelperSrc,
			lParam
			);
		return;
	}
	if( pHelperSrc == NULL )
		return;
	ASSERT_VALID( pHelperSrc );
CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pHelperSrc );
	if( pRibbonBar == NULL )
		return;
CRect rcLine(
		rcClient.left,
		rcTabItemsArea.top,
		rcClient.right,
		rcTabItemsArea.top + 1
		);
	if( dc.RectVisible( &rcLine ) )
		dc.FillSolidRect(
			rcLine,
			RGB(216,214,214)
			);
	if( m_bmpRibbonFileButtonArea.IsEmpty() )
		return;
CExtRibbonButtonFile * pFileTBB = pRibbonBar->Ribbon_FileButtonGet();
	if( pFileTBB == NULL )
		return;
	ASSERT_VALID( pFileTBB );
CRect rcTBB = *pFileTBB;
CRect rcDst(
		rcClient.left,
		rcTabItemsArea.top,
		rcTBB.right + 6,
		rcTabItemsArea.bottom
		);
CRect rcPadding( 0, 0, 10, 0 );
	if( dc.RectVisible( &rcDst ) )
		m_bmpRibbonFileButtonArea.AlphaBlendSkinParts(
			dc.m_hDC,
			rcDst,
			rcPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			);
}

void CExtPaintManagerOffice2007_Impl::Ribbon_PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	CExtPaintManagerOffice2003::Ribbon_PaintTabClientArea(
		dc,
		rcClient,
		rcTabItemsArea,
		rcTabNearBorderArea,
		pHelperSrc,
		lParam
		);
	if( IsHighContrast() )
		return;
	if( pHelperSrc == NULL )
		return;
	ASSERT_VALID( pHelperSrc );
CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pHelperSrc );
	if( pRibbonBar == NULL )
		return;
	if( Ribbon_DwmAreaCoversTabs() )
	{
		bool bDrawDefaultTabClientArea = true;
		if( (! m_bmpRibbonTabAreaBlur.IsEmpty() ) && g_PaintManager.m_DWM.IsCompositionEnabled() )
		{
			bool bDwmMode = false;
			if(		pRibbonBar->m_pExtNcFrameImpl != NULL
				&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
				)
				bDwmMode = true;
			if( bDwmMode )
			{
				bDrawDefaultTabClientArea = false;
				CRect rcBlur = rcTabItemsArea;
				rcBlur.top = min( rcBlur.top, rcClient.top );
				DWORD dwDcLayout = dc.GetLayout();
				dc.SetLayout( LAYOUT_LTR );
				m_bmpRibbonTabAreaBlur.AlphaBlendSkinParts(
					dc.m_hDC,
					rcBlur,
					m_rcRibbonTabAreaBlurPadding,
					CExtBitmap::__EDM_STRETCH,
					true,
					true
					);
				dc.SetLayout( dwDcLayout );
			}
		}
		if( bDrawDefaultTabClientArea && pHelperSrc != NULL && ( m_clrRibbonTabClientAreaActive != COLORREF(-1L) || m_clrRibbonTabClientAreaInactive != COLORREF(-1L) ) )
		{
			CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pHelperSrc );
			if( pRibbonBar != NULL && pRibbonBar->m_pExtNcFrameImpl != NULL )
			{
				COLORREF clrFill = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsActive() ? m_clrRibbonTabClientAreaActive : m_clrRibbonTabClientAreaInactive;
				dc.FillSolidRect( &rcTabItemsArea, clrFill );
			}
		}
	}
}

INT CExtPaintManager::Ribbon_GetTabIntersectionHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage;
	lParam;
	return 0;
}

INT CExtPaintManagerNativeXP::Ribbon_GetTabIntersectionHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage;
	lParam;
	return 0;
}

INT CExtPaintManagerOffice2007_Impl::Ribbon_GetTabIntersectionHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetTabIntersectionHeight(
				pRibbonPage,
				lParam
				);	
	return m_nRibbonTabIntersectionHeight;
}

INT CExtPaintManager::Ribbon_GetTabLineHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	pRibbonPage;
	lParam;
CFont * pMeasureFont = (CFont*)&m_FontRibbonNormal;
	ASSERT( pMeasureFont->GetSafeHandle() != NULL );
CWindowDC dc( NULL );
CFont * pOldFont = dc.SelectObject( pMeasureFont );
TEXTMETRIC _TxtM;
	::memset( &_TxtM, 0, sizeof(TEXTMETRIC) );
	if( ! dc.GetTextMetrics( &_TxtM ) )
		_TxtM.tmHeight = 17;
	dc.SelectObject( pOldFont );
// 			INT nBasicHeight = _TxtM.tmHeight + 10;
// 			INT nTabLineHeight = UiScalingDo( nBasicHeight, __EUIST_Y );
INT nTabLineHeight = _TxtM.tmHeight + UiScalingDo( 10, __EUIST_Y );
	return nTabLineHeight;
}

INT CExtPaintManagerOffice2007_R1::Ribbon_GetTabLineHeight(
	const CExtRibbonPage * pRibbonPage,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonPage );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_GetTabLineHeight( pRibbonPage, lParam );	
INT nTabLineHeight = CExtPaintManagerOffice2007_Impl::Ribbon_GetTabLineHeight( pRibbonPage, lParam );
	return nTabLineHeight;
}

HRGN CExtPaintManager::Ribbon_GetRgnCornerExclude(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return ((HRGN)NULL);
}

HRGN CExtPaintManagerOffice2007_Impl::Ribbon_GetRgnCornerExclude(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetRgnCornerExclude(
				pHelperSrc,
				lParam
				);	

	if(		pHelperSrc != 0
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CWnd) )
		&&	((CWnd*)pHelperSrc)->IsZoomed()
		)
		return NULL;
HRGN hRgn = (HRGN)m_rgnRibbonNcCornerExclude.GetSafeHandle();
	if( hRgn != NULL )
		return hRgn;
	if( m_bmpRibbonNcCornerHT.IsEmpty() )
		return  ((HRGN)NULL);
HRGN hRgnBmp = m_bmpRibbonNcCornerHT.GenerateColorHRGN( false, RGB(255,0,255) );
	if( hRgnBmp == NULL )
		return NULL;
CSize _size = m_bmpRibbonNcCornerHT.GetSize();
	hRgn = ::CreateRectRgn( 0, 0, _size.cx, _size.cy );
	::CombineRgn( hRgn, hRgn, hRgnBmp, RGN_DIFF );
	::DeleteObject( hRgnBmp );
	m_rgnRibbonNcCornerExclude.Attach( hRgn );
	return hRgn;
}

HRGN CExtPaintManager::Ribbon_GetRgnCornerResizing(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	pHelperSrc;
	lParam;
	return ((HRGN)NULL);
}

HRGN CExtPaintManagerOffice2007_Impl::Ribbon_GetRgnCornerResizing(
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_GetRgnCornerResizing(
				pHelperSrc,
				lParam
				);	

HRGN hRgn = (HRGN)m_rgnRibbonNcCornerResizing.GetSafeHandle();
	if( hRgn != NULL )
		return hRgn;
	if( m_bmpRibbonNcCornerHT.IsEmpty() )
		return  ((HRGN)NULL);
bool bRTL = false;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CWnd) )
		&&	(((CWnd*)pHelperSrc)->GetExStyle()&WS_EX_LAYOUTRTL) != 0
		)
		bRTL = true;
HRGN hRgnBmp = m_bmpRibbonNcCornerHT.GenerateColorHRGN( bRTL, RGB(0,255,0) );
	if( hRgnBmp == NULL )
		return NULL;
CSize _size = m_bmpRibbonNcCornerHT.GetSize();
	hRgn = ::CreateRectRgn( 0, 0, _size.cx, _size.cy );
	::CombineRgn( hRgn, hRgn, hRgnBmp, RGN_DIFF );
	::DeleteObject( hRgnBmp );
	m_rgnRibbonNcCornerResizing.Attach( hRgn );
	return hRgn;
}

void CExtPaintManager::Ribbon_EmbeddedCaptionPaintText(
	CDC & dc,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CRect rcDrawText,
	__EXT_MFC_SAFE_LPCTSTR strCaptionDelimiter,
	const CExtRibbonBar * pRibbonBar,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	dc;
	pRibbonBar;
	strCaption;
	rcDrawText;
	strCaptionDelimiter;
	pRibbonBar;
	lParam;
}

void CExtPaintManagerOffice2007_Impl::Ribbon_EmbeddedCaptionPaintText(
	CDC & dc,
	__EXT_MFC_SAFE_LPCTSTR strCaption,
	CRect rcDrawText,
	__EXT_MFC_SAFE_LPCTSTR strCaptionDelimiter,
	const CExtRibbonBar * pRibbonBar,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	if(		strCaption == NULL
		||	(! dc.RectVisible(&rcDrawText) )
		)
		return;

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_EmbeddedCaptionPaintText(
			dc,
			strCaption,
			rcDrawText,
			strCaptionDelimiter,
			pRibbonBar,
			lParam
			);
		return;
	}

INT nLenCaption = INT( _tcslen( strCaption ) );
	if( nLenCaption == 0 )
		return;

bool bRTL = ( (pRibbonBar->GetExStyle()&WS_EX_LAYOUTRTL) != 0 ) ? true : false;;
	if( ! IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) ) )
	{
		if( bRTL )
		{
			CRect rcClient;
			pRibbonBar->GetClientRect( &rcClient );
			rcDrawText.OffsetRect(
				rcClient.right - rcDrawText.left * 2 - rcDrawText.Width(),
				0
				);
		} // if( bRTL )
	} // if( ! IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) ) )
UINT nBaseDT = Ribbon_EmbeddedCaptionGetTextAlignmentFlags( pRibbonBar );
//UINT nAlignDT = nBaseDT & (DT_LEFT|DT_CENTER|DT_RIGHT);
UINT nDT = nBaseDT & (~(DT_CALCRECT));
	if( bRTL )
	{
		if( (nDT&3) == DT_RIGHT )
		{
			nDT &= ~3;
			nDT |= DT_LEFT;
		}
		else if( (nDT&3) == DT_LEFT )
		{
			nDT &= ~3;
			nDT |= DT_RIGHT;
		}
	} // if( bRTL )

CExtSafeString strLeft = strCaption, strMiddle, strRight;
INT nLenDelimiter = 0;
	if( strCaptionDelimiter != NULL )
	{
		nLenDelimiter = INT( _tcslen( strCaptionDelimiter ) );
		if( nLenDelimiter > 0 )
		{
			INT nPos = strLeft.Find( strCaptionDelimiter );
			if( nPos >= 0 )
			{
				strRight = strLeft.Right( nLenCaption - nPos - nLenDelimiter );
				strLeft = strLeft.Left( nPos );
				if( ! strRight.IsEmpty() )
					strMiddle = strCaptionDelimiter;
			} // if( nPos >= 0 )
		} // if( nLenDelimiter > 0 )
	} // if( strCaptionDelimiter != NULL )
CFont * pOldFont = dc.SelectObject( &m_FontCaption );
INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
COLORREF clrOldText = dc.GetTextColor();
	nDT &= ~(DT_END_ELLIPSIS);
INT nWidthLeft = stat_CalcTextDimension( dc, m_FontCaption, strLeft, DT_SINGLELINE|DT_LEFT|DT_TOP|DT_CALCRECT ).Width();
INT nWidthMiddle = 0, nWidthRight = 0, nWidthAvailable = rcDrawText.Width();
	if( ! strRight.IsEmpty() )
	{
		nWidthMiddle = stat_CalcTextDimension( dc, m_FontCaption, strMiddle, DT_SINGLELINE|DT_LEFT|DT_TOP|DT_CALCRECT ).Width();
		nWidthRight  = stat_CalcTextDimension( dc, m_FontCaption, strRight, DT_SINGLELINE|DT_LEFT|DT_TOP|DT_CALCRECT ).Width();
	}

	dc.SetTextColor( m_clrRibbon_EmbeddedCaptionTextLeft );
	if( nWidthAvailable > ( nWidthLeft + nWidthMiddle + nWidthRight ) && (! strRight.IsEmpty() ) )
	{
		if( (nDT&DT_RIGHT) != 0 )
			rcDrawText.left = rcDrawText.right - ( nWidthLeft + nWidthMiddle + nWidthRight );
		else if( (nDT&DT_CENTER) != 0 )
			rcDrawText.left += ( rcDrawText.Width() - ( nWidthLeft + nWidthMiddle + nWidthRight ) ) / 2; 
		nDT &= ~(DT_RIGHT|DT_CENTER);
		nDT |= DT_LEFT;
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(strLeft), strLeft.GetLength(), rcDrawText, nDT, 0 );
		rcDrawText.left += nWidthLeft;
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(strMiddle), strMiddle.GetLength(), rcDrawText, nDT, 0 );
		dc.SetTextColor( m_clrRibbon_EmbeddedCaptionTextRight );
		rcDrawText.left += nWidthMiddle;
		nDT |= DT_END_ELLIPSIS;
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(strRight), strRight.GetLength(), rcDrawText, nDT, 0 );
	} // if( nWidthAvailable > ( nWidthLeft + nWidthMiddle ) && (! strRight.IsEmpty() ) )
	else
	{
		nDT &= ~(DT_LEFT|DT_CENTER|DT_RIGHT);
		nDT |= DT_LEFT; // nDT |= nAlignDT;
		nDT |= DT_END_ELLIPSIS;
		if( bRTL )
			nDT |= DT_RTLREADING;
		CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(strLeft), strLeft.GetLength(), rcDrawText, nDT, 0 );
		if(! strRight.IsEmpty() )
		{
			rcDrawText.left += nWidthLeft;
			if( ( rcDrawText.Width() + nWidthMiddle ) > 0 )
			{
				CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(strMiddle), strMiddle.GetLength(), rcDrawText, nDT, 0 );
				dc.SetTextColor( m_clrRibbon_EmbeddedCaptionTextRight );
				rcDrawText.left += nWidthMiddle;
				CExtRichContentLayout::stat_DrawText( dc.m_hDC, LPCTSTR(strRight), strRight.GetLength(), rcDrawText, nDT, 0 );
			}
		}
	} // else from if( nWidthAvailable > ( nWidthLeft + nWidthMiddle ) && (! strRight.IsEmpty() ) )
	dc.SetTextColor( clrOldText );
	dc.SetBkMode( nOldBkMode );
	dc.SelectObject( &pOldFont );
}

UINT CExtPaintManager::Ribbon_EmbeddedCaptionGetTextAlignmentFlags(
	const CExtRibbonBar * pRibbonBar,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	pRibbonBar;
	lParam;
	return (DT_SINGLELINE|DT_CENTER|DT_VCENTER);
}

UINT CExtPaintManagerOffice2007_Impl::Ribbon_EmbeddedCaptionGetTextAlignmentFlags(
	const CExtRibbonBar * pRibbonBar,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_EmbeddedCaptionGetTextAlignmentFlags(
				pRibbonBar,
				lParam
				);	
	return m_nRibbonEmbeddedCaptionTextAlignmentFlags;
}

void CExtPaintManager::Ribbon_EmbeddedCaptionAdjustTextRect(
	CRect & rcAdjust,
	const CExtRibbonBar * pRibbonBar,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	rcAdjust;
	pRibbonBar;
	lParam;
}

void CExtPaintManagerOffice2007_Impl::Ribbon_EmbeddedCaptionAdjustTextRect(
	CRect & rcAdjust,
	const CExtRibbonBar * pRibbonBar,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_EmbeddedCaptionAdjustTextRect(
			rcAdjust,
			pRibbonBar,
			lParam
			);
		return;
	}

bool bDwmMode = false;
	if(		pRibbonBar->m_pExtNcFrameImpl != NULL
		&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
		)
		bDwmMode = true;
	if(		( ! bDwmMode )
		&&	pRibbonBar->GetParent()->IsZoomed()
		)
	{
		rcAdjust.OffsetRect( 0, 3 );
	}
}

void CExtPaintManager::Ribbon_NcOverPaint(
	CDC & dc,
	bool bFrameActive,
	INT nWidthFromLeft,
	bool bDwmMode,
	LPCRECT pRectDwmText,
	__EXT_MFC_SAFE_LPCTSTR strDwmCaptionTitle,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc; bFrameActive; nWidthFromLeft; bDwmMode; pRectDwmText; strDwmCaptionTitle; pHelperSrc; lParam;
}

void CExtPaintManagerOffice2007_Impl::Ribbon_NcOverPaint(
	CDC & dc,
	bool bFrameActive,
	INT nWidthFromLeft,
	bool bDwmMode,
	LPCRECT pRectDwmText,
	__EXT_MFC_SAFE_LPCTSTR strDwmCaptionTitle,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_NcOverPaint( dc, bFrameActive, nWidthFromLeft, bDwmMode, pRectDwmText, strDwmCaptionTitle, pHelperSrc, lParam );
		return;
	}
bool bZoomedMode = false;
bool bThirdRelease = false, bSecondRelease = false, bDrawQatbBackground = true;
	if(		IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_LunaBlue ) )
		||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Silver ) )
		||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Obsidian ) )
		)
	{
		bThirdRelease = true;
		if( pHelperSrc != NULL )
		{
			CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pHelperSrc );
			if( pRibbonBar != NULL )
			{
				if( ! pRibbonBar->RibbonQuickAccessBar_AboveTheRibbonGet() )
					bDrawQatbBackground = false;
				if( pRibbonBar->GetParent()->IsZoomed() )
					bZoomedMode = true;
			} // if( pRibbonBar != NULL )
		} // if( pHelperSrc != NULL )
	}
	else
	if(		IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R2_LunaBlue ) )
		||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R2_Silver ) )
		||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R2_Obsidian ) )
		)
	{
		bSecondRelease = true;
		if( pHelperSrc != NULL )
		{
			CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pHelperSrc );
			if( pRibbonBar != NULL )
			{
				if( pRibbonBar->GetParent()->IsZoomed() )
					bZoomedMode = true;
			} // if( pRibbonBar != NULL )
		} // if( pHelperSrc != NULL )
	}

	nWidthFromLeft += 15;

bool bActiveGlyph = bFrameActive && ( ! ( bDwmMode && bThirdRelease ) );
CExtBitmap & _bmpLeft = ( bDwmMode && ( ! m_bmpRibbonNcCornerDwmLeft.IsEmpty() ) ) ? m_bmpRibbonNcCornerDwmLeft : ( bActiveGlyph ? m_bmpRibbonNcCornerActiveLeft : m_bmpRibbonNcCornerInactiveLeft );
CExtBitmap & _bmpRight = ( bDwmMode && ( ! m_bmpRibbonNcCornerDwmRight.IsEmpty() ) ) ? m_bmpRibbonNcCornerDwmRight : ( bActiveGlyph ? m_bmpRibbonNcCornerActiveRight : m_bmpRibbonNcCornerInactiveRight );
	if( _bmpLeft.IsEmpty() || _bmpRight.IsEmpty() )
		bDrawQatbBackground = false;
	if( bDrawQatbBackground )
	{
		CSize _sizeLeft = _bmpLeft.GetSize();
		CSize _sizeRight = _bmpRight.GetSize();
		if( bThirdRelease )
		{
			_sizeLeft.cy = UiScalingDo( _sizeLeft.cy, __EUIST_Y );
			_sizeRight.cy = UiScalingDo( _sizeRight.cy, __EUIST_Y );
		} // if( bThirdRelease )
		INT nMinWidthFromLeft = _sizeLeft.cx + _sizeRight.cx;
		if( nWidthFromLeft < nMinWidthFromLeft )
			nWidthFromLeft = nMinWidthFromLeft;
		CRect rcRibbonNcCornerLeftCP = m_rcRibbonNcCornerLeftCP;
		CRect rcRibbonNcCornerRightCP = m_rcRibbonNcCornerRightCP;
		BYTE nSCA = BYTE(0x0FF);
		CRect rcDstLeft( 0, 0, _sizeLeft.cx, _sizeLeft.cy );
		CRect rcDstRight( _sizeLeft.cx, 0, nWidthFromLeft, _sizeRight.cy );
		if( bThirdRelease )
		{
			if( g_PaintManager.m_nLPY > 96 )
				rcDstLeft.left += 10;
			if( bDwmMode )
			{
				POINT ptOffset = { 4, -2 };
				if( bZoomedMode )
				{
					ptOffset.x -= ::GetSystemMetrics( SM_CXFRAME )/4;
					ptOffset.y += ::GetSystemMetrics( SM_CYFRAME ) - 2;
				}
				rcDstLeft. OffsetRect( ptOffset );
				rcDstRight.OffsetRect( ptOffset );
				if(		UiScalingIsEnabled( __EUIST_Y )
					&&	g_PaintManager.m_nLPY > 96
					)
				{
					rcDstLeft. bottom -= 1;
					rcDstRight.bottom -= 1;
				}
				else
				{
					rcDstLeft. bottom += 1;
					rcDstRight.bottom += 1;
				}
				rcRibbonNcCornerRightCP.left = 0;
			} // if( bDwmMode )
			else
			{
				if( bZoomedMode )
				{
					const POINT ptOffset = { -4, -4 };
					rcDstLeft. OffsetRect( ptOffset );
					rcDstRight.OffsetRect( ptOffset );
				}
				if( ! g_PaintManager.m_bIsWin2000orLater )
				{
					rcRibbonNcCornerRightCP.left = 0;
				} // if( ! g_PaintManager.m_bIsWin2000orLater )
			} // else from if( bDwmMode )
		} // if( bThirdRelease )
		else
		{
			if( bDwmMode )
			{
				POINT ptOffset = { 8, -1 };
				if( bZoomedMode )
					ptOffset.y += ::GetSystemMetrics( SM_CYFRAME );
				rcDstLeft. OffsetRect( ptOffset );
				rcDstRight.OffsetRect( ptOffset );
				if( ! bZoomedMode )
				{
					rcDstLeft. top += 4;
					rcDstRight.top += 4;
				}
			} // if( bDwmMode )
			else
			{
				if( bSecondRelease )
				{
					if( bZoomedMode )
					{
						const POINT ptOffset = { -5, -4 };
						rcDstLeft. OffsetRect( ptOffset );
						rcDstRight.OffsetRect( ptOffset );
					}
				} // if( bSecondRelease )
			} // if( bDwmMode )
		} // else from if( bThirdRelease )
		DWORD dwOldRTF = 0;
		if( bDwmMode )
		{
			dwOldRTF = _bmpLeft.RunTimeFlagsGet();
			_bmpLeft.RunTimeFlagsSet( dwOldRTF | __EXT_BMP_FLAG_NO_RTL_DETECTION );
		}
		_bmpLeft.AlphaBlendSkinParts( dc.m_hDC, rcDstLeft, m_rcRibbonNcCornerLeftCP, CExtBitmap::__EDM_STRETCH, true, true, nSCA );
		if( bDwmMode )
		{
			_bmpLeft.RunTimeFlagsSet( dwOldRTF );
			dwOldRTF = _bmpRight.RunTimeFlagsGet();
			_bmpRight.RunTimeFlagsSet( dwOldRTF | __EXT_BMP_FLAG_NO_RTL_DETECTION );
//			if( bSecondRelease )
//				rcDstRight.right -= rcRibbonNcCornerRightCP.left + rcRibbonNcCornerRightCP.right;
		}
		rcDstRight.right -= RibbonQuickAccessBar_GetAdditionalSpaceAtRight( bDwmMode, pHelperSrc );
		_bmpRight.AlphaBlendSkinParts( dc.m_hDC, rcDstRight, rcRibbonNcCornerRightCP, CExtBitmap::__EDM_STRETCH, true, true, nSCA );
		if( bDwmMode )
			_bmpRight.RunTimeFlagsSet( dwOldRTF );
	} // if( bDrawQatbBackground )

INT nTextLen = 0;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtRibbonBar) )
		)
	{
		CExtRibbonBar * pRibbonBar = STATIC_DOWNCAST( CExtRibbonBar, pHelperSrc );
		CRect rcIcon( 0, 0, 0, 0 );
		if(		bDwmMode
			&&	pRectDwmText != NULL
			&&	LPCTSTR(strDwmCaptionTitle) != NULL
			&&	( nTextLen = INT(_tcslen(LPCTSTR(strDwmCaptionTitle))) ) > 0
// 			&&	pRectDwmText->left < pRectDwmText->right
// 			&&	pRectDwmText->top < pRectDwmText->bottom
// 			&&	dc.RectVisible( pRectDwmText )
			)
		{
			CWnd * pWnd = (CWnd*)pHelperSrc;
			bool bRTL = ( (pWnd->GetExStyle()&WS_EX_LAYOUTRTL) != 0 ) ? true : false;
			for( ; (pWnd->GetStyle()&WS_CHILD) != 0; pWnd = pWnd->GetParent() );
			if( pWnd != NULL )
			{
				CRect rcText = *pRectDwmText;
				if( pRibbonBar->m_pExtNcFrameImpl != NULL )
				{
					bool bMode2007_R1 = IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) ) ? true : false;
					bool bMode2010    = IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2010_Impl ) )    ? true : false;
					if( bMode2007_R1 || bMode2010 )
					{
						CExtCmdIcon _icon;
						pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetIcon( _icon );
						if( ! _icon.IsEmpty() )
						{
							CSize _sizeIcon = _icon.GetSize();
							ASSERT( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 );
							INT nIconTop = rcText.top + ( rcText.Height() - _sizeIcon.cy ) / 2;
							if( bMode2010 )
							{
// 								if( bRTL )
// 								{
// 									rcIcon = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetNcHtRect( HTCAPTION, false );
// 									rcIcon.left = rcIcon.right - _sizeIcon.cx;
// 									rcIcon.bottom = rcIcon.top + _sizeIcon.cy;
// 									rcIcon.OffsetRect( - ::GetSystemMetrics( SM_CXFRAME ), rcText.top - rcIcon.top + ( rcText.Height() - _sizeIcon.cy ) / 2 + ( pWnd->IsZoomed() ? (-2) : 1 ) );
// 								}
// 								else
								{
									rcIcon = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetNcHtRect( HTSYSMENU, false );
									rcIcon.right = rcIcon.left + _sizeIcon.cx;
									rcIcon.bottom = rcIcon.top + _sizeIcon.cy;
									if( bRTL )
									{
										CRect rcWnd;
										pWnd->GetWindowRect( &rcWnd );
										rcIcon.OffsetRect( - rcWnd.Width() + _sizeIcon.cx * 2 , 0 );
									}
									else
										rcIcon.OffsetRect( ::GetSystemMetrics( SM_CXFRAME ), 0 );
									rcIcon.OffsetRect( 0, rcText.top - rcIcon.top + ( rcText.Height() - _sizeIcon.cy ) / 2 + ( pWnd->IsZoomed() ? (-2) : 1 ) );
								}
							}
							else
							{
								rcIcon.SetRect( rcText.left, nIconTop, rcText.left + _sizeIcon.cx, nIconTop + _sizeIcon.cy );
								INT nV = ::GetSystemMetrics( SM_CXFRAME );
								rcIcon.OffsetRect( nV, 0 );
								rcText.left = rcIcon.right + nV;
							}
							if( dc.RectVisible( &rcIcon ) )
							{
								DWORD dwOldRTF = 0;
								CExtCmdIcon::e_paint_type_t ePT = CExtCmdIcon::__PAINT_NORMAL;
								CWnd * pFrameWnd = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetFrameWindow();
								if(		pFrameWnd != NULL
									&&	(! pFrameWnd->IsWindowEnabled() )
									)
									ePT = CExtCmdIcon::__PAINT_DISABLED;
								CExtBitmap & _bmp = _icon.GetBitmap( ePT, this );
								if( bDwmMode && bRTL )
								{
									dwOldRTF = _bmp.RunTimeFlagsGet();
									_bmp.RunTimeFlagsSet( dwOldRTF | __EXT_BMP_FLAG_NO_RTL_DETECTION );
								}
								if( bRTL )
								{
									CExtBitmap _bmp2 = _bmp;
									_bmp2.FlipHorizontal();
									if( ! _bmp2.IsEmpty() )
									{
										CSize _size = _bmp2.GetSize();
										_bmp2.AlphaBlend(
											dc.m_hDC,
											rcIcon.left, rcIcon.top, rcIcon.Width(), rcIcon.Height(),
											0, 0, rcIcon.Width(), rcIcon.Height()
											);
									}
								}
								else
								{
									_icon.Paint(
										this,
										dc,
										rcIcon,
										pWnd->IsWindowEnabled() ? CExtCmdIcon::__PAINT_NORMAL : CExtCmdIcon::__PAINT_DISABLED
										);
								}
								if( bDwmMode && bRTL )
									_bmp.RunTimeFlagsSet( dwOldRTF );
							}
						} // if( ! _icon.IsEmpty() )
					} // if( bMode2007_R1 || bMode2010 )
				}

				if(		pRectDwmText->left < pRectDwmText->right
					&&	pRectDwmText->top < pRectDwmText->bottom
					&&	dc.RectVisible( pRectDwmText )
					)
				{
/*
					HWND hWndOpenThemeData = pWnd->m_hWnd;
					if(	g_PaintManager.m_UxTheme.OpenThemeDataEx( hWndOpenThemeData, VSCLASS_WINDOW, __EXT_UX_OTD_NONCLIENT ) != NULL )
					{ // if extended theme data was open successfully
						static const int g_nDwmGlowSize2007 = 10;
						CExtSafeString strWindowText = LPCTSTR(strDwmCaptionTitle);
						CFont * pOldFont = dc.SelectObject( &m_FontCaption );
						INT nTextWidthRequredPX = rcText.Width() - g_nDwmGlowSize2007 * 2;
						CExtUxTheme::__EXT_UX_DTTOPTS dtoMeasure = { sizeof(CExtUxTheme::__EXT_UX_DTTOPTS) };
						dtoMeasure.dwFlags = __EXT_UX_DTT_COMPOSITED | __EXT_UX_DTT_GLOWSIZE;
						dtoMeasure.iGlowSize = g_nDwmGlowSize2007;
						CRect rcTextMeasure( 0, 0, 0, 0 );
						g_PaintManager.m_UxTheme.GetThemeTextExtent(
							dc.m_hDC,
							0,
							0,
							strWindowText,
							-1,
							DT_SINGLELINE|DT_LEFT|DT_TOP|DT_NOPREFIX|DT_CALCRECT,
							NULL,
							&rcTextMeasure
							);
						INT nTextWidthCurrentPX = rcTextMeasure.Width();
 						bool bDrawText = true;
 						if( nTextWidthCurrentPX > nTextWidthRequredPX )
						{
 							bDrawText = false;
							INT nLenCalc = strWindowText.GetLength() - 1;
							for( ; nLenCalc > 0; nLenCalc -- )
							{
								CExtSafeString strCalc = strWindowText.Left( nLenCalc );
		// 						if( bRTL )
		// 						{
		// 							CString strTmp = strCalc;
		// 							strCalc = _T("...");
		// 							strCalc += strTmp;
		// 						} // if( bRTL )
		// 						else
									strCalc += _T("...");
								rcTextMeasure.SetRect( 0, 0, 0, 0 );
								g_PaintManager.m_UxTheme.GetThemeTextExtent(
									dc.m_hDC,
									0,
									0,
									strCalc,
									-1,
									DT_SINGLELINE|DT_LEFT|DT_TOP|DT_NOPREFIX|DT_CALCRECT,
									NULL,
									&rcTextMeasure
									);
								INT nTextWidthCurrentPX = rcTextMeasure.Width();
								if( nTextWidthCurrentPX <= nTextWidthRequredPX )
								{
									strWindowText = strCalc;
									bDrawText = true;
									break;
								} // if( nTextWidthCurrentPX <= nTextWidthRequredPX )
							} // for( ; nLenCalc > 0; nLenCalc -- )
						} // if( nTextWidthCurrentPX > nTextWidthRequredPX )
						dc.SelectObject( &pOldFont );
						if( bDrawText )
						{
							DWORD dwOldLayout1 = LAYOUT_LTR, dwOldLayout2 = LAYOUT_LTR;
							if( bRTL )
								dwOldLayout1 = dc.SetLayout( LAYOUT_RTL );
							CExtMemoryDC dc32(
								&dc,
								&rcText,
								CExtMemoryDC::MDCOPT_TO_MEMORY
									| CExtMemoryDC::MDCOPT_FORCE_DIB
									| CExtMemoryDC::MDCOPT_FILL_BITS
									| CExtMemoryDC::MDCOPT_DIB_NEGATIVE_HEIGHT
								);
							ASSERT( dc32.GetSafeHdc() != NULL );
							dc.FillSolidRect( &rcText, RGB(0,0,0) );
							if( bRTL )
								dwOldLayout2 = dc32.SetLayout( LAYOUT_RTL );
							pOldFont = dc32.SelectObject( &m_FontCaption );
							CExtUxTheme::__EXT_UX_DTTOPTS dto = { sizeof(CExtUxTheme::__EXT_UX_DTTOPTS) };
							dto.dwFlags = __EXT_UX_DTT_TEXTCOLOR;
							dto.iGlowSize = g_nDwmGlowSize2007;
							if( ( ! g_PaintManager.m_bIsWin7OrLater ) && pWnd->IsZoomed() )
								dto.crText = RGB(0x0FF,0x0FF,0x0FF);
							else
							{
								dto.dwFlags |= __EXT_UX_DTT_COMPOSITED | __EXT_UX_DTT_GLOWSIZE;
								dto.crText = bFrameActive ? RGB(0,0,0) : RGB(0x060,0x060,0x060);
							}
							g_PaintManager.m_UxTheme.DrawThemeTextEx(
								dc32.m_hDC,
								0,
								0,
								strWindowText,
								-1,
								DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_NOPREFIX,
								rcText,
								&dto
								);
							dc32.SelectObject( pOldFont );
							if( bRTL )
							{
								dc.SetLayout( dwOldLayout1 );
								dc32.SetLayout( dwOldLayout2 );
							} // if( bRTL )
						} // if( bDrawText )
						g_PaintManager.m_UxTheme.CloseThemeData();
					} // if extended theme data was open successfully
*/

					rcText.DeflateRect( 5, 0 );
					if( rcText.left < rcText.right && rcText.top < rcText.bottom )
					{
						static const int g_nDwmGlowSize2007 = 10;
						CFont * pOldFont = dc.SelectObject( &m_FontCaption );
						CExtUxTheme::__EXT_UX_DTTOPTS dto = { sizeof(CExtUxTheme::__EXT_UX_DTTOPTS) };
						dto.dwFlags = __EXT_UX_DTT_COMPOSITED | __EXT_UX_DTT_GLOWSIZE | __EXT_UX_DTT_TEXTCOLOR;
						dto.iGlowSize = g_nDwmGlowSize2007;
						if( ( ! g_PaintManager.m_bIsWin7OrLater ) && pWnd->IsZoomed() )
							dto.crText = RGB(0x0FF,0x0FF,0x0FF);
						else
						{
							dto.dwFlags |= __EXT_UX_DTT_COMPOSITED | __EXT_UX_DTT_GLOWSIZE;
							dto.crText = bFrameActive ? RGB(0,0,0) : RGB(0x060,0x060,0x060);
						}
						CExtRichContentLayout::stat_DrawText(
							dc.m_hDC, LPCTSTR(strDwmCaptionTitle), &rcText,
							DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS /*| ( bRTL ? DT_RTLREADING : 0 )*/, 0,
							pWnd->m_hWnd, VSCLASS_WINDOW, /*__EXT_UX_OTD_NONCLIENT*/ 0, 0, 0, &dto
							);
						dc.SelectObject( pOldFont );
					}
				}
			} // if( pWnd != NULL )
		} // if( bDwmMode ...
		
		if(		pRibbonBar->m_pExtNcFrameImpl != NULL
			&&	pRibbonBar->RibbonLayout_IsFrameIntegrationEnabled()
			&&	pRibbonBar->RibbonQuickAccessBar_AboveTheRibbonGet()
			&&	Ribbon_IsSystemMenuIconPresent()
			)
		{
			CWnd * pWndFrameImpl = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetFrameWindow();
			if( pWndFrameImpl->GetSafeHwnd() != NULL )
			{
				CRect rcSeparator( 0, 0, 0, 0 );
				if( bDwmMode )
				{
					rcSeparator.SetRect( rcIcon.right + 2, rcIcon.top, rcIcon.right + 3, rcIcon.bottom );
					CExtMemoryDC dc32(
						&dc,
						&rcSeparator,
						CExtMemoryDC::MDCOPT_TO_MEMORY
							| CExtMemoryDC::MDCOPT_FORCE_DIB
							| CExtMemoryDC::MDCOPT_FILL_BITS
							| CExtMemoryDC::MDCOPT_DIB_NEGATIVE_HEIGHT
						);
					ASSERT( dc32.GetSafeHdc() != NULL );
					dc32.FillSolidRect( &rcSeparator, RGB(0,0,0) );
					CPen _penGray( PS_SOLID, 1, RGB(64,64,64) ), _penWhite( PS_SOLID, 1, RGB(128,128,128) );
					CPen * pPenOld = dc32.SelectObject( &_penGray );
					dc32.MoveTo( rcSeparator.left, rcSeparator.top );
					dc32.LineTo( rcSeparator.left, rcSeparator.bottom );
					dc32.SelectObject( &_penWhite );
					dc32.MoveTo( rcSeparator.right, rcSeparator.top );
					dc32.LineTo( rcSeparator.right, rcSeparator.bottom );
					dc32.SelectObject( pPenOld );
				}
				else
				{
					CRect rcWnd;
					pWndFrameImpl->GetWindowRect( &rcWnd );
					rcIcon = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetNcHtRect(HTSYSMENU,false,false,false,NULL,&rcWnd);
					rcSeparator.SetRect( rcIcon.right + 0, rcIcon.top, rcIcon.right + 2, rcIcon.bottom - 3 );
					if( pWndFrameImpl->IsZoomed() )
						rcSeparator.OffsetRect( m_rcNcFrameBordersActive.left, m_rcNcFrameBordersActive.top );
					Ribbon_PaintSeparator( dc, rcSeparator, NULL );
				}
			}

		}
	}

}

bool CExtPaintManager::Ribbon_QuickAccessContentExpandButtonCalcLayout(
	CDC & dc,
	CExtRibbonButtonQuickAccessContentExpand * pQACEB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pQACEB );
	dc;
	lParam;
	pQACEB->Size( CSize(13,22) );
	return true;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_QuickAccessContentExpandButtonCalcLayout(
	CDC & dc,
	CExtRibbonButtonQuickAccessContentExpand * pQACEB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pQACEB );

	if( IsHighContrast() )
		return
			CExtPaintManagerXP::Ribbon_QuickAccessContentExpandButtonCalcLayout(
				dc,
				pQACEB,
				lParam
				);

	if(		m_bmpArrRibbonQACEB.IsEmpty()
		||	m_nRibbonHeightOfQACEB <= 0
		)
		return
			CExtPaintManagerOffice2003::Ribbon_QuickAccessContentExpandButtonCalcLayout(
				dc,
				pQACEB,
				lParam
				);
CSize _size = m_bmpArrRibbonQACEB.GetSize();
	_size.cy = m_nRibbonHeightOfQACEB;
	_size.cx = UiScalingDo( _size.cx, __EUIST_X );
	_size.cy = UiScalingDo( _size.cy, __EUIST_Y );
CSize _sizeAboveTheRibbonShiftQACEB =
		Ribbon_QuickAccessContentExpandGetShift(
			dc,
			pQACEB,
			lParam
			);
	_size.cx += _sizeAboveTheRibbonShiftQACEB.cx;
	_size.cy += _sizeAboveTheRibbonShiftQACEB.cy;
	pQACEB->Size( _size );
	return true;
}

bool CExtPaintManager::Ribbon_QuickAccessContentExpandButtonPaint(
	CDC & dc,
	CExtRibbonButtonQuickAccessContentExpand * pQACEB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pQACEB );
CRect rcTBB = *pQACEB;
CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
		pQACEB, true, rcTBB, _T(""), NULL, true, pQACEB->IsHover(), pQACEB->IsPressed(), false, pQACEB->IsEnabled(), true, false, false,
		__ALIGN_HORIZ_CENTER|__ALIGN_VERT_CENTER, NULL, true, 0, true
		);
	_ppbd.m_lParam = lParam;
	PaintPushButton( dc, _ppbd );
	return true;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_QuickAccessContentExpandButtonPaint(
	CDC & dc,
	CExtRibbonButtonQuickAccessContentExpand * pQACEB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pQACEB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_QuickAccessContentExpandButtonPaint( dc, pQACEB, lParam );	
	if(		m_bmpArrRibbonQACEB.IsEmpty()
		||	m_nRibbonHeightOfQACEB <= 0
		)
		return CExtPaintManagerOffice2003::Ribbon_QuickAccessContentExpandButtonPaint( dc, pQACEB, lParam );
INT nBmpIdx = m_nIdxRibbonQACEB_Normal;
bool bSelTrackingMode = false;
const CExtToolControlBar * pToolBar = pQACEB->GetBar();
	if( pToolBar != NULL )
	{
		CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
		if(		pMenuBar != NULL
			&&	pMenuBar->IsMenuBarTracking()
			)
		{
			int nFlatTrackingIndex = pMenuBar->_FlatTrackingIndexGet();
			if( nFlatTrackingIndex >= 0 )
			{
				int nIndexOfTBB = pMenuBar->_GetIndexOf( pQACEB );
				if( nFlatTrackingIndex == nIndexOfTBB )
						bSelTrackingMode = true;
			}
		}
	}
	if( bSelTrackingMode )
			nBmpIdx = m_nIdxRibbonQACEB_Hover;
	else if( pQACEB->IsEnabled() )
	{
		if( pQACEB->IsPressed() )
			nBmpIdx = m_nIdxRibbonQACEB_Pressed;
		else if( pQACEB->IsHover() )
			nBmpIdx = m_nIdxRibbonQACEB_Hover;
	}

CSize _sizeAboveTheRibbonShiftQACEB = Ribbon_QuickAccessContentExpandGetShift( dc, pQACEB, lParam );
CRect rcTBB = *pQACEB;
	rcTBB.left += _sizeAboveTheRibbonShiftQACEB.cx;
	rcTBB.top  += _sizeAboveTheRibbonShiftQACEB.cy;
CRect rcSrc( 0, 0, m_bmpArrRibbonQACEB.GetSize().cx, m_nRibbonHeightOfQACEB );
	rcSrc.OffsetRect( 0, m_nRibbonHeightOfQACEB*nBmpIdx );
	m_bmpArrRibbonQACEB.AlphaBlendSkinParts( dc.m_hDC, rcTBB, rcSrc, m_rcRibbonPaddingQACEB, CExtBitmap::__EDM_STRETCH, true, true );
	return true;
}

CSize CExtPaintManager::Ribbon_QuickAccessContentExpandGetShift(
	CDC & dc,
	CExtRibbonButtonQuickAccessContentExpand * pQACEB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pQACEB );
	dc; pQACEB; lParam;
	return CSize( 0, 0 );
}

CSize CExtPaintManagerOffice2007_Impl::Ribbon_QuickAccessContentExpandGetShift(
	CDC & dc,
	CExtRibbonButtonQuickAccessContentExpand * pQACEB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pQACEB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_QuickAccessContentExpandGetShift( dc, pQACEB, lParam );	
CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pQACEB->GetSafeBar() );
	if( pRibbonBar == NULL )
		return CSize( 0, 0 );
	if( ! pRibbonBar->RibbonQuickAccessBar_AboveTheRibbonGet() )
		return CSize( 0, 0 );
	if( pRibbonBar->RibbonLayout_GetFrameCaptionHeight() <= 0 )
		return CSize( 0, 0 );
	if( ! Ribbon_FileButtonIsItegrationSupported() )
		return CSize( 0, 0 );
CSize _size = m_sizeAboveTheRibbonShiftQACEB;
	_size.cx = UiScalingDo( _size.cx, __EUIST_X );
	_size.cy = UiScalingDo( _size.cy, __EUIST_Y );
	return _size;
}

bool CExtPaintManager::Ribbon_DLB_IsVisible(
	CExtRibbonButtonDialogLauncher * pTBB,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	lParam;
CExtToolControlBar * pBar = pTBB->GetSafeBar();
	if( pBar == NULL )
		return false;
CExtRibbonPage * pRibbonPage =
		DYNAMIC_DOWNCAST( CExtRibbonPage, pBar );
	if( pRibbonPage == NULL )
		return false;
	if(		pRibbonPage->m_bHelperPopupMode
		&&	( ! pRibbonPage->m_bHelperAutoHideMode )
		)
		return false;
	return true;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_DLB_IsVisible(
	CExtRibbonButtonDialogLauncher * pTBB,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_DLB_IsVisible( pTBB, lParam );	
	if( ! IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) ) )
		return true;
	return
		CExtPaintManagerOffice2003::Ribbon_DLB_IsVisible( pTBB, lParam );
}

CSize CExtPaintManager::Ribbon_DLB_CalcSize(
	CDC & dc,
	CExtRibbonButtonDialogLauncher * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pTBB );
	dc; pTBB; lParam;
CSize _size( 17, 15 );
	_size.cx = UiScalingDo( _size.cx, __EUIST_X );
	_size.cy = UiScalingDo( _size.cy, __EUIST_Y );
	return _size;
}

CSize CExtPaintManagerOffice2007_Impl::Ribbon_DLB_CalcSize(
	CDC & dc,
	CExtRibbonButtonDialogLauncher * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_DLB_CalcSize( dc, pTBB, lParam );	
	if(		m_arrBmpRibbonDLB.IsEmpty()
		||	m_nRibbonHeightOfOneDLB <= 0
		||	m_nDlbIdxDisabled < 0
		||	m_nDlbIdxNormal < 0
		||	m_nDlbIdxHover < 0
		||	m_nDlbIdxPressed < 0
		)
		return CExtPaintManagerOffice2003::Ribbon_DLB_CalcSize( dc, pTBB, lParam );
CSize _size = m_arrBmpRibbonDLB.GetSize();
	_size.cy = m_nRibbonHeightOfOneDLB;
	_size.cx = UiScalingDo( _size.cx, __EUIST_X );
	_size.cy = UiScalingDo( _size.cy, __EUIST_Y );
	return _size;
}

void CExtPaintManager::Ribbon_DLB_Paint(
	CDC & dc,
	CExtRibbonButtonDialogLauncher * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pTBB );
	lParam;
CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
		pTBB, true, *pTBB, _T("..."), NULL, false, pTBB->IsHover(), pTBB->IsPressed(), false, pTBB->IsEnabled(), true, false, false,
		__ALIGN_HORIZ_CENTER|__ALIGN_VERT_CENTER, NULL, false, 0, false
		);
	PaintPushButton( dc, _ppbd );
}

void CExtPaintManagerOffice2007_Impl::Ribbon_DLB_Paint(
	CDC & dc,
	CExtRibbonButtonDialogLauncher * pTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pTBB );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_DLB_Paint( dc, pTBB, lParam );
		return;
	}
	if(		m_arrBmpRibbonDLB.IsEmpty()
		||	m_nRibbonHeightOfOneDLB <= 0
		||	m_nDlbIdxDisabled < 0
		||	m_nDlbIdxNormal < 0
		||	m_nDlbIdxHover < 0
		||	m_nDlbIdxPressed < 0
		)
	{
		CExtPaintManagerOffice2003::Ribbon_DLB_Paint( dc, pTBB, lParam );
		return;
	}
INT nBmpIdx = m_nDlbIdxDisabled;
	if( pTBB->IsEnabled() )
	{
		if( pTBB->IsPressed() )
			nBmpIdx = m_nDlbIdxPressed;
		else if( pTBB->IsHover() )
			nBmpIdx = m_nDlbIdxHover;
		else
			nBmpIdx = m_nDlbIdxNormal;
	} // if( pTBB->IsEnabled() )
	ASSERT( nBmpIdx >= 0 );
CRect rcDst = *pTBB;
CRect rcSrc( 0, 0, m_arrBmpRibbonDLB.GetSize().cx, m_nRibbonHeightOfOneDLB );
	rcSrc.OffsetRect( 0, nBmpIdx*m_nRibbonHeightOfOneDLB );
	m_arrBmpRibbonDLB.AlphaBlendSkinParts( dc.m_hDC, rcDst, rcSrc, rcRibbonContentPaddingDLB, CExtBitmap::__EDM_STRETCH, true, true );
}

void CExtPaintManager::Ribbon_FileMenuButtonQuery(
	LPVOID pData,
	CExtCmdIcon * pIcon, // = NULL
	__EXT_MFC_SAFE_LPCTSTR sText, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( pData != NULL );
CExtPopupMenuWnd::RIBBONFILEMENUBUTTONQUERY & _rfmbq = *((CExtPopupMenuWnd::RIBBONFILEMENUBUTTONQUERY*)pData);
	_rfmbq.m_bQueryHandled = true;
	if( _rfmbq.m_pDC != NULL )
	{
		ASSERT( _rfmbq.m_pDC->GetSafeHdc() != NULL );
		PAINTPUSHBUTTONDATA _ppbd(
			_rfmbq.m_pPopup, true, _rfmbq.m_rcButton, sText, pIcon,
			false, _rfmbq.m_bHover, _rfmbq.m_bPressed, false, true, true, false, false,
			__ALIGN_HORIZ_CENTER|__ALIGN_VERT_CENTER, NULL, false, 0, false
			);
		_ppbd.m_lParam = lParam;
		PaintPushButton( *_rfmbq.m_pDC, _ppbd );
	} // if( _rfmbq.m_pDC != NULL )
	else
	{
		CSize _sizeIcon( 0, 0 ), _sizeText( 0, 0 );
		if(		pIcon != NULL
			&&	( ! pIcon->IsEmpty() )
			)
			_sizeIcon = pIcon->GetSize();
		if(		sText != NULL
			&&	INT( _tcslen( sText ) ) > 0
			)
		{
			CWindowDC dc( NULL );
			CExtSafeString s = sText;
			_sizeText = stat_CalcTextDimension( dc, m_FontNormal, s, DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
		}
		_rfmbq.m_nMeasuredWidth = _sizeIcon.cx + _sizeText.cx + 10;
		if( _sizeIcon.cx > 0 )
			_rfmbq.m_nMeasuredWidth += 5;
	} // else from if( _rfmbq.m_pDC != NULL )
}

void CExtPaintManagerOffice2007_Impl::Ribbon_FileMenuButtonQuery(
	LPVOID pData,
	CExtCmdIcon * pIcon, // = NULL
	__EXT_MFC_SAFE_LPCTSTR sText, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( pData != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::Ribbon_FileMenuButtonQuery( pData, pIcon, sText, lParam );
		return;
	}
CExtPopupMenuWnd::RIBBONFILEMENUBUTTONQUERY & _rfmbq = *((CExtPopupMenuWnd::RIBBONFILEMENUBUTTONQUERY*)pData);
	_rfmbq.m_bQueryHandled = true;
	if( _rfmbq.m_pDC != NULL )
	{
		ASSERT( _rfmbq.m_pDC->GetSafeHdc() != NULL );
		INT nImgIndex = INT(__E07BI_NORMAL);
		if( _rfmbq.m_bPressed )
			nImgIndex = INT(__E07BI_PRESSED);
		else if( _rfmbq.m_bHover )
			nImgIndex = INT(__E07BI_HOVER);
		nImgIndex = m_arrIndicesButtonTS[nImgIndex];
		CExtBitmap & _bmp = m_bmpArrButtonTS[ INT(__EBTSA_SOLID) ];
		CSize _sizeBmp = _bmp.GetSize();
		CRect rcSrc( 0, 0, _sizeBmp.cx, m_nHeightOfButtonTS );
		rcSrc.OffsetRect( 0, m_nHeightOfButtonTS*nImgIndex );
		if(		(! _bmp.IsEmpty() )
			&&	(! rcSrc.IsRectEmpty() )
			&&	_rfmbq.m_pDC->RectVisible( &_rfmbq.m_rcButton )
			)
			_bmp.AlphaBlendSkinParts( *_rfmbq.m_pDC, _rfmbq.m_rcButton, rcSrc, m_rcPaddingOfButtonTS, CExtBitmap::__EDM_STRETCH, true );
		CRect rcText = _rfmbq.m_rcButton;
		rcText.DeflateRect( 10, 0 );
		if( pIcon != NULL && ( ! pIcon->IsEmpty() ) )
		{
			CSize _sizeIcon = pIcon->GetSize();
			CRect rcIcon( rcText.left, rcText.top, rcText.left + _sizeIcon.cx, rcText.bottom );
			rcIcon.OffsetRect( 0, ( rcIcon.Height() - _sizeIcon.cy ) / 2 );
			rcIcon.bottom = rcIcon.top + _sizeIcon.cy;
			rcText.left = rcIcon.right + 3;
			CExtCmdIcon::e_paint_type_t ePT = CExtCmdIcon::__PAINT_NORMAL;
			if( _rfmbq.m_bPressed )
				ePT = CExtCmdIcon::__PAINT_PRESSED;
			else if( _rfmbq.m_bHover )
				ePT = CExtCmdIcon::__PAINT_HOVER;
			pIcon->Paint( this, _rfmbq.m_pDC->m_hDC, rcIcon, ePT );
		} // if( pIcon != NULL && ( ! pIcon->IsEmpty() ) )
		INT nTextLength = ( sText == NULL ) ? 0 : INT( _tcslen( sText ) );
		if( nTextLength > 0 )
		{
			CExtSafeString s = sText;
			CSize _sizeText = stat_CalcTextDimension( *_rfmbq.m_pDC, m_FontRibbonNormal, s, DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
			rcText.OffsetRect( 0, ( rcText.Height() - _sizeText.cy ) / 2 );
			rcText.bottom = rcText.top + _sizeText.cy;
			CFont * pOldFont = _rfmbq.m_pDC->SelectObject( &m_FontRibbonNormal );
			int nOldBkMode = _rfmbq.m_pDC->SetBkMode( TRANSPARENT );
			COLORREF clrOldText = _rfmbq.m_pDC->SetTextColor( m_clrRibbonButtonNormal );
			Ribbon_PaintText( *_rfmbq.m_pDC, sText, rcText, DT_SINGLELINE|DT_LEFT|DT_TOP, false, &m_bmpRibbonDDA, _rfmbq.m_pPopup, lParam );
			_rfmbq.m_pDC->SetTextColor( clrOldText );
			_rfmbq.m_pDC->SetBkMode( nOldBkMode );
			_rfmbq.m_pDC->SelectObject( pOldFont );
		} // if( nTextLength > 0 || _ppbd.m_bDropDown )
	} // if( _rfmbq.m_pDC != NULL )
	else
	{
		CSize _sizeIcon( 0, 0 ), _sizeText( 0, 0 );
		if(		pIcon != NULL
			&&	( ! pIcon->IsEmpty() )
			)
			_sizeIcon = pIcon->GetSize();
		if(		sText != NULL
			&&	INT( _tcslen( sText ) ) > 0
			)
		{
			CWindowDC dc( NULL );
			CExtSafeString s = sText;
			_sizeText = stat_CalcTextDimension( dc, m_FontRibbonNormal, s, DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
		}
		_rfmbq.m_nMeasuredWidth = _sizeIcon.cx + _sizeText.cx + 20;
		if( _sizeIcon.cx > 0 )
			_rfmbq.m_nMeasuredWidth += 3;
	} // else from if( _rfmbq.m_pDC != NULL )
}

bool CExtPaintManager::Ribbon_FileButtonIsItegrationSupported() const
{
	ASSERT_VALID( this );
	return false;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_FileButtonIsItegrationSupported() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_FileButtonIsItegrationSupported();	
	return m_bRibbonFileButtonItegrationSupported;
}

INT CExtPaintManager::Ribbon_FileButtonGetMenuIntersectionHeight() const
{
	ASSERT_VALID( this );
	return 0;
}

INT CExtPaintManagerOffice2007_Impl::Ribbon_FileButtonGetMenuIntersectionHeight() const
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_FileButtonGetMenuIntersectionHeight();	
	if( ! Ribbon_FileButtonIsItegrationSupported() )
		return 0;
INT nRibbonFileButtonMenuIntersectionHeight =
		UiScalingDo( m_nRibbonFileButtonMenuIntersectionHeight, __EUIST_Y );
	return nRibbonFileButtonMenuIntersectionHeight;
}

bool CExtPaintManager::Ribbon_FileButtonCalcLayout(
	CDC & dc,
	CExtNcFrameImpl * pExtNcFrameImpl,
	CExtRibbonButtonFile * pFileTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pExtNcFrameImpl != NULL );
	ASSERT_VALID( pFileTBB );
	dc; pExtNcFrameImpl; pFileTBB; lParam;
	return false;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_FileButtonCalcLayout(
	CDC & dc,
	CExtNcFrameImpl * pExtNcFrameImpl,
	CExtRibbonButtonFile * pFileTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pExtNcFrameImpl != NULL );
	ASSERT_VALID( pFileTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_FileButtonCalcLayout( dc, pExtNcFrameImpl, pFileTBB, lParam );	
	if( m_bmpArrRibbonFileButton.IsEmpty() )
		return false;
CPoint ptTopLeftTBB( 0, 0 );
CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pFileTBB->GetBar() );
	if(		pRibbonBar != NULL
		&&	pRibbonBar->RibbonLayout_IsFrameIntegrationEnabled()
		&&	(! pRibbonBar->RibbonLayout_IsDwmCaptionIntegration() )
		)
	{
		INT nTopBorderHeight = 0;
		INT nFrameCaptionHeight = pRibbonBar->RibbonLayout_GetFrameCaptionHeight( &nTopBorderHeight );
		ptTopLeftTBB.y += nFrameCaptionHeight + nTopBorderHeight;
	}
CSize _sizeTBB( m_bmpArrRibbonFileButton.GetSize().cx, m_nRibbonFileButtonHeight );
	_sizeTBB.cx = UiScalingDo( _sizeTBB.cx, __EUIST_X );
	_sizeTBB.cy = UiScalingDo( _sizeTBB.cy, __EUIST_Y );
CRect rcTBB( ptTopLeftTBB, _sizeTBB );

	if(		pRibbonBar != NULL
		&&	pRibbonBar->m_pExtNcFrameImpl != NULL
		&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
		)
	{
		bool bZoomed = false;
		CWnd * pWnd = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetFrameWindow();
		if( pWnd->GetSafeHwnd() != NULL && pWnd->IsZoomed() )
			bZoomed = true;
		if( bZoomed )
		{
			POINT ptOffset = { ::GetSystemMetrics(SM_CXFRAME)/4, ::GetSystemMetrics(SM_CYFRAME) };
			rcTBB.OffsetRect( ptOffset );
		}
		if(		IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_LunaBlue ) )
			||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Silver ) )
			||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Obsidian ) )
			)
			rcTBB.OffsetRect( bZoomed ? (-4) : 0, 3 );
		else
			rcTBB.OffsetRect( 3, bZoomed ? 0 : 6 );
	}
	pFileTBB->Size( _sizeTBB );
	pFileTBB->SetRect( rcTBB );
	return true;
}

bool CExtPaintManagerOffice2010_Impl::Ribbon_FileButtonCalcLayout(
	CDC & dc,
	CExtNcFrameImpl * pExtNcFrameImpl,
	CExtRibbonButtonFile * pFileTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pExtNcFrameImpl != NULL );
	ASSERT_VALID( pFileTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_FileButtonCalcLayout( dc, pExtNcFrameImpl, pFileTBB, lParam );	
	if( m_bmpArrRibbonFileButton.IsEmpty() )
		return false;
CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pFileTBB->GetBar() );
	if( pRibbonBar == NULL )
		return false;
	ASSERT_VALID( pRibbonBar );
INT nTextBasedWidth = 0;
	if( pRibbonBar->m_bFileTabButtonDisplaysText )
	{
		CExtSafeString sText = pFileTBB->GetText();
		if( ! sText.IsEmpty() )
		{
			CRect rcMeasure( 0, 0, 0, 0 );
			CFont * pFont = pRibbonBar->OnGetToolbarFont( false, false, pFileTBB );
			ASSERT( pFont->GetSafeHandle() != NULL );
			CFont * pOldFont = dc.SelectObject( pFont );
			INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
			COLORREF clrText = RGB(0x0FF,0x0FF,0x0FF);
			COLORREF clrOldTextColor = dc.SetTextColor( clrText );
			if( g_PaintManager.m_bIsWinVistaOrLater )
			{
				CExtUxTheme::__EXT_UX_DTTOPTS dto = { sizeof(CExtUxTheme::__EXT_UX_DTTOPTS) };
				dto.dwFlags = __EXT_UX_DTT_COMPOSITED | __EXT_UX_DTT_TEXTCOLOR;
				dto.crText = clrText;
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC, LPCTSTR(sText), &rcMeasure,
					DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS|DT_NOCLIP|DT_CALCRECT /*| ( bRTL ? DT_RTLREADING : 0 )*/, 0,
					pRibbonBar->m_hWnd, VSCLASS_WINDOW, /*__EXT_UX_OTD_NONCLIENT*/ 0, 0, 0, &dto
					);
			}
			else
				CExtRichContentLayout::stat_DrawText(
					dc.m_hDC, LPCTSTR(sText), &rcMeasure,
					DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS|DT_NOCLIP|DT_CALCRECT /*| ( bRTL ? DT_RTLREADING : 0 )*/, 0
					);
			dc.SelectObject( pOldFont );
			dc.SetTextColor( clrOldTextColor );
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
			nTextBasedWidth = rcMeasure.Width() + 10;
		} // if( ! sText.IsEmpty() )
	}
CSize _sizeTBB( m_bmpArrRibbonFileButton.GetSize().cx, m_nRibbonFileButtonHeight - 1 );
	_sizeTBB.cx = UiScalingDo( _sizeTBB.cx, __EUIST_X );
	_sizeTBB.cy = UiScalingDo( _sizeTBB.cy, __EUIST_Y );
INT nPageIndex, nPageCount = pRibbonBar->RibbonTabPageButton_GetCount();
	for( nPageIndex = 0; nPageIndex < nPageCount; nPageIndex ++ )
	{
		CExtRibbonButtonTabPage * pTabPageTBB = pRibbonBar->RibbonTabPageButton_GetAt( nPageIndex );
		ASSERT( pTabPageTBB );
		if( ( pTabPageTBB->GetStyle() & TBBS_HIDDEN ) != 0 )
			continue;
		if( ! pTabPageTBB->IsVisible() )
			continue;
		CSize sizeTabPageButton = pTabPageTBB->Size();
		_sizeTBB.cy = max( _sizeTBB.cy, sizeTabPageButton.cy );
		break;
	} // for( . . .
	if( nTextBasedWidth > 0 )
		_sizeTBB.cx = max( _sizeTBB.cx, nTextBasedWidth );
INT nTabLineHeight = pRibbonBar->RibbonLayout_GetTabLineHeight();
INT nTopBorderHeight = 0;
INT nFrameCaptionHeight = pRibbonBar->RibbonLayout_GetFrameCaptionHeight( &nTopBorderHeight );
INT nHeightAtTheTop = nTabLineHeight + nFrameCaptionHeight;
INT nBottomLineHeight = pRibbonBar->RibbonLayout_GetBottomLineHeight();
CRect rcClient;
	pRibbonBar->GetClientRect( &rcClient );
CRect rcPageBk = rcClient;
	rcPageBk.top += nHeightAtTheTop;
	rcPageBk.bottom -= nBottomLineHeight;
	if(		pRibbonBar->RibbonLayout_IsFrameIntegrationEnabled()
		&&	(! pRibbonBar->RibbonLayout_IsDwmCaptionIntegration() )
		)
		rcPageBk.top += nFrameCaptionHeight + nTopBorderHeight;
CRect rcTabLine(
		rcPageBk.left,
		rcPageBk.top - nTabLineHeight,
		rcPageBk.right,
		rcPageBk.top
		);
	pRibbonBar->RibbonLayout_AdjustTabLineRect( rcTabLine );
INT nHorzOffset = UiScalingDo( 2, __EUIST_X );
CRect rcTBB( nHorzOffset, rcTabLine.bottom - _sizeTBB.cy, nHorzOffset + _sizeTBB.cx, rcTabLine.bottom );
	pFileTBB->Size( _sizeTBB );
	pFileTBB->SetRect( rcTBB );
	return true;
}

bool CExtPaintManagerOffice2007_R1::Ribbon_FileButtonCalcLayout(
	CDC & dc,
	CExtNcFrameImpl * pExtNcFrameImpl,
	CExtRibbonButtonFile * pFileTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pExtNcFrameImpl != NULL );
	ASSERT_VALID( pFileTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_FileButtonCalcLayout( dc, pExtNcFrameImpl, pFileTBB, lParam );	
	return false;
}

bool CExtPaintManager::Ribbon_FileButtonPaint(
	CDC & dc,
	CExtRibbonButtonFile * pFileTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pFileTBB );
	dc; pFileTBB; lParam;
	return false;
}

bool CExtPaintManagerOffice2007_Impl::Ribbon_FileButtonPaint(
	CDC & dc,
	CExtRibbonButtonFile * pFileTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pFileTBB );
	if( IsHighContrast() )
		return CExtPaintManagerXP::Ribbon_FileButtonPaint( dc, pFileTBB, lParam );	
	if( m_bmpArrRibbonFileButton.IsEmpty() )
		return false;
CRect rcTBB = *pFileTBB;
	if( ! dc.RectVisible( &rcTBB ) )
		return true;
CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pFileTBB->GetBar() );
	if( pRibbonBar == NULL )
		return false;
INT nBmpIndex = 0;
CExtCmdIcon::e_paint_type_t ePT = CExtCmdIcon::__PAINT_DISABLED;

bool bSelTrackingMode = false;
const CExtToolControlBar * pToolBar = pFileTBB->GetBar();
	if( pToolBar != NULL )
	{
		CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
		if(		pMenuBar != NULL
			&&	pMenuBar->IsMenuBarTracking()
			)
		{
			int nFlatTrackingIndex = pMenuBar->_FlatTrackingIndexGet();
			if( nFlatTrackingIndex >= 0 )
			{
				int nIndexOfTBB = pMenuBar->_GetIndexOf( pFileTBB );
				if( nFlatTrackingIndex == nIndexOfTBB )
						bSelTrackingMode = true;
			}
		}
	}

	if( bSelTrackingMode )
	{
			nBmpIndex = 1;
			ePT = CExtCmdIcon::__PAINT_HOVER;
	}
	else if( pFileTBB->IsEnabled() )
	{
		if( pFileTBB->IsPressed() )
		{
			nBmpIndex = 2;
			ePT = CExtCmdIcon::__PAINT_PRESSED;
		}
		else if( pFileTBB->IsHover() )
		{
			nBmpIndex = 1;
			ePT = CExtCmdIcon::__PAINT_HOVER;
		}
		else
		{
			ePT = CExtCmdIcon::__PAINT_NORMAL;
		}
	}

bool bRTL = false, bDwmMode = pRibbonBar->RibbonLayout_IsDwmCaptionIntegration();
	if( (dc.GetLayout()&LAYOUT_RTL) == LAYOUT_RTL )
		bRTL = true;
DWORD dwOldRTF = 0;
CRect rcSrc( 0, 0, m_bmpArrRibbonFileButton.GetSize().cx, m_nRibbonFileButtonHeight );
	rcSrc.OffsetRect( 0, nBmpIndex * m_nRibbonFileButtonHeight );
CRect rcPadding( 0, 0, 0, 0 );
bool bTextOverTabMode = false;
	if( pRibbonBar->m_bFileTabButtonDisplaysText && IsKindOf(RUNTIME_CLASS(CExtPaintManagerOffice2010_Impl)) )
	{
		bTextOverTabMode = true;
		rcPadding.SetRect( 5, 3, 5, 3 );
	}
	if( (!bTextOverTabMode) && rcSrc.Size() != rcTBB.Size() )
	{
		CExtBitmap _bmp;
		_bmp.FromBitmap( m_bmpArrRibbonFileButton, rcSrc );
		CRect _rcSrc( 0, 0, rcTBB.Width(), rcTBB.Height() );
		CExtBitmap::Filter _f( CExtBitmap::Filter::gaussian );
		_f.FilterWidthSet( 2.0 );
		_bmp.Scale( rcTBB.Width(), rcTBB.Height(), _f );
		if( bDwmMode && bRTL )
		{
			dwOldRTF = _bmp.RunTimeFlagsGet();
			_bmp.RunTimeFlagsSet( dwOldRTF | __EXT_BMP_FLAG_NO_RTL_DETECTION );
		}
		_bmp.AlphaBlendSkinParts(
			dc.m_hDC,
			rcTBB,
			_rcSrc,
			rcPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			);
		if( bDwmMode && bRTL )
		{
			_bmp.RunTimeFlagsSet( dwOldRTF );
		}
	} // if( (!bTextOverTabMode) && rcSrc.Size() != rcTBB.Size() )
	else
	{
		if( bDwmMode && bRTL )
		{
			dwOldRTF = m_bmpArrRibbonFileButton.RunTimeFlagsGet();
			m_bmpArrRibbonFileButton.RunTimeFlagsSet( dwOldRTF | __EXT_BMP_FLAG_NO_RTL_DETECTION );
		}
		m_bmpArrRibbonFileButton.AlphaBlendSkinParts(
			dc.m_hDC,
			rcTBB,
			rcSrc,
			rcPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			);
		if( bDwmMode && bRTL )
		{
			m_bmpArrRibbonFileButton.RunTimeFlagsSet( dwOldRTF );
		}
		if( bTextOverTabMode )
		{
			CExtSafeString sText = pFileTBB->GetText();
			if( ! sText.IsEmpty() )
			{
				CFont * pFont = pRibbonBar->OnGetToolbarFont( false, false, pFileTBB );
				ASSERT( pFont->GetSafeHandle() != NULL );
				CFont * pOldFont = dc.SelectObject( pFont );
				INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
				COLORREF clrText = RGB(0x0FF,0x0FF,0x0FF);
				COLORREF clrOldTextColor = dc.SetTextColor( clrText );
				rcTBB.DeflateRect( &rcPadding );
				if( g_PaintManager.m_bIsWinVistaOrLater )
				{
					CExtUxTheme::__EXT_UX_DTTOPTS dto = { sizeof(CExtUxTheme::__EXT_UX_DTTOPTS) };
					dto.dwFlags = __EXT_UX_DTT_COMPOSITED | __EXT_UX_DTT_TEXTCOLOR;
					dto.crText = clrText;
					CExtRichContentLayout::stat_DrawText(
						dc.m_hDC, LPCTSTR(sText), &rcTBB,
						DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS /*| ( bRTL ? DT_RTLREADING : 0 )*/, 0,
						pRibbonBar->m_hWnd, VSCLASS_WINDOW, /*__EXT_UX_OTD_NONCLIENT*/ 0, 0, 0, &dto
						);
				}
				else
					CExtRichContentLayout::stat_DrawText(
						dc.m_hDC, LPCTSTR(sText), &rcTBB,
						DT_SINGLELINE|DT_CENTER|DT_VCENTER|DT_NOPREFIX|DT_END_ELLIPSIS /*| ( bRTL ? DT_RTLREADING : 0 )*/, 0
						);
				dc.SelectObject( pOldFont );
				dc.SetTextColor( clrOldTextColor );
				dc.SetBkMode( nOldBkMode );
				dc.SelectObject( pOldFont );
			} // if( ! sText.IsEmpty() )
		}
	} // else from if( (!bTextOverTabMode) && rcSrc.Size() != rcTBB.Size() );

	if( ( ! bTextOverTabMode ) && ( ! pFileTBB->m_iconForLargeMode.IsEmpty() ) )
	{
		CRect rc( rcTBB.TopLeft(), pFileTBB->m_iconForLargeMode.GetSize() );
		rc.OffsetRect(
			( rcTBB.Width() - rc.Width() ) / 2,
			( rcTBB.Height() - rc.Height() ) / 2
			);
		CExtBitmap & _bmp = pFileTBB->m_iconForLargeMode.GetBitmap( ePT, this );
		if( bDwmMode && bRTL )
		{
			dwOldRTF = _bmp.RunTimeFlagsGet();
			_bmp.RunTimeFlagsSet( dwOldRTF | __EXT_BMP_FLAG_NO_RTL_DETECTION );
		}
		if( bRTL )
		{
			CExtBitmap _bmp2 = _bmp;
			_bmp2.FlipHorizontal();
			if( ! _bmp2.IsEmpty() )
			{
				CSize _size = _bmp2.GetSize();
				_bmp2.AlphaBlend(
					dc.m_hDC,
					rc.left,
					rc.top,
					rc.Width(),
					rc.Height(),
					0,
					0,
					rc.Width(),
					rc.Height()
					);
			}
		}
		else
		{
			pFileTBB->m_iconForLargeMode.Paint(
				this,
				dc.m_hDC,
				rc,
				ePT
				);
		}
		if( bDwmMode && bRTL )
		{
			_bmp.RunTimeFlagsSet( dwOldRTF );
		}
	} // if( ( ! bTextOverTabMode ) && ( ! pFileTBB->m_iconForLargeMode.IsEmpty() ) )
	return true;
}

bool CExtPaintManagerOffice2007_R1::Ribbon_FileButtonPaint(
	CDC & dc,
	CExtRibbonButtonFile * pFileTBB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pFileTBB );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Ribbon_FileButtonPaint(
				dc,
				pFileTBB,
				lParam
				);	

CExtBitmap * pBmp = NULL;
CRect rcSrc( 0, 0, 35, 22 );
CRect rcTBB = *pFileTBB;
	rcTBB.InflateRect( 2, 0, 1, 0 );

bool bSelTrackingMode = false;
const CExtToolControlBar * pToolBar = pFileTBB->GetBar();
	if( pToolBar != NULL )
	{
		CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
		if(		pMenuBar != NULL
			&&	pMenuBar->IsMenuBarTracking()
			)
		{
			int nFlatTrackingIndex = pMenuBar->_FlatTrackingIndexGet();
			if( nFlatTrackingIndex >= 0 )
			{
				int nIndexOfTBB = pMenuBar->_GetIndexOf( pFileTBB );
				if( nFlatTrackingIndex == nIndexOfTBB )
						bSelTrackingMode = true;
			}
		}
	}

	if( bSelTrackingMode )
			pBmp = &m_bmpArrRibbonFileButtonR1;
	else if( pFileTBB->IsEnabled() )
	{
		if( pFileTBB->IsPressed() )
		{
			pBmp = &m_bmpArrRibbonFileButtonR1;
			rcSrc.OffsetRect( 0, rcSrc.Height() );
		}
		else if( pFileTBB->IsHover() )
			pBmp = &m_bmpArrRibbonFileButtonR1;
	}
	if(		pBmp != NULL
		&&	(! pBmp->IsEmpty() )
		)
	{
		CRect rcPadding( 3, 3, 3, 3 );
		pBmp->AlphaBlendSkinParts(
			dc.m_hDC,
			rcTBB,
			rcSrc,
			rcPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			);
	}
CExtSafeString sText = pFileTBB->GetText();
	if( ! sText.IsEmpty() )
	{
			CFont * pFont = pFileTBB->GetBar()->OnGetToolbarFont( false, false, pFileTBB );
			ASSERT( pFont->GetSafeHandle() != NULL );
			CFont * pOldFont = dc.SelectObject( pFont );
			INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
			COLORREF clrOldTextColor = dc.SetTextColor( m_clrRibbonGroupCaptionTextCollapsed );
			rcTBB.DeflateRect( 0, 0, 3, 0 );
			Ribbon_PaintText(
				dc,
				LPCTSTR( sText ),
				rcTBB,
				DT_SINGLELINE|DT_CENTER|DT_VCENTER,
				true,
				&m_bmpRibbonDDA,
				(CObject*)pFileTBB,
				lParam
				);
			dc.SetTextColor( clrOldTextColor );
			dc.SetBkMode( nOldBkMode );
			dc.SelectObject( pOldFont );
	} // if( ! sText.IsEmpty() )
	return true;
}

INT CExtPaintManager::RibbonLayout_CalcQatbAboveRibbonHorzStart(
	CExtRibbonBar * pRibbonBar,
	LPARAM lParam //= 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	pRibbonBar;
	lParam;
	return -1;
}

INT CExtPaintManagerOffice2010_Impl::RibbonLayout_CalcQatbAboveRibbonHorzStart(
	CExtRibbonBar * pRibbonBar,
	LPARAM lParam //= 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pRibbonBar );
	lParam;
INT nRetVal = (16+4);
	if(		pRibbonBar != NULL
		&&	pRibbonBar->m_pExtNcFrameImpl != NULL
		&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
		)
		nRetVal += 4;
	return nRetVal;
}

bool CExtPaintManager::Ribbon_IsSystemMenuIconPresent() const
{
	ASSERT_VALID( this );
	return false;
}

bool CExtPaintManagerOffice2010_Impl::Ribbon_IsSystemMenuIconPresent() const
{
	ASSERT_VALID( this );
	return true;
}

CFont * CExtPaintManager::RibbonGallery_GetItemFont(
	CExtRibbonGalleryWnd * pGalleryWnd,
	LPVOID pGalleryItemData,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pGalleryWnd );
	pGalleryWnd; pGalleryItemData; lParam;
	return NULL;
}

CFont * CExtPaintManagerOffice2007_Impl::RibbonGallery_GetItemFont(
	CExtRibbonGalleryWnd * pGalleryWnd,
	LPVOID pGalleryItemData,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pGalleryWnd );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonGallery_GetItemFont( pGalleryWnd, pGalleryItemData, lParam );	
CExtToolBoxWnd::TOOLBOX_ITEM_DATA * pTBCI =
		(CExtToolBoxWnd::TOOLBOX_ITEM_DATA *)pGalleryItemData;
	if( pTBCI->ItemGetNext( __TBCGN_PARENT ) == pGalleryWnd->ItemGetRoot() )
		return (&m_FontBold);
	else
		return (&m_FontNormal);
}

CSize CExtPaintManager::RibbonGallery_MeasureItem(
	CDC & dc,
	CExtRibbonGalleryWnd * pGalleryWnd,
	LPVOID pGalleryItemData,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGalleryWnd );
	dc; pGalleryWnd; pGalleryItemData; lParam;
	return CSize( -1, -1 );
}

CSize CExtPaintManagerOffice2007_Impl::RibbonGallery_MeasureItem(
	CDC & dc,
	CExtRibbonGalleryWnd * pGalleryWnd,
	LPVOID pGalleryItemData,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGalleryWnd );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonGallery_MeasureItem( dc, pGalleryWnd, pGalleryItemData, lParam );	
CExtToolBoxWnd::TOOLBOX_ITEM_DATA * pTBCI = (CExtToolBoxWnd::TOOLBOX_ITEM_DATA *)pGalleryItemData;
CExtToolBoxWnd::TOOLBOX_ITEM_DATA * pTBCI_Parent = pTBCI->ItemGetNext( __TBCGN_PARENT );
CExtToolBoxWnd::TOOLBOX_ITEM_DATA * pTBCI_Root = pGalleryWnd->ItemGetRoot();
	ASSERT( pTBCI_Parent != NULL );
	if( pTBCI_Parent != pTBCI_Root )
		return CSize( -1, -1 );
	else
	{
		if( (pGalleryWnd->GetToolBoxWndStyle()&__TBWS_ZERO_HEIGHT_CAPTIONS) != 0 )
			return CSize( 0, 0 );
		__EXT_MFC_SAFE_LPCTSTR sText = pTBCI->TextGet();
		CFont * pFont = RibbonGallery_GetItemFont( pGalleryWnd, pGalleryItemData, lParam );
		ASSERT( pFont->GetSafeHandle() != NULL );
		CSize _size = stat_CalcTextDimension( dc, *pFont, sText, DT_SINGLELINE|DT_TOP|DT_LEFT ).Size();
		_size.cx += 20;
		_size.cy += 8;
		return _size;
	} // else from if( pTBCI_Parent != pTBCI_Root )
}

bool CExtPaintManager::RibbonGallery_DrawItem(
	CDC & dc,
	CExtRibbonGalleryWnd * pGalleryWnd,
	const RECT & rcItem,
	LPVOID pGalleryItemData,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGalleryWnd );
	dc; pGalleryWnd; rcItem; pGalleryItemData; lParam;
	return false;
}

bool CExtPaintManagerOffice2007_Impl::RibbonGallery_DrawItem(
	CDC & dc,
	CExtRibbonGalleryWnd * pGalleryWnd,
	const RECT & rcItem,
	LPVOID pGalleryItemData,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGalleryWnd );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonGallery_DrawItem( dc, pGalleryWnd, rcItem, pGalleryItemData, lParam );	
CExtToolBoxWnd::TOOLBOX_ITEM_DATA * pTBCI = (CExtToolBoxWnd::TOOLBOX_ITEM_DATA *)pGalleryItemData;
DWORD dwItemStyle = pTBCI->GetItemStyle();
CRect _rcItem = rcItem;
CSize sizeItem = _rcItem.Size();
	if(		(dwItemStyle & __TBWI_VISIBLE) == 0
		||	_rcItem.IsRectEmpty()
		||	(! dc.RectVisible( &_rcItem ) )
		)
		return true;
__EXT_MFC_SAFE_LPCTSTR sText = pTBCI->TextGet();
DWORD dwToolBoxWndStyles = pGalleryWnd->GetToolBoxWndStyle();
bool bTreeBoxes = ( (dwToolBoxWndStyles&__TBWS_TREE_BOXES) != 0 ) ? true : false;
bool bListViewMode = false;
CExtToolBoxWnd::TOOLBOX_ITEM_DATA * pTBCI_Parent = pTBCI->ItemGetNext( __TBCGN_PARENT );
CExtToolBoxWnd::TOOLBOX_ITEM_DATA * pTBCI_Root = pGalleryWnd->ItemGetRoot();
	ASSERT( pTBCI_Parent != NULL );
	if( pTBCI_Parent != pTBCI_Root )
	{
		bTreeBoxes = false;
		ASSERT( pTBCI_Parent->ItemGetNext( __TBCGN_PARENT ) == pTBCI_Root );
		if( pTBCI_Parent->GetItemStyle() & __TBWI_LISTBOX_VIEW )
			bListViewMode = true;
		INT nImgIndex1 = INT(__E07BI_NORMAL);
//		if( bSelTrackingMode )
//				nImgIndex1 = INT(__E07BI_SEL_T);
//		else
		if( (dwItemStyle & __TBWI_ENABLED) != 0 )
		{
			if( (dwItemStyle & (__TBWI_PRESSED|__TBWI_SELECTED) ) != 0 )
			{
				if( (dwItemStyle & __TBWI_HOVER) != 0 )
					nImgIndex1 = INT(__E07BI_HDD);
				else
					nImgIndex1 = INT(__E07BI_PRESSED);
			}
			else if( (dwItemStyle & __TBWI_HOVER) != 0 )
				nImgIndex1 = INT(__E07BI_HOVER);
		} // else if( _ppbd.m_bEnabled )
		if( nImgIndex1 != __E07BI_NORMAL )
		{
			nImgIndex1 = m_arrIndicesButtonLSM[nImgIndex1];
			CSize _sizeBmp = m_bmpArrButtonLSM.GetSize();
			CRect rcSrc( 0, 0, _sizeBmp.cx, m_nHeightOfButtonLSM );
			rcSrc.OffsetRect( 0, m_nHeightOfButtonLSM*nImgIndex1 );
			m_bmpArrButtonLSM.AlphaBlendSkinParts(
				dc.m_hDC,
				rcItem,
				rcSrc,
				m_rcPaddingOfButtonLSM,
				CExtBitmap::__EDM_STRETCH,
				true,
				true
				);
		} // if( nImgIndex1 != __E07BI_NORMAL )
	} // if( pTBCI_Parent != pTBCI_Root )
	else
	{
		bListViewMode = true;
		MenuCaption_Paint(
			dc,
			rcItem,
			NULL,
			( pGalleryWnd->GetSafeHwnd() != NULL )
				? ( DYNAMIC_DOWNCAST( CExtPopupMenuWnd, pGalleryWnd->GetParent() ) )
				: NULL
			);
	} // else from if( pTBCI_Parent != pTBCI_Root )
bool bMultipleExp = ( (dwToolBoxWndStyles&__TBWS_MULTIPLE_EXPANDED_GROUPS) != 0 ) ? true : false;
bool bAllowSelectionDrawing = true;
	if(		bMultipleExp
		&&	pTBCI->ItemGetNext( __TBCGN_PARENT ) != pGalleryWnd->ItemGetActive()
		)
		bAllowSelectionDrawing = false;
bool bEnabled = (dwItemStyle & __TBWI_ENABLED) ? true : false;
CSize sizeIcon( 0, 0 );
CExtCmdIcon & _icon = pTBCI->IconGet();
	sizeIcon = _icon.GetSize();
	sizeIcon.cx = UiScalingDo( sizeIcon.cx, __EUIST_X );
	sizeIcon.cy = UiScalingDo( sizeIcon.cy, __EUIST_Y );
	if( bListViewMode )
	{
		if( (dwToolBoxWndStyles&(__TBWS_FLAT_GROUPS_2005|__TBWS_PM_BUTTONS)) != 0 )
			_rcItem.DeflateRect( __EXT_TOOLBOXWND_2005_MARGIN_DX, 0 );
		if( bTreeBoxes )
		{
			int nTreeBoxAreaDX = max( sizeItem.cy, __EXT_TOOLBOXWND_TREE_BOX_AREA_DY );
			CRect rcTreeBox = _rcItem;
			rcTreeBox.right = rcTreeBox.left + nTreeBoxAreaDX;
			bool bPlus = true;
			if( bMultipleExp )
			{
				if( (dwItemStyle&__TBWI_EXPANDED) != 0 )
					bPlus = false;
			} // if( bMultipleExp )
			else
			{
				if( (dwItemStyle&__TBWI_ACTIVE) != 0 )
					bPlus = false;
			} // else from if( bMultipleExp )
			pGalleryWnd->OnToolBoxWndDrawTreeBox( pTBCI, _rcItem, rcTreeBox, (! bPlus ), dc );
			_rcItem.left += nTreeBoxAreaDX;
		} // if( bTreeBoxes )
		CRect rcText = _rcItem;
		rcText.DeflateRect( __EXT_TOOLBOXWND_ITEM_MARGIN_DX, __EXT_TOOLBOXWND_ITEM_MARGIN_DY );
		if( ( ! _icon.IsEmpty() ) && sizeIcon.cx > 0 && sizeIcon.cy > 0 )
		{
			CRect rcIcon = rcText;
			rcIcon.right = rcIcon.left + sizeIcon.cx;
			rcText.left += sizeIcon.cx + __EXT_TOOLBOXWND_ICON2TEXT_DX;
			rcIcon.top += (rcIcon.Height() - sizeIcon.cy) / 2;
			_icon.Paint(
				this,
				dc.GetSafeHdc(),
				rcIcon,
				bEnabled ? CExtCmdIcon::__PAINT_NORMAL : CExtCmdIcon::__PAINT_DISABLED
				);
		}
		if(		(rcText.right - rcText.left > 6)
			&&	(rcText.bottom - rcText.top > 6)
			)
		{
			INT nTextLen = 0;
			if(		sText != NULL
				&&	( nTextLen = INT(_tcslen(sText)) ) > 0
				)
			{
				CFont * pOldFont = dc.SelectObject( pTBCI->ItemGetFont() );
				int nOldBkMode = dc.SetBkMode( TRANSPARENT );
				COLORREF clrTextOld = dc.SetTextColor( m_clrRibbonModeMenuTextNormal );
				CRect _rcText = rcText;
				_rcText.OffsetRect( 0, -1 );
				CExtRichContentLayout::stat_DrawText( dc.m_hDC, sText, nTextLen, _rcText, DT_SINGLELINE|DT_LEFT|DT_VCENTER|DT_END_ELLIPSIS, 0 );
				dc.SetTextColor( clrTextOld );
				dc.SetBkMode( nOldBkMode );
				dc.SelectObject( pOldFont );
			}
		}
	} // if( bListViewMode )
	else
	{
		if( ( ! _icon.IsEmpty() ) && sizeIcon.cx > 0 && sizeIcon.cy > 0 )
		{
			CRect rcIcon = _rcItem;
			rcIcon.DeflateRect( (rcIcon.Width() - sizeIcon.cx) / 2, (rcIcon.Height() - sizeIcon.cy) / 2 );
			rcIcon.right = rcIcon.left + sizeIcon.cx;
			rcIcon.bottom = rcIcon.top + sizeIcon.cy;
			_icon.Paint(
				this,
				dc.GetSafeHdc(),
				rcIcon,
				bEnabled ? CExtCmdIcon::__PAINT_NORMAL : CExtCmdIcon::__PAINT_DISABLED 
				);
		}
	} // else from if( bListViewMode )
CWnd * pWnd = pGalleryWnd->GetParent();
	if(		pWnd != NULL
		&&	pWnd->IsKindOf( RUNTIME_CLASS( CExtRibbonGalleryPopupMenuWnd ) )
		&&	(((CExtRibbonGalleryPopupMenuWnd*)pWnd)->TrackFlagsGet()&TPMX_RIBBON_FILE_MENU)
		)
	{
		CRect rcClient;
		pGalleryWnd->GetClientRect( &rcClient );
		dc.FillSolidRect( rcClient.left, rcClient.top, 1, rcClient.Height(), RGB(197,197,197) );
		dc.FillSolidRect( rcClient.left+1, rcClient.top, 1, rcClient.Height(), RGB(245,245,245) );
	}
	return true;
}

bool CExtPaintManager::RibbonGallery_EraseEntireBk(
	CDC & dc,
	const CRect & rcClient,
	const CRect & rcActiveChildArea,
	CRgn & rgnActiveChildArea,
	const CRect & rcActiveChildArea2,
	CRgn & rgnActiveChildArea2,
	CExtRibbonGalleryWnd * pGalleryWnd,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGalleryWnd );
	rcActiveChildArea; rgnActiveChildArea; rcActiveChildArea2; rgnActiveChildArea2; pGalleryWnd; lParam;
	rcClient;
CRect _rcClient;
	pGalleryWnd->GetClientRect( &_rcClient );
COLORREF clrBkgnd = GetColor( COLOR_WINDOW );
	if(		pGalleryWnd->m_bInPlaceGallery
		&&	pGalleryWnd->_IsKeyFocusGallery()
		)
		clrBkgnd = GetColor( COLOR_HIGHLIGHT );
	dc.FillSolidRect( &_rcClient, clrBkgnd );
	return true;
}

bool CExtPaintManagerOffice2007_Impl::RibbonGallery_EraseEntireBk(
	CDC & dc,
	const CRect & rcClient,
	const CRect & rcActiveChildArea,
	CRgn & rgnActiveChildArea,
	const CRect & rcActiveChildArea2,
	CRgn & rgnActiveChildArea2,
	CExtRibbonGalleryWnd * pGalleryWnd,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pGalleryWnd );
	if( IsHighContrast() )
		return CExtPaintManagerXP::RibbonGallery_EraseEntireBk( dc, rcClient, rcActiveChildArea, rgnActiveChildArea, rcActiveChildArea2, rgnActiveChildArea2, pGalleryWnd, lParam );	
	if( pGalleryWnd->m_bInPlaceGallery )
	{
		COLORREF clrBorder = m_clrRibbonGalleryInplaceBorderNormal;
		COLORREF clrBkgnd = m_clrRibbonGalleryInplaceBkgndNormal;
		if( pGalleryWnd->_IsKeyFocusGallery() )
			clrBkgnd = CExtBitmap::stat_HLS_Adjust( clrBkgnd, 0.0, 0.5 );
		CPoint ptCursor;
		if( ::GetCursorPos( &ptCursor ) )
		{
			HWND hWnd = ::WindowFromPoint( ptCursor );
			if(		hWnd != NULL
				&&	(	hWnd == pGalleryWnd->m_hWnd
					||	hWnd == pGalleryWnd->GetScrollBarCtrl(SB_VERT)->GetSafeHwnd()
					)
				)
			{
				clrBorder = m_clrRibbonGalleryInplaceBorderHover;
				clrBkgnd = m_clrRibbonGalleryInplaceBkgndHover;
			}
		}
		dc.FillSolidRect( &rcClient, clrBkgnd );
		CRect _rcClient;
		pGalleryWnd->GetClientRect( &_rcClient );
		dc.Draw3dRect( &_rcClient, clrBorder, clrBorder );
		return true;
	} // if( pGalleryWnd->m_bInPlaceGallery )
CWnd * pWnd = pGalleryWnd->GetParent();
	if(		pWnd != NULL
		&&	pWnd->IsKindOf( RUNTIME_CLASS( CExtRibbonGalleryPopupMenuWnd ) )
		&&	(((CExtRibbonGalleryPopupMenuWnd*)pWnd)->TrackFlagsGet()&TPMX_RIBBON_FILE_MENU)
		)
	{
		dc.FillSolidRect( &rcClient, RGB(233,234,238) );
		dc.FillSolidRect( rcClient.left, rcClient.top, 1, rcClient.Height(), RGB(197,197,197) );
		dc.FillSolidRect( rcClient.left+1, rcClient.top, 1, rcClient.Height(), RGB(245,245,245) );
		return true;
	}
	dc.FillSolidRect( &rcClient, GetColor( COLOR_WINDOW ) );
	return true;
}

void CExtPaintManager::RibbonGallery_AdjustClientRect(
	CRect & rcClient,
	const CExtRibbonGalleryWnd * pGalleryWnd,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pGalleryWnd );
	lParam;
	if(		pGalleryWnd->m_bInPlaceGallery
		&&	pGalleryWnd->GetScrollBarCtrl(SB_VERT)->GetSafeHwnd() != NULL
		)
		rcClient.DeflateRect( 1, 1, 0, 1 );
}

void CExtPaintManager::RibbonGallery_PaintScrollArea(
	CDC & dc,
	CExtRibbonGalleryInplaceScrollBar * pSB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pSB );
	ASSERT( pSB->GetSafeHwnd() != NULL );
bool bKeyFocusMode = false;
CExtRibbonGalleryWnd * pRibbonGalleryWnd =
		STATIC_DOWNCAST( CExtRibbonGalleryWnd, pSB->GetParent() );
	if(		pRibbonGalleryWnd->m_bInPlaceGallery
		&&	pRibbonGalleryWnd->_IsKeyFocusGallery()
		)
		bKeyFocusMode = true;
INT nIndex, nCount = sizeof(pSB->m_arrButtons) / sizeof(pSB->m_arrButtons[0]);
	for( nIndex = 0; nIndex < nCount; nIndex ++ )
	{
		CRect rc = pSB->RgBtnGetRect( (CExtRibbonGalleryInplaceScrollBar::e_ButtonType_t)nIndex );
		LPCTSTR strText = NULL;
		switch( nIndex )
		{
		case INT(CExtRibbonGalleryInplaceScrollBar::__BTT_UP):
			strText = _T("t");
		break;
		case INT(CExtRibbonGalleryInplaceScrollBar::__BTT_DOWN):
			strText = _T("u");
		break;
		case INT(CExtRibbonGalleryInplaceScrollBar::__BTT_MENU):
			strText = _T("7");
		break;
		} // switch( nIndex )
		CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
			pSB,
			true,
			rc,
			strText, //bTopButton ? _T("t") : _T("u"), // up arrow / down arrow
			NULL,
			true,
			( pSB->m_arrButtons[ nIndex ] == CExtRibbonGalleryInplaceScrollBar::__BST_HOVER || ( bKeyFocusMode && nIndex == INT(CExtRibbonGalleryInplaceScrollBar::__BTT_MENU) ) ) ? true : false,
			( pSB->m_arrButtons[ nIndex ] == CExtRibbonGalleryInplaceScrollBar::__BST_PRESSED ) ? true : false,
			false,
			( pSB->m_arrButtons[ nIndex ] != CExtRibbonGalleryInplaceScrollBar::__BST_DISABLED ) ? true : false,
			true,false,false,
			__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
			(HFONT)m_FontMarlett.GetSafeHandle()
			);
		_ppbd.m_lParam = lParam;
		PaintPushButton( dc, _ppbd );
	}
}

void CExtPaintManagerOffice2007_Impl::RibbonGallery_PaintScrollArea(
	CDC & dc,
	CExtRibbonGalleryInplaceScrollBar * pSB,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pSB );
	ASSERT( pSB->GetSafeHwnd() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::RibbonGallery_PaintScrollArea( dc, pSB, lParam );
		return;
	}
CRect rcClient;
	pSB->GetClientRect( &rcClient );
	if( m_rcRibbonGalleryScrollFill != COLORREF(-1L) )
		dc.FillSolidRect( &rcClient, m_rcRibbonGalleryScrollFill );
bool bKeyFocusMode = false;
CExtRibbonGalleryWnd * pRibbonGalleryWnd =
		STATIC_DOWNCAST( CExtRibbonGalleryWnd, pSB->GetParent() );
	if(		pRibbonGalleryWnd->m_bInPlaceGallery
		&&	pRibbonGalleryWnd->_IsKeyFocusGallery()
		)
		bKeyFocusMode = true;
INT nIndex, nCount = sizeof(pSB->m_arrButtons) / sizeof(pSB->m_arrButtons[0]);
INT nNextTop = 0;
	for( nIndex = 0; nIndex < nCount; nIndex ++ )
	{
		bool bForceHover = false;
		CRect rc = pSB->RgBtnGetRect( (CExtRibbonGalleryInplaceScrollBar::e_ButtonType_t)nIndex );
		INT nBtnHeightSrc = m_nHeightRibbonGalleryScrollButton;
		INT nBtnHeightDst = UiScalingDo( nBtnHeightSrc, __EUIST_X );
		CExtBitmap * pBmp = NULL;
		switch( nIndex )
		{
		case INT(CExtRibbonGalleryInplaceScrollBar::__BTT_UP):
			pBmp = &m_bmpArrRibbonGalleryScrollButtonUp;
			if( nBtnHeightSrc < 0 )
			{
				nBtnHeightSrc = 21;
				nBtnHeightDst = UiScalingDo( nBtnHeightSrc, __EUIST_X );
			}
		break;
		case INT(CExtRibbonGalleryInplaceScrollBar::__BTT_DOWN):
			pBmp = &m_bmpArrRibbonGalleryScrollButtonDown;
			if( nBtnHeightSrc < 0 )
			{
				nBtnHeightSrc = 19;
				nBtnHeightDst = UiScalingDo( nBtnHeightSrc, __EUIST_X );
			}
		break;
		case INT(CExtRibbonGalleryInplaceScrollBar::__BTT_MENU):
			pBmp = &m_bmpArrRibbonGalleryScrollButtonMenu;
			if( nBtnHeightSrc < 0 )
			{
				nBtnHeightSrc = 20;
				nBtnHeightDst = UiScalingDo( nBtnHeightSrc, __EUIST_X );
			}
			if( bKeyFocusMode )
				bForceHover = true;
		break;
		} // switch( nIndex )
		if( pBmp != NULL && (! pBmp->IsEmpty() ) && nBtnHeightSrc > 0 )
		{
			rc.top = nNextTop;
			rc.bottom = rc.top + nBtnHeightDst;
			INT nOffsetIndex = 0;
			CExtRibbonGalleryInplaceScrollBar::e_ButtonState_t eBST = pSB->m_arrButtons[ nIndex ];
			if( bForceHover )
				eBST = CExtRibbonGalleryInplaceScrollBar::__BST_HOVER;
			switch( eBST )
			{
			case CExtRibbonGalleryInplaceScrollBar::__BST_DISABLED:
				nOffsetIndex = m_nIndexRibbonGalleryScrollButtonDisabled;
			break;
			case CExtRibbonGalleryInplaceScrollBar::__BST_NORMAL:
				nOffsetIndex = m_nIndexRibbonGalleryScrollButtonNormal;
			break;
			case CExtRibbonGalleryInplaceScrollBar::__BST_HOVER:
				nOffsetIndex = m_nIndexRibbonGalleryScrollButtonHover;
			break;
			case CExtRibbonGalleryInplaceScrollBar::__BST_PRESSED:
				nOffsetIndex = m_nIndexRibbonGalleryScrollButtonPressed;
			break;
			} // switch( eBST )
			if( rc.bottom > rcClient.bottom )
				rc.bottom = rcClient.bottom;
			CRect rcSrc( 0, 0, pBmp->GetSize().cx, nBtnHeightSrc );
			rcSrc.OffsetRect( 0, nBtnHeightSrc*nOffsetIndex );
			pBmp->AlphaBlendSkinParts(
				dc.m_hAttribDC,
				rc,
				rcSrc,
				m_rcRibbonGalleryScrollButtonPadding,
				CExtBitmap::__EDM_STRETCH,
				true,
				true
				);
			nNextTop = rc.bottom;
			continue;
		} // if( pBmp != NULL ..
		CExtPaintManager::PAINTPUSHBUTTONDATA _ppbd(
			pSB,
			true,
			rc,
			NULL,
			NULL,
			true,
			( pSB->m_arrButtons[ nIndex ] == CExtRibbonGalleryInplaceScrollBar::__BST_HOVER ) ? true : false,
			( pSB->m_arrButtons[ nIndex ] == CExtRibbonGalleryInplaceScrollBar::__BST_PRESSED ) ? true : false,
			false,
			( pSB->m_arrButtons[ nIndex ] != CExtRibbonGalleryInplaceScrollBar::__BST_DISABLED ) ? true : false,
			true,false,false,
			__ALIGN_HORIZ_CENTER | __ALIGN_VERT_CENTER,
			(HFONT)m_FontMarlett.GetSafeHandle()
			);
		_ppbd.m_lParam = lParam;
		PaintPushButton( dc, _ppbd );
	}
}

#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

void CExtPaintManagerOffice2007_Impl::PaintMenuItem(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pmid.m_rcItem.IsRectEmpty() )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuItem( dc, _pmid );
		return;
	}

	if(		_pmid.m_pHelperSrc != NULL
		&&	_pmid.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
		&&	((CExtPopupMenuWnd*)_pmid.m_pHelperSrc)->_IsRibbonMode()
		)
	{
		if(		_pmid.m_bEnabled
			&&	m_clrRibbonModeMenuTextNormal != COLORREF(-1L)
			&&	_pmid.m_clrForceMenuText == COLORREF(-1L)
			)
			_pmid.m_clrForceMenuText = m_clrRibbonModeMenuTextNormal;
	}
	CExtPaintManagerOffice2003::PaintMenuItem( dc, _pmid );
}

CRect CExtPaintManagerOffice2007_Impl::GetMenuBorderMetrics(
	CWnd * pWnd,
	LPARAM lParam // = 0
	) const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::GetMenuBorderMetrics(
				pWnd,
				lParam
				);	

	if(		pWnd != NULL
		&&	pWnd->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
		&&	((CExtPopupMenuWnd*)pWnd)->_IsRibbonMode()
		)
	{
		if( ( ((CExtPopupMenuWnd*)pWnd)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) != 0 )
			return m_rcPaddingRibbonFileMenuBigBorder;
		return m_rcRibbonModeMenuMetrics;
	}
	return CExtPaintManagerOffice2003::GetMenuBorderMetrics( pWnd, lParam );
}

void CExtPaintManagerOffice2007_Impl::PaintMenuBorder(
	CDC & dc,
	const RECT & rectClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ::IsRectEmpty( &rectClient ) )
		return;

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuBorder(
			dc,
			rectClient,
			pHelperSrc,
			lParam
			);
		return;
	}

	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtPopupMenuWnd ) )
		&&	((CExtPopupMenuWnd*)pHelperSrc)->_IsRibbonMode()
		)
	{
		if( ( ((CExtPopupMenuWnd*)pHelperSrc)->TrackFlagsGet() & TPMX_RIBBON_FILE_MENU ) != 0 )
		{
			m_bmpRibbonFileMenuBigBorder.AlphaBlendSkinParts(
				dc.m_hDC,
				rectClient,
				m_rcPaddingRibbonFileMenuBigBorder,
				CExtBitmap::__EDM_STRETCH,
				false,
				true
				);
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
			CExtRibbonGalleryPopupMenuWnd * pGalleryPopup =
				DYNAMIC_DOWNCAST( CExtRibbonGalleryPopupMenuWnd, pHelperSrc );
			if(		pGalleryPopup != NULL
				&&	pGalleryPopup != NULL
				&&	pGalleryPopup->m_pRibbonSrcTrackingButton != NULL
				&&	pGalleryPopup->m_pRibbonSrcTrackingButton->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonFile ) )
				&&	pGalleryPopup->m_pRibbonSrcTrackingButton->GetSafeBar() != NULL
				&&	pGalleryPopup->m_pRibbonSrcTrackingButton->GetBar()->IsKindOf( RUNTIME_CLASS( CExtRibbonBar) )
				)
			{
				CExtRibbonButtonFile * pFileTBB =
					STATIC_DOWNCAST(
						CExtRibbonButtonFile,
						pGalleryPopup->m_pRibbonSrcTrackingButton
						);
				CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pFileTBB->GetBar() );
				if(		pRibbonBar != NULL
					//&&	Ribbon_FileButtonIsItegrationSupported()
					&&	pRibbonBar->m_pExtNcFrameImpl != NULL
					&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsSupported()
					&&	pRibbonBar->RibbonLayout_IsFrameIntegrationEnabled()
					)
				{
					INT nRibbonFileButtonMenuIntersectionHeight =
						Ribbon_FileButtonGetMenuIntersectionHeight();
					if( nRibbonFileButtonMenuIntersectionHeight != 0 )
					{
						CRect rcTBB = *pFileTBB;
						pFileTBB->GetBar()->ClientToScreen( &rcTBB );
						pGalleryPopup->ScreenToClient( &rcTBB );
						if( rcTBB.top <= rectClient.top && rectClient.top <= rcTBB.bottom )
						{
							CRect _rcTBB = rcTBB;
							if(		pRibbonBar->m_pExtNcFrameImpl != NULL
								&&	pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_IsDwmCaptionReplacement()
								)
							{
								if(		IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_LunaBlue ) )
									||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Silver ) )
									||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Obsidian ) )
									)
									_rcTBB.OffsetRect( 0, -3 );
							}
							INT nTopBorderHeight = 0;
							INT nFrameCaptionHeight = pRibbonBar->RibbonLayout_GetFrameCaptionHeight( &nTopBorderHeight );
							if( pRibbonBar->RibbonLayout_IsDwmCaptionIntegration() )
							{
								bool bZoomed = false;
								CWnd * pWnd = pRibbonBar->m_pExtNcFrameImpl->NcFrameImpl_GetFrameWindow();
								if( pWnd->GetSafeHwnd() != NULL && pWnd->IsZoomed() )
									bZoomed = true;
								if( bZoomed )
								{
									POINT ptOffset = { - ::GetSystemMetrics(SM_CXFRAME)/4 + 4, - ::GetSystemMetrics(SM_CYFRAME) };
									_rcTBB.OffsetRect( ptOffset );
								}
							}
							else
							{
								_rcTBB.OffsetRect( 0, - nFrameCaptionHeight - nTopBorderHeight );
							}
							dc.OffsetViewportOrg(
								_rcTBB.left,
								_rcTBB.top //- nFrameCaptionHeight - nTopBorderHeight
								);
							pFileTBB->AnimationClient_SiteGet()->AnimationSite_ClientProgressStop( pFileTBB );
							pFileTBB->Paint( dc );
							dc.OffsetViewportOrg(
								-_rcTBB.left,
								-_rcTBB.top //+ nFrameCaptionHeight + nTopBorderHeight
								);
						} // if( rcTBB.top <= rectClient.top && rectClient.top <= rcTBB.bottom )
					} // if( nRibbonFileButtonMenuIntersectionHeight != 0 )
				} // if( pRibbonBar != NULL ...
			}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
			return;
		}
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if(		((CExtPopupMenuWnd*)pHelperSrc)->IsKindOf( RUNTIME_CLASS( CExtRibbonPopupMenuWnd ) )
			&&	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R1 ) )
			)
		{
		}
		else
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		{
			m_bmpRibbonModeMenuBorder.AlphaBlendSkinParts(
				dc.m_hDC,
				rectClient,
				m_rcRibbonModeMenuBorderPadding,
				CExtBitmap::__EDM_STRETCH,
				false,
				true
				);
			return;
		}
	}
	CExtPaintManagerOffice2003::PaintMenuBorder( dc, rectClient, pHelperSrc, lParam );
}

CExtAnimationParameters CExtPaintManager::g_DefAnimationParametersEmpty( 0, 0 );
CExtAnimationParameters CExtPaintManager::g_DefAnimationParametersNormal( __EXT_MFC_DEF_ANIMATION_STEP_COUNT, __EXT_MFC_DEF_ANIMATION_TIMER_ELAPSE );
CExtAnimationParameters CExtPaintManager::g_DefAnimationParametersSlow( __EXT_MFC_DEF_ANIMATION_STEP_COUNT+1, __EXT_MFC_DEF_ANIMATION_TIMER_ELAPSE );
CExtAnimationParameters CExtPaintManager::g_DefAnimationParametersVerySlow( __EXT_MFC_DEF_ANIMATION_STEP_COUNT+2, __EXT_MFC_DEF_ANIMATION_TIMER_ELAPSE );
//CExtAnimationParameters CExtPaintManager::g_DefAnimationParametersVerySlowAndSmooth( __EXT_MFC_DEF_ANIMATION_STEP_COUNT+4, __EXT_MFC_DEF_ANIMATION_TIMER_ELAPSE );
CExtAnimationParameters CExtPaintManager::g_DefAnimationParametersVerySlowAndSmooth( 4, 80 );

const CExtAnimationParameters *
	CExtPaintManager::Animation_GetParameters(
		INT eAPT, // __EAPT_*** animation type
		CObject * pHelperSrc,
		const CExtAnimationClient * pAC,
		LPARAM lParam // = 0L
		) const
{
	ASSERT_VALID( this );
	ASSERT( pAC != NULL );
	eAPT;
	pHelperSrc;
	pAC;
	lParam;
//					if( ! g_PaintManager.m_bIsWin2000orLater )
//						return (&g_PaintManager->g_DefAnimationParametersEmpty);
//					if( pHelperSrc != NULL )
//					{
//						ASSERT_VALID( pHelperSrc );
//						if( g_PaintManager.m_DWM.IsCompositionEnabled() )
//						{
//							if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtScrollBar ) ) )
//								return (&g_PaintManager->g_DefAnimationParametersVerySlow);
//						} // if( g_PaintManager.m_DWM.IsCompositionEnabled() )
//				#if (!defined __EXT_MFC_NO_RIBBON_BAR)
//						CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
//						if( pTBB != NULL )
//						{
//							CExtToolControlBar * pToolBar = pTBB->GetBar();
//							if( pToolBar != NULL )
//							{
//								ASSERT_VALID( pToolBar );
//								CExtRibbonPage * pRibbonPage = DYNAMIC_DOWNCAST( CExtRibbonPage, pToolBar );
//								if( pRibbonPage != NULL )
//								{
//									if( pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonDialogLauncher ) ) )
//									{
//										if(		eAPT == __EAPT_BY_HOVERED_STATE_TURNED_ON
//											||	eAPT == __EAPT_BY_HOVERED_STATE_TURNED_OFF
//											)
//											return (&g_DefAnimationParametersEmpty);
//									}
//									CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
//									CExtRibbonButtonGroup * pGroupTBB = DYNAMIC_DOWNCAST( CExtRibbonButtonGroup, pTBB );
//									if( pGroupTBB != NULL )
//									{
//										if( pParentTBB != NULL )
//											return (&g_DefAnimationParametersEmpty);
//				//						if( pGroupTBB->TopCollapsedStateGet() )
//											return (&g_DefAnimationParametersNormal);
//				//						return (&g_DefAnimationParametersVerySlowAndSmooth);
//									}
//									if( pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonTabPage ) ) )
//									{
//										if( eAPT == __EAPT_BY_HOVERED_STATE_TURNED_ON )
//											return (&g_DefAnimationParametersEmpty);
//										return (&g_DefAnimationParametersVerySlow);
//									}
//									if(		(	pParentTBB != NULL
//											&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
//											)
//										||	pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonFile ) )
//										||	pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonQuickAccessContentExpand ) )
//										)
//										return (&g_DefAnimationParametersNormal);
//									// final case
//									if( eAPT == __EAPT_BY_HOVERED_STATE_TURNED_ON )
//										return (&g_DefAnimationParametersEmpty);
//									return (&g_DefAnimationParametersNormal);
//								} // if( pRibbonPage != NULL )
//							} // if( pToolBar != NULL )
//						} // if( pTBB != NULL )
//				#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
//					} // if( pHelperSrc != NULL )
	return (&g_DefAnimationParametersEmpty);
}

const CExtAnimationParameters *
	CExtPaintManagerNativeXP::Animation_GetParameters(
		INT eAPT, // __EAPT_*** animation type
		CObject * pHelperSrc,
		const CExtAnimationClient * pAC,
		LPARAM lParam // = 0L
		) const
{
	ASSERT_VALID( this );
	ASSERT( pAC != NULL );
	if( ! g_PaintManager.m_bIsWin2000orLater )
		return (&g_PaintManager->g_DefAnimationParametersEmpty);
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		if( g_PaintManager.m_DWM.IsCompositionEnabled() )
		{
			if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtButton ) ) )
				return (&g_PaintManager->g_DefAnimationParametersVerySlow);
#if (!defined __EXT_MFC_NO_SPIN)
			if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtSpinWnd ) ) )
				return (&g_PaintManager->g_DefAnimationParametersVerySlow);
#endif // (!defined __EXT_MFC_NO_SPIN)
		} // if( g_PaintManager.m_DWM.IsCompositionEnabled() )
	} // if( pHelperSrc != NULL )
const CExtAnimationParameters * pAnimationParameters =
		CExtPaintManager::Animation_GetParameters(
			eAPT,
			pHelperSrc,
			pAC,
			lParam
			);
	return pAnimationParameters;
}

const CExtAnimationParameters *
	CExtPaintManagerOffice2007_Impl::Animation_GetParameters(
		INT eAPT, // __EAPT_*** animation type
		CObject * pHelperSrc,
		const CExtAnimationClient * pAC,
		LPARAM lParam // = 0L
		) const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::Animation_GetParameters(
				eAPT,
				pHelperSrc,
				pAC,
				lParam
				);	
	
	if( ! g_PaintManager.m_bIsWin2000orLater )
		return (&g_PaintManager->g_DefAnimationParametersEmpty);
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtButton ) ) )
			return (&g_PaintManager->g_DefAnimationParametersVerySlow);
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtScrollBar ) ) )
			return (&g_PaintManager->g_DefAnimationParametersVerySlow);
#if (!defined __EXT_MFC_NO_DATE_PICKER)
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDatePickerWnd ) ) )
			return (&g_PaintManager->g_DefAnimationParametersSlow);
#endif // (!defined __EXT_MFC_NO_DATE_PICKER)
#if (!defined __EXT_MFC_NO_DURATIONWND)
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDurationWnd ) ) )
			return (&g_PaintManager->g_DefAnimationParametersSlow);
#endif // (!defined __EXT_MFC_NO_DURATIONWND)
#if (!defined __EXT_MFC_NO_SPIN)
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtSpinWnd ) ) )
			return (&g_PaintManager->g_DefAnimationParametersSlow);
#endif // (!defined __EXT_MFC_NO_SPIN)
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtRibbonGalleryWnd ) ) )
			return (&g_PaintManager->g_DefAnimationParametersNormal);
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
		if( pTBB != NULL )
		{
			bool bCheckEmpty = false;
			if( pTBB->ParentButtonGet() != NULL )
				bCheckEmpty = true;
			else
			{
				CExtRibbonBar * pRibbonBar = DYNAMIC_DOWNCAST( CExtRibbonBar, pTBB->GetBar() );
				if( pRibbonBar != NULL )
				{
					if( pTBB->IsKindOf( RUNTIME_CLASS(CExtRibbonButtonFile) ) )
						bCheckEmpty = true;
					else
					{
						INT nQatbIndex = pRibbonBar->RibbonQuickAccessButton_GetIndexOf( pTBB );
						if( nQatbIndex >= 0 )
							bCheckEmpty = true;
					}
				} // if( pRibbonBar != NULL )
			} // else from if( ((CExtBarButton*)pHelperSrc)->ParentButtonGet() != NULL )
			if( bCheckEmpty )
			{
				if(		IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_LunaBlue ) )
					||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Silver ) )
					||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2007_R3_Obsidian ) )
					||	IsKindOf( RUNTIME_CLASS( CExtPaintManagerOffice2010_Impl ) )
					)
					return (&g_PaintManager->g_DefAnimationParametersEmpty);
			} // if( bCheckEmpty )
		} // if( pTBB != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	} // if( pHelperSrc != NULL )
//const CExtAnimationParameters * pAnimationParameters =
//		CExtPaintManagerOffice2003::Animation_GetParameters(
//			eAPT,
//			pHelperSrc,
//			pAC,
//			lParam
//			);
//	return pAnimationParameters;

	if( ! g_PaintManager.m_bIsWin2000orLater )
		return (&g_PaintManager->g_DefAnimationParametersEmpty);
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		if( g_PaintManager.m_DWM.IsCompositionEnabled() )
		{
			if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtScrollBar ) ) )
				return (&g_PaintManager->g_DefAnimationParametersVerySlow);
		} // if( g_PaintManager.m_DWM.IsCompositionEnabled() )
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
		if( pTBB != NULL )
		{
			CExtToolControlBar * pToolBar = pTBB->GetBar();
			if( pToolBar != NULL )
			{
				ASSERT_VALID( pToolBar );
				CExtRibbonPage * pRibbonPage = DYNAMIC_DOWNCAST( CExtRibbonPage, pToolBar );
				if( pRibbonPage != NULL )
				{
					if( pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonDialogLauncher ) ) )
					{
						if(		eAPT == __EAPT_BY_HOVERED_STATE_TURNED_ON
							||	eAPT == __EAPT_BY_HOVERED_STATE_TURNED_OFF
							)
							return (&g_DefAnimationParametersEmpty);
					}
					CExtBarButton * pParentTBB = pTBB->ParentButtonGet();
					if(		pParentTBB == NULL
						&&	Ribbon_DwmAreaCoversTabs()
						&&	(! pTBB->IsKindOf( RUNTIME_CLASS(CExtRibbonButtonGroup) ) )
						)
						return (&g_DefAnimationParametersEmpty);
					CExtRibbonButtonGroup * pGroupTBB = DYNAMIC_DOWNCAST( CExtRibbonButtonGroup, pTBB );
					if( pGroupTBB != NULL )
					{
						if( pParentTBB != NULL )
							return (&g_DefAnimationParametersEmpty);
//						if( pGroupTBB->TopCollapsedStateGet() )
							return (&g_DefAnimationParametersNormal);
//						return (&g_DefAnimationParametersVerySlowAndSmooth);
					}
					if( pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonTabPage ) ) )
					{
						if( eAPT == __EAPT_BY_HOVERED_STATE_TURNED_ON )
							return (&g_DefAnimationParametersEmpty);
						return (&g_DefAnimationParametersVerySlow);
					}
					if(		(	pParentTBB != NULL
							&&	pParentTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonToolGroup ) )
							)
						||	pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonFile ) )
						||	pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonQuickAccessContentExpand ) )
						)
						return (&g_DefAnimationParametersNormal);
					// final case
					if( eAPT == __EAPT_BY_HOVERED_STATE_TURNED_ON )
						return (&g_DefAnimationParametersEmpty);
					return (&g_DefAnimationParametersNormal);
				} // if( pRibbonPage != NULL )
			} // if( pToolBar != NULL )
		} // if( pTBB != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
	} // if( pHelperSrc != NULL )
	return (&g_DefAnimationParametersEmpty);
}

void CExtPaintManager::MenuBottomResizingMarginGetInfo(
	INT & nMarginHeight,
	INT & nResizingCornerPartWidth,
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pPopup );
	lParam;
	nMarginHeight = 0;
	nResizingCornerPartWidth = 0;
DWORD dwTrackFlags = pPopup->TrackFlagsGet();
	if( (dwTrackFlags&TPMX_RIBBON_RESIZING) != 0 )
	{
		nMarginHeight = 10;
		if( (dwTrackFlags&TPMX_RIBBON_RESIZING_VERTICAL_ONLY) == 0 )
			nResizingCornerPartWidth = 10;
	}
}

void CExtPaintManagerOffice2007_Impl::MenuBottomResizingMarginGetInfo(
	INT & nMarginHeight,
	INT & nResizingCornerPartWidth,
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pPopup );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::MenuBottomResizingMarginGetInfo(
			nMarginHeight,
			nResizingCornerPartWidth,
			pPopup,
			lParam
			);
		return;
	}

DWORD dwTrackFlags = pPopup->TrackFlagsGet();
	if( (dwTrackFlags&TPMX_RIBBON_RESIZING) != 0 )
	{
		if( (dwTrackFlags&TPMX_RIBBON_RESIZING_VERTICAL_ONLY) != 0 )
		{
			if( m_bmpRibbonMenuResizingMarginV.IsEmpty() )
				nMarginHeight = m_bmpResizingGripper.GetSize().cy;
			else
				nMarginHeight = m_bmpRibbonMenuResizingMarginV.GetSize().cy;
		}
		else
		{
			if( m_bmpRibbonMenuResizingMarginHV.IsEmpty() )
				nMarginHeight = m_bmpResizingGripper.GetSize().cy;
			else
				nMarginHeight = m_bmpRibbonMenuResizingMarginHV.GetSize().cy;
			if( m_bmpRibbonMenuResizingGripperHV.IsEmpty() )
				nResizingCornerPartWidth = m_bmpResizingGripper.GetSize().cx;
			else
				nResizingCornerPartWidth = m_bmpRibbonMenuResizingGripperHV.GetSize().cx;
		}
	}
}

void CExtPaintManager::MenuBottomResizingMarginPaint(
	CDC & dc,
	const RECT & rcResizingArea,
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pPopup );
	lParam;
	if( ! dc.RectVisible( &rcResizingArea ) )
		return;
DWORD dwTrackFlags = pPopup->TrackFlagsGet();
	if( (dwTrackFlags&TPMX_RIBBON_RESIZING) == 0 )
		return;
	if( (dwTrackFlags&TPMX_RIBBON_RESIZING_VERTICAL_ONLY) != 0 )
	{
		PaintMenuTearOffButton( dc, rcResizingArea, false, false, pPopup, lParam );
		return;
	}
INT nMarginHeight = 0, nResizingCornerPartWidth = 0;
	MenuBottomResizingMarginGetInfo( nMarginHeight, nResizingCornerPartWidth, pPopup, lParam );
CRect rcGrip = rcResizingArea;
	rcGrip.left = rcGrip.right - nResizingCornerPartWidth;
	if( ! dc.RectVisible( &rcGrip ) )
		return;
	PaintResizingGripper( dc, rcGrip, pPopup, lParam );
}

void CExtPaintManagerOffice2007_Impl::MenuBottomResizingMarginPaint(
	CDC & dc,
	const RECT & rcResizingArea,
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pPopup );
	if( ! dc.RectVisible( &rcResizingArea ) )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::MenuBottomResizingMarginPaint( dc, rcResizingArea, pPopup, lParam );
		return;
	}
DWORD dwTrackFlags = pPopup->TrackFlagsGet();
	if( (dwTrackFlags&TPMX_RIBBON_RESIZING) == 0 )
		return;
	if( (dwTrackFlags&TPMX_RIBBON_RESIZING_VERTICAL_ONLY) != 0 )
	{
		if( m_bmpRibbonMenuResizingMarginV.IsEmpty() )
		{
			INT nMarginHeight = 0, nResizingCornerPartWidth = 0;
			MenuBottomResizingMarginGetInfo( nMarginHeight, nResizingCornerPartWidth, pPopup, lParam );
			CRect rcGrip = rcResizingArea;
			rcGrip.left = rcGrip.right - nResizingCornerPartWidth;
			if( ! dc.RectVisible( &rcGrip ) )
				return;
			PaintResizingGripper( dc, rcGrip, pPopup, lParam );
			return;
		}
		m_bmpRibbonMenuResizingMarginV.AlphaBlendSkinParts(
			dc.m_hDC,
			rcResizingArea,
			m_rcPaddingRibbonMenuResizingMarginV,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			);
		m_bmpRibbonMenuResizingGripperV.AlphaBlendSkinParts(
			dc.m_hDC,
			rcResizingArea,
			CRect(0,0,0,0),
			CExtBitmap::__EDM_CENTER,
			true,
			true
			);
	}
	else
	{
		if( m_bmpRibbonMenuResizingMarginHV.IsEmpty() )
		{
			INT nMarginHeight = 0, nResizingCornerPartWidth = 0;
			MenuBottomResizingMarginGetInfo( nMarginHeight, nResizingCornerPartWidth, pPopup, lParam );
			CRect rcGrip = rcResizingArea;
			rcGrip.left = rcGrip.right - nResizingCornerPartWidth;
			if( ! dc.RectVisible( &rcGrip ) )
				return;
			PaintResizingGripper( dc, rcGrip, pPopup, lParam );
			return;
		}
		m_bmpRibbonMenuResizingMarginHV.AlphaBlendSkinParts(
			dc.m_hDC,
			rcResizingArea,
			m_rcPaddingRibbonMenuResizingMarginHV,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			);
		CSize _size = m_bmpRibbonMenuResizingGripperHV.GetSize();
		CRect rcGrip(
			rcResizingArea.right - _size.cx,
			rcResizingArea.bottom - _size.cy,
			rcResizingArea.right,
			rcResizingArea.bottom
			);
		if( ! dc.RectVisible( &rcGrip ) )
			return;
		m_bmpRibbonMenuResizingGripperHV.AlphaBlendSkinParts(
			dc.m_hDC,
			rcGrip,
			CRect(0,0,0,0),
			CExtBitmap::__EDM_CENTER,
			true,
			true
			);
	}
}

CFont * CExtPaintManager::MenuCaptionGetFont(
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pPopup );
	pPopup;
	lParam;
	return ( const_cast < CFont * > ( & m_FontNormal ) );
}

CSize CExtPaintManager::MenuCaption_Measure(
	CDC & dc,
	__EXT_MFC_SAFE_LPCTSTR sMenuCaptionText,
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pPopup );
	if( sMenuCaptionText == NULL )
		return CSize( 0, 0 );
CExtSafeString _sText = sMenuCaptionText;
	if( _sText.GetLength() == 0 )
		return CSize( 0, 0 );
CFont * pFont = MenuCaptionGetFont(	pPopup, lParam );
	ASSERT( pFont->GetSafeHandle() != NULL );
CSize _size =
		stat_CalcTextDimension(
			dc,
			*pFont,
			_sText,
			DT_SINGLELINE|DT_TOP|DT_LEFT
			).Size();
	_size.cx += 20;
	_size.cy += 8;
	return _size;
}

void CExtPaintManager::MenuCaption_Paint(
	CDC & dc,
	const RECT & rcMenuCaption,
	__EXT_MFC_SAFE_LPCTSTR sMenuCaptionText,
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		( ! dc.RectVisible( &rcMenuCaption ) )
		//||	sMenuCaptionText == NULL
		)
		return;
INT nTextLen = ( sMenuCaptionText != NULL ) ? INT( _tcslen( sMenuCaptionText ) ) : 0;
//	if( nTextLen == 0 )
//		return;
CRect _rcMenuCaption = rcMenuCaption;
	if(		_rcMenuCaption.IsRectEmpty()
		||	( ! dc.RectVisible( &_rcMenuCaption ) )
		)
		return;
	_rcMenuCaption.DeflateRect( 2, 2, 2, 0 );
	dc.FillSolidRect( &_rcMenuCaption, GetColor( COLOR_3DSHADOW ) );
	_rcMenuCaption.DeflateRect( 8, 0 );
	if( nTextLen )
	{
		bool bRTL = (pPopup != NULL) ? pPopup->OnQueryLayoutRTL() : false;
		UINT nDT = DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS|DT_NOCLIP
				| ( bRTL ? DT_RIGHT : DT_LEFT );
		CFont * pFont = MenuCaptionGetFont(	pPopup, lParam );
			ASSERT( pFont->GetSafeHandle() != NULL );
		CFont * pOldFont = dc.SelectObject( pFont );
		COLORREF clrOldText = dc.SetTextColor( GetColor( COLOR_3DHIGHLIGHT ) );
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR( sMenuCaptionText ), nTextLen,
			&_rcMenuCaption,
			nDT, 0
			);
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
		dc.SelectObject( pOldFont );
	} // if( nTextLen )
}

void CExtPaintManagerOffice2007_Impl::MenuCaption_Paint(
	CDC & dc,
	const RECT & rcMenuCaption,
	__EXT_MFC_SAFE_LPCTSTR sMenuCaptionText,
	CExtPopupMenuWnd * pPopup,
	LPARAM lParam // = 0L
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
//	ASSERT_VALID( pPopup );
	if(		( ! dc.RectVisible( &rcMenuCaption ) )
		//||	sMenuCaptionText == NULL
		)
		return;

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::MenuCaption_Paint(
			dc,
			rcMenuCaption,
			sMenuCaptionText,
			pPopup,
			lParam
			);
		return;
	}

INT nTextLen = ( sMenuCaptionText != NULL ) ? INT( _tcslen( sMenuCaptionText ) ) : 0;
//	if( nTextLen == 0 )
//		return;
CRect _rcMenuCaption = rcMenuCaption;
	if(		_rcMenuCaption.IsRectEmpty()
		||	( ! dc.RectVisible( &_rcMenuCaption ) )
		)
		return;
CRect _rcMenuCaptionBk = _rcMenuCaption;
	//_rcMenuCaptionBk.InflateRect( 2, 2, 2, 0 );
	m_bmpMenuCaptionBk.AlphaBlendSkinParts(
		dc.m_hDC,
		_rcMenuCaptionBk,
		m_rcMenuCaptionBmpPadding,
		CExtBitmap::__EDM_STRETCH,
		true,
		true
		);
	_rcMenuCaption.DeflateRect( 10, 0 );
	if( nTextLen != 0 )
	{
		bool bRTL = ( pPopup != NULL ) ? pPopup->OnQueryLayoutRTL() : false;
		UINT nDT = DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS|DT_NOCLIP
				| ( bRTL ? DT_RIGHT : DT_LEFT );
		CFont * pFont = MenuCaptionGetFont(	pPopup, lParam );
			ASSERT( pFont->GetSafeHandle() != NULL );
		CFont * pOldFont = dc.SelectObject( pFont );
		COLORREF clrOldText = dc.SetTextColor( m_clrMenuCaptionText );
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CExtRichContentLayout::stat_DrawText(
			dc.m_hDC,
			LPCTSTR( sMenuCaptionText ), nTextLen,
			&_rcMenuCaption,
			nDT, 0
			);
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
		dc.SelectObject( pOldFont );
	}
}

CExtPaintManagerOffice2007_Blue::CExtPaintManagerOffice2007_Blue()
{
}

CExtPaintManagerOffice2007_Blue::~CExtPaintManagerOffice2007_Blue()
{
}

CExtPaintManagerOffice2007_Black::CExtPaintManagerOffice2007_Black()
{
}

CExtPaintManagerOffice2007_Black::~CExtPaintManagerOffice2007_Black()
{
}

CExtPaintManagerOffice2007_Silver::CExtPaintManagerOffice2007_Silver()
{
}

CExtPaintManagerOffice2007_Silver::~CExtPaintManagerOffice2007_Silver()
{
}

bool CExtPaintManager::PaintProgress( CDC & dc, CExtPaintManager::PAINTPROGRESSDATA & _ppd )
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc; _ppd;
	return false;
}

bool CExtPaintManagerNativeXP::PaintProgress( CDC & dc, CExtPaintManager::PAINTPROGRESSDATA & _ppd )
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( ! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return CExtPaintManager::PaintProgress( dc, _ppd );
	if( g_PaintManager.m_UxTheme.OpenThemeData( ::GetDesktopWindow(), L"PROGRESS" ) == NULL )
		return false;
CRect rcProgress( _ppd.m_rcClient );
	if( g_PaintManager.m_UxTheme.DrawThemeBackground(
			dc.GetSafeHdc(), 
			_ppd.m_bHorz ? PP_BAR : PP_BARVERT, 
			0, 
			&rcProgress, 
			&rcProgress
			) == S_OK
		)
	{
		if( _ppd.m_bEndlessMode )
		{
			
			ASSERT( _ppd.m_nEndlessNominator > 0 );
			ASSERT( _ppd.m_nEndlessDenominator > 0 );
			ASSERT( _ppd.m_nEndlessNominator < _ppd.m_nEndlessDenominator );
			if( _ppd.m_bHorz )
			{
				LONG nBasic = rcProgress.Width();
				LONG nCross = rcProgress.Height();
				if( nCross <= 0 )
					nCross = 1;
				LONG nAll = nBasic - nBasic % nCross;
				LONG nPart = ::MulDiv( nAll, _ppd.m_nEndlessNominator, _ppd.m_nEndlessDenominator );
				LONG nExt = nAll - nPart;
				rcProgress.left += ::MulDiv( nExt, _ppd.m_nPos, _ppd.m_nRange );
				rcProgress.right = rcProgress.left + nPart;
			}
			else
			{
				LONG nBasic = rcProgress.Height();
				LONG nCross = rcProgress.Width();
				if( nCross <= 0 )
					nCross = 1;
				LONG nAll = nBasic - nBasic % nCross;
				LONG nPart = ::MulDiv( nAll, _ppd.m_nEndlessNominator, _ppd.m_nEndlessDenominator );
				LONG nExt = nAll - nPart;
				rcProgress.bottom -= ::MulDiv( nExt, _ppd.m_nPos, _ppd.m_nRange );
				rcProgress.top = rcProgress.bottom - nPart;
			}
		} // if( _ppd.m_bEndlessMode )
		else
		{
			if( _ppd.m_bHorz )
				rcProgress.right =
					  rcProgress.left
					+ ::MulDiv( rcProgress.Width(), _ppd.m_nPos, _ppd.m_nRange );
			else
				rcProgress.top =
					  rcProgress.bottom
					- ::MulDiv( rcProgress.Height(), _ppd.m_nPos, _ppd.m_nRange );
		} // else from if( _ppd.m_bEndlessMode )
		INT nChunkSize = 0; // The size of the progress control "chunk" shapes that define how far an operation has progressed
		INT nSpaceSize = 0; // The total size of all of the progress control "chunks"
		if(		g_PaintManager.m_UxTheme.GetThemeMetric(
					dc.GetSafeHdc(), 
					_ppd.m_bHorz ? PP_CHUNK : PP_CHUNKVERT,
					0, 
					TMT_PROGRESSCHUNKSIZE, 
					&nChunkSize
					) == S_OK
			&&	g_PaintManager.m_UxTheme.GetThemeMetric(
					dc.GetSafeHdc(), 
					_ppd.m_bHorz ? PP_CHUNK : PP_CHUNKVERT,
					0, 
					TMT_PROGRESSSPACESIZE, 
					&nSpaceSize
					) == S_OK
			)
		{
			rcProgress.DeflateRect( 2, 2 );
			CRect rcChunk( rcProgress );
			INT nChunkShift = nChunkSize + nSpaceSize;
			rcChunk.SetRect(
				_ppd.m_bHorz ? rcChunk.left : rcChunk.left,
				_ppd.m_bHorz ? rcChunk.top  : (rcChunk.bottom - nChunkSize ),
				_ppd.m_bHorz ? ( rcChunk.left + nChunkSize ) : rcChunk.right,
				_ppd.m_bHorz ? rcChunk.bottom : rcChunk.bottom
				);
			ASSERT( 
					( (!_ppd.m_bHorz) && rcChunk.Height() == nChunkSize )
				||	( _ppd.m_bHorz    && rcChunk.Width() == nChunkSize )
				);
			while( true )
			{
				CRect rcProgressFullClip = rcProgress;
				rcProgressFullClip.DeflateRect( 2, 2 );
				CRect rcChunkClip;
				rcChunkClip.IntersectRect( &rcProgressFullClip, rcChunk );
				if( g_PaintManager.m_UxTheme.DrawThemeBackground(
						dc.GetSafeHdc(), 
						_ppd.m_bHorz ? PP_CHUNK : PP_CHUNKVERT,
						0, 
						&rcChunk, 
						&rcChunkClip
						) != S_OK
					)
					break;
				if( _ppd.m_bHorz )
				{
					if( rcChunk.right > rcProgress.right )
						break;
				}
				else
				{
					if( rcChunk.top < rcProgress.top )
						break;
				}
				rcChunk.OffsetRect( 
					_ppd.m_bHorz ? nChunkShift : 0, 
					_ppd.m_bHorz ? 0 : ( - nChunkShift )
					);
			}
		}
	}
	g_PaintManager.m_UxTheme.CloseThemeData( true );
	return true;
}

bool CExtPaintManagerOffice2007_Impl::PaintProgress( CDC & dc, CExtPaintManager::PAINTPROGRESSDATA & _ppd )
{
	ASSERT_VALID( this );
	ASSERT_VALID( (&dc) );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
		return CExtPaintManagerXP::PaintProgress( dc, _ppd );	
	if(		_ppd.m_rcClient.Width() <= 0
		||	_ppd.m_rcClient.Height() <= 0
		||	( ! dc.RectVisible( &_ppd.m_rcClient ) )
		)
		return false;
CExtBitmap & bmpProgressMain = _ppd.m_bHorz ? m_bmpProgressMainH : m_bmpProgressMainV;
	if( bmpProgressMain.IsEmpty() )
		return false;
CRect rcProgress( _ppd.m_rcClient );
//	if(		_ppd.m_pHelperSrc == NULL
//		||	( ! _ppd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CWnd ) ) )
//		||	( ! GetCb2DbTransparentMode( _ppd.m_pHelperSrc, _ppd.m_lParam ) )
//		||	( ! PaintDockerBkgnd( true, dc, (CWnd*)_ppd.m_pHelperSrc, _ppd.m_lParam ) )
//		)
//	{
//		COLORREF clrBackgroundArea = GetColor( COLOR_3DFACE, _ppd.m_pHelperSrc, _ppd.m_lParam );
//		clrBackgroundArea = dc.GetNearestColor( clrBackgroundArea );
//		dc.FillSolidRect( &rcProgress, clrBackgroundArea );
//	}
	if( _ppd.m_bBorder )
	{
		CExtBitmap & bmpProgressBorder = _ppd.m_bHorz ? m_bmpProgressBorderH : m_bmpProgressBorderV;
		if( bmpProgressBorder.IsEmpty() )
			return false;
		CRect rcProgressBorderPadding = _ppd.m_bHorz ? m_rcProgressBorderPaddingH : m_rcProgressBorderPaddingV;
		if( ! bmpProgressBorder.AlphaBlendSkinParts(
				dc.m_hDC,
				rcProgress,
				rcProgressBorderPadding,
				CExtBitmap::__EDM_STRETCH,
				true,
				true
				)
			)
			return false;
		rcProgress.DeflateRect(
			rcProgressBorderPadding.left,
			rcProgressBorderPadding.top,
			rcProgressBorderPadding.right,
			rcProgressBorderPadding.bottom
			);
	} // if( _ppd.m_bBorder )
	if(		rcProgress.Width() <= 0
		||	rcProgress.Height() <= 0
		||	( ! dc.RectVisible( &rcProgress ) )
		)
		return true;
CExtMemoryDC dcX( &dc, &rcProgress, CExtMemoryDC::MDCOPT_TO_MEMORY|CExtMemoryDC::MDCOPT_RTL_COMPATIBILITY );
CRect rcProgressBackgroundPadding = _ppd.m_bHorz ? m_rcProgressBackgroundPaddingH : m_rcProgressBackgroundPaddingV;
CRect rcProgressBackgroundPart = _ppd.m_bHorz ? m_rcProgressBackgroundPartH : m_rcProgressBackgroundPartV;
	if( ! bmpProgressMain.AlphaBlendSkinParts(
			dcX.m_hDC,
			rcProgress,
			rcProgressBackgroundPart,
			rcProgressBackgroundPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			)
		)
		return false;
CRect rcProgressBarPadding = _ppd.m_bHorz ? m_rcProgressBarPaddingH : m_rcProgressBarPaddingV;
	if( _ppd.m_bEndlessMode )
	{
		
		ASSERT( _ppd.m_nEndlessNominator > 0 );
		ASSERT( _ppd.m_nEndlessDenominator > 0 );
		ASSERT( _ppd.m_nEndlessNominator < _ppd.m_nEndlessDenominator );
		if( _ppd.m_bHorz )
		{
			LONG nAll = rcProgress.Width();;
			LONG nPart = ::MulDiv( nAll, _ppd.m_nEndlessNominator, _ppd.m_nEndlessDenominator );
			LONG nExt = nAll - nPart;
			rcProgress.left += ::MulDiv( nExt, _ppd.m_nPos, _ppd.m_nRange );
			rcProgress.right = rcProgress.left + nPart;
		}
		else
		{
			LONG nAll = rcProgress.Height();
			LONG nPart = ::MulDiv( nAll, _ppd.m_nEndlessNominator, _ppd.m_nEndlessDenominator );
			LONG nExt = nAll - nPart;
			rcProgress.bottom -= ::MulDiv( nExt, _ppd.m_nPos, _ppd.m_nRange );
			rcProgress.top = rcProgress.bottom - nPart;
		}
	} // if( _ppd.m_bEndlessMode )
	else
	{
		if( _ppd.m_nPos <= 0 || _ppd.m_nRange <= 0 )
			return true;
		if( _ppd.m_bHorz )
			rcProgress.right =
				  rcProgress.left
				+ ::MulDiv( rcProgress.Width(), _ppd.m_nPos, _ppd.m_nRange )
				+ rcProgressBarPadding.right
				;
		else
			rcProgress.top =
				  rcProgress.bottom
				- ::MulDiv( rcProgress.Height(), _ppd.m_nPos, _ppd.m_nRange )
				- rcProgressBarPadding.top
				;
	} // else from if( _ppd.m_bEndlessMode )
	if(		rcProgress.Width() <= 0
		||	rcProgress.Height() <= 0
		||	( ! dcX.RectVisible( &rcProgress ) )
		)
		return true;
CRect rcProgressBarPart = _ppd.m_bHorz ? m_rcProgressBarPartH : m_rcProgressBarPartV;
	if( ! bmpProgressMain.AlphaBlendSkinParts(
			dcX.m_hDC,
			rcProgress,
			rcProgressBarPart,
			rcProgressBarPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true
			)
		)
		return false;
	return true;
}

#if (!defined __EXT_MFC_NO_CUSTOMIZE)

CFont & CExtPaintManager::ScreenTip_GetFont(
	bool bCaption,
	bool bMainPart,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( &_CCST );
	bMainPart;
	_CCST;
	pHelperSrc;
	lParam;
	return bCaption ? m_FontBold : m_FontNormal;
}

CRect CExtPaintManager::ScreenTip_GetPaddingOuter(
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( &_CCST );
	pHelperSrc;
	lParam;
bool bMainTextMode = false;
CExtSafeString strCaptionMain = _CCST.CaptionMainGet();
CExtSafeString strTextMain = _CCST.TextMainGet();
CExtSafeString strCaptionSecondary = _CCST.CaptionSecondaryGet();
CExtSafeString strTextSecondary = _CCST.TextSecondaryGet();
	if(		strCaptionMain.IsEmpty()
		&&	(! strTextMain.IsEmpty() )
		&&	strCaptionSecondary.IsEmpty()
		&&	strTextSecondary.IsEmpty()
		)
		bMainTextMode = true;
INT n = bMainTextMode ? 0 : 5;
CRect rcPadding( n, n, n, n );
	rcPadding.left = UiScalingDo( rcPadding.left, __EUIST_X );
	rcPadding.top = UiScalingDo( rcPadding.top, __EUIST_Y );
	rcPadding.right = UiScalingDo( rcPadding.right, __EUIST_X );
	rcPadding.bottom = UiScalingDo( rcPadding.bottom, __EUIST_Y );
	return rcPadding;
}

CRect CExtPaintManager::ScreenTip_GetPaddingInnerBmp(
	bool bMainPart,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( &_CCST );
	bMainPart;
	_CCST;
	pHelperSrc;
	lParam;
CRect rcPadding( 2, 2, 2, 2 );
	rcPadding.left = UiScalingDo( rcPadding.left, __EUIST_X );
	rcPadding.top = UiScalingDo( rcPadding.top, __EUIST_Y );
	rcPadding.right = UiScalingDo( rcPadding.right, __EUIST_X );
	rcPadding.bottom = UiScalingDo( rcPadding.bottom, __EUIST_Y );
	return rcPadding;
}

CRect CExtPaintManager::ScreenTip_GetPaddingInnerText(
	bool bCaption,
	bool bMainPart,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( &_CCST );
	bCaption;
	bMainPart;
	_CCST;
	pHelperSrc;
	lParam;
CRect rcPadding( 3, 3, 3, 3 );
	if( ! bCaption )
		rcPadding.left += 10;
	rcPadding.left = UiScalingDo( rcPadding.left, __EUIST_X );
	rcPadding.top = UiScalingDo( rcPadding.top, __EUIST_Y );
	rcPadding.right = UiScalingDo( rcPadding.right, __EUIST_X );
	rcPadding.bottom = UiScalingDo( rcPadding.bottom, __EUIST_Y );
	return rcPadding;
}

INT CExtPaintManager::ScreenTip_GetSeparatorHeight(
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( &_CCST );
	pHelperSrc;
	lParam;
bool bHaveSeparator = ( (_CCST.GetFlags()&__ECCST_SEPARATOR) != 0 ) ? true : false;
	if( ! bHaveSeparator )
		return 0;
INT nSeparatorHeight = UiScalingDo( 11, __EUIST_Y );
	return nSeparatorHeight;
}

COLORREF CExtPaintManager::ScreenTip_GetTextColor(
	bool bCaption,
	bool bMainPart,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( &_CCST );
	bCaption;
	bMainPart;
	_CCST;
COLORREF clrText = GetColor( COLOR_INFOTEXT, pHelperSrc, lParam );
	return clrText;
}

COLORREF CExtPaintManagerOffice2007_Impl::ScreenTip_GetTextColor(
	bool bCaption,
	bool bMainPart,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( &_CCST );

	if( IsHighContrast() )
		return 
			CExtPaintManagerXP::ScreenTip_GetTextColor(
				bCaption,
				bMainPart,
				_CCST,
				pHelperSrc,
				lParam
				);	

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	return m_clrRibbonGroupCaptionTextCollapsed;
#else
	return RGB(0,0,0);
#endif
}

CSize CExtPaintManager::ScreenTip_Measure(
	CDC & dc,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( &_CCST );
	if( _CCST.IsEmpty() )
		return CSize( 0, 0 );
bool bMainPartEmpty = true, bSecondaryPartEmpty = true;
CSize _sizeBmpMain = _CCST.BmpMainGet().GetSize();
	_sizeBmpMain.cx = UiScalingDo( _sizeBmpMain.cx, __EUIST_X );
	_sizeBmpMain.cy = UiScalingDo( _sizeBmpMain.cy, __EUIST_Y );
	if( _sizeBmpMain.cx > 0 && _sizeBmpMain.cy > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerBmp( true, _CCST, pHelperSrc, lParam );
		_sizeBmpMain.cx += rcPadding.left + rcPadding.right;
		_sizeBmpMain.cy += rcPadding.top + rcPadding.bottom;
		bMainPartEmpty = false;
	}
CSize _sizeBmpSecondary = _CCST.BmpSecondaryGet().GetSize();
	_sizeBmpSecondary.cx = UiScalingDo( _sizeBmpSecondary.cx, __EUIST_X );
	_sizeBmpSecondary.cy = UiScalingDo( _sizeBmpSecondary.cy, __EUIST_Y );
	if( _sizeBmpSecondary.cx > 0 && _sizeBmpSecondary.cy > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerBmp( false, _CCST, pHelperSrc, lParam );
		_sizeBmpSecondary.cx += rcPadding.left + rcPadding.right;
		_sizeBmpSecondary.cy += rcPadding.top + rcPadding.bottom;
		bSecondaryPartEmpty = false;
	}
CExtSafeString str;
	str = _CCST.CaptionMainGet();
CSize _sizeCaptionMain( 0, 0 );
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( true, true, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( true, true, _CCST, pHelperSrc, lParam );
		_sizeCaptionMain = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
		_sizeCaptionMain.cx += rcPadding.left + rcPadding.right;
		_sizeCaptionMain.cy += rcPadding.top + rcPadding.bottom;
		bMainPartEmpty = false;
	}
	str = _CCST.CaptionSecondaryGet();
CSize _sizeCaptionSecondary( 0, 0 );
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( true, false, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( true, false, _CCST, pHelperSrc, lParam );
		_sizeCaptionSecondary = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
		_sizeCaptionSecondary.cx += rcPadding.left + rcPadding.right;
		_sizeCaptionSecondary.cy += rcPadding.top + rcPadding.bottom;
		bSecondaryPartEmpty = false;
	}
CSize _sizeTextMain( 0, 0 );
	str = _CCST.TextMainGet();
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( false, true, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( false, true, _CCST, pHelperSrc, lParam );
		_sizeTextMain = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_LEFT|DT_TOP ).Size();
		_sizeTextMain.cx += rcPadding.left + rcPadding.right;
		_sizeTextMain.cy += rcPadding.top + rcPadding.bottom;
		bMainPartEmpty = false;
	}
CSize _sizeTextSecondary( 0, 0 );
	str = _CCST.TextSecondaryGet();
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( false, false, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( false, false, _CCST, pHelperSrc, lParam );
		_sizeTextSecondary = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_LEFT|DT_TOP ).Size();
		_sizeTextSecondary.cx += rcPadding.left + rcPadding.right;
		_sizeTextSecondary.cy += rcPadding.top + rcPadding.bottom;
		bSecondaryPartEmpty = false;
	}
	if( bMainPartEmpty && bSecondaryPartEmpty )
		return CSize( 0, 0 );
CRect rcPadding = ScreenTip_GetPaddingOuter( _CCST, pHelperSrc, lParam );
CSize _sizeAll( rcPadding.left + rcPadding.right, rcPadding.top + rcPadding.bottom ), _sizeMain( 0, 0 ), _sizeSecondary( 0, 0 );
	if( ! ( bMainPartEmpty || bSecondaryPartEmpty ) )
		_sizeAll.cy += ScreenTip_GetSeparatorHeight( _CCST, pHelperSrc, lParam );
	if( ! bMainPartEmpty )
	{
		_sizeMain = _sizeCaptionMain;
		INT nWidth = _sizeBmpMain.cx + _sizeTextMain.cx;
		_sizeMain.cx = max( _sizeMain.cx, nWidth );
		INT nHeight = max( _sizeBmpMain.cy, _sizeTextMain.cy );
		_sizeMain.cy += nHeight;
	}
	if( ! bSecondaryPartEmpty )
	{
		_sizeSecondary.cx = max( _sizeCaptionSecondary.cx, _sizeTextSecondary.cx );
		_sizeSecondary.cx += _sizeBmpSecondary.cx;
		_sizeSecondary.cy = _sizeCaptionSecondary.cy + _sizeTextSecondary.cy;
		_sizeSecondary.cy = max( _sizeBmpSecondary.cy, _sizeSecondary.cy );
	}
	_sizeAll.cx += max( _sizeMain.cx, _sizeSecondary.cx );
	_sizeAll.cy += _sizeMain.cy + _sizeSecondary.cy;
	return _sizeAll;
}

void CExtPaintManager::ScreenTip_PaintBackground(
	CDC & dc,
	const RECT & rcScreenTip,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( &_CCST );
	_CCST;
COLORREF clrOldText = dc.GetTextColor();
COLORREF clrBk = GetColor( COLOR_INFOBK, pHelperSrc, lParam );
	dc.FillSolidRect( &rcScreenTip, clrBk );
COLORREF clrLT = GetColor( COLOR_3DFACE, pHelperSrc, lParam );
COLORREF clrRB = GetColor( COLOR_3DSHADOW, pHelperSrc, lParam );
	dc.Draw3dRect( &rcScreenTip, clrLT, clrRB );
	dc.SetTextColor( clrOldText );
}

void CExtPaintManagerOffice2007_Impl::ScreenTip_PaintBackground(
	CDC & dc,
	const RECT & rcScreenTip,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( &_CCST );

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::ScreenTip_PaintBackground(
			dc,
			rcScreenTip,
			_CCST,
			pHelperSrc,
			lParam
			);
		return;
	}

CRect rcGradient = rcScreenTip;
	rcGradient.DeflateRect(
		m_rcAdvTipPaddingGradient.left,
		m_rcAdvTipPaddingGradient.top,
		m_rcAdvTipPaddingGradient.right,
		m_rcAdvTipPaddingGradient.bottom
		);
	stat_PaintGradientRect(
		dc,
		rcGradient,
		m_clrAdvTipGradientBottom,
		m_clrAdvTipGradientTop,
		true,
		255
		);
	m_bmpAdvTipBorder.AlphaBlendSkinParts(
		dc,
		rcScreenTip,
		m_rcAdvTipPaddingBorder,
		CExtBitmap::__EDM_STRETCH,
		true,
		true
		);
}

void CExtPaintManager::ScreenTip_Paint(
	CDC & dc,
	const RECT & rcScreenTip,
	CExtCustomizeCmdScreenTip & _CCST,
	CObject * pHelperSrc, // = NULL
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( &_CCST );
	if( ! dc.RectVisible( &rcScreenTip ) )
		return;
bool bPaintBackGround = true;
	if(		pHelperSrc != NULL
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtPopupMenuTipWnd ) )
		)
	{
		CExtPopupMenuTipWnd::e_tip_style_t eTS = ((CExtPopupMenuTipWnd*)pHelperSrc)->GetTipStyle();
		if(		eTS == CExtPopupMenuTipWnd::__ETS_BALLOON
			||	eTS == CExtPopupMenuTipWnd::__ETS_BALLOON
			)
			bPaintBackGround = false;
	}
	if( bPaintBackGround )
		ScreenTip_PaintBackground(
			dc,
			rcScreenTip,
			_CCST,
			pHelperSrc,
			lParam
			);
	if( _CCST.IsEmpty() )
		return;
bool bMainPartEmpty = true, bSecondaryPartEmpty = true;
CSize _sizeBmpMain = _CCST.BmpMainGet().GetSize();
	_sizeBmpMain.cx = UiScalingDo( _sizeBmpMain.cx, __EUIST_X );
	_sizeBmpMain.cy = UiScalingDo( _sizeBmpMain.cy, __EUIST_Y );
	if( _sizeBmpMain.cx > 0 && _sizeBmpMain.cy > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerBmp( true, _CCST, pHelperSrc, lParam );
		_sizeBmpMain.cx += rcPadding.left + rcPadding.right;
		_sizeBmpMain.cy += rcPadding.top + rcPadding.bottom;
		bMainPartEmpty = false;
	}
CSize _sizeBmpSecondary = _CCST.BmpSecondaryGet().GetSize();
	_sizeBmpSecondary.cx = UiScalingDo( _sizeBmpSecondary.cx, __EUIST_X );
	_sizeBmpSecondary.cy = UiScalingDo( _sizeBmpSecondary.cy, __EUIST_Y );
	if( _sizeBmpSecondary.cx > 0 && _sizeBmpSecondary.cy > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerBmp( false, _CCST, pHelperSrc, lParam );
		_sizeBmpSecondary.cx += rcPadding.left + rcPadding.right;
		_sizeBmpSecondary.cy += rcPadding.top + rcPadding.bottom;
		bSecondaryPartEmpty = false;
	}
CExtSafeString str;
	str = _CCST.CaptionMainGet();
CSize _sizeCaptionMain( 0, 0 );
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( true, true, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( true, true, _CCST, pHelperSrc, lParam );
		_sizeCaptionMain = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
		_sizeCaptionMain.cx += rcPadding.left + rcPadding.right;
		_sizeCaptionMain.cy += rcPadding.top + rcPadding.bottom;
		bMainPartEmpty = false;
	}
	str = _CCST.CaptionSecondaryGet();
CSize _sizeCaptionSecondary( 0, 0 );
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( true, false, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( true, false, _CCST, pHelperSrc, lParam );
		_sizeCaptionSecondary = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_SINGLELINE|DT_LEFT|DT_TOP ).Size();
		_sizeCaptionSecondary.cx += rcPadding.left + rcPadding.right;
		_sizeCaptionSecondary.cy += rcPadding.top + rcPadding.bottom;
		bSecondaryPartEmpty = false;
	}
CSize _sizeTextMain( 0, 0 );
	str = _CCST.TextMainGet();
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( false, true, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( false, true, _CCST, pHelperSrc, lParam );
		_sizeTextMain = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_LEFT|DT_TOP ).Size();
		_sizeTextMain.cx += rcPadding.left + rcPadding.right;
		_sizeTextMain.cy += rcPadding.top + rcPadding.bottom;
		bMainPartEmpty = false;
	}
CSize _sizeTextSecondary( 0, 0 );
	str = _CCST.TextSecondaryGet();
	if( str.GetLength() > 0 )
	{
		CRect rcPadding = ScreenTip_GetPaddingInnerText( false, false, _CCST, pHelperSrc, lParam );
		CFont & _font = ScreenTip_GetFont( false, false, _CCST, pHelperSrc, lParam );
		_sizeTextSecondary = stat_CalcTextDimension( dc, _font, str, DT_CALCRECT|DT_LEFT|DT_TOP ).Size();
		_sizeTextSecondary.cx += rcPadding.left + rcPadding.right;
		_sizeTextSecondary.cy += rcPadding.top + rcPadding.bottom;
		bSecondaryPartEmpty = false;
	}
	if( bMainPartEmpty && bSecondaryPartEmpty )
		return;
CSize _sizeMain( 0, 0 ), _sizeSecondary( 0, 0 );
	if( ! bMainPartEmpty )
	{
		_sizeMain = _sizeCaptionMain;
		INT nWidth = _sizeBmpMain.cx + _sizeTextMain.cx;
		_sizeMain.cx = max( _sizeMain.cx, nWidth );
		INT nHeight = max( _sizeBmpMain.cy, _sizeTextMain.cy );
		_sizeMain.cy += nHeight;
	}
	if( ! bSecondaryPartEmpty )
	{
		_sizeSecondary.cx = max( _sizeCaptionSecondary.cx, _sizeTextSecondary.cx );
		_sizeSecondary.cx += _sizeBmpSecondary.cx;
		_sizeSecondary.cy = _sizeCaptionSecondary.cy + _sizeTextSecondary.cy;
		_sizeSecondary.cy = max( _sizeBmpSecondary.cy, _sizeSecondary.cy );
	}
INT nSeparatorHeight = 0;
	if( ! ( bMainPartEmpty || bSecondaryPartEmpty ) )
		nSeparatorHeight = ScreenTip_GetSeparatorHeight( _CCST, pHelperSrc, lParam );
CRect rcPadding = ScreenTip_GetPaddingOuter( _CCST, pHelperSrc, lParam );
CRect rcMainAll = rcScreenTip;
	rcMainAll.DeflateRect( rcPadding.left, rcPadding.top, rcPadding.right, 0 );
	rcMainAll.bottom = rcMainAll.top + _sizeMain.cy;
CRect rcSecondaryAll( rcMainAll.left, rcMainAll.bottom, rcMainAll.right, rcMainAll.bottom + _sizeSecondary.cy );
int nOldBkMode = dc.SetBkMode( TRANSPARENT );
CRect rcCaption = rcMainAll, rcBmp = rcMainAll, rcText = rcMainAll;
	if( _sizeMain.cx > 0 && _sizeMain.cy > 0 )
	{
		str = _CCST.CaptionMainGet();
		rcCaption.bottom = rcBmp.top = rcText.top = rcCaption.top + _sizeCaptionMain.cy;
		rcBmp.right = rcText.left = rcBmp.left + _sizeBmpMain.cx;
		if( _sizeCaptionMain.cx > 0 && _sizeCaptionMain.cy > 0 )
		{
			CRect rcPadding = ScreenTip_GetPaddingInnerText( true, true, _CCST, pHelperSrc, lParam );
			rcCaption.DeflateRect( rcPadding.left, rcPadding.top, rcPadding.right, rcPadding.bottom );
			COLORREF clrText = ScreenTip_GetTextColor( true, true, _CCST, pHelperSrc, lParam );
			COLORREF clrOld = dc.SetTextColor( clrText );
			CFont & _font = ScreenTip_GetFont( true, true, _CCST, pHelperSrc, lParam );
			CFont * pOldFont = dc.SelectObject( &_font );
			str = _CCST.CaptionMainGet();
			ASSERT( str.GetLength() > 0 );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR( str ), str.GetLength(),
				&rcCaption,
				DT_SINGLELINE|DT_LEFT|DT_TOP, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetTextColor( clrOld );
		}
		if( _sizeTextMain.cx > 0 && _sizeTextMain.cy > 0 )
		{
			UINT nDT = DT_CENTER|DT_VCENTER|DT_SINGLELINE;
			if( ! str.IsEmpty() )
			{
				nDT = DT_LEFT|DT_TOP;
				CRect rcPadding = ScreenTip_GetPaddingInnerText( false, true, _CCST, pHelperSrc, lParam );
				rcText.DeflateRect( rcPadding.left, rcPadding.top, rcPadding.right, rcPadding.bottom );
			}
			COLORREF clrText = ScreenTip_GetTextColor( false, true, _CCST, pHelperSrc, lParam );
			COLORREF clrOld = dc.SetTextColor( clrText );
			CFont & _font = ScreenTip_GetFont( false, true, _CCST, pHelperSrc, lParam );
			CFont * pOldFont = dc.SelectObject( &_font );
			str = _CCST.TextMainGet();
			ASSERT( str.GetLength() > 0 );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR( str ), str.GetLength(),
				&rcText,
				nDT, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetTextColor( clrOld );
		}
		if( _sizeBmpMain.cx > 0 && _sizeBmpMain.cy > 0 )
		{
			CRect rcPadding = ScreenTip_GetPaddingInnerBmp( true, _CCST, pHelperSrc, lParam );
			rcBmp.DeflateRect( rcPadding.left, rcPadding.top, rcPadding.right, rcPadding.bottom );
			CSize _size = _CCST.BmpMainGet().GetSize();
			rcBmp.right = rcBmp.left + _size.cx;
			rcBmp.bottom = rcBmp.top + _size.cy;
			_CCST.BmpMainGet().AlphaBlend( dc.m_hDC, rcBmp );
		}
	}
	if( nSeparatorHeight != 0 )
	{
		CRect rcSeparator(
			rcMainAll.left,
			rcMainAll.top + _sizeMain.cy,
			rcMainAll.right,
			rcMainAll.top + _sizeMain.cy + nSeparatorHeight
			);
		rcSeparator.DeflateRect( 0, rcSeparator.Height() / 2 );
		rcSeparator.bottom = rcSeparator.top + 2;
//		COLORREF clrLT = GetColor( COLOR_3DDKSHADOW, pHelperSrc, lParam );
//		COLORREF clrRB = GetColor( COLOR_3DHILIGHT, pHelperSrc, lParam );
		dc.Draw3dRect(
			&rcSeparator,
			RGB(145,153,164), // clrLT,
			RGB(224,224,224) // clrRB
			);
	}
	if( _sizeSecondary.cx > 0 && _sizeSecondary.cy > 0 )
	{
		rcCaption = rcMainAll;
		rcCaption.top += _sizeMain.cy + nSeparatorHeight;
		rcBmp = rcCaption;
		rcCaption.left += _sizeBmpSecondary.cx;
		rcText = rcCaption;
		rcCaption.bottom = rcText.top = rcCaption.top + _sizeCaptionSecondary.cy;
		rcText.bottom = rcBmp.bottom = rcMainAll.bottom + _sizeSecondary.cy + nSeparatorHeight;
		if( _sizeCaptionSecondary.cx > 0 && _sizeCaptionSecondary.cy > 0 )
		{
			CRect rcPadding = ScreenTip_GetPaddingInnerText( true, false, _CCST, pHelperSrc, lParam );
			rcCaption.DeflateRect( rcPadding.left, rcPadding.top, rcPadding.right, rcPadding.bottom );
			COLORREF clrText = ScreenTip_GetTextColor( true, false, _CCST, pHelperSrc, lParam );
			COLORREF clrOld = dc.SetTextColor( clrText );
			CFont & _font = ScreenTip_GetFont( true, false, _CCST, pHelperSrc, lParam );
			CFont * pOldFont = dc.SelectObject( &_font );
			str = _CCST.CaptionSecondaryGet();
			ASSERT( str.GetLength() > 0 );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR( str ), str.GetLength(),
				&rcCaption,
				DT_SINGLELINE|DT_LEFT|DT_TOP, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetTextColor( clrOld );
		}
		if( _sizeTextSecondary.cx > 0 && _sizeTextSecondary.cy > 0 )
		{
			CRect rcPadding = ScreenTip_GetPaddingInnerText( false, false, _CCST, pHelperSrc, lParam );
			rcText.DeflateRect( rcPadding.left, rcPadding.top, rcPadding.right, rcPadding.bottom );
			COLORREF clrText = ScreenTip_GetTextColor( false, false, _CCST, pHelperSrc, lParam );
			COLORREF clrOld = dc.SetTextColor( clrText );
			CFont & _font = ScreenTip_GetFont( false, false, _CCST, pHelperSrc, lParam );
			CFont * pOldFont = dc.SelectObject( &_font );
			str = _CCST.TextSecondaryGet();
			ASSERT( str.GetLength() > 0 );
			CExtRichContentLayout::stat_DrawText(
				dc.m_hDC,
				LPCTSTR( str ), str.GetLength(),
				&rcText,
				DT_LEFT|DT_TOP, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetTextColor( clrOld );
		}
		if( _sizeBmpSecondary.cx > 0 && _sizeBmpSecondary.cy > 0 )
		{
			CRect rcPadding = ScreenTip_GetPaddingInnerBmp( false, _CCST, pHelperSrc, lParam );
			rcBmp.DeflateRect( rcPadding.left, rcPadding.top, rcPadding.right, rcPadding.bottom );
			CSize _size = _CCST.BmpSecondaryGet().GetSize();
			rcBmp.right = rcBmp.left + _size.cx;
			rcBmp.bottom = rcBmp.top + _size.cy;
			_CCST.BmpSecondaryGet().AlphaBlend( dc.m_hDC, rcBmp );
		}
	}
	dc.SetBkMode( nOldBkMode );
}

#endif // (!defined __EXT_MFC_NO_CUSTOMIZE)

#if (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)

void CExtPaintManager::PageContainer_EraseEntire(
	CDC & dc,
	CRect rcClient,
	CExtPageContainerWnd * pWndPageContainer,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pWndPageContainer );
	if( ! dc.RectVisible( &rcClient ) )
		return;
	if(		(! GetCb2DbTransparentMode( pWndPageContainer, lParam ) )
		||	(! PaintDockerBkgnd( true, dc, pWndPageContainer, lParam ) )
		)
		dc.FillSolidRect( &rcClient, GetColor( CExtPaintManager::CLR_3DFACE_OUT, pWndPageContainer, lParam ) );
}

void CExtPaintManager::PageContainer_EraseScrollPosArea(
	CDC & dc,
	CRect rcScrollPosArea,
	LONG nScrollPos,
	LONG nScrollSize,
	CExtPageContainerWnd * pWndPageContainer,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pWndPageContainer );
	ASSERT( nScrollPos <= nScrollSize );
	nScrollPos;
	nScrollSize;
	if(		(rcScrollPosArea.right - rcScrollPosArea.left) <= 1
		||	(rcScrollPosArea.bottom - rcScrollPosArea.top) <= 1
		)
		return;
	if( ! dc.RectVisible( &rcScrollPosArea ) )
		return;
COLORREF clrLight = GetColor( COLOR_3DHIGHLIGHT, pWndPageContainer, lParam );
COLORREF clrShadow = GetColor( COLOR_3DDKSHADOW, pWndPageContainer, lParam );
COLORREF clrFace = GetColor( COLOR_3DSHADOW, pWndPageContainer, lParam );
	dc.FillSolidRect(
		&rcScrollPosArea,
		clrFace
		);
	dc.Draw3dRect(
		&rcScrollPosArea,
		clrShadow,
		clrLight
		);
}

void CExtPaintManager::PageContainer_DrawScrollPosArea(
	CDC & dc,
	CRect rcScrollPosArea,
	LONG nScrollPos,
	LONG nScrollSize,
	CExtPageContainerWnd * pWndPageContainer,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pWndPageContainer );
	ASSERT( nScrollPos <= nScrollSize );
	if(		(rcScrollPosArea.right - rcScrollPosArea.left) <= 1
		||	(rcScrollPosArea.bottom - rcScrollPosArea.top) <= 1
		)
		return;
	if( ! dc.RectVisible( &rcScrollPosArea ) )
		return;
CRect rcScrollBtn( rcScrollPosArea );
	rcScrollBtn.DeflateRect( 1, 1 );
	if(		(rcScrollBtn.right - rcScrollBtn.left) <= 1
		||	(rcScrollBtn.bottom - rcScrollBtn.top) <= 1
		)
		return;
	if( nScrollSize > 0 )
	{
		ASSERT( nScrollPos <= nScrollSize );
		bool bHorzLayout = pWndPageContainer->IsHorizontalLayout();
		LONG nScrollPecrent =
			::MulDiv(
				nScrollPos,
				100,
				nScrollSize
				);
		LONG nWindowMetric =
			bHorzLayout
				? rcScrollPosArea.Width()
				: rcScrollPosArea.Height()
				;
		LONG nBtnMetric =
			::MulDiv(
				nWindowMetric,
				100,
				( nScrollSize + nWindowMetric )
				);
		nBtnMetric =
			::MulDiv(
				nBtnMetric,
				nWindowMetric,
				100
				);
		if( nBtnMetric < 10L )
			nBtnMetric = 10L;
		LONG nBtnMetricMax =
			bHorzLayout
				? rcScrollBtn.Width()
				: rcScrollBtn.Height()
				;
		LONG nBtnOffset = 0L;
		if( nBtnMetric >= nBtnMetricMax
			|| nBtnMetric >= ( nWindowMetric - 2 )
			)
			nBtnMetric =
				min(
					nBtnMetricMax,
					( nWindowMetric - 2 )
					);
		else
		{
			nBtnOffset =
				::MulDiv(
					nWindowMetric - nBtnMetric,
					nScrollPecrent,
					100
					);
		} // else from if( nBtnMetric >= nBtnMetricMax )
		if( bHorzLayout )
		{
			rcScrollBtn.left += nBtnOffset;
			rcScrollBtn.right =
				rcScrollBtn.left + nBtnMetric;
			if( (rcScrollBtn.right+1) >= rcScrollPosArea.right )
				rcScrollBtn.right =
					rcScrollPosArea.right - 1;
		} // if( bHorzLayout )
		else
		{
			rcScrollBtn.top += nBtnOffset;
			rcScrollBtn.bottom =
				rcScrollBtn.top + nBtnMetric;
			if( (rcScrollBtn.bottom+1) >= rcScrollPosArea.bottom )
				rcScrollBtn.bottom =
					rcScrollPosArea.bottom - 1;
		} // else from if( bHorzLayout )
	} // if( nScrollSize > 0 )
COLORREF clrLight = GetColor( COLOR_3DHIGHLIGHT, pWndPageContainer, lParam );
COLORREF clrShadow = GetColor( COLOR_3DDKSHADOW, pWndPageContainer, lParam );
COLORREF clrFace = GetColor( COLOR_3DFACE, pWndPageContainer, lParam );
	dc.FillSolidRect(
		&rcScrollBtn,
		clrFace
		);
	dc.Draw3dRect(
		&rcScrollBtn,
		clrLight,
		clrShadow
		);
}

void CExtPaintManager::PageContainer_EraseItem(
	CDC & dc,
	LPVOID pPageInfo, // CExtPageContainerWnd::PAGE_ITEM_INFO
	CRect rcPage,
	CRect rcCaption,
	CRect rcWnd,
	CExtPageContainerWnd * pWndPageContainer,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pPageInfo != NULL );
	ASSERT( ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsVisible() );
	ASSERT_VALID( pWndPageContainer );
	rcCaption;
	rcWnd;
	if(		rcPage.left >= rcPage.right
		||	rcPage.top >= rcPage.bottom
		)
		return;
	if( ! dc.RectVisible( &rcPage ) )
		return;
DWORD dwPageContainerStyle = pWndPageContainer->GetPageContainerStyle();
	if( (dwPageContainerStyle & __EPCWS_PAGE_BORDERS) == 0 )
		return;
bool bPageIsExpanded = ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsExpanded();
	if( ! bPageIsExpanded )
		return;
	ASSERT(
			rcPage.left <= rcWnd.left
		&&	rcPage.top <= rcWnd.top
		&&	rcPage.right >= rcWnd.right
		&&	rcPage.bottom >= rcWnd.bottom
		);
CRect rcMiddle(
		(rcPage.left + rcWnd.left) / 2,
		(rcPage.top + rcWnd.top) / 2,
		(rcPage.right + rcWnd.right) / 2,
		(rcPage.bottom + rcWnd.bottom) / 2
	   );
	if( m_bPageContainerUseGroupBoxStyle )
	{
		PaintGroupBoxFrame(
			dc,
			rcMiddle,
			COLORREF(-1L),
			pWndPageContainer,
			lParam
			);
	} // if( m_bPageContainerUseGroupBoxStyle )
	else
	{
		if(		rcMiddle.left < rcMiddle.right
			&&	rcMiddle.top < rcMiddle.bottom
			)
		{
			if(		( dwPageContainerStyle & __EPCWS_CAPTION_FLAT ) != 0
				&&	(! ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionHover() )
				&&	(! ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionPressed() )
				)
			{
				HWND hWndPage = ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->GetSafePageHwnd();
				ASSERT( hWndPage != NULL );
				ASSERT( ::IsWindow( hWndPage ) );
				bool bEnabled = ( ::IsWindowEnabled( hWndPage ) ) ? true : false;
				COLORREF clrFrame =
					GetColor(
						bEnabled
							? COLOR_3DDKSHADOW
							: COLOR_3DSHADOW
							,
						pWndPageContainer,
						lParam
						);
				dc.Draw3dRect( &rcMiddle, clrFrame, clrFrame );
			}
			else
			{
				COLORREF clrLight = GetColor( COLOR_3DHIGHLIGHT, pWndPageContainer, lParam );
				COLORREF clrShadow = GetColor( COLOR_3DSHADOW, pWndPageContainer, lParam );
				dc.Draw3dRect( &rcMiddle, clrShadow, clrLight );
				rcMiddle.DeflateRect( 1, 1 );
				dc.Draw3dRect( &rcMiddle, clrLight, clrShadow );
			}
		}
	} // else from if( m_bPageContainerUseGroupBoxStyle )
}

void CExtPaintManager::PageContainer_DrawItem(
	CDC & dc,
	LPVOID pPageInfo, // CExtPageContainerWnd::PAGE_ITEM_INFO
	CRect rcPage,
	CRect rcCaption,
	CRect rcWnd,
	CExtPageContainerWnd * pWndPageContainer,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pPageInfo != NULL );
	ASSERT_VALID( pWndPageContainer );
	dc;
	pPageInfo; // CExtPageContainerWnd::PAGE_ITEM_INFO
	rcPage;
	rcCaption;
	rcWnd;
	pWndPageContainer;
	lParam;
}

void CExtPaintManager::PageContainer_EraseCaption(
	CDC & dc,
	LPVOID pPageInfo, // CExtPageContainerWnd::PAGE_ITEM_INFO
	CRect rcCaption,
	CExtPageContainerWnd * pWndPageContainer,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pPageInfo != NULL );
	ASSERT_VALID( pWndPageContainer );
	ASSERT( pPageInfo != NULL );
	ASSERT( ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsVisible() );
	pPageInfo;
	if(		(rcCaption.right - rcCaption.left) <= 4 
		||	(rcCaption.bottom - rcCaption.top) <= 4 
		)
		return;
	if( ! dc.RectVisible( &rcCaption ) )
		return;
	if( m_bPageContainerUseButtonStyle )
	{
		HWND hWndPage = ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->GetSafePageHwnd();
		ASSERT( hWndPage != NULL );
		ASSERT( ::IsWindow( hWndPage ) );
		bool bEnabled = ( ::IsWindowEnabled( hWndPage ) ) ? true : false;
		DWORD dwPageContainerStyle = pWndPageContainer->GetPageContainerStyle();
		PAINTPUSHBUTTONDATA _ppbd(
			pWndPageContainer,
			true, // bHorz
			rcCaption,
			NULL, // sText
			NULL, // hIcon
			( dwPageContainerStyle & __EPCWS_CAPTION_FLAT ) ? true : false, //bool bFlat
			((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionHover(),
			((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionPressed(),
			false, // bIndeterminate
			bEnabled,
			true, // bDrawBorder
			false, // bDrawFocusRect
			false,
			__ALIGN_HORIZ_CENTER,
			NULL,
			false,
			0,
			false
			);
		CExtMemoryDC dcX( &dc, &rcCaption );
		PaintPushButton( dcX, _ppbd );
	} // if( m_bPageContainerUseButtonStyle )
	else
	{
		COLORREF clrFace = GetColor( CExtPaintManager::CLR_3DFACE_OUT, pWndPageContainer, lParam );
		dc.FillSolidRect( &rcCaption, clrFace );
	} // else from if( m_bPageContainerUseButtonStyle )
}

void CExtPaintManager::PageContainer_DrawCaption(
	CDC & dc,
	LPVOID pPageInfo, // CExtPageContainerWnd::PAGE_ITEM_INFO
	CRect rcCaption,
	CExtPageContainerWnd * pWndPageContainer,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pPageInfo != NULL );
	ASSERT_VALID( pWndPageContainer );
	ASSERT( pPageInfo != NULL );
	ASSERT( ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsVisible() );
	if(		(rcCaption.right - rcCaption.left) <= 4 
		||	(rcCaption.bottom - rcCaption.top) <= 4 
		)
		return;
	if( ! dc.RectVisible( &rcCaption ) )
		return;
CRgn rgnCaption;
	if( rgnCaption.CreateRectRgnIndirect( &rcCaption ) )
	{
		ASSERT( rgnCaption.GetSafeHandle() != NULL );
		dc.SelectClipRgn( &rgnCaption );
	}
HWND hWndPage = ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->GetSafePageHwnd();
	ASSERT( hWndPage != NULL );
	ASSERT( ::IsWindow( hWndPage ) );
bool bEnabled = ( ::IsWindowEnabled( hWndPage ) ) ? true : false;
COLORREF clrLight = GetColor( COLOR_3DHIGHLIGHT, pWndPageContainer, lParam );
COLORREF clrFace = GetColor( CExtPaintManager::CLR_3DFACE_OUT, pWndPageContainer, lParam );
COLORREF clrShadow = GetColor( COLOR_3DSHADOW, pWndPageContainer, lParam );
COLORREF clrDkShadow = GetColor( COLOR_3DDKSHADOW, pWndPageContainer, lParam );
CRect rcCaptBorder( rcCaption );
bool bHorzLayout = pWndPageContainer->IsHorizontalLayout();
	if( bHorzLayout )
	{
		rcCaption.DeflateRect(
			__EXT_PAGECONTAINERWND_CAPT_HBORDER_DX,
			__EXT_PAGECONTAINERWND_CAPT_HBORDER_DY
			);
		rcCaption.bottom -= __EXT_PAGECONTAINERWND_CAPT_BEFORE_DY;
		rcCaption.top += __EXT_PAGECONTAINERWND_CAPT_AFTER_DY;
	} // if( bHorzLayout )
	else
	{
		rcCaption.DeflateRect(
			__EXT_PAGECONTAINERWND_CAPT_VBORDER_DX,
			__EXT_PAGECONTAINERWND_CAPT_VBORDER_DY
			);
		rcCaption.left += __EXT_PAGECONTAINERWND_CAPT_BEFORE_DX;
		rcCaption.right -= __EXT_PAGECONTAINERWND_CAPT_AFTER_DX;
	} // else from if( bHorzLayout )

DWORD dwPageContainerStyle = pWndPageContainer->GetPageContainerStyle();
	if( ( dwPageContainerStyle & __EPCWS_CAPTION_EXPBTN ) != 0 )
	{
		CExtPaintManager::glyph_t & _glyph =
			pWndPageContainer->OnPageContainerQueryItemGlyph(
				((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo),
				((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsExpanded()
				);
		CSize sizeGlyph = _glyph.Size();
		if( sizeGlyph.cx > 0 && sizeGlyph.cy > 0 )
		{
			CRect rcGlyph( rcCaption );
			if( bHorzLayout )
			{
				rcGlyph.left += (rcCaption.Width() - sizeGlyph.cx)/2;
				rcGlyph.top = rcGlyph.bottom - sizeGlyph.cy;
				rcGlyph.right = rcGlyph.left + sizeGlyph.cx;
				rcCaption.bottom = rcGlyph.top - __EXT_PAGECONTAINERWND_CAPT_ICON2TEXT_DY;
			} // if( bHorzLayout )
			else
			{
				rcGlyph.right = rcGlyph.left + sizeGlyph.cx;
				rcGlyph.top += (rcCaption.Height() - sizeGlyph.cy)/2;
				rcGlyph.bottom = rcGlyph.top + sizeGlyph.cy;
				rcCaption.left = rcGlyph.right + __EXT_PAGECONTAINERWND_CAPT_ICON2TEXT_DX;
			} // else from if( bHorzLayout )

			COLORREF ColorValues[] =
			{
				RGB(0,0,0),
				GetColor( bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED, pWndPageContainer, lParam )
			};
			PaintGlyphCentered( dc, rcGlyph, _glyph, ColorValues );
		} // if( sizeGlyph.cx > 0 && sizeGlyph.cy > 0 )
//		if( bHorzLayout )
//		{
//			if( sizeGlyph.cy > 0 )
//				rcCaption.top +=
//					sizeGlyph.cy
//					+ __EXT_PAGECONTAINERWND_CAPT_AFTER_GLYPH_DY
//					;
//		} // if( bHorzLayout )
//		else
//		{
//			if( sizeGlyph.cx > 0 )
//				rcCaption.left +=
//					sizeGlyph.cx
//					+ __EXT_PAGECONTAINERWND_CAPT_AFTER_GLYPH_DX
//					;
//		} // else from if( bHorzLayout )
	} // if( ( dwPageContainerStyle & __EPCWS_CAPTION_EXPBTN ) != 0 )
CExtCmdIcon & _icon = ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IconGet();
CSize sizeIcon = _icon.GetSize();
	if( sizeIcon.cx > 0 && sizeIcon.cy > 0 )
	{
		CRect rcIcon( rcCaption );
		if( bHorzLayout )
		{
			rcIcon.left += (rcCaption.Width() - sizeIcon.cx)/2;
			rcIcon.top = rcIcon.bottom - sizeIcon.cy;
			rcIcon.right = rcIcon.left + sizeIcon.cx;
			rcCaption.bottom = rcIcon.top - __EXT_PAGECONTAINERWND_CAPT_ICON2TEXT_DY;
		} // if( bHorzLayout )
		else
		{
			rcIcon.right = rcIcon.left + sizeIcon.cx;
			rcIcon.top += (rcCaption.Height() - sizeIcon.cy)/2;
			rcIcon.bottom = rcIcon.top + sizeIcon.cy;
			rcCaption.left = rcIcon.right + __EXT_PAGECONTAINERWND_CAPT_ICON2TEXT_DX;
		} // else from if( bHorzLayout )

		if(		rcIcon.right > rcIcon.left
			&&	rcIcon.bottom > rcIcon.top
			)
		{
			_icon.Paint(
				this,
				dc.GetSafeHdc(),
				rcIcon,
				bEnabled
					? CExtCmdIcon::__PAINT_NORMAL
					: CExtCmdIcon::__PAINT_DISABLED
				);
		}
	} // if( sizeIcon.cx > 0 && sizeIcon.cy > 0 )
bool bCenteredText =
		(dwPageContainerStyle & __EPCWS_CAPTION_CENTER_TEXT)
			? true :  false;
__EXT_MFC_SAFE_LPCTSTR sItemText = ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->TextGet();
LONG nItemTextLen = 0;
	if(		sItemText != NULL
		&&	( nItemTextLen = LONG(_tcslen(sItemText)) ) > 0
		&&	rcCaption.right > rcCaption.left
		&&	rcCaption.bottom > rcCaption.top
		)
	{ // if can draw text
		CFont * pItemFont = ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->GetCaptionFont( bHorzLayout );
		ASSERT( pItemFont != NULL );
		ASSERT( pItemFont->GetSafeHandle() != NULL );
		CFont * pOldFont = dc.SelectObject( pItemFont );
		COLORREF clrTextOld =
			dc.SetTextColor(
				GetColor(
					bEnabled ? COLOR_BTNTEXT : ( m_bPageContainerNoEmbossDisabledText ? CLR_TEXT_DISABLED : COLOR_3DHILIGHT ),
					pWndPageContainer,
					lParam
					)
				);
		int nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( bHorzLayout )
			eLO = CExtRichContentLayout::__ELOT_270_CW;
		UINT nFormat = DT_SINGLELINE|DT_END_ELLIPSIS;
		if( bCenteredText )
			nFormat |= DT_CENTER|DT_VCENTER;
		else
			nFormat |= DT_VCENTER|DT_LEFT;
		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, sItemText, nItemTextLen, &rcCaption, nFormat, 0
			);
		if( ( ! bEnabled ) && ( ! m_bPageContainerNoEmbossDisabledText ) )
		{
			dc.SetTextColor( GetColor( CLR_TEXT_DISABLED, pWndPageContainer, lParam ) );
			rcCaption.OffsetRect( -1, -1 );
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, sItemText, nItemTextLen, &rcCaption, nFormat, 0
				);
		} // if( ( ! bEnabled ) && ( ! m_bPageContainerNoEmbossDisabledText ) )
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrTextOld );
		dc.SelectObject( pOldFont );
	} // if can draw text
	if( ! m_bPageContainerUseButtonStyle )
	{
		if( ( dwPageContainerStyle & __EPCWS_CAPTION_FLAT ) != 0 )
		{ // if flat captions
			if( ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionPressed() )
			{ // if caption is pressed
				dc.Draw3dRect(
					&rcCaptBorder,
					clrShadow,
					clrLight
					);
			} // if caption is pressed
			else if( ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionHover() )
			{ // if caption is under mouse pointer
				dc.Draw3dRect(
					&rcCaptBorder,
					clrLight,
					clrShadow
					);
			} // if caption is under mouse pointer
			else
			{ // if caption is neither pressed nor under mouse pointer
				dc.Draw3dRect(
					&rcCaptBorder,
					bEnabled ? clrDkShadow : clrShadow,
					bEnabled ? clrDkShadow : clrShadow
					);
			} // if caption is neither pressed nor under mouse pointer
		} // if flat captions
		else
		{ // if semi-flat captions
			if( ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionPressed() )
			{ // if caption is pressed
				dc.Draw3dRect(
					&rcCaptBorder,
					clrDkShadow,
					clrLight
					);
				rcCaptBorder.DeflateRect( 1, 1 );
				dc.Draw3dRect(
					&rcCaptBorder,
					clrShadow,
					clrFace
					);
			} // if caption is pressed
			else if( ((CExtPageContainerWnd::PAGE_ITEM_INFO*)pPageInfo)->IsCaptionHover() )
			{ // if caption is under mouse pointer
				dc.Draw3dRect(
					&rcCaptBorder,
					clrLight,
					clrDkShadow
					);
				rcCaptBorder.DeflateRect( 1, 1 );
				dc.Draw3dRect(
					&rcCaptBorder,
					clrFace,
					clrShadow
					);
			} // if caption is under mouse pointer
			else
			{ // if caption is neither pressed nor under mouse pointer
				dc.Draw3dRect(
					&rcCaptBorder,
					clrLight,
					clrShadow
					);
			} // if caption is neither pressed nor under mouse pointer
		} // if semi-flat captions
	} // if( ! m_bPageContainerUseButtonStyle )
	dc.SelectClipRgn( NULL );
}

#endif // (!defined __EXT_MFC_NO_PAGECONTAINER_CTRL)

//////////////////////////////////////////////////////////////////////////
// CExtPaintManagerStudio2008
//////////////////////////////////////////////////////////////////////////

CExtPaintManagerStudio2008::CExtPaintManagerStudio2008()
{
	VERIFY(
		m_bmpMenuItemLunaBlue.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_VS2008_MENU_ITEM_LUNA_BLUE )
			)
		);
	m_bmpMenuItemLunaBlue.Make32();
	m_bmpMenuItemLunaBlue.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );

	VERIFY(
		m_bmpMenuItemLunaOliveGreen.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_VS2008_MENU_ITEM_LUNA_OLIVE_GREEN )
			)
		);
	m_bmpMenuItemLunaOliveGreen.Make32();
	m_bmpMenuItemLunaOliveGreen.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );

	VERIFY(
		m_bmpMenuItemLunaSilver.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_VS2008_MENU_ITEM_LUNA_SILVER )
			)
		);
	m_bmpMenuItemLunaSilver.Make32();
	m_bmpMenuItemLunaSilver.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );

	VERIFY(
		m_bmpMenuItemLunaRoyale.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_VS2008_MENU_ITEM_LUNA_ROYALE )
			)
		);
	m_bmpMenuItemLunaRoyale.Make32();
	m_bmpMenuItemLunaRoyale.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );

	VERIFY(
		m_bmpMenuItemVista.LoadBMP_Resource(
			MAKEINTRESOURCE( IDB_EXT_VS2008_MENU_ITEM_VISTA )
			)
		);
	m_bmpMenuItemVista.Make32();
	m_bmpMenuItemVista.AlphaColor( RGB(255,0,255), RGB(0,0,0), BYTE(0) );
}

CExtPaintManagerStudio2008::~CExtPaintManagerStudio2008()
{
}

int CExtPaintManagerStudio2008::GetMenuIconAreaWidth() const
{
	ASSERT_VALID( this );
	return 28;
}

bool CExtPaintManagerStudio2008::OnQueryUseThemeColors() const
{
	ASSERT_VALID( this );

	if( IsHighContrast() )
		return CExtPaintManagerXP::OnQueryUseThemeColors();

e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
bool bUseThemedColors = (	
			g_PaintManager.m_UxTheme.IsAppThemed()
		&&	g_PaintManager.m_bUxValidColorsExtracted
		&&	(	eCurrentTheme == ThemeLunaRoyale       // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterUX   // +2.87
			||	eCurrentTheme == ThemeVistaOrLaterDWM  // +2.87
			||	eCurrentTheme == ThemeLunaBlue
			||	eCurrentTheme == ThemeLunaOlive
			||	eCurrentTheme == ThemeLunaSilver
			)
		//&&	eCurrentTheme != ThemeLunaRoyale // -2.87
		);
	return bUseThemedColors;
}

void CExtPaintManagerStudio2008::InitTranslatedColors()
{
	ASSERT_VALID( this );
	CExtPaintManagerStudio2005::InitTranslatedColors();
	VERIFY( m_bmpMenuItemOther.LoadBMP_Resource( MAKEINTRESOURCE( IDB_EXT_VS2008_MENU_ITEM_OTHER ) ) );
	if( stat_GetBPP() > 8 )
	{
		COLORREF clrMlaNormLeft    = COLORREF(-1L);
		COLORREF clrMlaNormMiddle  = COLORREF(-1L);
		COLORREF clrMlaNormRight   = COLORREF(-1L);
		COLORREF clrMlaMarginLeft  = COLORREF(-1L);
		COLORREF clrMlaMarginRight = COLORREF(-1L);
		COLORREF clrMlaRarelyLeft    = COLORREF(-1L);
		COLORREF clrMlaRarelyRight   = COLORREF(-1L);
		COLORREF clrMlaRarelyMiddle  = COLORREF(-1L);
		e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
		switch( eCurrentTheme ) 
		{
	//	case ThemeVistaOrLaterUX:   // +2.87 -2.88
	//	case ThemeVistaOrLaterDWM:  // +2.87 -2.88
		case ThemeLunaBlue:
			clrMlaNormLeft     = RGB( 241, 241, 241 );
			clrMlaNormMiddle   = RGB( 241, 241, 241 );
			clrMlaNormRight    = RGB( 241, 241, 241 );
			clrMlaMarginLeft   = RGB( 197, 194, 184 );
			clrMlaMarginRight  = RGB( 255, 255, 255 );
		break;
		case ThemeLunaOlive:
			clrMlaNormLeft     = RGB( 247, 246, 239 );
			clrMlaNormMiddle   = RGB( 242, 240, 229 );
			clrMlaNormRight    = RGB( 233, 230, 214 );
			clrMlaMarginLeft   = RGB( 197, 194, 184 );
			clrMlaMarginRight  = RGB( 255, 255, 255 );
		break;
		case ThemeVistaOrLaterUX:   // +2.88
		case ThemeVistaOrLaterDWM:  // +2.88
			m_mapColorTranslate[_2003CLR_EXPBTN_LIGHT]   = InstallColor( RGB(195, 202, 218) );
			m_mapColorTranslate[_2003CLR_EXPBTN_DARK]    = InstallColor( RGB(233, 236, 250) );
			m_mapColorTranslate[_2003CLR_GRADIENT_LIGHT] = InstallColor( RGB(244, 247, 252) );
			m_mapColorTranslate[_2003CLR_GRADIENT_DARK]	 = InstallColor( RGB(233, 236, 250) );
			clrMlaNormLeft      = RGB(243, 245, 248);
			clrMlaNormRight     = RGB(213, 217, 231);
			clrMlaNormMiddle    = RGB(233, 236, 250);
			clrMlaRarelyLeft    = CExtBitmap::stat_HLS_Adjust( clrMlaNormLeft,   0.00, -0.10, 0.00 );
			clrMlaRarelyRight   = CExtBitmap::stat_HLS_Adjust( clrMlaNormRight,  0.00, -0.10, 0.00 );
			clrMlaRarelyMiddle  = CExtBitmap::stat_HLS_Adjust( clrMlaNormMiddle, 0.00, -0.10, 0.00 );
			clrMlaMarginLeft   = RGB( 170, 171, 190 );
			clrMlaMarginRight  = RGB( 252, 252, 252 );
			m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_LIGHT]   = InstallColor( RGB(250, 250, 253) );
			m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_MIDDLE]  = InstallColor( RGB(223, 227, 241) );
			m_mapColorTranslate[_2003CLR_TOOLBAR_GRADIENT_DARK]    = InstallColor( RGB(196, 203, 219) );
			m_mapColorTranslate[_2003CLR_TOOLBAR_BOTTOM_LINE]      = InstallColor( RGB(181, 190, 206) );
		break;
		case ThemeLunaSilver:
			clrMlaNormLeft     = RGB( 232, 233, 242 );
			clrMlaNormMiddle   = RGB( 216, 216, 227 );
			clrMlaNormRight    = RGB( 193, 193, 211 );
			clrMlaMarginLeft   = RGB( 110, 109, 143 );
			clrMlaMarginRight  = RGB( 255, 255, 255 );
		break;
		case ThemeLunaRoyale:
			clrMlaNormLeft     = RGB( 247, 246, 248 );
			clrMlaNormMiddle   = RGB( 241, 240, 242 );
			clrMlaNormRight    = RGB( 241, 240, 242 );
			clrMlaMarginLeft   = RGB( 193, 193, 196 );
			clrMlaMarginRight  = RGB( 255, 255, 255 );
		break;
		default:
			clrMlaMarginLeft   = GetColor( COLOR_3DSHADOW, this );
			clrMlaMarginRight  = GetColor( COLOR_WINDOW, this );
		break;
		} // switch( eCurrentTheme ) 
		if( clrMlaNormLeft != COLORREF(-1L) )
		{
			m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT]   = InstallColor( clrMlaNormLeft );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT] = InstallColor( CExtBitmap::stat_HLS_Adjust( clrMlaNormLeft, 0.00, -0.10, 0.0 ) );
		}
		if( clrMlaNormMiddle != COLORREF(-1L) )
		{
			m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE]   = InstallColor( clrMlaNormMiddle );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE] = InstallColor( CExtBitmap::stat_HLS_Adjust( clrMlaNormMiddle, 0.00, -0.10, 0.0 ) );
		}
		if( clrMlaNormRight != COLORREF(-1L) )
		{
			m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT]    = InstallColor( clrMlaNormRight );
			m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT]  = InstallColor( CExtBitmap::stat_HLS_Adjust( clrMlaNormRight, 0.00, -0.10, 0.0 ) );
		}
		m_mapColorTranslate[_STUDIO_2008CLR_MENU_ITEM_LEFT_AREA_MARGIN_LEFT]  = InstallColor( clrMlaMarginLeft );
		m_mapColorTranslate[_STUDIO_2008CLR_MENU_ITEM_LEFT_AREA_MARGIN_RIGHT] = InstallColor( clrMlaMarginRight );
		if( clrMlaRarelyLeft != COLORREF(-1L) )
			m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT]          = InstallColor( clrMlaRarelyLeft );
		if( clrMlaRarelyMiddle != COLORREF(-1L) )
			m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE]        = InstallColor( clrMlaRarelyMiddle );
		if( clrMlaRarelyRight != COLORREF(-1L) )
			m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT]         = InstallColor( clrMlaRarelyRight );

		// colorize menu item selection bitmap
		if(		(!g_PaintManager.m_bIsWinVistaOrLater)
			&&	eCurrentTheme == ThemeUnknown
			)
		{
			m_mapColorTranslate[CLR_MENUTEXT_IN] = COLOR_HIGHLIGHTTEXT;
			COLORREF clrHighlight = GetColor( COLOR_HIGHLIGHT, this );
			BYTE nRed   = BYTE( GetRValue( clrHighlight ) );
			BYTE nGreen = BYTE( GetGValue( clrHighlight ) );
			BYTE nBlue  = BYTE( GetBValue( clrHighlight ) );
			CSize _sizeBmp = m_bmpMenuItemOther.GetSize();
			INT nX, nY;
			for( nY = 0; nY < _sizeBmp.cy; nY++ )
			{
				for( nX = 0; nX < _sizeBmp.cx; nX++ )
				{
					RGBQUAD _pixel;
					m_bmpMenuItemOther.GetPixel( nX, nY, _pixel );
					_pixel.rgbRed   = nRed;
					_pixel.rgbGreen = nGreen;
					_pixel.rgbBlue  = nBlue;
					m_bmpMenuItemOther.SetPixel( nX, nY, _pixel );
				}
			}
		}
		else
			m_mapColorTranslate[CLR_MENUTEXT_IN] = COLOR_WINDOWTEXT;
	} // if( stat_GetBPP() > 8 )
	else
	{
		m_mapColorTranslate[_STUDIO_2008CLR_MENU_ITEM_LEFT_AREA_MARGIN_LEFT]  = COLOR_3DSHADOW;
		m_mapColorTranslate[_STUDIO_2008CLR_MENU_ITEM_LEFT_AREA_MARGIN_RIGHT] = COLOR_WINDOW;
	} // else from if( stat_GetBPP() > 8 )
}

int CExtPaintManagerStudio2008::GetThemeDockingType() const
{
	ASSERT_VALID( this );

	if(		(! g_PaintManager.m_bIsWin2000orLater )
		||	stat_GetBPP() < 24
		||	IsHighContrast()
		)
		return CExtPaintManagerStudio2005::GetThemeDockingType();

#if (!defined __EXT_MFC_NO_DOCK_MARKERS)
	return int(CExtControlBar::__RESIZABLE_DOCKING_TYPE_STUDIO_2008_AUTO);
#else
	return CExtPaintManagerStudio2005::GetThemeDockingType();
#endif
}

bool CExtPaintManagerStudio2008::IsMenuMustCombineExcludeArea(
	const CObject * pMenuTrackerObject // = NULL
	) const
{
	ASSERT_VALID( this );
	pMenuTrackerObject;
	return false;
}

void CExtPaintManagerStudio2008::PaintMenuItemLeftAreaMarginXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcFillLeftPart,
	const RECT & rcFillRightPart
	)
{
	ASSERT_VALID( this );
	if( _pmid.m_bForceNoLeftGradient )
		return;

	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintMenuItemLeftAreaMarginXP(
			dc,
			_pmid,
			rcFillLeftPart,
			rcFillRightPart
			);
		return;
	}

	dc.FillSolidRect(
		rcFillLeftPart.right - 1,
		rcFillLeftPart.top,
		1,
		rcFillLeftPart.bottom - rcFillLeftPart.top,
		GetColor( 
			_STUDIO_2008CLR_MENU_ITEM_LEFT_AREA_MARGIN_LEFT, 
			_pmid.m_pHelperSrc, 
			_pmid.m_lParam 
			)
		);

	dc.FillSolidRect(
		rcFillLeftPart.right,
		rcFillLeftPart.top,
		1,
		rcFillLeftPart.bottom - rcFillLeftPart.top,
		GetColor( 
			_STUDIO_2008CLR_MENU_ITEM_LEFT_AREA_MARGIN_RIGHT, 
			_pmid.m_pHelperSrc, 
			_pmid.m_lParam 
			)
		);
}

bool CExtPaintManagerStudio2008::PaintMenuItemSelectionAreaXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcSelectionArea
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerStudio2005::PaintMenuItemBackgroundXP( dc, _pmid, rcSelectionArea );
	if( ! _pmid.m_bSelected )
		return false;
CExtPopupMenuWnd * pPopup = NULL;
	if( _pmid.m_pHelperSrc != NULL )
	{
		ASSERT_VALID( _pmid.m_pHelperSrc );
		pPopup = DYNAMIC_DOWNCAST( CExtPopupMenuWnd, _pmid.m_pHelperSrc );
	}
CExtBitmapCache * pbmpMenuItem = NULL;
	if( ! g_PaintManager.m_bIsWinVistaOrLater )
	{
		e_system_theme_t eCurrentTheme = OnQuerySystemTheme();
		switch( eCurrentTheme ) 
		{
	//	case ThemeVistaOrLaterUX:   // +2.87 -2.88
	//	case ThemeVistaOrLaterDWM:  // +2.87 -2.88
		case ThemeLunaBlue:
			pbmpMenuItem = &m_bmpMenuItemLunaBlue;
		break;
		case ThemeLunaOlive:
			pbmpMenuItem = &m_bmpMenuItemLunaOliveGreen;
		break;
		case ThemeVistaOrLaterUX:   // +2.88
		case ThemeVistaOrLaterDWM:  // +2.88
		case ThemeLunaSilver:
			pbmpMenuItem = &m_bmpMenuItemLunaSilver;
		break;
		case ThemeLunaRoyale:
			pbmpMenuItem = &m_bmpMenuItemLunaRoyale;
		break;
		default:
			pbmpMenuItem = &m_bmpMenuItemOther;
		break;
		} // switch( eCurrentTheme ) 
	} // if( ! g_PaintManager.m_bIsWinVistaOrLater )
	else
		pbmpMenuItem = &m_bmpMenuItemVista;
	ASSERT( pbmpMenuItem != NULL );
	if( pbmpMenuItem != NULL )
		pbmpMenuItem->AlphaBlendSkinParts( dc.m_hDC, rcSelectionArea, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, false );
	return true;
}

bool CExtPaintManagerStudio2010::PaintMenuItemSelectionAreaXP(
	CDC & dc,
	CExtPaintManager::PAINTMENUITEMDATA & _pmid,
	const RECT & rcSelectionArea
	)
{
	ASSERT_VALID( this );
	if( m_bmpMenuItemSelectionArea.IsEmpty() || IsHighContrast() )
		return CExtPaintManagerStudio2005::PaintMenuItemBackgroundXP( dc, _pmid, rcSelectionArea );
	if( ! _pmid.m_bSelected )
		return false;
	m_bmpMenuItemSelectionArea.AlphaBlendSkinParts(
		dc.m_hDC,
		rcSelectionArea,
		CRect(3,3,3,3),
		CExtBitmap::__EDM_STRETCH,
		true,
		false
		);
	return true;
}

void CExtPaintManagerStudio2008::PaintPushButton(
	CDC & dc,
	CExtPaintManager::PAINTPUSHBUTTONDATA & _ppbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _ppbd.m_rcClient.IsRectEmpty() )
		return;

bool bMenuBar = false;
	if( _ppbd.m_pHelperSrc != NULL  )
	{
		if(		_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarButton ) ) 
			&&	(! (_ppbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtBarSliderButton ) )
				&&	_ppbd.m_lParam == CExtBarSliderButton::__ESA_THUMB) )
			)
		{
			CExtBarButton * pBarButton = (CExtBarButton*)_ppbd.m_pHelperSrc;
			CExtToolControlBar * pToolBar = DYNAMIC_DOWNCAST( CExtToolControlBar, pBarButton->GetBar() );
			ASSERT( pToolBar != NULL );
			
			if( pToolBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar)) )
				bMenuBar = true;
		}
	}

#if (!defined __EXT_MFC_NO_RIBBON_BAR)
	if( _ppbd.m_pHelperSrc != NULL )
	{
		CExtBarButton * pTBB = DYNAMIC_DOWNCAST( CExtBarButton, _ppbd.m_pHelperSrc );
		if( pTBB != NULL )
		{
			if( pTBB->IsRibbonPaintingMode() )
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
			CExtToolControlBar * pBar = pTBB->GetBar();
			if(		pBar != NULL
				&&	pBar->IsKindOf( RUNTIME_CLASS( CExtRibbonPage ) )
				&&	(! pTBB->IsNoRibbonLayout() )
				&&	(! pTBB->IsKindOf( RUNTIME_CLASS( CExtBarMdiRightButton ) ) )
				)
			{
				Ribbon_PaintPushButton( dc, _ppbd );
				return;
			}
		} // if( pTBB != NULL )
	} // if( _ppbd.m_pHelperSrc != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)

bool bRTL = _ppbd.IsRTL();

	if( !_ppbd.m_bEnabled )
	{
		_ppbd.m_bHover = false;
		_ppbd.m_bDrawFocusRect = false;
		_ppbd.m_bIndeterminate = false;
	} // if( ! _ppbd.m_bEnabled )

COLORREF clrOldText = dc.GetTextColor();
COLORREF clrOldBk = dc.GetBkColor();
int nOldBkMode = dc.SetBkMode( TRANSPARENT );

int nIdxMainGradientLeft = -1;
int nIdxMainGradientRight = -1;
COLORREF bgColor, bgColorDD;
	if( _ppbd.m_clrForceBk != ((COLORREF)-1L) )
		bgColor = bgColorDD = _ppbd.m_clrForceBk;
	else if(_ppbd.m_bHover 
		||	_ppbd.m_bPushed 
		||	_ppbd.m_bIndeterminate
		||	_ppbd.m_bPushedDropDown 
		||	_ppbd.m_bDefaultPushButton
		)
	{
		bgColor = bgColorDD = GetColor( CLR_3DFACE_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam  );
		if( _ppbd.m_bPushed || _ppbd.m_bPushedDropDown || _ppbd.m_bDefaultPushButton )
		{
			if( _ppbd.m_bDefaultPushButton )
				bgColorDD = bgColor = dc.GetNearestColor( stat_HLS_Adjust( GetColor( XPCLR_HILIGHT ), 0.0, 0.2, 0.0 ) );
			(( _ppbd.m_bPushedDropDown ) ? bgColorDD : bgColor) =
				GetColor( _ppbd.m_bHover ? XPCLR_HILIGHT : CLR_3DFACE_IN, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
		}
		if(		(!_ppbd.m_bHover)
			&&	_ppbd.m_bPushed
			&&	(!_ppbd.m_bPushedDropDown)
			&&	_ppbd.m_bSeparatedDropDown
			)
			bgColorDD =  GetColor( CLR_3DFACE_OUT, _ppbd.m_pHelperSrc, _ppbd.m_lParam );
		if( _ppbd.m_bIndeterminate && ( !_ppbd.m_bHover ) && ( !_ppbd.m_bPushed ) )
			bgColor = dc.GetNearestColor( stat_HLS_Adjust( bgColor, 0.0, 0.5, 0.5 ) );
		
		if( _ppbd.m_bHover )
		{
			if( _ppbd.m_bPushed )
			{
				nIdxMainGradientLeft = m_nIdxClrBtnHovPresLeft;
				nIdxMainGradientRight = m_nIdxClrBtnHovPresRight;
			} // if( _ppbd.m_bPushed )
			else
			{
				nIdxMainGradientLeft = m_nIdxClrBtnHoverLeft;
				nIdxMainGradientRight = m_nIdxClrBtnHoverRight;
			} // else from if( _ppbd.m_bPushed )
		} // if( _ppbd.m_bHover )
		else if( _ppbd.m_bPushed )
		{
			nIdxMainGradientLeft = m_nIdxClrBtnPressedLeft;
			nIdxMainGradientRight = m_nIdxClrBtnPressedRight;
		} // else if( _ppbd.m_bPushed )
	} // if(	_ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bIndeterminate || _ppbd.m_bPushedDropDown )
	else
	{
		bgColor = bgColorDD =
			GetColor(
				_ppbd.m_bFlat ? CLR_3DFACE_OUT : COLOR_3DFACE,
				_ppbd.m_pHelperSrc,
				_ppbd.m_lParam 
				);
	}

COLORREF clrDkBorder =
		GetColor(
			(_ppbd.m_bHover || _ppbd.m_bPushed || _ppbd.m_bPushedDropDown )
				? XPCLR_HILIGHT_BORDER
				: ( _ppbd.m_bFlat ? XPCLR_HILIGHT_BORDER : COLOR_3DSHADOW )
				,
			_ppbd.m_pHelperSrc,
			_ppbd.m_lParam 
			);
bool bPushedDropDown = false;
	if( (_ppbd.m_bPushed && !_ppbd.m_bSeparatedDropDown)
		|| _ppbd.m_bPushedDropDown
		)
		bPushedDropDown = true;

CRect rectClient( _ppbd.m_rcClient );
CRect rectCaption( _ppbd.m_rcClient );
CRect rectDropDown( 0, 0, 0, 0 );
	if( _ppbd.m_bDropDown )
	{
		rectDropDown = rectClient;
		if( _ppbd.m_bHorz )
		{
			if( bRTL )
			{
				rectCaption.left += _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.right = rectCaption.left + 1;
			} // if( bRTL )
			else
			{
				rectCaption.right -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
				rectDropDown.left = rectCaption.right - 1;
			} // else from if( bRTL )
		} // if( _ppbd.m_bHorz )
		else
		{
			rectCaption.bottom -= _CalcSplitButtonExtentImpl( _ppbd.m_pHelperSrc, _ppbd.m_bHorz );
			rectDropDown.top = rectCaption.bottom - 1;
		} // if( _ppbd.m_bHorz )

		if(		(! _ppbd.m_bTransparentBackground )
			&&	( _ppbd.m_bHover || _ppbd.m_bPushedDropDown )
			||	_ppbd.m_clrForceBk != ((COLORREF)-1L)
			)
			dc.FillSolidRect( &rectDropDown, bgColorDD );

		if( _ppbd.m_bSeparatedDropDown )
		{
			rectClient = rectCaption;

			if( bPushedDropDown )
			{
				if( (!_ppbd.m_bFlat) || _ppbd.m_bDrawBorder )
					dc.Draw3dRect( rectDropDown, clrDkBorder, clrDkBorder );
			} // if( bPushedDropDown )
			else
			{
				if( (!_ppbd.m_bFlat) || (_ppbd.m_bHover && _ppbd.m_bDrawBorder) )
					dc.Draw3dRect( rectDropDown, clrDkBorder, clrDkBorder );
			} // else from if( bPushedDropDown )
		} // if( _ppbd.m_bSeparatedDropDown )
	} // if( _ppbd.m_bDropDown )

	if( bMenuBar )
	{
		if(		( ! _ppbd.m_bTransparentBackground ) 
			&&	( _ppbd.m_bHover || _ppbd.m_bPushed )
			)
		{
			CRect rcButton( rectClient );

			COLORREF clrBack = RGB(255,255,255);
			CBrush br( clrBack );
			CBrush * pOldBrush = dc.SelectObject( &br );
			
			CPen pen( PS_SOLID, 1, clrBack );
			CPen * pOldPen = dc.SelectObject( &pen );
			
			dc.RoundRect( rcButton, CPoint(2,2) );
			
			rcButton.DeflateRect( 1, 1 );

			br.DeleteObject();
			br.CreateSolidBrush( bgColor );
			dc.SelectObject( &br );
			
			pen.DeleteObject();
			pen.CreatePen( PS_SOLID, 1, clrDkBorder );
			dc.SelectObject( &pen );

			dc.RoundRect( rcButton, CPoint(2,2) );

			if( _ppbd.m_bPushed )
			{
				rcButton.DeflateRect( 1, 1 );
				if( ::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8 )
					stat_PaintGradientRect( 
						dc, 
						rcButton, 
						GetColor( _2003CLR_TBB_BK_COMBINED_BOTTOM, _ppbd.m_pHelperSrc, _ppbd.m_lParam ), 
						GetColor( _2003CLR_TBB_BK_COMBINED_TOP, _ppbd.m_pHelperSrc, _ppbd.m_lParam ), 
						true
						);
				else
					dc.FillSolidRect( 
						&rcButton, 
						GetColor( COLOR_WINDOW, _ppbd.m_pHelperSrc, _ppbd.m_lParam )
						);
			}

 			dc.SelectObject( pOldBrush );
			dc.SelectObject( pOldPen );
		}
	}
	else
	{
		if(		( ! _ppbd.m_bTransparentBackground ) 
			||	_ppbd.m_bIndeterminate
			||	_ppbd.m_clrForceBk != ((COLORREF)-1L)
			)
		{
			if(		nIdxMainGradientLeft >= 0 
				&&	nIdxMainGradientRight >= 0 
				&&	::GetDeviceCaps( dc.m_hDC, BITSPIXEL ) > 8
				)
			{
				stat_PaintGradientRect(
					dc,
					rectClient,
					GetColor( _ppbd.m_bHorz ? nIdxMainGradientRight : nIdxMainGradientLeft, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
					GetColor( _ppbd.m_bHorz ? nIdxMainGradientLeft : nIdxMainGradientRight, _ppbd.m_pHelperSrc, _ppbd.m_lParam ),
					_ppbd.m_bHorz
					);
			}
			else
				dc.FillSolidRect( &rectClient, bgColor );
		}

		// Draw pressed button
		if( _ppbd.m_bPushed || _ppbd.m_bIndeterminate || _ppbd.m_bPushedDropDown )
		{
			if( (!_ppbd.m_bFlat) || _ppbd.m_bDrawBorder )
				dc.Draw3dRect( rectClient, clrDkBorder, clrDkBorder );
		}
		else
		{
			if( _ppbd.m_bFlat )
			{
				if( _ppbd.m_bHover && _ppbd.m_bDrawBorder )
					dc.Draw3dRect( rectClient, clrDkBorder, clrDkBorder );
			}
			else
			{
				dc.Draw3dRect( rectClient, clrDkBorder, clrDkBorder );
				if( _ppbd.m_bHover )
					dc.Draw3dRect( _ppbd.m_rcClient, clrDkBorder, clrDkBorder );
			}
		}
	}

	if( _ppbd.m_bDropDown && (! _ppbd.m_bNoDropDownArrow ) )
	{
		CRect rectGlyph( rectDropDown );
		if( bPushedDropDown )
			rectGlyph.OffsetRect( GetPushedOffset() );
		COLORREF ColorValues[2] =
		{
			RGB(0,0,0),
			RGB(0,0,0),
		};
		bool bSetDefaultColorForDD = true;
		if( _ppbd.m_bEnabled )
		{
			if( m_clrCustomDropDownGlyphEnabled != COLORREF(-1L) )
			{
				ColorValues[1] = m_clrCustomDropDownGlyphEnabled;
				bSetDefaultColorForDD = false;
			}
		}
		else
		{
			if( m_clrCustomDropDownGlyphDisabled != COLORREF(-1L) )
			{
				ColorValues[1] = m_clrCustomDropDownGlyphDisabled;
				bSetDefaultColorForDD = false;
			}
		}
		if( bSetDefaultColorForDD )
			ColorValues[1] =
				GetColor(
					_ppbd.m_bEnabled
						? COLOR_BTNTEXT
						: COLOR_3DSHADOW
						,
					_ppbd.m_pHelperSrc,
					_ppbd.m_lParam 
					);
		if( bRTL && (rectGlyph.Width()&1) == 0 )
			rectGlyph.right++;
		PaintGlyphCentered(
			dc,
			rectGlyph,
			_ppbd.m_bHorz ? g_glyph_btn_expand_bottom : g_glyph_btn_expand_right,
			ColorValues
			);
	} // if( _ppbd.m_bDropDown && (! _ppbd.m_bNoDropDownArrow ) )

	dc.SetBkColor( bgColor );

	rectCaption.DeflateRect( _ppbd.m_rcBorderSizes );
	rectClient = rectCaption;
CRect rcFocus( rectCaption );

	// Draw icon
	if(		rectClient.bottom > rectClient.top
		&&	rectClient.right > rectClient.left
		)
		PaintPushButtonIcon( dc, rectClient, rectCaption, rcFocus, _ppbd );

CExtSafeString sTitle( _T("") );
	if( _ppbd.m_sText != NULL )
		sTitle = _ppbd.m_sText;
	// Draw text
	if(		rectCaption.bottom > rectCaption.top
		&&	rectCaption.right > rectCaption.left
		&&	(!sTitle.IsEmpty())
		)
		PaintPushButtonText( dc, rectCaption, _ppbd );

	// Draw focus rectangle
	if(		_ppbd.m_bDrawFocusRect 
		&&	( ( !sTitle.IsEmpty() ) || _ppbd.m_nFocusMode == __EBFM_CLIENT_AREA )
		&&	rcFocus.bottom > rcFocus.top 
		&&	rcFocus.right > rcFocus.left
		)
	{
		rcFocus.DeflateRect( 2, 2 );
		dc.DrawFocusRect( &rcFocus );
	}

	dc.SetBkMode( nOldBkMode );
	dc.SetBkColor( clrOldBk );
	dc.SetTextColor( clrOldText );
}

#if (!defined __EXT_MFC_NO_TAB_CTRL)

void CExtPaintManagerStudio2008::PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bTopLeft,
	bool bHorz,
	bool bSelected,
	bool bCenteredText,
	bool bGroupedMode,
	bool bInGroupActive,
	bool bInvertedVerticalMode,
	const CRect & rcEntireItem,
	CSize sizeTextMeasured,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator, // = COLORREF(-1L)
	bool bDwmMode // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerXP::PaintTabItem(
			dc,
			rcTabItemsArea,
			bTopLeft,
			bHorz,
			bSelected,
			bCenteredText,
			bGroupedMode,
			bInGroupActive,
			bInvertedVerticalMode,
			rcEntireItem,
			sizeTextMeasured,
			pFont,
			sText,
			pIcon,
			pHelperSrc,
			lParam,
			clrForceText,
			clrForceTabBk,
			clrForceTabBorderLT,
			clrForceTabBorderRB,
			clrForceTabSeparator,
			bDwmMode
			);
		return;
	}

LONG nItemIndex = 1;

CExtCmdIcon * pIconTabItemCloseButton = NULL;
CExtCmdIcon::e_paint_type_t ePaintStateITICB =
		(CExtCmdIcon::e_paint_type_t) CExtCmdIcon::__PAINT_INVISIBLE;
CRect rcTabItemCloseButton( 0, 0, 0, 0 );
CExtBarButton * pTBB = NULL;
CExtTabWnd * pTabs = NULL;
CExtTabWnd::TAB_ITEM_INFO * pTII = NULL;
bool bNoPrefix = false;
	if( pHelperSrc != NULL )
	{
		pTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( pTabs != NULL )
		{
			ASSERT_VALID( pTabs );
			pTII = pTabs->ItemGet( LONG( lParam ) );
			ASSERT( pTII != NULL );
			ASSERT_VALID( pTII );
			nItemIndex = (LONG)lParam;
			pIconTabItemCloseButton =
				pTabs->OnTabWndQueryItemCloseButtonShape( pTII );
			if( pIconTabItemCloseButton != NULL )
			{
				rcTabItemCloseButton = pTII->CloseButtonRectGet();
				ePaintStateITICB = (CExtCmdIcon::e_paint_type_t)
					pTabs->OnTabWndQueryItemCloseButtonPaintState( pTII );
			} // if( pIconTabItemCloseButton != NULL )
			bNoPrefix = ( ( pTabs->GetTabWndStyleEx() & __ETWS_EX_NO_PREFIX ) != 0 ) ? true : false;
		} // if( pTabs != NULL )
		else
		{
			pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
#ifdef _DEBUG
			if( pTBB != NULL )
			{
				ASSERT_VALID( pTBB );
			} // if( pTBB != NULL )
#endif // _DEBUG
		} // else from if( pTabs != NULL )
	} // if( pHelperSrc != NULL )

LONG nSelectionIndex = -1;
	if( pTabs != NULL )
		nSelectionIndex = pTabs->SelectionGet();

bool bInGroupFirst = false;
bool bInGroupLast = false;
	if( bGroupedMode && pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		CExtTabWnd::TAB_ITEM_INFO * pTiiFirst = pTII->GetInGroupFirst();
		CExtTabWnd::TAB_ITEM_INFO * pTiiLast = pTII->GetInGroupLast();
		ASSERT_VALID( pTiiFirst );
		ASSERT_VALID( pTiiLast );
		bInGroupFirst = ( nItemIndex == pTabs->ItemGetIndexOf( pTiiFirst ) );
		bInGroupLast = ( nItemIndex == pTabs->ItemGetIndexOf( pTiiLast ) );
	}

bool bFirstItem = false, bLastItem = false;
	if( pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		bFirstItem =
			(	nItemIndex == 0
			||	(	bInGroupFirst
				&&	nItemIndex != nSelectionIndex
				)
			);
		bLastItem = 
			(	nItemIndex == pTabs->ItemGetCount() - 1
			||	(	bInGroupLast
				&&	nItemIndex != nSelectionIndex
				)
			);
	}

bool bDrawIcon = (		
			pIcon != NULL 
		&&	(! pIcon->IsEmpty() ) 
		&&	( pTabs == NULL || (pTabs->GetTabWndStyle()&__ETWS_HIDE_ICONS) == 0  ) 
		);
	
	if( bGroupedMode )
		bSelected = false;

bool bHover = false;
bool bPressed = false;
bool bEnabled = true;
	if( pTII != NULL )
	{
		ASSERT( pTabs != NULL );
		bEnabled = pTII->EnabledGet();
		bHover = ( pTabs->GetHoverTrackingItem() == nItemIndex && bEnabled ) ? true : false;
		bPressed = ( pTabs->GetPushedTrackingItem() == nItemIndex && bEnabled ) ? true : false;
	}
	else if( pTBB != NULL )
	{
		bEnabled = pTBB->IsEnabled();
		bHover = pTBB->IsHover();
		bPressed = pTBB->IsPressed();
	}

bool bDetectedDynTPC = false;
bDetectedDynTPC;
#if (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)
		if( pTII != NULL )
		{
			CObject * pObject = pTII->EventProviderGet();
			if( pObject != NULL )
			{
				CExtDynamicControlBar * pBar = DYNAMIC_DOWNCAST( CExtDynamicControlBar, pObject );
				if( pBar != NULL )
				{
					bool bFlashCaptionHighlightedState = false;
					if( pBar->FlashCaptionIsInProgress( &bFlashCaptionHighlightedState ) )
					{
						if( bFlashCaptionHighlightedState )
						{
							clrForceText = pBar->m_clrFlashCaptionText;
							clrForceTabBk = pBar->m_clrFlashCaptionBackground;
							bSelected = true;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
							bDetectedDynTPC = true;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
						}
					}
				}
			}
		}
#endif// (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)

COLORREF clrColorizeTabShape = COLORREF(-1L);
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
		if(		pHelperSrc != NULL
			&&	clrForceTabBk != COLORREF(-1L)
			&&	(	bDetectedDynTPC
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
				)
			)
			clrColorizeTabShape = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
		if(		pHelperSrc != NULL
			&&	clrForceTabBk != COLORREF(-1L)
			&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
			&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
			)
			clrColorizeTabShape = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)

	enum e_TabOrientation_t
	{
		__ETO_TOP		= 0,
		__ETO_BOTTOM	= 1,
		__ETO_LEFT		= 2,
		__ETO_RIGHT		= 3,
	};

e_TabOrientation_t eTO = __ETO_TOP;
	if( bTopLeft )
	{
		if( bHorz )
			eTO = __ETO_TOP;
		else
			eTO = __ETO_LEFT;
	}
	else
	{
		if( bHorz )
			eTO = __ETO_BOTTOM;
		else
			eTO = __ETO_RIGHT;
	}
	if( bGroupedMode )
	{
		switch( eTO )
		{
		case __ETO_TOP:
			eTO = __ETO_BOTTOM;
			break;
		case __ETO_BOTTOM:
			eTO = __ETO_TOP;
			break;
		case __ETO_LEFT:
			eTO = __ETO_RIGHT;
			break;
		case __ETO_RIGHT:
			eTO = __ETO_LEFT;
			break;
		}
	}

CRect rcItem( rcEntireItem );

	if(	g_PaintManager.m_UxTheme.IsControlsThemed() )
	{

		HWND hWndOpenTheme = pTabs->GetSafeHwnd();
		if( hWndOpenTheme == NULL )
			hWndOpenTheme = ::GetDesktopWindow();
		if( g_PaintManager.m_UxTheme.OpenThemeData( hWndOpenTheme, VSCLASS_TAB ) != NULL )
		{
			INT nPartID = TABP_TABITEM;
			INT nStateID = 
					(!bEnabled)
						? TIS_DISABLED
						: bSelected
							? TIS_SELECTED
							: bPressed
								? TIS_FOCUSED
								: bHover
									? TIS_HOT
									: TIS_NORMAL;
			CExtBitmap _bmp1, _bmp2;
			COLORREF * pClrSurface = NULL;
			CBitmap _bmp;
			CBitmap * pOldBmp = NULL;
			CDC dcX;

			if( eTO == __ETO_TOP || eTO == __ETO_BOTTOM )
			{
				if(		eTO == __ETO_TOP 
					&&	clrColorizeTabShape == COLORREF(-1L) 
					)
				{
					rcItem.OffsetRect( 0, 2 );
					if( bSelected )
						rcItem.InflateRect(
							bFirstItem ? 0 : 2,
							( eTO == __ETO_TOP ) ? 2 : 0,
							bLastItem ? 0 : 2,
							( eTO == __ETO_BOTTOM ) ? 2 : 0
							);
					VERIFY( 
						g_PaintManager.m_UxTheme.DrawBackground(
							hWndOpenTheme,
							dc.GetSafeHdc(), 
							nPartID, 
							nStateID, 
							&rcItem, 
							&rcItem
							) == S_OK
						);
				}
				else
				{
					if( eTO == __ETO_BOTTOM )
					{
						if( g_PaintManager.m_bIsWinVista )
							rcItem.DeflateRect( 0, -2, 0, 2 );
						else
							rcItem.OffsetRect( 0, -1 );
					}
					if( bSelected )
						rcItem.InflateRect(
							bFirstItem ? 0 : 2,
							( eTO == __ETO_TOP ) ? 2 : 0,
							bLastItem ? 0 : 2,
							( eTO == __ETO_BOTTOM ) ? 2 : 0
							);
					VERIFY( _bmp1.FromSurface( dc.m_hDC, rcItem ) );
					if( eTO != __ETO_TOP )
					{
						VERIFY(
							_bmp2.CreateRotated9xStack(
								_bmp1,
								180,
								1,
								rcItem.Width(),
								rcItem.Height(),
								false,
								false
								)
							);
					}
					else
						_bmp2 = _bmp1;
					HBITMAP hBmp = _bmp2.CreateBitmap( &pClrSurface );
					ASSERT( hBmp != NULL && pClrSurface != NULL );
					_bmp.Attach( hBmp );
					VERIFY( dcX.CreateCompatibleDC( NULL ) );
					pOldBmp = dcX.SelectObject( &_bmp );
					CRect rcItemX( 0, 0, rcItem.Width(), rcItem.Height() );
					VERIFY( 
						g_PaintManager.m_UxTheme.DrawBackground(
							hWndOpenTheme,
							dcX.GetSafeHdc(), 
							nPartID, 
							nStateID, 
							&rcItemX, 
							&rcItemX
							) == S_OK
						);
					dcX.SelectObject( pOldBmp );
					_bmp2.Empty();
					VERIFY( _bmp2.FromBitmap( hBmp ) );
					_bmp1.Empty();
					if( eTO != __ETO_TOP )
					{
						VERIFY(
							_bmp1.CreateRotated9xStack(
								_bmp2,
								180,
								1,
								rcItem.Width(),
								rcItem.Height(),
								false,
								false
								)
							);
					}
					else
						_bmp1 = _bmp2;
					if( clrColorizeTabShape != COLORREF(-1L) )
					{
						_bmp1.Make32();
						_bmp1.AdjustHLS( COLORREF(-1L), COLORREF(-1L), 0.0, -0.5 );
						_bmp1.MakeMono( clrColorizeTabShape );
						_bmp1.AlphaBlend( dc.m_hDC, rcItem, 64 );
					}
					else
						_bmp1.Draw( dc.m_hDC, rcItem );
				}
			} // if( eTO == __ETO_TOP || eTO == __ETO_BOTTOM )
			else
			{
				if(		eTO == __ETO_LEFT
					&&	clrColorizeTabShape == COLORREF(-1L) 
					)
				{
					rcItem.OffsetRect( 2, 0 );
					if( g_PaintManager.m_bIsWinVista && eTO == __ETO_RIGHT )
						rcItem.DeflateRect( -2, 0, 2, 0 );
					if( bSelected )
						rcItem.InflateRect( 2, bFirstItem ? 0 : 2, 2, bLastItem ? 0 : 2 );
					VERIFY( _bmp1.FromSurface( dc.m_hDC, rcItem ) );
					VERIFY(
						_bmp2.CreateRotated9xStack(
							_bmp1,
							90,
							1,
							rcItem.Width(),
							rcItem.Height(),
							false,
							false
							)
						);
					HBITMAP hBmp = _bmp2.CreateBitmap( &pClrSurface );
					ASSERT( hBmp != NULL && pClrSurface != NULL );
					_bmp.Attach( hBmp );
					VERIFY( dcX.CreateCompatibleDC( NULL ) );
					pOldBmp = dcX.SelectObject( &_bmp );
					CRect rcItemX( 0, 0, rcItem.Height(), rcItem.Width() );
					VERIFY( 
						g_PaintManager.m_UxTheme.DrawBackground(
							hWndOpenTheme,
							dcX.GetSafeHdc(), 
							nPartID, 
							nStateID, 
							&rcItemX, 
							&rcItemX
							) == S_OK
						);
					dcX.SelectObject( pOldBmp );
					_bmp2.Empty();
					VERIFY( _bmp2.FromBitmap( hBmp ) );
					_bmp1.Empty();
					VERIFY(
						_bmp1.CreateRotated9xStack(
							_bmp2,
							270,
							1,
							rcItem.Height(),
							rcItem.Width(),
							false,
							false
							)
						);
					_bmp1.Draw( dc.m_hDC, rcItem );
				}
				else
				{
					if( g_PaintManager.m_bIsWinVista && eTO == __ETO_RIGHT )
						rcItem.DeflateRect( -2, 0, 2, 0 );
					if( bSelected )
						rcItem.InflateRect( 2, bFirstItem ? 0 : 2, 2, bLastItem ? 0 : 2 );
					VERIFY( _bmp1.FromSurface( dc.m_hDC, rcItem ) );
					if( eTO != __ETO_LEFT )
					{
						VERIFY(
							_bmp2.CreateRotated9xStack(
								_bmp1,
								270,
								1,
								rcItem.Width(),
								rcItem.Height(),
								false,
								false
								)
							);
					}
					else
						_bmp2 = _bmp1;
					HBITMAP hBmp = _bmp2.CreateBitmap( &pClrSurface );
					ASSERT( hBmp != NULL && pClrSurface != NULL );
					_bmp.Attach( hBmp );
					VERIFY( dcX.CreateCompatibleDC( NULL ) );
					pOldBmp = dcX.SelectObject( &_bmp );
					CRect rcItemX( 0, 0, rcItem.Height(), rcItem.Width() );
					VERIFY( 
						g_PaintManager.m_UxTheme.DrawBackground(
							hWndOpenTheme,
							dcX.GetSafeHdc(), 
							nPartID, 
							nStateID, 
							&rcItemX, 
							&rcItemX
							) == S_OK
						);
					dcX.SelectObject( pOldBmp );
					_bmp2.Empty();
					VERIFY( _bmp2.FromBitmap( hBmp ) );
					_bmp1.Empty();
					if( eTO != __ETO_LEFT )
					{
						VERIFY(
							_bmp1.CreateRotated9xStack(
								_bmp2,
								90,
								1,
								rcItem.Height(),
								rcItem.Width(),
								false,
								false
								)
							);
					}
					else
						_bmp1 = _bmp2;
					if( clrColorizeTabShape != COLORREF(-1L) )
					{
						_bmp1.Make32();
						_bmp1.AdjustHLS( COLORREF(-1L), COLORREF(-1L), 0.0, -0.5 );
						_bmp1.MakeMono( clrColorizeTabShape );
						_bmp1.AlphaBlend( dc.m_hDC, rcItem, 64 );
					}
					else
						_bmp1.Draw( dc.m_hDC, rcItem );
				}
			} // else if( eTO == __ETO_TOP || eTO == __ETO_BOTTOM )
			
			if( _bmp.GetSafeHandle() != NULL )
				_bmp.DeleteObject();
			
			if( dcX.GetSafeHdc() != NULL )
				dcX.DeleteDC();

			g_PaintManager.m_UxTheme.CloseThemeData();

		} // if( g_PaintManager.m_UxTheme.OpenThemeData( ...
	}
	else // if(	g_PaintManager.m_UxTheme.IsControlsThemed() )
	{
		POINT arrPointsBorders[4]	= { {0,0}, {0,0}, {0,0}, {0,0} };
		if( eTO == __ETO_TOP || eTO == __ETO_BOTTOM )
		{
			if( eTO == __ETO_TOP )
			{
				rcItem.OffsetRect( 0, 2 );
				if( bSelected )
					rcItem.InflateRect(
						bFirstItem ? 0 : 2,
						2,
						bLastItem ? 0 : 2,
						-2
						);

				arrPointsBorders[0] = CPoint(rcItem.left,	rcItem.bottom );
				arrPointsBorders[1] = CPoint(rcItem.left,	rcItem.top );
				arrPointsBorders[2] = CPoint(rcItem.right,	rcItem.top );
				arrPointsBorders[3] = CPoint(rcItem.right,	rcItem.bottom );

				if( bSelected || bGroupedMode )
				{
					arrPointsBorders[0].y += 1;
					arrPointsBorders[3].y += 1;
				}
			}
			else
			{
				if( bSelected )
					rcItem.InflateRect(
						bFirstItem ? 0 : 2,
						0,
						bLastItem ? 0 : 2,
						2
						);
				
				rcItem.bottom -= 3;
				arrPointsBorders[0] = CPoint(rcItem.left,	rcItem.top );
				arrPointsBorders[1] = CPoint(rcItem.left,	rcItem.bottom );
				arrPointsBorders[2] = CPoint(rcItem.right,	rcItem.bottom );
				arrPointsBorders[3] = CPoint(rcItem.right,	rcItem.top - 1 );

				if( bSelected || bGroupedMode )
				{
					arrPointsBorders[0].y -= 1;
					arrPointsBorders[3].y -= 1;
				}
			}
		} 
		else
		{
			if( eTO == __ETO_LEFT )
			{
				rcItem.OffsetRect( 2, 0 );
				if( bSelected )
					rcItem.InflateRect(
						2,
						bFirstItem ? 0 : 2,
						2,
						bLastItem ? 0 : 2
						);

				arrPointsBorders[0] = CPoint(rcItem.right,	rcItem.top );
				arrPointsBorders[1] = CPoint(rcItem.left,	rcItem.top );
				arrPointsBorders[2] = CPoint(rcItem.left,	rcItem.bottom );
				arrPointsBorders[3] = CPoint(rcItem.right,	rcItem.bottom );

				if( bSelected || bGroupedMode )
				{
					arrPointsBorders[0].x += 1;
					arrPointsBorders[3].x += 1;
				}
			}
			else
			{
				if( bSelected )
					rcItem.InflateRect(
						2,
						bFirstItem ? 0 : 2,
						2,
						bLastItem ? 0 : 2
						);
				
				rcItem.right -= 3;
				arrPointsBorders[0] = CPoint(rcItem.left,		rcItem.top );
				arrPointsBorders[1] = CPoint(rcItem.right,		rcItem.top );
				arrPointsBorders[2] = CPoint(rcItem.right,		rcItem.bottom );
				arrPointsBorders[3] = CPoint(rcItem.left - 1,	rcItem.bottom );

				if( bSelected || bGroupedMode )
				{
					arrPointsBorders[0].x -= 1;
					arrPointsBorders[3].x -= 1;
				}
			}
		}

		CRgn rgnBk;
		VERIFY( rgnBk.CreatePolygonRgn( arrPointsBorders, 4, ALTERNATE ) );
		if(		bSelected 
			||	( bHover && bGroupedMode )
			)
		{
			COLORREF clrBrushBk = RGB(252,252,254);
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
		if(		pHelperSrc != NULL
			&&	clrForceTabBk != COLORREF(-1L)
			&&	(	bDetectedDynTPC
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
				||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
				)
			)
			clrBrushBk = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
			if(		pHelperSrc != NULL
				&&	clrForceTabBk != COLORREF(-1L)
				&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
				&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
				)
				clrBrushBk = clrForceTabBk;
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
			CBrush brushBk( clrBrushBk );
			dc.FillRgn( &rgnBk, &brushBk );
		}

		// draw item border 
		CPen pen(PS_SOLID, 1, GetColor( COLOR_3DSHADOW, this ) );
		CPen * pOldPen = dc.SelectObject( &pen );

		for( int i = 0 ; i < sizeof(arrPointsBorders)/sizeof(arrPointsBorders[0]) - 1; i++ )
		{
			dc.MoveTo( arrPointsBorders[i] );
			dc.LineTo( arrPointsBorders[i + 1] );
		}

		dc.SelectObject( pOldPen );

	} // if( g_PaintManager.m_UxTheme.IsControlsThemed() )

COLORREF clrText = clrForceText;
	if( clrText == COLORREF(-1L) )
		clrText =
			GetColor(
				bEnabled ? COLOR_BTNTEXT : CLR_TEXT_DISABLED,
				pHelperSrc,
				lParam
				);

#define __EXTTAB_INDENT_TOP		2
#define __EXTTAB_INDENT_BOTTOM	2
#define __EXTTAB_INDENT_LEFT	2
#define __EXTTAB_INDENT_RIGHT	2

	rcItem.DeflateRect(
		bHorz 
			? __EXTTAB_INDENT_LEFT 
			: __EXTTAB_INDENT_TOP,
		bHorz 
			? __EXTTAB_INDENT_TOP 
			: __EXTTAB_INDENT_LEFT,
		bHorz 
			? __EXTTAB_INDENT_RIGHT 
			: __EXTTAB_INDENT_TOP,
		bHorz 
			? __EXTTAB_INDENT_BOTTOM 
			: __EXTTAB_INDENT_RIGHT
		);
		
CSize _sizeIcon( 0, 0 );
	if( bDrawIcon )
	{
		_sizeIcon = pIcon->GetSize();
		ASSERT( _sizeIcon.cx > 0 && _sizeIcon.cy > 0 );
	}

CRect rcItemForIcon( rcItem );
	if(		bDrawIcon
		&&	_sizeIcon.cx > 0
		&&	_sizeIcon.cy > 0
		)
	{
//		rcItemForIcon.DeflateRect(
//			bHorz ? 0 : ( rcItem.Width() - _sizeIcon.cx),
//			bHorz ? ( rcItem.Height() - _sizeIcon.cy) : 0
//			);
		rcItemForIcon.right = rcItemForIcon.left + _sizeIcon.cx;
		rcItemForIcon.bottom = rcItemForIcon.top + _sizeIcon.cy;
		rcItemForIcon.OffsetRect(
			bHorz ? 0 : ((rcItem.Width() - _sizeIcon.cx) / 2),
			bHorz ? ((rcItem.Height() - _sizeIcon.cy) / 2) : 0
			);
		if( rcItemForIcon.left < (rcItem.left+1) )
			rcItemForIcon.left = (rcItem.left+1);
		if( rcItemForIcon.right < (rcItem.right-1) )
			rcItemForIcon.right = (rcItem.right-1);
		if( rcItemForIcon.top < (rcItem.top+1) )
			rcItemForIcon.top = (rcItem.top+1);
		if( rcItemForIcon.bottom < (rcItem.bottom-1) )
			rcItemForIcon.bottom = (rcItem.bottom-1);
	}

CExtSafeString sItemText( (sText == NULL) ? _T("") : sText );

// IMPORTANT:  the rcText calculation fixed by Genka
CRect rcText(
		rcItem.left // rcItemForIcon.left
			+	(	bHorz
					? (_sizeIcon.cx +
						((_sizeIcon.cx > 0) ? __EXTTAB_MARGIN_ICON2TEXT_X : 0)
						)
					: 0
				),
		rcItem.top // rcItemForIcon.left
			+	(	bHorz
					? 0
					: (_sizeIcon.cy +
						((_sizeIcon.cy > 0) ? __EXTTAB_MARGIN_ICON2TEXT_Y : 0)
						)
				),
		rcItem.right,
		rcItem.bottom
		);
	if( !bHorz )
	{
		if( pIconTabItemCloseButton != NULL )
			rcText.bottom = min( rcText.bottom, rcTabItemCloseButton.top );
	} // if( !bHorz )
	else
	{
		if( pIconTabItemCloseButton != NULL )
			rcText.right = min( rcText.right, rcTabItemCloseButton.left );
	}

bool bDrawText = ( ( ! sItemText.IsEmpty() ) && rcText.Width() > 0 && rcText.Height() > 0 ) ? true : false;

INT nIconAlignment = __ALIGN_HORIZ_LEFT | __ALIGN_VERT_TOP;
	if( (!bDrawText) && !( bGroupedMode && (!bInGroupActive) ) )
	{
		if( bCenteredText )
			nIconAlignment = __ALIGN_HORIZ_CENTER|__ALIGN_VERT_CENTER;
		else
			rcItemForIcon.OffsetRect(
				bHorz ? (rcItem.Width() - _sizeIcon.cx)/2 : 0,
				bHorz ? 0 : (rcItem.Height() - _sizeIcon.cy)/2
				);
	}

	if( bDrawIcon )
	{
		if(		(bHorz && rcItemForIcon.Width() >= _sizeIcon.cx )
			||	(!bHorz && rcItemForIcon.Height() >= _sizeIcon.cy)
			)
		{
			PaintIcon(
				dc,
				true,
				pIcon,
				rcItemForIcon,
				false,
				bEnabled,
				false,
				nIconAlignment
				);
		}
	} // if( bDrawIcon )

	if( bDrawText )
	{ // if we have sense to paint text on tab item
		ASSERT( pFont != NULL );
		ASSERT( pFont->GetSafeHandle() != NULL );
		COLORREF clrOldText = dc.SetTextColor( clrText );
		INT nOldBkMode = dc.SetBkMode( TRANSPARENT );
		CFont * pOldFont = dc.SelectObject( pFont );
		CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
		if( ! bHorz )
			eLO = bInvertedVerticalMode ? CExtRichContentLayout::__ELOT_270_CW : CExtRichContentLayout::__ELOT_90_CW;
		UINT nFormat = DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS;
		if( bCenteredText )
			nFormat |= DT_CENTER;
		else
			nFormat |= DT_LEFT;
		if( bNoPrefix )
			nFormat |= DT_NOPREFIX;
		CExtRichContentLayout::stat_DrawText(
			CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
			dc.m_hDC, LPCTSTR(sItemText), sItemText.GetLength(), rcText, nFormat, 0
			);
		dc.SelectObject( pOldFont );
		dc.SetBkMode( nOldBkMode );
		dc.SetTextColor( clrOldText );
	} // if we have sense to paint text on tab item

	if( pIconTabItemCloseButton != NULL )
	{
		ASSERT( ! pIconTabItemCloseButton->IsEmpty() );
		if( dc.RectVisible( &rcTabItemCloseButton ) )
		{
			CRect _rcTabItemCloseButton = rcTabItemCloseButton;
			if( bHorz )
			{
				if( bTopLeft )
					_rcTabItemCloseButton.OffsetRect( 0, 2 );
			}
			else
			{
				if( bTopLeft )
					_rcTabItemCloseButton.OffsetRect( 2, 0 );
			}
			pIconTabItemCloseButton->Paint(
				g_PaintManager.GetPM(),
				dc.m_hDC,
				_rcTabItemCloseButton,
				ePaintStateITICB
				);
		}
	} // if( pIconTabItemCloseButton != NULL )
}

bool CExtPaintManagerStudio2008::QueryTabWndHoverChangingRedraw(
	const CExtTabWnd * pWndTab,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pWndTab );
	pWndTab;
	lParam;
	if(	! g_PaintManager.m_UxTheme.IsControlsThemed() )
		return false;
	return true;
}

void CExtPaintManagerStudio2008::TabWnd_AdjustTabAreaMetric( CExtTabWnd * pTabWnd, DWORD dwOrientation, LONG & nTabAreaMetric, LPARAM lParam )
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	pTabWnd; lParam;
	if( ( dwOrientation == __ETWS_ORIENT_BOTTOM || dwOrientation == __ETWS_ORIENT_RIGHT ) && ( pTabWnd->GetTabWndStyle() & __ETWS_GROUPED ) == 0 )
		nTabAreaMetric += 2;
}

void CExtPaintManagerStudio2008::TabWnd_MeasureItemAreaMargins(
	CExtTabWnd * pTabWnd,
	LONG & nSpaceBefore,
	LONG & nSpaceAfter,
	LONG & nSpaceOver
	)
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
	nSpaceBefore	= 0;
	nSpaceAfter		= 0;
	nSpaceOver		= 0;
bool bGroupedMode =
		(pTabWnd->GetTabWndStyle() & __ETWS_GROUPED) ? true : false;
	if(		(! g_PaintManager.m_UxTheme.IsControlsThemed()) 
		&&	(! bGroupedMode)
		)
		nSpaceOver = 2;
}

void CExtPaintManagerStudio2008::TabWnd_UpdateItemMeasure(
	CExtTabWnd * pTabWnd,
	CExtTabWnd::TAB_ITEM_INFO * pTii,
	CDC & dcMeasure,
	CSize & sizePreCalc
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTii );
	ASSERT( dcMeasure.GetSafeHdc() != NULL );
	ASSERT( pTii->GetTabWnd() == pTabWnd );
	pTii;
bool bGroupedMode = (pTabWnd->GetTabWndStyle() & __ETWS_GROUPED) ? true : false;
	if( bGroupedMode )
		return;
CSize szPart( 18, 18 );
 	if(	! g_PaintManager.m_UxTheme.IsControlsThemed() )
		szPart = CSize( 21, 21 );
	if( g_PaintManager.m_UxTheme.OpenThemeData( NULL, VSCLASS_TAB ) != NULL )
	{
		VERIFY(
			g_PaintManager.m_UxTheme.GetThemePartSize(
				dcMeasure.GetSafeHdc(), 
				TABP_TABITEM, 
				TIS_NORMAL, 
				NULL, 
				CExtUxTheme::__EXT_UX_TS_TRUE,
				&szPart
				) == S_OK
			);
		g_PaintManager.m_UxTheme.CloseThemeData();
	}
INT nPartHeight = szPart.cy;
	if( pTabWnd->OrientationIsHorizontal() )
	{
		sizePreCalc.cy = max( sizePreCalc.cy, nPartHeight );
		sizePreCalc.cx += 2*2;
	}
	else
	{
		sizePreCalc.cx = max( sizePreCalc.cx, nPartHeight );
		sizePreCalc.cy += 2*2;
	}
}

bool CExtPaintManagerStudio2008::TabWnd_GetParentSizingMargin(
	INT & nMargin,
	DWORD dwOrientation,
	CExtTabWnd * pTabWnd
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTabWnd );
	if(		(! g_PaintManager.m_UxTheme.IsControlsThemed() )
		||	pTabWnd->_IsCustomLayoutTabWnd() 
		)
		return CExtPaintManager::TabWnd_GetParentSizingMargin( nMargin, dwOrientation, pTabWnd );
	nMargin = 1;
	return true;
}

#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

//////////////////////////////////////////////////////////////////////////
// CExtPaintManagerStudio2010
//////////////////////////////////////////////////////////////////////////

CExtPaintManagerStudio2010::CExtPaintManagerStudio2010()
{
}

CExtPaintManagerStudio2010::~CExtPaintManagerStudio2010()
{
}

void CExtPaintManagerStudio2010::InitTranslatedColors()
{
	ASSERT_VALID( this );
	CExtPaintManagerStudio2005::InitTranslatedColors();
/*
	if( stat_GetBPP() > 8 )
	{
	}
	else
	{
	}
*/

COLORREF clr3dHighlight = RGB(233,236,238), clr3dFace = RGB(216,222,230), clr3dShadow = RGB(155,167,183), clr3dDkShadow = RGB(73,91,102);
COLORREF clrBtnText = RGB(27,41,62), clrTextDisabled = RGB(144,144,144), clrXpHighlight = RGB(255,236,181), clrXpHighlightBorder = RGB(229,195,101);
COLORREF clrSeparator = RGB(133,145,162);


INT nIdxClr3dHiglight = InstallColor( clr3dHighlight );
	m_colors[COLOR_3DHIGHLIGHT] = clr3dHighlight;
	m_mapColorTranslate[COLOR_3DHIGHLIGHT]					= nIdxClr3dHiglight;
		m_mapColorTranslate[CLR_3DLIGHT_OUT]					= nIdxClr3dHiglight;
		m_mapColorTranslate[CLR_3DLIGHT_IN]						= nIdxClr3dHiglight;
		m_mapColorTranslate[CLR_3DLIGHT_DISABLED]				= nIdxClr3dHiglight;
		m_mapColorTranslate[CLR_3DHILIGHT_OUT]					= nIdxClr3dHiglight;
		m_mapColorTranslate[CLR_3DHILIGHT_IN]					= nIdxClr3dHiglight;
		m_mapColorTranslate[CLR_3DHILIGHT_DISABLED]				= nIdxClr3dHiglight;
INT nIdxClr3dFace = InstallColor( clr3dFace );
	m_colors[COLOR_3DFACE] = clr3dFace;
	m_mapColorTranslate[COLOR_3DFACE]						= nIdxClr3dFace;
		m_mapColorTranslate[CLR_3DFACE_OUT]						= nIdxClr3dFace;
		m_mapColorTranslate[CLR_3DFACE_IN]						= nIdxClr3dFace;
		m_mapColorTranslate[CLR_3DFACE_DISABLED]				= nIdxClr3dFace;
INT nIdxClr3dShadow = InstallColor( clr3dShadow );
	m_colors[COLOR_3DSHADOW] = clr3dShadow;
	m_mapColorTranslate[COLOR_3DSHADOW]						= nIdxClr3dShadow;
		m_mapColorTranslate[CLR_3DSHADOW_OUT]					= nIdxClr3dShadow;
		m_mapColorTranslate[CLR_3DSHADOW_IN]					= nIdxClr3dShadow;
		m_mapColorTranslate[CLR_3DSHADOW_DISABLED]				= nIdxClr3dShadow;
INT nIdxClr3dDkShadow = InstallColor( clr3dDkShadow );
	m_colors[COLOR_3DDKSHADOW] = clr3dDkShadow;
	m_mapColorTranslate[COLOR_3DDKSHADOW]					= nIdxClr3dDkShadow;
		m_mapColorTranslate[CLR_3DDKSHADOW_OUT]					= nIdxClr3dDkShadow;
		m_mapColorTranslate[CLR_3DDKSHADOW_IN]					= nIdxClr3dDkShadow;
		m_mapColorTranslate[CLR_3DDKSHADOW_DISABLED]			= nIdxClr3dDkShadow;
INT nIdxClrBtnTextNormal = InstallColor( clrBtnText );
INT nIdxClrBtnTextDisabled = InstallColor( clrTextDisabled );
	m_colors[COLOR_BTNTEXT] = clrBtnText;
	m_colors[COLOR_MENUTEXT] = clrBtnText;
	m_colors[COLOR_GRAYTEXT] = clrTextDisabled;
	m_mapColorTranslate[COLOR_MENUTEXT]						= nIdxClrBtnTextNormal;
		m_mapColorTranslate[CLR_MENUTEXT_IN]					= nIdxClrBtnTextNormal;
		m_mapColorTranslate[CLR_MENUTEXT_OUT]					= nIdxClrBtnTextNormal;
		m_mapColorTranslate[CLR_MENUTEXT_DISABLED]				= nIdxClrBtnTextDisabled;
	m_mapColorTranslate[COLOR_BTNTEXT]						= nIdxClrBtnTextNormal;
		m_mapColorTranslate[XPCLR_PUSHEDHOVERTEXT]				= nIdxClrBtnTextNormal;
		m_mapColorTranslate[CLR_TEXT_IN]						= nIdxClrBtnTextNormal;
		m_mapColorTranslate[CLR_TEXT_OUT]						= nIdxClrBtnTextNormal;
		m_mapColorTranslate[XPCLR_PUSHEDHOVERTEXT]				= nIdxClrBtnTextNormal;
	m_mapColorTranslate[COLOR_GRAYTEXT]						= nIdxClrBtnTextDisabled;
		m_mapColorTranslate[CLR_TEXT_DISABLED]					= nIdxClrBtnTextDisabled;
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_NORMAL]		= nIdxClr3dDkShadow;
	m_mapColorTranslate[XPCLR_TEXT_FIELD_BORDER_DISABLED]	= nIdxClr3dDkShadow;
	m_mapColorTranslate[XPCLR_RARELY_BORDER]				= nIdxClr3dDkShadow;

	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_TOP]		= nIdxClr3dHiglight;
	m_mapColorTranslate[_2003CLR_TBB_BK_COMBINED_BOTTOM]	= nIdxClr3dHiglight;
	m_mapColorTranslate[_2003CLR_MLA_NORM_LEFT]				= nIdxClr3dHiglight;
	m_mapColorTranslate[_2003CLR_MLA_NORM_MIDDLE]			= nIdxClr3dHiglight;
	m_mapColorTranslate[_2003CLR_MLA_NORM_RIGHT]			= nIdxClr3dHiglight;
COLORREF clrRarelyMenuGutter = stat_RGB_Blend( clr3dHighlight, clr3dShadow, 128 );
INT nIdxClrRarelyMenuGutter = InstallColor( clrRarelyMenuGutter );
	m_mapColorTranslate[_2003CLR_MLA_RARELY_LEFT]			= nIdxClrRarelyMenuGutter;
	m_mapColorTranslate[_2003CLR_MLA_RARELY_MIDDLE]			= nIdxClrRarelyMenuGutter;
	m_mapColorTranslate[_2003CLR_MLA_RARELY_RIGHT]			= nIdxClrRarelyMenuGutter;
	m_mapColorTranslate[XPCLR_MENU_BORDER]					= nIdxClrRarelyMenuGutter;

INT nIdxClrXpHighlight = InstallColor( clrXpHighlight );
INT nIdxClrXpHighlightBorder = InstallColor( clrXpHighlightBorder );
	m_mapColorTranslate[XPCLR_HILIGHT]						= nIdxClrXpHighlight;
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER]				= nIdxClrXpHighlightBorder;
	m_mapColorTranslate[XPCLR_HILIGHT_BORDER_SELECTED]		= nIdxClrXpHighlightBorder;

	m_mapColorTranslate[XPCLR_3DFACE_DARK]					= nIdxClr3dShadow;
	m_mapColorTranslate[XPCLR_3DFACE_NORMAL]				= nIdxClr3dFace;

INT nIdxClrSearator = InstallColor( clrSeparator );
	m_mapColorTranslate[XPCLR_SEPARATOR]					= nIdxClrSearator;

	m_arrClrMenuItemSelectionAreaGradient[0] = RGB(255,251,240); // top
	m_arrClrMenuItemSelectionAreaGradient[1] = RGB(255,245,211); // middle1
	m_arrClrMenuItemSelectionAreaGradient[2] = RGB(255,236,181); // middle2
	m_arrClrMenuItemSelectionAreaGradient[3] = RGB(255,236,181); // bottom
	m_arrClrMenuItemSelectionAreaGradient[4] = RGB(229,195,101); // border (same as clrHighlightBorder here)
		m_mapColorTranslate[_2003CLR_BTN_HOVER_LEFT]			= InstallColor( m_arrClrMenuItemSelectionAreaGradient[0] );
		m_mapColorTranslate[_2003CLR_BTN_HOVER_RIGHT]			= InstallColor( m_arrClrMenuItemSelectionAreaGradient[1] );
		m_mapColorTranslate[_2003CLR_BTN_PRESSED_LEFT]			= InstallColor( m_arrClrMenuItemSelectionAreaGradient[0] );
		m_mapColorTranslate[_2003CLR_BTN_PRESSED_RIGHT]			= InstallColor( m_arrClrMenuItemSelectionAreaGradient[1] );
		m_mapColorTranslate[_2003CLR_BTN_HP_LEFT]				= InstallColor( m_arrClrMenuItemSelectionAreaGradient[4] );
		m_mapColorTranslate[_2003CLR_BTN_HP_RIGHT]				= InstallColor( m_arrClrMenuItemSelectionAreaGradient[4] );
	m_bmpMenuItemSelectionArea.Empty();
	{ // BLOCK-BEGIN: generating m_bmpMenuItemSelectionArea
		static const SIZE g_sizeBmpMenuItemSelectionArea = { 48, 34 };
		VERIFY( m_bmpMenuItemSelectionArea.FromColor( m_arrClrMenuItemSelectionAreaGradient[4], g_sizeBmpMenuItemSelectionArea ) );
		m_bmpMenuItemSelectionArea.GradientRect( m_arrClrMenuItemSelectionAreaGradient[1], m_arrClrMenuItemSelectionAreaGradient[0], true, CRect(1,1,g_sizeBmpMenuItemSelectionArea.cx-1,g_sizeBmpMenuItemSelectionArea.cy/2) );
		m_bmpMenuItemSelectionArea.GradientRect( m_arrClrMenuItemSelectionAreaGradient[3], m_arrClrMenuItemSelectionAreaGradient[2], true, CRect(1,g_sizeBmpMenuItemSelectionArea.cy/2,g_sizeBmpMenuItemSelectionArea.cx-1,g_sizeBmpMenuItemSelectionArea.cy-1) );
		VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 0, 0, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(0) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 0, 1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 1, 0, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
				VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 1, 1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
		VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-1, 0, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(0) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-2, 0, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-1, 1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
				VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-2, 1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
		VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 0, g_sizeBmpMenuItemSelectionArea.cy-1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(0) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 1, g_sizeBmpMenuItemSelectionArea.cy-1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 0, g_sizeBmpMenuItemSelectionArea.cy-2, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
				VERIFY( m_bmpMenuItemSelectionArea.SetPixel( 1, g_sizeBmpMenuItemSelectionArea.cy-2, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
		VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-1, g_sizeBmpMenuItemSelectionArea.cy-1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(0) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-2, g_sizeBmpMenuItemSelectionArea.cy-1, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
			VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-1, g_sizeBmpMenuItemSelectionArea.cy-2, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
				VERIFY( m_bmpMenuItemSelectionArea.SetPixel( g_sizeBmpMenuItemSelectionArea.cx-2, g_sizeBmpMenuItemSelectionArea.cy-2, m_arrClrMenuItemSelectionAreaGradient[4], BYTE(128) ) );
	} // BLOCK-END: generating m_bmpMenuItemSelectionArea

INT x, y;
	m_clrDockerBkgndTop    = RGB(43,59,88);
	m_clrDockerBkgndMiddle = RGB(53,73,106);
	m_clrDockerBkgndBottom = RGB(42,58,87);
	m_clrDockerBkgndDot1   = RGB(41,57,85);
	m_clrDockerBkgndDot2   = RGB(53,73,106);
	m_bmpDockerBkgndDots.Empty();
static SIZE g_sizeDockerBkgndBmpMultiplier = { 200, 200 };
CSize sizeBmpDockerBkgndDots( 4*g_sizeDockerBkgndBmpMultiplier.cx, 4*g_sizeDockerBkgndBmpMultiplier.cy );
	if( m_bmpDockerBkgndDots.FromColor( RGB(0,0,0), sizeBmpDockerBkgndDots, BYTE(0) ) )
	{
		int x, y, xpx, ypx;
		for( y = 0, ypx = 0; y < g_sizeDockerBkgndBmpMultiplier.cy; y++, ypx += 4 )
		{
			for( x = 0, xpx = 0; x < g_sizeDockerBkgndBmpMultiplier.cx; x++, xpx += 4 )
			{
				VERIFY( m_bmpDockerBkgndDots.SetPixel( xpx + 0, ypx + 0, m_clrDockerBkgndDot1, 255 ) );
				VERIFY( m_bmpDockerBkgndDots.SetPixel( xpx + 0, ypx + 1, m_clrDockerBkgndDot2, 255 ) );
				VERIFY( m_bmpDockerBkgndDots.SetPixel( xpx + 2, ypx + 2, m_clrDockerBkgndDot1, 255 ) );
				VERIFY( m_bmpDockerBkgndDots.SetPixel( xpx + 2, ypx + 3, m_clrDockerBkgndDot2, 255 ) );
			}
		}
	}
	m_clrOuterDockBarBkgnd            = RGB(156,170,193);

	m_clrMenuBarGriadient1            = RGB(202,211,226);
	m_clrMenuBarGriadient2            = RGB(176,187,207);

	m_arrClrBarCaptionActive[0]       = RGB(255,252,242);
	m_arrClrBarCaptionActive[1]       = RGB(255,244,209);
	m_arrClrBarCaptionActive[2]       = RGB(255,237,186);
	m_arrClrBarCaptionActive[3]       = RGB(255,232,166);
	m_arrClrBarCaptionActive[4]       = RGB(255,232,166);
	m_arrClrBarCaptionInactive[0]     = RGB(77,96,130);
	m_arrClrBarCaptionInactive[1]     = RGB(69,89,124);
	m_arrClrBarCaptionInactive[2]     = RGB(69,89,124);
	m_arrClrBarCaptionInactive[3]     = RGB(69,89,124);
	m_arrClrBarCaptionInactive[4]     = RGB(61,82,119);
	m_clrCaptBtnBorder                = RGB(229,195,101);
	m_clrCaptBtnGlyphBkgndHover       = RGB(255,252,244);
	m_clrCaptBtnGlyphBkgndPressed     = RGB(255,232,166);
	m_clrCaptBtnGlyphDisabled         = RGB(192,192,192);
	m_clrCaptBtnGlyphInactiveNormal   = RGB(206,212,221);
	m_clrCaptBtnGlyphActiveNormal     = RGB(0,0,0);
	m_clrCaptBtnGlyphHover            = RGB(0,0,0);
	m_clrCaptBtnGlyphPressed          = RGB(0,0,0);
	m_clrCaptBtnTextNormal            = RGB(255,255,255);
	m_clrCaptBtnTextActive            = RGB(0,0,0);
	m_clrDockingFrameBorder           = RGB(53,73,106);
INT nCaptGenMode;
	for( nCaptGenMode = 0; nCaptGenMode < 2; nCaptGenMode ++ )
	{
		COLORREF * arrCaptColors = ( nCaptGenMode == 0 ) ? m_arrClrBarCaptionActive : m_arrClrBarCaptionInactive;
		CExtBitmap & bmpCapt = ( nCaptGenMode == 0 ) ? m_bmpBarCaptionActive : m_bmpBarCaptionInactive;
		bmpCapt.Empty();
		CWindowDC dcDesktop(NULL);
		CDC dc;
		if( ! dc.CreateCompatibleDC( &dcDesktop ) )
			continue;
		static const SIZE g_sizeBmpCapt = { 64, 13 };
		static const CRect g_rcTop   ( 0, 0,                        g_sizeBmpCapt.cx, g_sizeBmpCapt.cy / 2     );
		static const CRect g_rcMiddle( 0, g_sizeBmpCapt.cy / 2,     g_sizeBmpCapt.cx, g_sizeBmpCapt.cy / 2 + 1 );
		static const CRect g_rcBottom( 0, g_sizeBmpCapt.cy / 2 + 1, g_sizeBmpCapt.cx, g_sizeBmpCapt.cy         );
		BITMAPINFOHEADER bih; bih.biSize = sizeof(BITMAPINFOHEADER);
		bih.biWidth = g_sizeBmpCapt.cx; bih.biHeight = g_sizeBmpCapt.cy; bih.biPlanes = 1; bih.biBitCount = 32; bih.biCompression = BI_RGB;
		bih.biSizeImage = bih.biWidth*bih.biHeight; bih.biXPelsPerMeter = 0; bih.biYPelsPerMeter = 0; bih.biClrUsed = 0; bih.biClrImportant = 0;
		COLORREF * pClrSurface = NULL;
		HBITMAP hDIB = ::CreateDIBSection( dcDesktop.GetSafeHdc(), (LPBITMAPINFO)&bih, DIB_RGB_COLORS, (void **)&pClrSurface, NULL, NULL );
		if( hDIB == NULL )
			continue;
		ASSERT( pClrSurface != NULL );
		CBitmap bmp; // works as destructor for hDIB
		bmp.Attach( hDIB );
		CBitmap * pOldBmp = dc.SelectObject( &bmp );
		int nOldStretchBltMode = ::GetStretchBltMode( dc.m_hDC );
		::SetStretchBltMode( dc.m_hDC, ( g_PaintManager.m_bIsWinNT ) ? HALFTONE : COLORONCOLOR );
		stat_PaintGradientRect( dc, g_rcTop, arrCaptColors[1], arrCaptColors[0], true );
		dc.FillSolidRect( &g_rcMiddle, arrCaptColors[2] );
		stat_PaintGradientRect( dc, g_rcBottom, arrCaptColors[4], arrCaptColors[3], true );
		::SetStretchBltMode( dc.m_hDC, nOldStretchBltMode );
		dc.SelectObject( pOldBmp );
		if( ! bmpCapt.FromBitmap( hDIB ) )
			continue;
		if( ! bmpCapt.Make32() )
			continue;
		static INT g_nAlphaCornerMiddle = 128, g_nAlphaCornerLight = 64;
		bmpCapt.SetPixel( 0, 0, bmpCapt.GetPixel( 0, 0 ), g_nAlphaCornerLight );
		bmpCapt.SetPixel( 0, 1, bmpCapt.GetPixel( 0, 1 ), g_nAlphaCornerMiddle );
		bmpCapt.SetPixel( 1, 0, bmpCapt.GetPixel( 1, 0 ), g_nAlphaCornerMiddle );
		bmpCapt.SetPixel( g_sizeBmpCapt.cx - 1, 0, bmpCapt.GetPixel( g_sizeBmpCapt.cx - 1, 0 ), g_nAlphaCornerLight );
		bmpCapt.SetPixel( g_sizeBmpCapt.cx - 1, 1, bmpCapt.GetPixel( g_sizeBmpCapt.cx - 1, 1 ), g_nAlphaCornerMiddle );
		bmpCapt.SetPixel( g_sizeBmpCapt.cx - 2, 0, bmpCapt.GetPixel( g_sizeBmpCapt.cx - 2, 0 ), g_nAlphaCornerMiddle );
	} // for( nCaptGenMode = 0; nCaptGenMode < 2; nCaptGenMode ++ )

	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_DARK]     = InstallColor( RGB(96,114,140) );
	m_mapColorTranslate[_2003CLR_GRIPPER_DOT_LIGHT]    = InstallColor( RGB(188,199,216) );

	m_clrToolbarBkgnd  = RGB(188,199,216);
	m_clrToolbarBorder = RGB(213,220,232);
static const SIZE g_sizeBmpToolBarBkgnd = { 10, 10 };
	m_bmpToolBarBkgnd.Empty();
	VERIFY( m_bmpToolBarBkgnd.FromColor( m_clrToolbarBkgnd, g_sizeBmpToolBarBkgnd ) );
	m_bmpToolBarBkgnd.Make32();
	m_bmpToolBarBkgnd.AlphaFrame( CRect(0,0,g_sizeBmpToolBarBkgnd.cx,g_sizeBmpToolBarBkgnd.cy), CRect(1,1,1,1), BYTE(0) );
	for( x = 1; x <= ( g_sizeBmpToolBarBkgnd.cx - 2 ); x++ )
	{
		VERIFY( m_bmpToolBarBkgnd.SetPixel( x, 1, m_clrToolbarBorder, BYTE(255) ) );
		VERIFY( m_bmpToolBarBkgnd.SetPixel( x, g_sizeBmpToolBarBkgnd.cy - 2, m_clrToolbarBorder, BYTE(255) ) );
	}
	for( y = 1; y <= ( g_sizeBmpToolBarBkgnd.cy - 2 ); y++ )
	{
		VERIFY( m_bmpToolBarBkgnd.SetPixel( 1, y, m_clrToolbarBorder, BYTE(255) ) );
		VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 2, y, m_clrToolbarBorder, BYTE(255) ) );
	}
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 1, 1, m_clrToolbarBkgnd, BYTE(0) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 1, g_sizeBmpToolBarBkgnd.cy - 2, m_clrToolbarBkgnd, BYTE(0) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 2, 1, m_clrToolbarBkgnd, BYTE(0) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 2, g_sizeBmpToolBarBkgnd.cy - 2, m_clrToolbarBkgnd, BYTE(0) ) );
COLORREF clrMergedBorderWidthInnerBkgnd = stat_RGB_Blend( m_clrToolbarBkgnd, m_clrToolbarBorder, 128 );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 2, 2, clrMergedBorderWidthInnerBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 2, g_sizeBmpToolBarBkgnd.cy - 3, clrMergedBorderWidthInnerBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 3, 2, clrMergedBorderWidthInnerBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 3, g_sizeBmpToolBarBkgnd.cy - 3, clrMergedBorderWidthInnerBkgnd, BYTE(255) ) );
COLORREF clrMergedBorderWidthOuterBkgnd = stat_RGB_Blend( m_clrToolbarBkgnd, m_clrToolbarBkgnd, 128 );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 1, 2, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 2, 1, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 1, g_sizeBmpToolBarBkgnd.cy - 3, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( 2, g_sizeBmpToolBarBkgnd.cy - 2, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 2, 2, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 3, 1, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 2, g_sizeBmpToolBarBkgnd.cy - 3, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );
	VERIFY( m_bmpToolBarBkgnd.SetPixel( g_sizeBmpToolBarBkgnd.cx - 3, g_sizeBmpToolBarBkgnd.cy - 2, clrMergedBorderWidthOuterBkgnd, BYTE(255) ) );

	m_clrTbExpHoverLight1    = RGB(255,252,243);
	m_clrTbExpHoverLight2    = RGB(255,243,206);
	m_clrTbExpHoverDark1     = RGB(255,236,181);
	m_clrTbExpHoverDark2     = RGB(255,236,181);
	m_clrTbExpPressedLight1  = RGB(255,232,166);
	m_clrTbExpPressedLight2  = RGB(255,232,166);
	m_clrTbExpPressedDark1   = RGB(255,232,166);
	m_clrTbExpPressedDark2   = RGB(255,232,166);
	m_clrTbExpGlyphNormal    = RGB(27,41,62);
	m_clrTbExpGlyphHover     = RGB(27,41,62);
	m_clrTbExpGlyphPressed   = RGB(27,41,62);
static const SIZE g_sizeBmpTbExpBtnH = { 12, 32 };
	VERIFY( m_bmpTbExpNormalH.FromColor( m_clrToolbarBorder, g_sizeBmpTbExpBtnH ) );
		VERIFY( m_bmpTbExpNormalH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, 0, m_clrToolbarBkgnd, BYTE(0) ) );
		VERIFY( m_bmpTbExpNormalH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, g_sizeBmpTbExpBtnH.cy - 1, m_clrToolbarBkgnd, BYTE(0) ) );
			VERIFY( m_bmpTbExpNormalH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, 1, m_clrToolbarBorder, BYTE(128) ) );
			VERIFY( m_bmpTbExpNormalH.SetPixel( g_sizeBmpTbExpBtnH.cx - 2, 0, m_clrToolbarBorder, BYTE(128) ) );
			VERIFY( m_bmpTbExpNormalH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, g_sizeBmpTbExpBtnH.cy - 2, m_clrToolbarBorder, BYTE(128) ) );
			VERIFY( m_bmpTbExpNormalH.SetPixel( g_sizeBmpTbExpBtnH.cx - 2, g_sizeBmpTbExpBtnH.cy - 1, m_clrToolbarBorder, BYTE(128) ) );
			m_bmpTbExpNormalH.AlphaRect( CRect(0,1,1,g_sizeBmpTbExpBtnH.cy-2), BYTE(0) );
			m_bmpTbExpNormalH.AlphaRect( CRect(1,2,2,g_sizeBmpTbExpBtnH.cy-3), BYTE(128) );
	m_bmpTbExpHoverH = m_bmpTbExpNormalH;
	m_bmpTbExpHoverH.GradientRect( m_clrTbExpHoverLight1, m_clrTbExpHoverLight2, true, CRect(0,0,g_sizeBmpTbExpBtnH.cx,g_sizeBmpTbExpBtnH.cy/2+1) );
	m_bmpTbExpHoverH.GradientRect( m_clrTbExpHoverDark1, m_clrTbExpHoverDark2, true, CRect(0,g_sizeBmpTbExpBtnH.cy/2,g_sizeBmpTbExpBtnH.cx,g_sizeBmpTbExpBtnH.cy) );
		VERIFY( m_bmpTbExpHoverH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, 0, m_clrToolbarBkgnd, BYTE(0) ) );
		VERIFY( m_bmpTbExpHoverH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, g_sizeBmpTbExpBtnH.cy - 1, m_clrToolbarBkgnd, BYTE(0) ) );
			VERIFY( m_bmpTbExpHoverH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, 1, m_clrTbExpHoverLight1, BYTE(128) ) );
			VERIFY( m_bmpTbExpHoverH.SetPixel( g_sizeBmpTbExpBtnH.cx - 2, 0, m_clrTbExpHoverLight1, BYTE(128) ) );
			VERIFY( m_bmpTbExpHoverH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, g_sizeBmpTbExpBtnH.cy - 2, m_clrTbExpHoverDark2, BYTE(128) ) );
			VERIFY( m_bmpTbExpHoverH.SetPixel( g_sizeBmpTbExpBtnH.cx - 2, g_sizeBmpTbExpBtnH.cy - 1, m_clrTbExpHoverDark2, BYTE(128) ) );
			m_bmpTbExpHoverH.AlphaRect( CRect(0,1,1,g_sizeBmpTbExpBtnH.cy-2), BYTE(0) );
			m_bmpTbExpHoverH.AlphaRect( CRect(1,2,2,g_sizeBmpTbExpBtnH.cy-3), BYTE(128) );
	m_bmpTbExpPressedH = m_bmpTbExpNormalH;
	m_bmpTbExpPressedH.GradientRect( m_clrTbExpPressedLight1, m_clrTbExpPressedLight2, true, CRect(0,0,g_sizeBmpTbExpBtnH.cx,g_sizeBmpTbExpBtnH.cy/2+1) );
	m_bmpTbExpPressedH.GradientRect( m_clrTbExpPressedDark1, m_clrTbExpPressedDark2, true, CRect(0,g_sizeBmpTbExpBtnH.cy/2,g_sizeBmpTbExpBtnH.cx,g_sizeBmpTbExpBtnH.cy) );
		VERIFY( m_bmpTbExpPressedH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, 0, m_clrToolbarBkgnd, BYTE(0) ) );
		VERIFY( m_bmpTbExpPressedH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, g_sizeBmpTbExpBtnH.cy - 1, m_clrToolbarBkgnd, BYTE(0) ) );
			VERIFY( m_bmpTbExpPressedH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, 1, m_clrTbExpPressedLight1, BYTE(128) ) );
			VERIFY( m_bmpTbExpPressedH.SetPixel( g_sizeBmpTbExpBtnH.cx - 2, 0, m_clrTbExpPressedLight1, BYTE(128) ) );
			VERIFY( m_bmpTbExpPressedH.SetPixel( g_sizeBmpTbExpBtnH.cx - 1, g_sizeBmpTbExpBtnH.cy - 2, m_clrTbExpPressedDark2, BYTE(128) ) );
			VERIFY( m_bmpTbExpPressedH.SetPixel( g_sizeBmpTbExpBtnH.cx - 2, g_sizeBmpTbExpBtnH.cy - 1, m_clrTbExpPressedDark2, BYTE(128) ) );
			m_bmpTbExpPressedH.AlphaRect( CRect(0,1,1,g_sizeBmpTbExpBtnH.cy-2), BYTE(0) );
			m_bmpTbExpPressedH.AlphaRect( CRect(1,2,2,g_sizeBmpTbExpBtnH.cy-3), BYTE(128) );
	VERIFY( m_bmpTbExpNormalV.CreateRotated9xStack( m_bmpTbExpNormalH, 90, 1, g_sizeBmpTbExpBtnH.cx, g_sizeBmpTbExpBtnH.cy, true, false ) );
	VERIFY( m_bmpTbExpHoverV.CreateRotated9xStack( m_bmpTbExpHoverH, 90, 1, g_sizeBmpTbExpBtnH.cx, g_sizeBmpTbExpBtnH.cy, true, false ) );
	VERIFY( m_bmpTbExpPressedV.CreateRotated9xStack( m_bmpTbExpPressedH, 90, 1, g_sizeBmpTbExpBtnH.cx, g_sizeBmpTbExpBtnH.cy, true, false ) );
	VERIFY( m_bmpTbExpNormalV.FlipHorizontal() );
	VERIFY( m_bmpTbExpHoverV.FlipHorizontal() );
	VERIFY( m_bmpTbExpPressedV.FlipHorizontal() );

#if (!defined __EXT_MFC_NO_TAB_CTRL)
	m_tabDefs[__ETI2010_DISABLED][0].m_clrText = __EXT_MFC_RGBA(192,192,192,255);
	m_tabDefs[__ETI2010_NORMAL][0].m_clrText =
		m_tabDefs[__ETI2010_NORMAL_GROUPPED][0].m_clrText =
		m_tabDefs[__ETI2010_HOVER][0].m_clrText =
		RGB(255,255,255);
	m_tabDefs[__ETI2010_SELECTED][0].m_clrText =
		m_tabDefs[__ETI2010_SELECTED_ACTIVE][0].m_clrText =
		m_tabDefs[__ETI2010_SELECTED_CB][0].m_clrText =
		RGB(0,0,0);

	m_tabDefs[__ETI2010_NORMAL_GROUPPED][0].m_clrGradient[0] = __EXT_MFC_RGBA(61,82,119,255);
	m_tabDefs[__ETI2010_NORMAL_GROUPPED][0].m_clrGradient[1] = __EXT_MFC_RGBA(76,95,129,255);
	m_tabDefs[__ETI2010_NORMAL_GROUPPED][0].m_clrBorder = __EXT_MFC_RGBA(54,78,111,255);
	m_tabDefs[__ETI2010_HOVER][0].m_clrGradient[0] = __EXT_MFC_RGBA(111,119,118,255);
	m_tabDefs[__ETI2010_HOVER][0].m_clrGradient[1] = __EXT_MFC_RGBA(79,95,116,255);
	m_tabDefs[__ETI2010_HOVER][0].m_clrBorder = __EXT_MFC_RGBA(155,167,183,255);
	m_tabDefs[__ETI2010_SELECTED][0].m_clrGradient[0] = __EXT_MFC_RGBA(251,252,252,255);
	m_tabDefs[__ETI2010_SELECTED][0].m_clrGradient[1] = __EXT_MFC_RGBA(215,220,228,255);
	m_tabDefs[__ETI2010_SELECTED][0].m_clrGradient[2] = __EXT_MFC_RGBA(206,212,223,255);
	m_tabDefs[__ETI2010_SELECTED][0].m_clrGradient[3] = __EXT_MFC_RGBA(206,212,223,255);
	m_tabDefs[__ETI2010_SELECTED_ACTIVE][0].m_clrGradient[0] = __EXT_MFC_RGBA(255,252,242,255);
	m_tabDefs[__ETI2010_SELECTED_ACTIVE][0].m_clrGradient[1] = __EXT_MFC_RGBA(255,243,207,255);
	m_tabDefs[__ETI2010_SELECTED_ACTIVE][0].m_clrGradient[2] = __EXT_MFC_RGBA(255,232,166,255);
	m_tabDefs[__ETI2010_SELECTED_ACTIVE][0].m_clrGradient[3] = __EXT_MFC_RGBA(255,232,166,255);
	m_tabDefs[__ETI2010_SELECTED_CB][0].m_clrGradient[0] = __EXT_MFC_RGBA(255,255,255,255);
	m_tabDefs[__ETI2010_SELECTED_CB][0].m_clrGradient[1] = __EXT_MFC_RGBA(255,255,255,255);

INT nTabDefIdx, nSideIdx;
	for( nTabDefIdx = 0; nTabDefIdx < INT(__ETI2010_COUNT); nTabDefIdx ++ )
		m_tabDefs[nTabDefIdx][0].GenerateBmp();
//	m_tabDefs[__ETI2010_NORMAL_GROUPPED][0].m_bmpTabItem.FlipVertical();

	for( nSideIdx = 1; nSideIdx <= 3; nSideIdx ++ )
	{
		for( nTabDefIdx = 0; nTabDefIdx < INT(__ETI2010_COUNT); nTabDefIdx ++ )
			m_tabDefs[nTabDefIdx][nSideIdx].CreateRotatedVersionFromTopOrientedVersion( m_tabDefs[nTabDefIdx][0], nSideIdx );
	}
#endif // (!defined __EXT_MFC_NO_TAB_CTRL)

#if (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )
INT nPnCaptionBkClrIdx = InstallColor( RGB( 169, 193, 222 ) );
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_LIGHT]       = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_DARK]        = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_LIGHT] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_HOVER_DARK]  = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_PANE_CAPTION_BOTTOM_LINE] = nPnCaptionBkClrIdx;
	m_mapColorTranslate[_2003CLR_PN_ITEM_LIGHT] = InstallColor( RGB(223, 226, 229) );
	m_mapColorTranslate[_2003CLR_PN_ITEM_DARK] = InstallColor( RGB(225, 227, 230) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_LIGHT] = InstallColor( RGB(246, 247, 248) );
	m_mapColorTranslate[_2003CLR_PN_GRIPPER_DARK] = InstallColor( RGB(218, 223, 231) );
	m_mapColorTranslate[_2003CLR_PN_BORDER] = InstallColor( RGB( 162, 166, 171 ) );
	m_mapColorTranslate[CLR_PN_CAPTION_TEXT] = InstallColor( RGB(101, 109, 117) ); // 30, 57, 91
#endif // (!defined __EXT_MFC_NO_PAGE_NAVIGATOR )

	// prepare scroll bar skinning
	m_SbSkinDataH.Empty();
	m_SbSkinDataV.Empty();
	// entire scroll bar background
CSize sizeSbPart2010( 32, 32 );
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA].FromGradient( m_clrMenuBarGriadient1, m_clrMenuBarGriadient2, true,  sizeSbPart2010 ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA].FromGradient( m_clrMenuBarGriadient2, m_clrMenuBarGriadient1, false, sizeSbPart2010 ) );
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA].Make32() );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA].Make32() );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, 0.2, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, 0.2, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, 0.1, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, 0.1, 0.0, NULL ) );
			
	// scroll bar's up/down/thumb buttons
	m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_BUTTON_UP] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA];
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_BUTTON_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_UP] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_UP].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_UP].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
	m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_BUTTON_UP] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA];
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_BUTTON_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_UP] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_UP].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_UP].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.2, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.2, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_UP] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_UP].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_UP].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.6, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.6, 0.0, NULL ) );

	m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA];
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_DOWN].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_DOWN].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_BUTTON_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
	m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA];
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_DOWN].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_DOWN].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.2, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_BUTTON_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.2, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_DOWN].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_DOWN].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.6, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_BUTTON_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.6, 0.0, NULL ) );

	m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_THUMB] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA];
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_THUMB] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_THUMB] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_THUMB] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_THUMB].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_THUMB].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL  ][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_THUMB] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_THUMB] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_SOLID_SCROLLABLE_AREA];
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD    ][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.4, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_COLD][__ESBMHT_THUMB].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD][__ESBMHT_THUMB].FlipHorizontal();

			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_THUMB] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_THUMB] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_THUMB].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_THUMB].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.2, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.2, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_THUMB] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_THUMB] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_THUMB].FlipVertical();
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_THUMB].FlipHorizontal();
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.6, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_THUMB].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.6, 0.0, NULL ) );

	// scroll bar's page up/down area
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_UP] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.1, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.1, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_UP] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.3, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.3, 0.0, NULL ) );

			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_DOWN] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.1, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_HOT    ][__ESBMHT_PAGE_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.1, 0.0, NULL ) );
			m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_DOWN] = m_SbSkinDataH.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_SOLID_SCROLLABLE_AREA];
	VERIFY( m_SbSkinDataH.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.3, 0.0, NULL ) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_PAGE_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.3, 0.0, NULL ) );

	// scroll bar thumb button's gripper
COLORREF clrThumbLineTop = stat_HLS_Adjust( m_clrMenuBarGriadient2, 0.0, -0.7, 0.0 );
COLORREF clrThumbLineBottom = stat_HLS_Adjust( m_clrMenuBarGriadient1, 0.0, -0.2, 0.0 );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER].FromColor( clrThumbLineTop, CSize(8,8) ) );
CRect rcWalkThumb( 0, 1, 8, 2 );
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER].ColorRect( clrThumbLineBottom, rcWalkThumb, BYTE(255) );
	rcWalkThumb.OffsetRect( 0, 1 );
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER].ColorRect( clrThumbLineBottom, rcWalkThumb, BYTE(0) );
	rcWalkThumb.OffsetRect( 0, 2 );
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER].ColorRect( clrThumbLineBottom, rcWalkThumb, BYTE(255) );
	rcWalkThumb.OffsetRect( 0, 1 );
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER].ColorRect( clrThumbLineBottom, rcWalkThumb, BYTE(0) );
	rcWalkThumb.OffsetRect( 0, 2 );
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER].ColorRect( clrThumbLineBottom, rcWalkThumb, BYTE(255) );
	VERIFY(
		m_SbSkinDataH.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER].CreateRotated9xStack(
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_THUMB_GRIPPER],
			270, 1, 8, 8, true, true
		) );

	// scroll bar up/down button's arrows
	VERIFY(
		m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_ARROW_DOWN].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_DISABLED_R2)
		) );
	VERIFY(
		m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_DOWN].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_SCROLL_BAR_ARROW_DOWN_NORMAL_R2)
		) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_DOWN].Make32() );
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_DOWN].MakeMono();
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD][__ESBMHT_GLYPH_ARROW_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_DOWN];
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD][__ESBMHT_GLYPH_ARROW_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.3, 0.0, NULL ) );
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_GLYPH_ARROW_DOWN] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_DOWN];
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_GLYPH_ARROW_DOWN].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.75, 0.0, NULL ) );

	VERIFY(
		m_SbSkinDataV.m_arrPartBmp[__ESBSPT_DISABLED][__ESBMHT_GLYPH_ARROW_UP].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_SCROLL_BAR_ARROW_UP_DISABLED_R2)
		) );
	VERIFY(
		m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_UP].LoadBMP_Resource(
			MAKEINTRESOURCE(IDB_EXT_2007_SCROLL_BAR_ARROW_UP_NORMAL_R2)
		) );
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_UP].Make32() );
			m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_UP].MakeMono();
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD][__ESBMHT_GLYPH_ARROW_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_UP];
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_COLD][__ESBMHT_GLYPH_ARROW_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.3, 0.0, NULL ) );
	m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_GLYPH_ARROW_UP] = m_SbSkinDataV.m_arrPartBmp[__ESBSPT_NORMAL][__ESBMHT_GLYPH_ARROW_UP];
	VERIFY( m_SbSkinDataV.m_arrPartBmp[__ESBSPT_PRESSED][__ESBMHT_GLYPH_ARROW_UP].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.75, 0.0, NULL ) );

INT nScrollBarPartIndex, nScrollBarStateIndex;
	for( nScrollBarStateIndex = 0; nScrollBarStateIndex < INT(__ESBSPT_PART_COUNT); nScrollBarStateIndex ++ )
	{
		for( nScrollBarPartIndex = INT(__ESBMHT_GLYPH_ARROW_UP); nScrollBarPartIndex <= INT(__ESBMHT_GLYPH_ARROW_DOWN); nScrollBarPartIndex ++ )
		{
			CSize sizeSbArrowGlyph = m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].GetSize();
			if( sizeSbArrowGlyph.cx > 0 && sizeSbArrowGlyph.cy > 0 )
			{
				VERIFY(
					m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].CreateRotated9xStack(
						m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex],
						270, 1, sizeSbArrowGlyph.cx, sizeSbArrowGlyph.cy, true, true
					) );
			}
		} // for( nScrollBarPartIndex = INT(__ESBMHT_GLYPH_ARROW_UP); nScrollBarPartIndex <= INT(__ESBMHT_GLYPH_ARROW_DOWN); nScrollBarPartIndex ++ )
	} // for( nScrollBarStateIndex = 0; nScrollBarStateIndex < INT(__ESBSPT_PART_COUNT); nScrollBarStateIndex ++ )
	

	// scroll bar's element paddings, adjusted frames
CRect rcSbFrameTopOuter( 1, 0, sizeSbPart2010.cx-2, 1 );
CRect rcSbFrameTopInner( 1, 1, sizeSbPart2010.cx-2, 2 );
CRect rcSbFrameBottomOuter( 1, sizeSbPart2010.cy-1, sizeSbPart2010.cx-2, sizeSbPart2010.cy );
CRect rcSbFrameBottomInner( 1, sizeSbPart2010.cy-2, sizeSbPart2010.cx-2, sizeSbPart2010.cy-1 );
CRect rcSbFrameLeftOuter( 0, 1, 1, sizeSbPart2010.cy-1 );
CRect rcSbFrameLeftInner( 1, 2, 2, sizeSbPart2010.cy-2 );
CRect rcSbFrameRightOuter( sizeSbPart2010.cx-1, 1, sizeSbPart2010.cx, sizeSbPart2010.cy-1 );
CRect rcSbFrameRightInner( sizeSbPart2010.cx-2, 2, sizeSbPart2010.cx-1, sizeSbPart2010.cy-2 );
CRect rcSbFrameCornerTopLeft( 0, 0, 1, 1 );
CRect rcSbFrameCornerTopRight( sizeSbPart2010.cx-1, 0, sizeSbPart2010.cx, 1 );
CRect rcSbFrameCornerBottomLeft( 0, sizeSbPart2010.cy-1, 1, sizeSbPart2010.cy );
CRect rcSbFrameCornerBottomRight( sizeSbPart2010.cx-1, sizeSbPart2010.cy-1, sizeSbPart2010.cx, sizeSbPart2010.cy );
	for( nScrollBarStateIndex = 0; nScrollBarStateIndex < INT(__ESBSPT_PART_COUNT); nScrollBarStateIndex ++ )
	{
		for( nScrollBarPartIndex = 0; nScrollBarPartIndex < INT(__ESBMHT_PART_COUNT); nScrollBarPartIndex ++ )
		{
			if(		nScrollBarPartIndex == INT(__ESBMHT_BUTTON_UP)
				||	nScrollBarPartIndex == INT(__ESBMHT_BUTTON_DOWN)
				||	nScrollBarPartIndex == INT(__ESBMHT_THUMB)
				||	nScrollBarPartIndex == INT(__ESBMHT_SOLID_SCROLLABLE_AREA)
				||	nScrollBarPartIndex == INT(__ESBMHT_PAGE_UP)
				||	nScrollBarPartIndex == INT(__ESBMHT_PAGE_DOWN)
				)
			{ // padding
				if( ! m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].IsEmpty() )
					  m_SbSkinDataH.m_arrPartPadding[nScrollBarStateIndex][nScrollBarPartIndex].SetRect( 2, 2, 2, 2 );
				if( ! m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].IsEmpty() )
					  m_SbSkinDataV.m_arrPartPadding[nScrollBarStateIndex][nScrollBarPartIndex].SetRect( 2, 2, 2, 2 );
			} // padding
			if(		(	(	nScrollBarPartIndex == INT(__ESBMHT_BUTTON_UP)
						||	nScrollBarPartIndex == INT(__ESBMHT_BUTTON_DOWN)
						)
					&&	nScrollBarStateIndex >= INT(__ESBSPT_NORMAL)
					)
				||	nScrollBarPartIndex == INT(__ESBMHT_THUMB)
				)
			{ // adjusted frames
				if( ! m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].IsEmpty() )
				{
					ASSERT( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].GetSize() == sizeSbPart2010 );
					ASSERT( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].GetSize() == sizeSbPart2010 );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameTopOuter ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameTopInner ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameBottomOuter ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameBottomInner ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameLeftOuter ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameLeftInner ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameRightOuter ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameRightInner ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerTopLeft ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerTopRight ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerBottomLeft ) );
					VERIFY( m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerBottomRight ) );
				} // if( ! m_SbSkinDataH.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].IsEmpty() )
				if( ! m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].IsEmpty() )
				{
					ASSERT( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].GetSize() == sizeSbPart2010 );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameTopOuter ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameTopInner ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameBottomOuter ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameBottomInner ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameLeftOuter ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameLeftInner ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, -0.5, 0.0, &rcSbFrameRightOuter ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustHLS( RGB(0,0,0), RGB(0,0,0), 0.0, +0.3, 0.0, &rcSbFrameRightInner ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerTopLeft ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerTopRight ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerBottomLeft ) );
					VERIFY( m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].AdjustAlpha( -0.4, rcSbFrameCornerBottomRight ) );
				} // if( ! m_SbSkinDataV.m_arrPartBmp[nScrollBarStateIndex][nScrollBarPartIndex].IsEmpty() )
			} // adjusted frames
		} // for( nScrollBarPartIndex = 0; nScrollBarPartIndex < INT(__ESBMHT_PART_COUNT); nScrollBarPartIndex ++ )
	} // for( nScrollBarStateIndex = 0; nScrollBarStateIndex < INT(__ESBSPT_PART_COUNT); nScrollBarStateIndex ++ )
}

CExtPaintManager::SCROLLBARSKINDATA * CExtPaintManagerStudio2010::ScrollBar_GetSkinData(
	bool bHorzBar,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bLightAccent // = true
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerStudio2005::ScrollBar_GetSkinData( bHorzBar, pHelperSrc, lParam, bLightAccent );
	if( pHelperSrc != NULL )
	{
		ASSERT_VALID( pHelperSrc );
		if( pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtZoomScrollBar ) ) )
			return CExtPaintManagerStudio2005::ScrollBar_GetSkinData( bHorzBar, pHelperSrc, lParam, bLightAccent );
	} // if( pHelperSrc != NULL )
	return bHorzBar ? (&m_SbSkinDataH) : (&m_SbSkinDataV);
}

#if (!defined __EXT_MFC_NO_TAB_CTRL)

CExtPaintManagerStudio2010::vs_2010_tab_item_def_t::vs_2010_tab_item_def_t()
{
int i;
	for( i = 0; i < ( sizeof(m_clrGradient) / sizeof(m_clrGradient[0]) ); i ++ )
		m_clrGradient[ i ] =  __EXT_MFC_RGBA(255,255,255,0);
	m_clrText = m_clrBorder = __EXT_MFC_RGBA(255,255,255,0);
	m_rcBmpPadding.SetRect( 3, 3, 3, 3 );
}

void CExtPaintManagerStudio2010::vs_2010_tab_item_def_t::GenerateBmp()
{
	m_bmpTabItem.Empty();
CSize sizeBmp( m_rcBmpPadding.left + m_rcBmpPadding.right + 32, m_rcBmpPadding.top + m_rcBmpPadding.bottom + 32 );
	if(		m_clrGradient[0] != __EXT_MFC_RGBA(255,255,255,0)
		&&	m_bmpTabItem.FromColor( m_clrGradient[0], sizeBmp )
		&&	m_bmpTabItem.Make32()
		)
	{
		if(		( m_clrGradient[2] == __EXT_MFC_RGBA(255,255,255,0) && m_clrGradient[3] == __EXT_MFC_RGBA(255,255,255,0) )
			||	m_clrGradient[1] == __EXT_MFC_RGBA(255,255,255,0)
			)
		{
			COLORREF clr1 = RGB( GetRValue(m_clrGradient[0]), GetGValue(m_clrGradient[0]), GetBValue(m_clrGradient[0]) );
			BYTE alpha1 = __EXT_MFC_GetAValue(m_clrGradient[0]);
			COLORREF clr2 = clr1;
			BYTE alpha2 = alpha1;
			if( m_clrGradient[1] != __EXT_MFC_RGBA(255,255,255,0) )
			{
				clr2 = RGB( GetRValue(m_clrGradient[1]), GetGValue(m_clrGradient[1]), GetBValue(m_clrGradient[1]) );
				alpha2 = __EXT_MFC_GetAValue(m_clrGradient[1]);
			}
			CRect rcFill( 0, 0, sizeBmp.cx, sizeBmp.cy );
			m_bmpTabItem.GradientRect( clr2, clr1, true, rcFill, 256, alpha2, alpha1 );
		}
		else
		{
			CRect rcFillTop( 0, 0, sizeBmp.cx, sizeBmp.cy / 2 ), rcFillBottom( 0, sizeBmp.cy / 2, sizeBmp.cx, sizeBmp.cy );
			COLORREF clr1 = RGB( GetRValue(m_clrGradient[0]), GetGValue(m_clrGradient[0]), GetBValue(m_clrGradient[0]) );
			BYTE alpha1 = __EXT_MFC_GetAValue(m_clrGradient[0]);
			COLORREF clr2 = RGB( GetRValue(m_clrGradient[1]), GetGValue(m_clrGradient[1]), GetBValue(m_clrGradient[1]) );
			BYTE alpha2 = __EXT_MFC_GetAValue(m_clrGradient[1]);
			COLORREF clr3 = RGB( GetRValue(m_clrGradient[2]), GetGValue(m_clrGradient[2]), GetBValue(m_clrGradient[2]) );
			BYTE alpha3 = __EXT_MFC_GetAValue(m_clrGradient[2]);
			COLORREF clr4 = RGB( GetRValue(m_clrGradient[3]), GetGValue(m_clrGradient[3]), GetBValue(m_clrGradient[3]) );
			BYTE alpha4 = __EXT_MFC_GetAValue(m_clrGradient[3]);
			m_bmpTabItem.GradientRect( clr2, clr1, true, rcFillTop,    256, alpha2, alpha1 );
			m_bmpTabItem.GradientRect( clr4, clr3, true, rcFillBottom, 256, alpha4, alpha3 );
		}
		if( ! m_bmpTabItem.IsEmpty() )
		{
			if( m_clrBorder != __EXT_MFC_RGBA(255,255,255,0) )
			{
				COLORREF clr = RGB( GetRValue(m_clrBorder), GetGValue(m_clrBorder), GetBValue(m_clrBorder) );
				BYTE alpha = __EXT_MFC_GetAValue(m_clrBorder);
				int i;
				for( i = 1; i <= (sizeBmp.cx-2); i++ )
					m_bmpTabItem.SetPixel( i, 0, clr, alpha );
				for( i = 1; i < sizeBmp.cy; i++ )
				{
					m_bmpTabItem.SetPixel( 0, i, clr, alpha );
					m_bmpTabItem.SetPixel( sizeBmp.cx-1, i, clr, alpha );
				}
			}
static INT g_nAlphaCornerMiddle = 128, g_nAlphaCornerLight = 64;
			m_bmpTabItem.SetPixel( 0, 0, m_bmpTabItem.GetPixel( 0, 0 ), g_nAlphaCornerLight );
			m_bmpTabItem.SetPixel( 0, 1, m_bmpTabItem.GetPixel( 0, 1 ), g_nAlphaCornerMiddle );
			m_bmpTabItem.SetPixel( 1, 0, m_bmpTabItem.GetPixel( 1, 0 ), g_nAlphaCornerMiddle );
			m_bmpTabItem.SetPixel( sizeBmp.cx - 1, 0, m_bmpTabItem.GetPixel( sizeBmp.cx - 1, 0 ), g_nAlphaCornerLight );
			m_bmpTabItem.SetPixel( sizeBmp.cx - 1, 1, m_bmpTabItem.GetPixel( sizeBmp.cx - 1, 1 ), g_nAlphaCornerMiddle );
			m_bmpTabItem.SetPixel( sizeBmp.cx - 2, 0, m_bmpTabItem.GetPixel( sizeBmp.cx - 2, 0 ), g_nAlphaCornerMiddle );
		}
	}
}

void CExtPaintManagerStudio2010::vs_2010_tab_item_def_t::CreateRotatedVersionFromTopOrientedVersion(
	const vs_2010_tab_item_def_t & _srcDef,
	INT nTargetVersionType // CExtPaintManagerOffice2007_Impl::__ETSOI_***
	)
{
	m_clrText = _srcDef.m_clrText;
	m_clrBorder = _srcDef.m_clrBorder;
int i;
	for( i = 0; i < ( sizeof(m_clrGradient) / sizeof(m_clrGradient[0]) ); i ++ )
		m_clrGradient[ i ] =  _srcDef.m_clrGradient[ i ];
	m_rcBmpPadding = _srcDef.m_rcBmpPadding;
	switch( nTargetVersionType )
	{
	case INT(CExtPaintManagerOffice2007_Impl::__ETSOI_BOTTOM):
		i = m_rcBmpPadding.top; m_rcBmpPadding.top = m_rcBmpPadding.bottom; m_rcBmpPadding.bottom = i;
		i = m_rcBmpPadding.left; m_rcBmpPadding.left = m_rcBmpPadding.right; m_rcBmpPadding.right = i;
	break;
	case INT(CExtPaintManagerOffice2007_Impl::__ETSOI_RIGHT):
		i = m_rcBmpPadding.top;
		m_rcBmpPadding.top = m_rcBmpPadding.left;
		m_rcBmpPadding.left = m_rcBmpPadding.bottom;
		m_rcBmpPadding.bottom = m_rcBmpPadding.right;
		m_rcBmpPadding.right = i;
	break;
	case INT(CExtPaintManagerOffice2007_Impl::__ETSOI_LEFT):
		i = m_rcBmpPadding.top;
		m_rcBmpPadding.top = m_rcBmpPadding.right;
		m_rcBmpPadding.right = m_rcBmpPadding.bottom;
		m_rcBmpPadding.bottom = m_rcBmpPadding.left;
		m_rcBmpPadding.left = i;
	break;
	}
	if( ( ! _srcDef.m_bmpTabItem.IsEmpty() ) || ( ! _srcDef.m_bmpNearItemsArea.IsEmpty() ) )
	{
		INT nAngleCw90 = 0;
		switch( nTargetVersionType )
		{
		case INT(CExtPaintManagerOffice2007_Impl::__ETSOI_BOTTOM):	nAngleCw90 = 180; break;
		case INT(CExtPaintManagerOffice2007_Impl::__ETSOI_RIGHT):	nAngleCw90 = 90;  break;
		case INT(CExtPaintManagerOffice2007_Impl::__ETSOI_LEFT):	nAngleCw90 = 270; break;
		}
		if( ! _srcDef.m_bmpTabItem.IsEmpty() )
		{
			CSize sizeBmp = _srcDef.m_bmpTabItem.GetSize();
			m_bmpTabItem.CreateRotated9xStack( _srcDef.m_bmpTabItem, nAngleCw90, 1, sizeBmp.cx, sizeBmp.cy, true, true );
		}
		if( ! _srcDef.m_bmpNearItemsArea.IsEmpty() )
		{
			CSize sizeBmp = _srcDef.m_bmpNearItemsArea.GetSize();
			m_bmpTabItem.CreateRotated9xStack( _srcDef.m_bmpNearItemsArea, nAngleCw90, 1, sizeBmp.cx, sizeBmp.cy, true, true );
		}
	}
}

void CExtPaintManagerStudio2010::PaintTabItem(
	CDC & dc,
	CRect & rcTabItemsArea,
	bool bTopLeft,
	bool bHorz,
	bool bSelected,
	bool bCenteredText,
	bool bGroupedMode,
	bool bInGroupActive,
	bool bInvertedVerticalMode,
	const CRect & rcEntireItem,
	CSize sizeTextMeasured,
	CFont * pFont,
	__EXT_MFC_SAFE_LPCTSTR sText,
	CExtCmdIcon * pIcon,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrForceText, // = COLORREF(-1L)
	COLORREF clrForceTabBk, // = COLORREF(-1L)
	COLORREF clrForceTabBorderLT, // = COLORREF(-1L)
	COLORREF clrForceTabBorderRB, // = COLORREF(-1L)
	COLORREF clrForceTabSeparator, // = COLORREF(-1L)
	bool bDwmMode // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::PaintTabItem(
			dc,
			rcTabItemsArea,
			bTopLeft,
			bHorz,
			bSelected,
			bCenteredText,
			bGroupedMode,
			bInGroupActive,
			bInvertedVerticalMode,
			rcEntireItem,
			sizeTextMeasured,
			pFont,
			sText,
			pIcon,
			pHelperSrc,
			lParam,
			clrForceText,
			clrForceTabBk,
			clrForceTabBorderLT,
			clrForceTabBorderRB,
			clrForceTabSeparator,
			bDwmMode
			);
		return;
	}

CExtCmdIcon * pIconTabItemCloseButton = NULL;
CExtCmdIcon::e_paint_type_t ePaintStateITICB =
		(CExtCmdIcon::e_paint_type_t) CExtCmdIcon::__PAINT_INVISIBLE;
CRect rcTabItemCloseButton( 0, 0, 0, 0 );
CExtBarButton * pTBB = NULL;
CExtTabWnd * pTabs = NULL;
CExtTabWnd::TAB_ITEM_INFO * pTII = NULL;
bool bNoPrefix = false;
	if( pHelperSrc != NULL )
	{
		pTabs = DYNAMIC_DOWNCAST( CExtTabWnd, pHelperSrc );
		if( pTabs != NULL )
		{
			ASSERT_VALID( pTabs );
			pTII = pTabs->ItemGet( LONG( lParam ) );
			ASSERT( pTII != NULL );
			ASSERT_VALID( pTII );
			pIconTabItemCloseButton =
				pTabs->OnTabWndQueryItemCloseButtonShape( pTII );
			if( pIconTabItemCloseButton != NULL )
			{
				rcTabItemCloseButton = pTII->CloseButtonRectGet();
				ePaintStateITICB = (CExtCmdIcon::e_paint_type_t)
					pTabs->OnTabWndQueryItemCloseButtonPaintState( pTII );
			} // if( pIconTabItemCloseButton != NULL )
			bNoPrefix = ( ( pTabs->GetTabWndStyleEx() & __ETWS_EX_NO_PREFIX ) != 0 ) ? true : false;
		} // if( pTabs != NULL )
		else
		{
			pTBB = DYNAMIC_DOWNCAST( CExtBarButton, pHelperSrc );
#ifdef _DEBUG
			if( pTBB != NULL )
			{
				ASSERT_VALID( pTBB );
			} // if( pTBB != NULL )
#endif // _DEBUG
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
			CExtToolControlBar * pBar = pTBB->GetSafeBar();
			if( pBar != NULL && pBar->IsKindOf( RUNTIME_CLASS(CExtRibbonBar) ) )
			{
				CExtPaintManagerStudio2005::PaintTabItem(
					dc,
					rcTabItemsArea,
					bTopLeft,
					bHorz,
					bSelected,
					bCenteredText,
					bGroupedMode,
					bInGroupActive,
					bInvertedVerticalMode,
					rcEntireItem,
					sizeTextMeasured,
					pFont,
					sText,
					pIcon,
					pHelperSrc,
					lParam,
					clrForceText,
					clrForceTabBk,
					clrForceTabBorderLT,
					clrForceTabBorderRB,
					clrForceTabSeparator,
					bDwmMode
					);
				return;
			}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		} // else from if( pTabs != NULL )
	} // if( pHelperSrc != NULL )

LPCTSTR _sText = LPCTSTR(sText);

bool bDrawIcon = (		
			pIcon != NULL 
		&&	(! pIcon->IsEmpty() ) 
		&&	( pTabs == NULL || (pTabs->GetTabWndStyle()&__ETWS_HIDE_ICONS) == 0  ) 
		);
	if( bGroupedMode )
		bSelected = false;

bool bEnabled = true;
	if( pTII != NULL )
		bEnabled = pTII->EnabledGet();
	else if( pTBB != NULL )
		bEnabled = pTBB->IsEnabled();

INT nTabShapeIndex = INT(__ETI2010_DISABLED); // for disabled state
	if( bEnabled )
	{
		nTabShapeIndex = INT(__ETI2010_NORMAL);
		if( ! bGroupedMode )
		{
			if( bSelected )
				nTabShapeIndex = INT(__ETI2010_SELECTED);
			else
			{
				if( pTII != NULL )
				{
					if( pTabs->GetHoverTrackingItem() == lParam )
						nTabShapeIndex = INT(__ETI2010_HOVER);
				}
				else if( pTBB != NULL )
				{
					if( pTBB->IsHover() )
						nTabShapeIndex = INT(__ETI2010_HOVER);
				}
			}
		}
		else
		{
			nTabShapeIndex = INT(__ETI2010_NORMAL_GROUPPED);
			if( pTII != NULL )
			{
				if( pTabs->GetHoverTrackingItem() == lParam )
					nTabShapeIndex = INT(__ETI2010_HOVER);
			}
		}
	}

bool bDetectedDynTPC = false;
	bDetectedDynTPC;
#if (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)
	if( pTII != NULL )
	{
		CObject * pObject = pTII->EventProviderGet();
		if( pObject != NULL )
		{
			CExtDynamicControlBar * pBar = DYNAMIC_DOWNCAST( CExtDynamicControlBar, pObject );
			if( pBar != NULL )
			{
				bool bFlashCaptionHighlightedState = false;
				if( pBar->FlashCaptionIsInProgress( &bFlashCaptionHighlightedState ) )
				{
					if( bFlashCaptionHighlightedState )
					{
						clrForceText = pBar->m_clrFlashCaptionText;
						clrForceTabBk = pBar->m_clrFlashCaptionBackground;
						bSelected = true;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
						bDetectedDynTPC = true;
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
					}
				}
			}
		}
	}
#endif// (!defined __EXT_MFC_NO_DYNAMIC_BAR_SITE)

CExtPaintManagerOffice2007_Impl::e_TabShapeOrientationIndex_t eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_TOP;
	if( bTopLeft )
	{
		if( bHorz )
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_TOP;
		else
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_LEFT;
	}
	else
	{
		if( bHorz )
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_BOTTOM;
		else
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_RIGHT;
	}
	if( bGroupedMode )
	{
		switch( eTSOI )
		{
		case CExtPaintManagerOffice2007_Impl::__ETSOI_TOP:
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_BOTTOM;
			break;
		case CExtPaintManagerOffice2007_Impl::__ETSOI_BOTTOM:
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_TOP;
			break;
		case CExtPaintManagerOffice2007_Impl::__ETSOI_LEFT:
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_RIGHT;
			break;
		case CExtPaintManagerOffice2007_Impl::__ETSOI_RIGHT:
			eTSOI = CExtPaintManagerOffice2007_Impl::__ETSOI_LEFT;
			break;
		}
	}

COLORREF clrText = COLORREF(-1L);
	if( clrText == COLORREF(-1L) )
		clrText = QueryObjectTextColor( dc, bEnabled, false, ( nTabShapeIndex == INT(__ETI2010_HOVER) ) ? true : false, false, pHelperSrc, lParam );
	if( clrText == COLORREF(-1L) )
		clrText = m_tabDefs[ nTabShapeIndex ][ INT(eTSOI) ].m_clrText;
	if( clrText == COLORREF(-1L) )
		clrText = RGB(0,0,0);


COLORREF clrColorizeTabShape = COLORREF(-1L);
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
	if(		pHelperSrc != NULL
		&&	clrForceTabBk != COLORREF(-1L)
		&&	(	bDetectedDynTPC
			||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynTabWnd ) )
			||	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtDynAutoHideArea ) )
			)
		)
	{
		if( clrForceText != COLORREF(-1L) )
			clrText = clrForceText;
		clrColorizeTabShape = clrForceTabBk;
	}
#endif // (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
#if (!defined __EXT_MFC_NO_TABMDI_CTRL)
	if(		pHelperSrc != NULL
		&&	clrForceTabBk != COLORREF(-1L)
		&&	pHelperSrc->IsKindOf( RUNTIME_CLASS( CExtTabWnd ) )
		&&	((CExtTabWnd*)pHelperSrc)->_IsMdiTabCtrl()
		)
	{
		if( clrForceText != COLORREF(-1L) )
			clrText = clrForceText;
		clrColorizeTabShape = clrForceTabBk;
	}
#endif // (!defined __EXT_MFC_NO_TABMDI_CTRL)
	if( nTabShapeIndex >= 0 )
	{
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if(		pTBB != NULL
			&&	pTBB->IsKindOf( RUNTIME_CLASS( CExtRibbonButtonTabPage ) )
			&&	((CExtRibbonButtonTabPage*)pTBB)->IsSelectedRibbonPage()
			)
		{
			CExtToolControlBar * pToolBar = pTBB->GetBar();
			if( pToolBar != NULL )
			{
				CExtMenuControlBar * pMenuBar = DYNAMIC_DOWNCAST( CExtMenuControlBar, pToolBar );
				if(		pMenuBar != NULL
					&&	pMenuBar->IsMenuBarTracking()
					)
				{
					int nFlatTrackingIndex = pMenuBar->_FlatTrackingIndexGet();
					if( nFlatTrackingIndex >= 0 )
					{
						int nIndexOfTBB = pMenuBar->_GetIndexOf( pTBB );
						if( nFlatTrackingIndex == nIndexOfTBB )
							nTabShapeIndex = INT(__ETI2010_SELECTED_ACTIVE);
					}
				}
			}
		}
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		const CExtBitmap & _bmpTabShape = m_tabDefs[ nTabShapeIndex ][ INT(eTSOI) ].m_bmpTabItem;
		if( ! _bmpTabShape.IsEmpty() )
		{
			CSize sizeBmp = _bmpTabShape.GetSize();
			DWORD dwDcLayout = dc.GetLayout();
			if( bDwmMode )
				dc.SetLayout( LAYOUT_LTR );
			CRect rcPadding = m_tabDefs[ nTabShapeIndex ][ INT(eTSOI) ].m_rcBmpPadding;
			CRect rcSrc( 0, 0, sizeBmp.cx, sizeBmp.cy );
			CRect rcPaintTabShape = rcEntireItem;
			switch( eTSOI )
			{
			case CExtPaintManagerOffice2007_Impl::__ETSOI_TOP:
			case CExtPaintManagerOffice2007_Impl::__ETSOI_BOTTOM:
				rcPaintTabShape.right --;
				break;
			case CExtPaintManagerOffice2007_Impl::__ETSOI_LEFT:
			case CExtPaintManagerOffice2007_Impl::__ETSOI_RIGHT:
				rcPaintTabShape.bottom --;
				break;
			}
//dc.FillSolidRect( &rcPaintTabShape, m_tabDefs[ nTabShapeIndex ][ INT(eTSOI) ].m_clrGradient[0] );
			if( clrColorizeTabShape != COLORREF(-1L) )
			{
				CExtBitmap _bmpTabShape2 = _bmpTabShape;
				_bmpTabShape2.Make32();
				_bmpTabShape2.AdjustHLS( COLORREF(-1L), COLORREF(-1L), 0.0, -0.5, -1.0 );
				_bmpTabShape2.MakeMono( clrColorizeTabShape );
				_bmpTabShape2.AlphaBlendSkinParts(
					dc.m_hDC,
					rcPaintTabShape,
					rcSrc,
					rcPadding,
					CExtBitmap::__EDM_STRETCH,
					true,
					true
					);
			}
			else
				_bmpTabShape.AlphaBlendSkinParts(
					dc.m_hDC,
					rcPaintTabShape,
					rcSrc,
					rcPadding,
					CExtBitmap::__EDM_STRETCH,
					true,
					true
					);
			dc.SetLayout( dwDcLayout );
		}
	}
CRect rcEntireItemX = rcEntireItem;
//	rcEntireItemX.DeflateRect( 3, 3 );

	CExtPaintManager::stat_PaintTabItemImpl(
		dc,
		rcTabItemsArea,
		bTopLeft,
		bHorz,
		bSelected,
		bEnabled,
		bCenteredText,
		bGroupedMode,
		bInGroupActive,
		bInvertedVerticalMode,
		bDrawIcon,
		rcEntireItemX,
		sizeTextMeasured,
		pFont,
		_sText,
		bNoPrefix,
		pIcon,
			//		bTopLeft
			//			? ( bSelected ? RGB(255,255,255) : RGB(0,0,0) )
			//			: ( bSelected ? RGB(0,0,0) : RGB(255,255,255) )
		pIconTabItemCloseButton,
		INT(ePaintStateITICB),
		rcTabItemCloseButton,
		clrText,
		COLORREF(-1L), // clrTabBk,
		COLORREF(-1L), // clrTabBorderLT,
		COLORREF(-1L), // clrTabBorderRB,
		COLORREF(-1L),  // clrTabSeparator
		( pTBB != NULL ) ? false : true,
		pHelperSrc,
		bDwmMode
		);

/*
const CExtBitmap & _bmpTabSeparator = m_arrBmpTabSeparator[ int(eTSOI) ];
	if( ! _bmpTabSeparator.IsEmpty() )
	{
		CRect rcPaintSeparator = rcEntireItem;
		CRect rcPadding = m_arrRectTabSeparatorPadding[ int(eTSOI) ];
		CRect rcSrc( 0, 0, m_arrSizeTabSeparator[int(eTSOI)].cx, m_arrSizeTabSeparator[int(eTSOI)].cy );
		e_paint_manager_name_t ePMN = OnQueryPaintManagerName();
		switch( eTSOI )
		{
		case CExtPaintManagerOffice2007_Impl::__ETSOI_TOP:
			rcPaintSeparator.left = rcPaintSeparator.right - m_arrSizeTabSeparator[int(eTSOI)].cx;
			rcPaintSeparator.bottom --;
			if( ePMN == Office2007_R2_Obsidian )
				rcPaintSeparator.bottom -= 2;
			break;
		case CExtPaintManagerOffice2007_Impl::__ETSOI_BOTTOM:
			rcPaintSeparator.left = rcPaintSeparator.right - m_arrSizeTabSeparator[int(eTSOI)].cx;
			rcPaintSeparator.top ++;
			break;
		case CExtPaintManagerOffice2007_Impl::__ETSOI_LEFT:
			rcPaintSeparator.top = rcPaintSeparator.bottom - m_arrSizeTabSeparator[int(eTSOI)].cy;
			rcPaintSeparator.right --;
			break;
		case CExtPaintManagerOffice2007_Impl::__ETSOI_RIGHT:
			rcPaintSeparator.top = rcPaintSeparator.bottom - m_arrSizeTabSeparator[int(eTSOI)].cy;
//			rcPaintSeparator.top ++;
			rcPaintSeparator.left ++;
			break;
		}
		BYTE nSCA = BYTE(0x0FF);
#if (!defined __EXT_MFC_NO_RIBBON_BAR)
		if( pTBB != NULL )
		{
			CExtRibbonButtonTabPage * pRibbonButtonTabPage =
				DYNAMIC_DOWNCAST( CExtRibbonButtonTabPage, pTBB );
			if( pRibbonButtonTabPage != NULL )
				nSCA = pRibbonButtonTabPage->Get2007SeparatorAlpha();
		} // if( pTBB != NULL )
#endif // (!defined __EXT_MFC_NO_RIBBON_BAR)
		DWORD dwDcLayout = dc.GetLayout();
		if( bDwmMode )
			dc.SetLayout( LAYOUT_LTR );
		_bmpTabSeparator.AlphaBlendSkinParts(
			dc.m_hDC,
			rcPaintSeparator,
			rcSrc,
			rcPadding,
			CExtBitmap::__EDM_STRETCH,
			true,
			true,
			nSCA
			);
		dc.SetLayout( dwDcLayout );
	} // if( ! _bmpTabSeparator.IsEmpty() )
*/
}

void CExtPaintManagerStudio2010::PaintTabClientArea(
	CDC & dc,
	CRect & rcClient,
	CRect & rcTabItemsArea,
	CRect & rcTabNearBorderArea,
	DWORD dwOrientation,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		IsHighContrast()
		||	pHelperSrc == NULL
		||	(	(! pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtTabWnd) ) )
			&&	(! pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtThemedTabCtrl) ) )
			)
		)
	{
		CExtPaintManagerStudio2005::PaintTabClientArea(
			dc,
			rcClient,
			rcTabItemsArea,
			rcTabNearBorderArea,
			dwOrientation,
			bGroupedMode,
			pHelperSrc,
			lParam
			);
		return;
	}
	PaintDockerBkgnd( true, dc, (CWnd*)pHelperSrc, lParam );
	if( pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtThemedTabCtrl) ) )
	{
		CRect rcDoc( rcTabItemsArea.left, rcTabItemsArea.top, rcTabItemsArea.right, rcTabNearBorderArea.top );
		CExtMemoryDC dcMem( &dc, &rcDoc );
		PaintDocumentClientAreaBkgnd( dcMem, (CWnd*)pHelperSrc, lParam );
	}
	if( ! bGroupedMode )
	{
		COLORREF clrTabNearBorderAreaBk = m_tabDefs[ INT(__ETI2010_SELECTED) ] [ INT(CExtPaintManagerOffice2007_Impl::__ETSOI_TOP) ].m_clrGradient[3];
		if( clrTabNearBorderAreaBk != __EXT_MFC_RGBA(255,255,255,0) )
		{
			clrTabNearBorderAreaBk = RGB( GetRValue(clrTabNearBorderAreaBk), GetGValue(clrTabNearBorderAreaBk), GetBValue(clrTabNearBorderAreaBk) );
			dc.FillSolidRect( &rcTabNearBorderArea, clrTabNearBorderAreaBk );
		}
	}
}

void CExtPaintManagerStudio2010::PaintTabButton(
	CDC & dc,
	CRect & rcButton,
	LONG nHitTest,
	bool bTopLeft,
	bool bHorz,
	bool bEnabled,
	bool bHover,
	bool bPushed,
	bool bGroupedMode,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	bool bFlat // = false
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
//	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::PaintTabButton(
			dc,
			rcButton,
			nHitTest,
			bTopLeft,
			bHorz,
			bEnabled,
			bHover,
			bPushed,
			bGroupedMode,
			pHelperSrc,
			lParam,
			bFlat
			);
		return;
	}
}

void CExtPaintManagerStudio2010::PaintTabNcAreaRect(
	CDC & dc,
	const RECT & rc,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		IsHighContrast()
		||	pHelperSrc == NULL
		||	( ! pHelperSrc->IsKindOf( RUNTIME_CLASS(CWnd) ) )
		)
	{
		CExtPaintManagerStudio2005::PaintTabNcAreaRect( dc, rc, pHelperSrc, lParam );
		return;
	}
	PaintDockerBkgnd( false, dc, (CWnd*)pHelperSrc, lParam );
}

bool CExtPaintManagerStudio2010::QueryTabWndHoverChangingRedraw(
	const CExtTabWnd * pWndTab,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT_VALID( pWndTab );
	if( IsHighContrast() )
		return CExtPaintManagerStudio2005::QueryTabWndHoverChangingRedraw( pWndTab, lParam  );	
	return true;
}

void CExtPaintManagerStudio2010::TabWnd_MeasureItemAreaMargins(
	CExtTabWnd * pTabWnd,
	LONG & nSpaceBefore,
	LONG & nSpaceAfter,
	LONG & nSpaceOver
	)	
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::TabWnd_MeasureItemAreaMargins( pTabWnd, nSpaceBefore, nSpaceAfter, nSpaceOver );
		return;
	}
	nSpaceAfter		= 4;
	nSpaceBefore	= 4;
	nSpaceOver		= 2;
}

void CExtPaintManagerStudio2010::TabWnd_UpdateItemMeasure(
	CExtTabWnd * pTabWnd,
	CExtTabWnd::TAB_ITEM_INFO * pTii,
	CDC & dcMeasure,
	CSize & sizePreCalc
	)	
{
	ASSERT_VALID( this );
	ASSERT( pTabWnd != NULL && ::IsWindow(pTabWnd->m_hWnd) );
	ASSERT_VALID( pTabWnd );
	ASSERT_VALID( pTii );
	ASSERT( dcMeasure.GetSafeHdc() != NULL );
	ASSERT( pTii->GetTabWnd() == pTabWnd );
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::TabWnd_UpdateItemMeasure( pTabWnd, pTii, dcMeasure, sizePreCalc );
		return;
	}
	sizePreCalc.cx += 2;
	sizePreCalc.cy += 2;
	if( pTabWnd->OrientationIsHorizontal() )
		sizePreCalc.cx += 2;
	else
		sizePreCalc.cy += 2;
}

bool CExtPaintManagerStudio2010::TabWnd_GetParentSizingMargin(
	INT & nMargin,
	DWORD dwOrientation,
	CExtTabWnd * pTabWnd
	) const
{
	ASSERT_VALID( this );
	ASSERT_VALID( pTabWnd );
	nMargin; dwOrientation; pTabWnd;
	return false;
}

bool CExtPaintManagerStudio2010::PaintTabMdiOuterBorder(
	CDC & dc,
	const CRect & rcOuterBorder,
	const CRect & rcMdiAreaClient,
	const CRect & rcMdiAreaWnd,
	HWND hWndHooked,
	CExtTabWnd * pTabWnd,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( pTabWnd->GetSafeHwnd() != NULL );
	ASSERT( hWndHooked != NULL && ::IsWindow(hWndHooked) );
	rcOuterBorder; rcMdiAreaClient; rcMdiAreaWnd; pTabWnd;
	PaintDockerBkgnd( false, dc, CWnd::FromHandle(hWndHooked), lParam );
	return true;
}

#endif // #if (!defined __EXT_MFC_NO_TAB_CTRL)


bool CExtPaintManagerStudio2010::PaintDockerBkgnd(
	bool bClientMapping,
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	if( IsHighContrast() )
		return CExtPaintManagerStudio2005::PaintDockerBkgnd( bClientMapping, dc, pWnd, lParam );
	if( RenderCustomBackground( bClientMapping, dc, pWnd, lParam ) )
		return true;
	if(	! GetCb2DbTransparentMode( pWnd ) )
		return false;
bool bToolbarShade = false, bToolbarHorz = false, bMenuBarShade = false, bOuterDockBarShade = false, bDialogShade = true;
CWnd * pFrame = pWnd;
	for( ; pFrame != NULL; pFrame = pFrame->GetParent() )
	{
		if( ( pFrame->GetStyle() & WS_CHILD ) == 0 )
			break;
		if( pFrame->IsKindOf(RUNTIME_CLASS(CFrameWnd)) )
		{
			bDialogShade = false;
			break;
		}
		if( pFrame->IsKindOf( RUNTIME_CLASS(CExtDockOuterBar) ) )
		{
			bDialogShade = false;
			bOuterDockBarShade = true;
			break;
		}
		if( pFrame->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) ) )
		{
			if( pFrame->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) ) )
			{
				pFrame = pWnd;
				bToolbarShade = true;
				DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
				bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
				break;
			}
			if( ((CExtToolControlBar*)pFrame)->m_pDockSite != NULL )
			{
				if(		/*
				(!(	pFrame->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) )
										||	pFrame->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) )
										) )
									&&*/
					(! ((CExtToolControlBar*)pFrame)->m_bForceNoBalloonWhenRedockable)
					)
				{
					if( ((CExtToolControlBar*)pFrame)->m_pDockBar == NULL )
					{
						DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
						bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
						if( ((CExtToolControlBar*)pFrame)->m_bForceBalloonGradientInDialogs != 0 )
							bToolbarShade = true;
						else
							bMenuBarShade = true;
						break;
					}
					if( ! ((CExtToolControlBar*)pFrame)->IsFloating() )
					{
						bToolbarHorz = ((CExtToolControlBar*)pFrame)->IsDockedHorizontally();
						if( ! pFrame->IsKindOf( RUNTIME_CLASS(CExtMenuControlBar) ) )
							bToolbarShade = true;
						else
							bMenuBarShade = true;
					}
					else if( ((CExtToolControlBar*)pFrame)->m_bPaletteMode || pFrame->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) ) )
							bMenuBarShade = bToolbarHorz = true;
					break;
				}
				else
				{
					if( ((CExtToolControlBar*)pFrame)->m_bPaletteMode || pFrame->IsKindOf( RUNTIME_CLASS(CExtPanelControlBar) ) )
					{
						bMenuBarShade = bToolbarHorz = true;
						break;
					}
					DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
					bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
					if( ((CExtToolControlBar*)pFrame)->m_bForceBalloonGradientInDialogs != 0 )
						bToolbarShade = true;
					else
						bMenuBarShade = true;
					break;
				}
			}
			else
			{
				DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
				bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
				if( ((CExtToolControlBar*)pFrame)->m_bForceBalloonGradientInDialogs != 0 )
					bToolbarShade = true;
				else
					bMenuBarShade = true;
				break;
			}
		} // if( pFrame->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) ) )
		if(		pFrame->IsKindOf(RUNTIME_CLASS(CDialog))
			||	pFrame->IsKindOf(RUNTIME_CLASS(CFormView))
			)
		{
			CWnd * pWnd = pFrame->GetParent();
			if( pWnd != NULL && pWnd->IsKindOf(RUNTIME_CLASS(CExtPanelControlBar)) )
			{
				pFrame = pWnd;
				bToolbarShade = true;
				DWORD dwBarStyle = ((CExtToolControlBar*)pFrame)->GetBarStyle();
				bToolbarHorz = ( ( dwBarStyle & ( CBRS_ALIGN_LEFT | CBRS_ALIGN_RIGHT ) ) != 0 ) ? false : true;
			}
			break;
		}
		if(		pFrame->IsKindOf(RUNTIME_CLASS(CExtControlBar))
			&&	((CExtControlBar*)pFrame)->m_pDockSite != NULL
			&&	( ! ((CExtControlBar*)pFrame)->IsFixedMode() )
			)
			break;
	} // for( ; pFrame != NULL; pFrame = pFrame->GetParent() )
	if( pFrame == NULL )
		return false;
	if( bToolbarShade || bMenuBarShade || bOuterDockBarShade )
		bDialogShade = false;
#if (!defined __EXT_MFC_NO_TAB_CTRL )
	if( pWnd->IsKindOf( RUNTIME_CLASS(CExtTabWnd) ) )
		bToolbarShade = bMenuBarShade = bOuterDockBarShade = bDialogShade = false;
#endif // (!defined __EXT_MFC_NO_TAB_CTRL )
	if( bDialogShade )
	{
		CRect rcPaintGradient;
		pFrame->GetWindowRect( &rcPaintGradient );
		if( bClientMapping )
			pWnd->ScreenToClient( &rcPaintGradient );
		else
			rcPaintGradient.OffsetRect( -rcPaintGradient.left, -rcPaintGradient.top );
		if(		::IsRectEmpty( &rcPaintGradient )
			||	( ! dc.RectVisible( &rcPaintGradient ) )
			)
			return true;
		COLORREF clrT = stat_HLS_Adjust( m_clrOuterDockBarBkgnd, 0.0, +0.30, 0.0 );
		COLORREF clrB = stat_HLS_Adjust( m_clrOuterDockBarBkgnd, 0.0, +0.10, 0.0 );
		stat_PaintGradientRect( dc, rcPaintGradient, clrB, clrT, true );
		return true;
	}

CExtToolControlBar::FtLayoutQuery _FtLayoutQuery;
	if( _FtLayoutQuery.Query( pWnd->m_hWnd ) )
	{
		if( bClientMapping )
			_FtLayoutQuery.ReMapRectsToTargetClient();
		else
			_FtLayoutQuery.ReMapRectsToTargetWindow();
		_FtLayoutQuery.DrawRects( dc );
		return true;
	} // if( _FtLayoutQuery.Query( pWnd->m_hWnd ) )

CRect rcPaintGradient;
	pFrame->GetWindowRect( &rcPaintGradient );
	if( bClientMapping )
		pWnd->ScreenToClient( &rcPaintGradient );
	else
		rcPaintGradient.OffsetRect( -rcPaintGradient.left, -rcPaintGradient.top );
	if(		::IsRectEmpty( &rcPaintGradient )
		||	( ! dc.RectVisible( &rcPaintGradient ) )
		)
		return true;

	if( bMenuBarShade )
	{
		dc.FillSolidRect( rcPaintGradient, m_clrOuterDockBarBkgnd );
		if( bToolbarHorz )
			rcPaintGradient.bottom --;
		else
			rcPaintGradient.left ++;
		COLORREF clr1 = bToolbarHorz ? m_clrMenuBarGriadient2 : m_clrMenuBarGriadient1;
		COLORREF clr2 = bToolbarHorz ? m_clrMenuBarGriadient1 : m_clrMenuBarGriadient2;
		stat_PaintGradientRect( dc, rcPaintGradient, clr1, clr2, bToolbarHorz );
		return true;
	}
	if( bOuterDockBarShade )
	{
		dc.FillSolidRect( rcPaintGradient, m_clrOuterDockBarBkgnd );
		return true;
	}
	if( bToolbarShade )
	{
		dc.FillSolidRect( rcPaintGradient, m_clrOuterDockBarBkgnd );
		if( bToolbarHorz )
			rcPaintGradient.top --;
		else
			rcPaintGradient.right ++;
		VERIFY( m_bmpToolBarBkgnd.AlphaBlendSkinParts( dc.m_hDC, rcPaintGradient, CRect(3,3,3,3), CExtBitmap::__EDM_STRETCH, true, true ) );
		return true;
	}

CRect rcTop = rcPaintGradient, rcBottom = rcPaintGradient;
	rcTop.bottom = rcBottom.top = rcTop.top + rcPaintGradient.Height() / 2;
	stat_PaintGradientRect( dc, rcTop, m_clrDockerBkgndMiddle, m_clrDockerBkgndTop, true );
	stat_PaintGradientRect( dc, rcBottom, m_clrDockerBkgndBottom, m_clrDockerBkgndMiddle, true );
static const RECT g_rcPaddingZero = { 0, 0, 0, 0 };
	VERIFY( m_bmpDockerBkgndDots.AlphaBlendSkinParts( dc.m_hDC, rcPaintGradient, g_rcPaddingZero, CExtBitmap::__EDM_TILE, true, true ) );
	return true;
}

bool CExtPaintManagerStudio2010::PaintDocumentClientAreaBkgnd(
	CDC & dc,
	CWnd * pWnd,
	LPARAM lParam // = NULL
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
		return CExtPaintManagerStudio2005::PaintDocumentClientAreaBkgnd( dc, pWnd, lParam );
CRect rcPaintGradient;
	pWnd->GetClientRect( &rcPaintGradient );
	if( ! dc.RectVisible( &rcPaintGradient ) )
		return true;
CRect rcTop = rcPaintGradient, rcBottom = rcPaintGradient;
	rcTop.bottom = rcBottom.top = rcTop.top + rcPaintGradient.Height() / 2;
	stat_PaintGradientRect( dc, rcTop, m_clrDockerBkgndMiddle, m_clrDockerBkgndTop, true );
	stat_PaintGradientRect( dc, rcBottom, m_clrDockerBkgndBottom, m_clrDockerBkgndMiddle, true );
static const RECT g_rcPaddingZero = { 0, 0, 0, 0 };
	VERIFY( m_bmpDockerBkgndDots.AlphaBlendSkinParts( dc.m_hDC, rcPaintGradient, g_rcPaddingZero, CExtBitmap::__EDM_TILE, true, true ) );
	return true;
}

void CExtPaintManagerStudio2010::PaintControlBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		IsHighContrast()
		||	( ! pHelperSrc->IsKindOf( RUNTIME_CLASS(CWnd) ) )
		)
	{
		CExtPaintManagerStudio2005::PaintControlBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	}
CWnd * pWnd = STATIC_DOWNCAST( CWnd, pHelperSrc );
	if( ! PaintDockerBkgnd( true, dc, pWnd, lParam ) )
		CExtPaintManagerStudio2005::PaintControlBarClientArea( dc, rcClient, pHelperSrc, lParam );
}

void CExtPaintManagerStudio2010::PaintDockBarClientArea(
	CDC & dc,
	const RECT & rcClient,
	CObject * pHelperSrc,
	LPARAM lParam // = 0L
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if(		IsHighContrast()
		||	pHelperSrc == NULL
		)
	{
		CExtPaintManagerStudio2005::PaintDockBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	}
CWnd * pWnd = DYNAMIC_DOWNCAST( CWnd, pHelperSrc );
	if( pWnd->GetSafeHwnd() == NULL )
	{
		CExtPaintManagerStudio2005::PaintDockBarClientArea( dc, rcClient, pHelperSrc, lParam );
		return;
	}
CExtDockOuterBar * pDockOuterBar = DYNAMIC_DOWNCAST( CExtDockOuterBar, pWnd );
	if( pDockOuterBar != NULL )
	{
		dc.FillSolidRect( &rcClient, m_clrOuterDockBarBkgnd );
		return;
	}
	if( ! PaintDockerBkgnd( true, dc, pDockOuterBar, lParam ) )
		CExtPaintManagerStudio2005::PaintDockBarClientArea( dc, rcClient, pHelperSrc, lParam );
}

void CExtPaintManagerStudio2010::PaintFloatToolbarRowBk(
	CDC & dc,
	const CExtToolControlBar * pBar,
	int nLastReviewBtnIdx,
	CRect & rcRowBk
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT_VALID( pBar );
	ASSERT_KINDOF( CExtToolControlBar, pBar );
	ASSERT( nLastReviewBtnIdx >= 0 );
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::PaintFloatToolbarRowBk( dc, pBar, nLastReviewBtnIdx, rcRowBk );
		return;
	}
	//OnPaintToolBarGradient( dc, rcRowBk, true, (CObject*)pBar );
	stat_PaintGradientRect( dc, rcRowBk, m_clrMenuBarGriadient2, m_clrMenuBarGriadient1, true );
}

void CExtPaintManagerStudio2010::OnPaintToolBarGradient(
	CDC & dc,
	CRect rcPaintGradient,
	bool bHorz,
	CObject * pHelperSrc,
	LPARAM lParam, // = 0L
	COLORREF clrLeft, // = COLORREF(-1L)
	COLORREF clrRight // = COLORREF(-1L)
	) const
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	dc; rcPaintGradient; bHorz; pHelperSrc; lParam; clrLeft; clrRight;
//	if( IsHighContrast() )
//	{
//		CExtPaintManagerStudio2005::OnPaintToolBarGradient( dc, rcPaintGradient, bHorz, pHelperSrc, lParam, clrLeft, clrRight );
//		return;
//	}
}

void CExtPaintManagerStudio2010::PaintGripper(
	CDC & dc,
	CExtPaintManager::PAINTGRIPPERDATA & _pgd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::PaintGripper( dc, _pgd );
		return;
	}
// 	if(		_pgd.m_pHelperSrc != NULL
// 		&&	_pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtControlBar) )
// 		)
// 		PaintDockerBkgnd( false, dc, ((CWnd*)_pgd.m_pHelperSrc) );
CWnd * pBar = NULL;
bool /*bInactiveResizableBarCapt = false,*/ bForceNoBaloon = false;
#if (!defined __EXT_MFC_NO_TAB_CONTROLBARS)
	if( _pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtDynAutoHideSlider) ) )
	{ // auto-hide slider
		pBar = STATIC_DOWNCAST( CWnd, _pgd.m_pHelperSrc );
/*
		bInactiveResizableBarCapt = true;
*/
	} // auto-hide slider
	else 
#endif
		pBar = STATIC_DOWNCAST( CWnd, _pgd.m_pHelperSrc );
	ASSERT_VALID( pBar );
	if(		_pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
		&&	((CControlBar*)_pgd.m_pHelperSrc)->m_pDockSite != NULL
		&&	((CExtToolControlBar*)_pgd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable
		)
		bForceNoBaloon = true;
	if( _pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtControlBar) ) )
	{ // if control bar
		if(	((CExtControlBar*)pBar)->m_pDockSite == NULL )
		{ // if simple
			CExtToolControlBar *pToolBar = DYNAMIC_DOWNCAST( CExtToolControlBar, _pgd.m_pHelperSrc );
			if( pToolBar == NULL || ( ! pToolBar->m_bForceBalloonGradientInDialogs ) )
				bForceNoBaloon = true;
		} // if simple
	} // if control bar
	else
	{ // if NOT control bar
		if( _pgd.m_pHelperSrc != NULL && _pgd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtMiniDockFrameWnd) ) )
			return;
		CExtPaintManagerStudio2005::PaintGripper( dc, _pgd );
		return;
	} // if NOT control bar
	ASSERT_VALID( pBar );
CRect rcBarWnd, rcBarClient;
	pBar->GetWindowRect( &rcBarWnd );
	pBar->GetClientRect( &rcBarClient );
	pBar->ClientToScreen( &rcBarClient );
	if( _pgd.m_bSideBar /*|| bInactiveResizableBarCapt*/ || _pgd.m_bFloating )
	{ // if resizable bar caption
		if( _pgd.m_bFlashCaptionHighlightedState )
		{
			ASSERT( _pgd.m_clrFlashCaptionBackground != COLORREF(-1L) );
			ASSERT( _pgd.m_clrFlashCaptionText != COLORREF(-1L) );
			dc.FillSolidRect( _pgd.m_rcGripper, _pgd.m_clrFlashCaptionBackground );
		} // if( _pgd.m_bFlashCaptionHighlightedState )
		else
		{
			if( ! _pgd.m_bHorz )
			{
				CExtBitmap & bmpBarCaptBkgnd = ( _pgd.m_bActive && _pgd.m_bSideBar ) ? m_bmpBarCaptionActive : m_bmpBarCaptionInactive;
				bmpBarCaptBkgnd.AlphaBlendSkinParts(
					dc,
					_pgd.m_rcGripper,
					CRect( 2, bmpBarCaptBkgnd.GetSize().cy / 2 + 1, 2, 0 ),
					CExtBitmap::__EDM_STRETCH,
					true,
					true
					);
			}
			else
				dc.FillSolidRect( &_pgd.m_rcGripper, ( _pgd.m_bActive && _pgd.m_bSideBar ) ? m_arrClrBarCaptionActive[2] : m_arrClrBarCaptionInactive[2] );
		} // else from  if( _pgd.m_bFlashCaptionHighlightedState )
		int nTextLen = 0;
		if(		_pgd.m_sCaption != NULL
			&&	( nTextLen = int(_tcslen(_pgd.m_sCaption)) ) > 0
			&&	(! _pgd.m_rcText.IsRectEmpty() )
			&&	_pgd.m_rcText.right > _pgd.m_rcText.left
			&&	_pgd.m_rcText.bottom > _pgd.m_rcText.top
			)
		{
			COLORREF clrText =
				_pgd.m_bFlashCaptionHighlightedState
					?	_pgd.m_clrFlashCaptionText
					:	( ( _pgd.m_bActive && _pgd.m_bSideBar ) ? m_clrCaptBtnTextActive : m_clrCaptBtnTextNormal )
					;
			COLORREF clrOldText = dc.SetTextColor( clrText );
			int nOldBkMode = dc.SetBkMode( TRANSPARENT );
			CFont * pCurrFont = ( _pgd.m_bSideBar ? (&m_FontNormalBC) : (&m_FontBoldBC) );
			CFont * pOldFont = dc.SelectObject( pCurrFont );
			CRect rcDrawText( _pgd.m_rcText );
			CExtRichContentLayout::e_layout_orientation_t eLO = CExtRichContentLayout::__ELOT_NORMAL;
			if( _pgd.m_bHorz )
				eLO = CExtRichContentLayout::__ELOT_270_CW;
			UINT nDtAlign = _pgd.m_bForceRTL ? DT_RIGHT : DT_LEFT;
			CExtRichContentLayout::stat_DrawText(
				CExtRichContentLayout::__ELFMT_AUTO_DETECT, eLO,
				dc.m_hDC, _pgd.m_sCaption, nTextLen, rcDrawText, nDtAlign|DT_SINGLELINE|DT_VCENTER|DT_END_ELLIPSIS, 0
				);
			dc.SelectObject( pOldFont );
			dc.SetBkMode( nOldBkMode );
			dc.SetTextColor( clrOldText );
		}
		return;
	} // if resizable bar caption

/*
	if(		(! pBar->IsKindOf(RUNTIME_CLASS(CExtMenuControlBar)) )
		&&	(! bForceNoBaloon )
		)
	{ // if toolbar balloon style
		CRect rcPaintGradient( rcBarWnd );
		if( _pgd.m_bHorz )
		{
			rcPaintGradient.top = rcBarClient.top;
			rcPaintGradient.bottom = rcBarClient.bottom; // + 1;
			rcPaintGradient.right = rcBarClient.right;
			rcPaintGradient.OffsetRect( -rcPaintGradient.left, -rcPaintGradient.top + rcBarClient.top - rcBarWnd.top );
		} // if( _pgd.m_bHorz )
		else
		{
			rcPaintGradient.left = rcBarClient.left;
			rcPaintGradient.right = rcBarClient.right; // + 1;
			rcPaintGradient.bottom = rcBarClient.bottom;
			rcPaintGradient.OffsetRect( -rcPaintGradient.left + rcBarClient.left - rcBarWnd.left, -rcPaintGradient.top );
		} // else from if( _pgd.m_bHorz )
		int nIdxClrTbFillMargin = -1;
		CRgn _rgnBaloonSet;
		const CSize _sizeRoundedAreaMerics = FixedBar_GetRoundedAreaMerics();
		if(		_sizeRoundedAreaMerics.cx > 0
			&&	_sizeRoundedAreaMerics.cy > 0
			)
		{ // if balloon style
			nIdxClrTbFillMargin = m_nIdxClrTbFillMargin;
			if(	_rgnBaloonSet.CreateRoundRectRgn(
					rcPaintGradient.left,
					rcPaintGradient.top,
					rcPaintGradient.Width(),
					rcPaintGradient.Height(),
					_sizeRoundedAreaMerics.cx,
					_sizeRoundedAreaMerics.cy
					)
				)
				dc.SelectClipRgn( &_rgnBaloonSet );
		}  // if balloon style
		OnPaintToolBarGradient( dc, rcPaintGradient, _pgd.m_bHorz, _pgd.m_pHelperSrc, _pgd.m_lParam );
		if( nIdxClrTbFillMargin >= 0 )
		{
			CPen _pen( PS_SOLID, 1, GetColor( m_nIdxClrTbFillMargin, _pgd.m_pHelperSrc, _pgd.m_lParam ) );
			CPen  * pOldPen = dc.SelectObject( &_pen );
			if( _pgd.m_bHorz )
			{
				dc.MoveTo( rcPaintGradient.left, rcPaintGradient.bottom-2 );
				dc.LineTo( rcPaintGradient.right, rcPaintGradient.bottom-2 );
			} // if( _pgd.m_bHorz )
			else
			{
				dc.MoveTo( rcPaintGradient.right-2, rcPaintGradient.top );
				dc.LineTo( rcPaintGradient.right-2, rcPaintGradient.bottom );
			} // else from if( _pgd.m_bHorz )
			dc.SelectObject( pOldPen );
		} // if( nIdxClrTbFillMargin >= 0 )

		if( _rgnBaloonSet.GetSafeHandle() != NULL )
			dc.SelectClipRgn( NULL );
	} // if toolbar balloon style
*/
COLORREF clrDotShadow = GetColor( _2003CLR_GRIPPER_DOT_LIGHT, _pgd.m_pHelperSrc, _pgd.m_lParam );
COLORREF clrDotFace = GetColor( _2003CLR_GRIPPER_DOT_DARK, _pgd.m_pHelperSrc, _pgd.m_lParam );
static const CSize g_sizeGripDot( 2, 2 );
static const CSize g_sizeGripDist( 1, 1 );
static const CSize g_sizeGripShadowOffset( 1, 1 );
CRect rcGripHelper( _pgd.m_rcGripper );
CRect rcBarClientW( rcBarClient );
	rcBarClientW.OffsetRect( -rcBarWnd.TopLeft() );
	if( _pgd.m_bHorz )
	{
		rcGripHelper.top = rcBarClientW.top;
		rcGripHelper.bottom = rcBarClientW.bottom;
		rcGripHelper.OffsetRect( 1, 0 );
		rcGripHelper.left += ( rcGripHelper.Width() - g_sizeGripDot.cx ) / 2;
		rcGripHelper.right = rcGripHelper.left + g_sizeGripDot.cx;
		rcGripHelper.DeflateRect( 0, g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
		rcGripHelper.DeflateRect( 0, 2, 0, 0 );
		rcGripHelper.OffsetRect( 0, -1 );
		int nDotCount = rcGripHelper.Height() / ( g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
		rcGripHelper.top += rcGripHelper.Height() - ( g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy ) * nDotCount;
		CRect rcDotFace( rcGripHelper );
		rcDotFace.bottom = rcDotFace.top + g_sizeGripDot.cy;
		CRect rcDotShadow( rcDotFace );
		rcDotShadow.OffsetRect( g_sizeGripShadowOffset );
		for( int nDot = 0; nDot < nDotCount; nDot++ )
		{
			dc.FillSolidRect( &rcDotShadow, clrDotShadow );
			dc.FillSolidRect( &rcDotFace, clrDotFace );
			rcDotFace.OffsetRect( 0, g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
			rcDotShadow.OffsetRect( 0, g_sizeGripDot.cy + g_sizeGripDist.cy + g_sizeGripShadowOffset.cy );
		} // for( int nDot = 0; nDot < nDotCount; nDot++ )
	} // if( _pgd.m_bHorz )
	else
	{
		rcGripHelper.left = rcBarClientW.left;
		rcGripHelper.right = rcBarClientW.right;
		rcGripHelper.OffsetRect( 0, 1 );
		rcGripHelper.top += ( rcGripHelper.Height() - g_sizeGripDot.cy ) / 2;
		rcGripHelper.bottom = rcGripHelper.top + g_sizeGripDot.cy;
		rcGripHelper.DeflateRect( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx, 0 );
		rcGripHelper.OffsetRect( -1, 0 );
		rcGripHelper.DeflateRect( 3, 0, 0, 0 );
		int nDotCount = rcGripHelper.Width() / ( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx );
		rcGripHelper.left += rcGripHelper.Width() - ( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx ) * nDotCount;
		CRect rcDotFace( rcGripHelper );
		rcDotFace.right = rcDotFace.left + g_sizeGripDot.cx;
		CRect rcDotShadow( rcDotFace );
		rcDotShadow.OffsetRect( g_sizeGripShadowOffset );
		for( int nDot = 0; nDot < nDotCount; nDot++ )
		{
			dc.FillSolidRect( &rcDotShadow, clrDotShadow );
			dc.FillSolidRect( &rcDotFace, clrDotFace );
			rcDotFace.OffsetRect( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx, 0 );
			rcDotShadow.OffsetRect( g_sizeGripDot.cx + g_sizeGripDist.cx + g_sizeGripShadowOffset.cx, 0 );
		} // for( int nDot = 0; nDot < nDotCount; nDot++ )
	} // else from if( _pgd.m_bHorz )
}

void CExtPaintManagerStudio2010::PaintDockingFrame(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGFRAMEDATA & _pdfd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::PaintDockingFrame( dc, _pdfd );
		return;
	}
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	if( _pdfd.m_rcWindow.IsRectEmpty() )
		return;
	if(		_pdfd.m_pHelperSrc != NULL
		&&	_pdfd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtToolControlBar) )
		)
	{
		if( ( ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_pDockSite != NULL ) )
		{
			if(		((CExtToolControlBar*)_pdfd.m_pHelperSrc)->m_bForceNoBalloonWhenRedockable
				||	( ! ((CExtToolControlBar*)_pdfd.m_pHelperSrc)->IsFloating() )
				)
				return;
		}
		else
			return;
	}
CRect rcWnd( _pdfd.m_rcWindow );
CExtMemoryDC dc2( &dc, &rcWnd );
	dc2.ExcludeClipRect( _pdfd.m_rcClient );
	dc2.FillSolidRect( &rcWnd, m_clrDockingFrameBorder );
}

void CExtPaintManagerStudio2010::PaintDockingCaptionButton(
	CDC & dc,
	CExtPaintManager::PAINTDOCKINGCAPTIONBUTTONDATA & _pdcbd
	)
{
	ASSERT_VALID( this );
	ASSERT( dc.GetSafeHdc() != NULL );
	ASSERT( __DCBT_VALUE_MIN <= _pdcbd.m_eType && _pdcbd.m_eType <= __DCBT_VALUE_MAX );
	if( _pdcbd.m_rcClient.IsRectEmpty() )
		return;
	if( IsHighContrast() )
	{
		CExtPaintManagerStudio2005::PaintDockingCaptionButton( dc, _pdcbd );
		return;
	}
bool bActive = _pdcbd.m_bBarWndActive;
//	if( bActive && _pdcbd.m_pHelperSrc != NULL && _pdcbd.m_pHelperSrc->IsKindOf( RUNTIME_CLASS(CExtBarNcAreaButton) ) )
//	{
//		CExtControlBar * pBar = ((CExtBarNcAreaButton*)_pdcbd.m_pHelperSrc)->GetBar();
//		if( pBar->GetSafeHwnd() != NULL && pBar->m_pDockSite != NULL && (! pBar->IsFixedMode() ) && (! pBar->_IsSingleVisibleInFloatingPalette() ) )
//			bActive = false; // caption of compound floating palette window with more than one resizable bar visible in it
//	}
bool bHover = _pdcbd.m_bHover;
	if( ! _pdcbd.m_bEnabled )
		bHover = false;
COLORREF ColorValues[2] = { RGB(0,0,0), RGB(0,0,0), };
	ColorValues[1] = 
		_pdcbd.m_bEnabled
			?
				(	_pdcbd.m_bHover
					?	( _pdcbd.m_bPushed ? m_clrCaptBtnGlyphPressed : m_clrCaptBtnGlyphHover )
					:	( bActive ? m_clrCaptBtnGlyphActiveNormal : m_clrCaptBtnGlyphInactiveNormal )
					)
			:	m_clrCaptBtnGlyphDisabled
			;
CRect rcGlyph( _pdcbd.m_rcClient );
	rcGlyph.NormalizeRect();
	if( rcGlyph.Width() & 1 )
		rcGlyph.left++;
	if( rcGlyph.Height() & 1 )
		rcGlyph.top++;
	if( _pdcbd.m_eType == __DCBT_CLOSE )
		_pdcbd.m_eType = __DCBT_CLOSE_DC2K;
glyph_t * pGlyph = g_DockingCaptionGlyphs[_pdcbd.m_eType];
	ASSERT( pGlyph != NULL );
	if( ! _pdcbd.m_bFloating )
		rcGlyph.InflateRect( 1, 1 );
	rcGlyph.InflateRect( 1, 1, 0, 0 );
	if( _pdcbd.m_bEnabled && ( _pdcbd.m_bHover || _pdcbd.m_bPushed ) )
	{
		dc.FillSolidRect( &rcGlyph,  _pdcbd.m_bPushed ? m_clrCaptBtnGlyphBkgndPressed : m_clrCaptBtnGlyphBkgndHover );
		dc.Draw3dRect( &rcGlyph, m_clrCaptBtnBorder, m_clrCaptBtnBorder );
	}
CRect rcGlyphShape( rcGlyph );
	PaintGlyphCentered( dc, rcGlyphShape, *pGlyph, ColorValues );
}
