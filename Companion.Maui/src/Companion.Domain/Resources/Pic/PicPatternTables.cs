using System;

namespace Companion.Domain.Resources.Pic;

internal static class PicPatternTables
{
    private static readonly byte[][] CircleBitmaps =
    {
        new byte[] { 0x80 },
        new byte[] { 0x4e, 0x40 },
        new byte[] { 0x73, 0xef, 0xbe, 0x70 },
        new byte[] { 0x38, 0x7c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x00 },
        new byte[] { 0x1c, 0x1f, 0xcf, 0xfb, 0xfe, 0xff, 0xbf, 0xef, 0xf9, 0xfc, 0x1c },
        new byte[] { 0x0e, 0x03, 0xf8, 0x7f, 0xc7, 0xfc, 0xff, 0xef, 0xfe, 0xff, 0xe7,
            0xfc, 0x7f, 0xc3, 0xf8, 0x1f, 0x00 },
        new byte[] { 0x0f, 0x80, 0xff, 0x87, 0xff, 0x1f, 0xfc, 0xff, 0xfb, 0xff, 0xef,
            0xff, 0xbf, 0xfe, 0xff, 0xf9, 0xff, 0xc7, 0xff, 0x0f, 0xf8,
            0x0f, 0x80 },
        new byte[] { 0x07, 0xc0, 0x1f, 0xf0, 0x3f, 0xf8, 0x7f, 0xfc, 0x7f, 0xfc, 0xff,
            0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0x7f,
            0xfc, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xf0, 0x07, 0xc0 }
    };

    private static readonly byte[] JunqPattern =
    {
        0x20, 0x94, 0x02, 0x24, 0x90, 0x82, 0xa4, 0xa2, 0x82, 0x09, 0x0a, 0x22,
        0x12, 0x10, 0x42, 0x14, 0x91, 0x4a, 0x91, 0x11, 0x08, 0x12, 0x25, 0x10,
        0x22, 0xa8, 0x14, 0x24, 0x00, 0x50, 0x24, 0x04
    };

    private static readonly byte[] JunqIndex =
    {
        0x00, 0x18, 0x30, 0xc4, 0xdc, 0x65, 0xeb, 0x48,
        0x60, 0xbd, 0x89, 0x05, 0x0a, 0xf4, 0x7d, 0x7d,
        0x85, 0xb0, 0x8e, 0x95, 0x1f, 0x22, 0x0d, 0xdf,
        0x2a, 0x78, 0xd5, 0x73, 0x1c, 0xb4, 0x40, 0xa1,
        0xb9, 0x3c, 0xca, 0x58, 0x92, 0x34, 0xcc, 0xce,
        0xd7, 0x42, 0x90, 0x0f, 0x8b, 0x7f, 0x32, 0xed,
        0x5c, 0x9d, 0xc8, 0x99, 0xad, 0x4e, 0x56, 0xa6,
        0xf7, 0x68, 0xb7, 0x25, 0x82, 0x37, 0x3a, 0x51,
        0x69, 0x26, 0x38, 0x52, 0x9e, 0x9a, 0x4f, 0xa7,
        0x43, 0x10, 0x80, 0xee, 0x3d, 0x59, 0x35, 0xcf,
        0x79, 0x74, 0xb5, 0xa2, 0xb1, 0x96, 0x23, 0xe0,
        0xbe, 0x05, 0xf5, 0x6e, 0x19, 0xc5, 0x66, 0x49,
        0xf0, 0xd1, 0x54, 0xa9, 0x70, 0x4b, 0xa4, 0xe2,
        0xe6, 0xe5, 0xab, 0xe4, 0xd2, 0xaa, 0x4c, 0xe3,
        0x06, 0x6f, 0xc6, 0x4a, 0xa4, 0x75, 0x97, 0xe1
    };

    public static int GetCircleColumnCount(int patternSize)
    {
        return patternSize switch
        {
            < 0 => 0,
            > 7 => 0,
            _ => patternSize * 2 + 2
        };
    }

    public static bool CircleHasPixel(int patternSize, int bitIndex)
    {
        if (patternSize < 0 || patternSize >= CircleBitmaps.Length)
        {
            return false;
        }

        var bitmap = CircleBitmaps[patternSize];
        if (bitIndex < 0 || bitIndex >= bitmap.Length * 8)
        {
            return false;
        }

        var value = bitmap[bitIndex >> 3];
        var mask = 1 << (7 - (bitIndex & 7));
        return (value & mask) != 0;
    }

    public static int GetJunqSeed(byte patternNumber)
    {
        var index = patternNumber % JunqIndex.Length;
        return JunqIndex[index];
    }

    public static bool ShouldStamp(ref int junqBit)
    {
        var value = JunqPattern[junqBit >> 3];
        var mask = 1 << (7 - (junqBit & 7));
        var result = (value & mask) != 0;

        junqBit++;
        if (junqBit >= 0x100)
        {
            junqBit = 0;
        }

        return result;
    }
}
